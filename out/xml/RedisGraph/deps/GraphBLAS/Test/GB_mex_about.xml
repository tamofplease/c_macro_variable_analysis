<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_about.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_about: print the 'about' information</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Test lots of random stuff.  The function otherwise serves no purpose.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex_errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"GB_mex_about"</cpp:value></cpp:define>

<function_decl><type><name>GrB_Info</name></type> <name>ack</name> <parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>stuff</name></decl></parameter>, <parameter><decl><type><name>GrB_Matrix</name></type> <name>GunkIt</name></decl></parameter>)</parameter_list> ;</function_decl>

<function><type><name>GrB_Info</name></type> <name>ack</name> <parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>stuff</name></decl></parameter>, <parameter><decl><type><name>GrB_Matrix</name></type> <name>GunkIt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>stuff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>GunkIt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>select_plus_one</name> <parameter_list>(<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list> ;</function_decl>

<function_decl><type><name>bool</name></type> <name>select_nothing</name> <parameter_list>(<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list> ;</function_decl>

<function><type><name>bool</name></type> <name>select_plus_one</name> <parameter_list>(<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// return true if x &gt;= thunk+1</comment>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>thunk</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>select_nothing</name> <parameter_list>(<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<typedef>typedef <type><name>int16_t</name></type> <name>user_int</name> ;</typedef>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// start error log</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name> <argument_list>(<argument><expr><literal type="string">"errlog2.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"in %s\n"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// test GrB_init with invalid mode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_Global_GrB_init_called_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GrB_init</name> <argument_list>(<argument><expr><literal type="number">911</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: [%d]\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>mxAssert</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"error must be 'invalid value'"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// GB_CONTEXT (USAGE) ;</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"in %s:\n"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_Type_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_Type_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_UnaryOp_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_UnaryOp_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_BinaryOp_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_BinaryOp_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_SelectOp_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_SelectOp_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_Monoid_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_Monoid_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_Semiring_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_Semiring_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_Vector_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_Vector_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_Matrix_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_Matrix_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sizeof (struct GB_Descriptor_opaque) %d\n"</literal></expr></argument>,
             <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_Descriptor_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bool</name></expr></argument>      )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_INT8</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int8_t</name></expr></argument>    )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_UINT8</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>   )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int16_t</name></expr></argument>   )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_UINT16</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>  )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int32_t</name></expr></argument>   )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>  )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_INT64</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>   )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_UINT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>  )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>float</name></expr></argument>     )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>    )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"info is %d\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>t</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>GrB_LNOT</name></expr></argument>, <argument><expr><literal type="string">"LNOT"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GrB_LNOT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"ztype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GrB_LNOT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"xtype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>GxB_LNOT_FP32</name></expr></argument>, <argument><expr><literal type="string">"LNOT_FP32"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GxB_LNOT_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"ztype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GxB_LNOT_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"xtype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>GxB_ISEQ_INT32</name></expr></argument>, <argument><expr><literal type="string">"ISEQ_INT32"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GxB_ISEQ_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"ztype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GxB_ISEQ_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"xtype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ytype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GxB_ISEQ_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"ytype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>GrB_EQ_INT32</name></expr></argument>, <argument><expr><literal type="string">"EQ_INT32"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GrB_EQ_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"ztype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GrB_EQ_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"xtype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ytype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GrB_EQ_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"ytype"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>m</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>GrB_PLUS_UINT16</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_wait_</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"plus uint16 monoid"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>id</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_identity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"id is %d\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_operator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"plus op from monoid"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// mangle the identity</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>save_identity</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>identity</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>identity</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>expected</name> <init>= <expr><name>GrB_INVALID_OBJECT</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"mangled monoid, no identity"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>,
        <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>identity</name></name> <operator>=</operator> <name>save_identity</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int16_t</name></type> <name>id0</name> <init>= <expr><name>INT16_MIN</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GrB_Monoid_new_INT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>GrB_MAX_INT16</name></expr></argument>, <argument><expr><name>id0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"max int16 monoid"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>id1</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_identity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>id1</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"id1 is %d\n"</literal></expr></argument>, <argument><expr><name>id1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_operator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"plus op from monoid"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>sem</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>GrB_TIMES_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_wait_</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><literal type="string">"\nnew sem"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>mm</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr><literal type="string">"sem mm"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"sem mult"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>stuff</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>morestuff</name> <init>= <expr><literal type="number">44</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Gunk</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Gunk</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ack</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>morestuff</name></expr></argument>, <argument><expr><name>Gunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>Gunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"matrix Gunk type is:"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>victor</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>, <argument><expr><name>GrB_UINT32</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_wait_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"victor type is:"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"and its size of type is %d\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>Duh</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>val</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Duh</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><literal type="string">"\n---------------------------------- Duh:"</literal></expr></argument>,
        <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got outp %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got mask %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp0 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp1 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_SORT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><literal type="string">"\n------------------------------- Duh set sort:"</literal></expr></argument>,
        <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_SORT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got sort %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><literal type="string">"\n------------------------------- Duh set:"</literal></expr></argument>,
        <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got outp %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got mask %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp0 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp1 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><name>GrB_COMP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><literal type="string">"\n-----Duh set mask"</literal></expr></argument>,
        <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got outp %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got mask %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_COMP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp0 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp1 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><literal type="string">"\n-----Duh set out"</literal></expr></argument>,
        <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got outp %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got mask %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_COMP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp0 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp1 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><name>GrB_STRUCTURE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><literal type="string">"\n-----Duh set mask structural"</literal></expr></argument>,
        <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got outp %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got mask %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_COMP</name> <operator>+</operator> <name>GrB_STRUCTURE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp0 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp1 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><literal type="string">"\n-----Duh set mask back"</literal></expr></argument>,
        <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got outp %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got mask %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp0 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp1 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_wait_</name><argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>Duh</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><literal type="string">"\n-----Duh set in1"</literal></expr></argument>,
        <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got outp %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got mask %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp0 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"got inp1 %d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>val</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Duh</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// error handling</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ack</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Gunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Gunk</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ack</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>morestuff</name></expr></argument>, <argument><expr><name>Gunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Gunk</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Gunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>Complex</name></expr></argument>, <argument><expr><literal type="string">"user Complex type"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Complex</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"size is %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// about the spec</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name><name>all_version</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>subversion</name> <init>= <expr><literal type="number">9999</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>date</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>about</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>license</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>compile_date</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>compile_time</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>url</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_getVersion</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subversion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Spec: %d.%d.%d ("</literal><name>GBu</name><literal type="string">"): %d.%d\n"</literal></expr></argument>,
        <argument><expr><name>GxB_SPEC_MAJOR</name></expr></argument>, <argument><expr><name>GxB_SPEC_MINOR</name></expr></argument>, <argument><expr><name>GxB_SPEC_SUB</name></expr></argument>, <argument><expr><name>GxB_SPEC_VERSION</name></expr></argument>,
        <argument><expr><name>version</name></expr></argument>, <argument><expr><name>subversion</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>version</name> <operator>==</operator> <name>GxB_SPEC_MAJOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>subversion</name> <operator>==</operator> <name>GxB_SPEC_MINOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>version</name> <operator>==</operator> <name>GRB_VERSION</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>subversion</name> <operator>==</operator> <name>GRB_SUBVERSION</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Spec Date: %s\n"</literal></expr></argument>, <argument><expr><name>GxB_SPEC_DATE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_API_ABOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>about</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>about</name></expr></argument>, <argument><expr><name>GxB_SPEC_ABOUT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"About the spec:\n%s\n"</literal></expr></argument>, <argument><expr><name>about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_API_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>GxB_SPEC_DATE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"date: %s\n"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_API_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"URL: %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_API_VERSION</name></expr></argument>, <argument><expr><name>all_version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GxB_SPEC_MAJOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>GxB_SPEC_MINOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>GxB_SPEC_SUB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Spec Version (%d.%d.%d)\n"</literal></expr></argument>,
        <argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// about the library</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GxB_SUITESPARSE_GRAPHBLAS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"library info:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>GxB_IMPLEMENTATION_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"name: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>date</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"date: %s\n"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>GxB_IMPLEMENTATION_DATE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_ABOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>about</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>about</name></expr></argument>, <argument><expr><name>GxB_IMPLEMENTATION_ABOUT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"about:\n%s\n"</literal></expr></argument>, <argument><expr><name>about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_LICENSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>license</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>license</name></expr></argument>, <argument><expr><name>GxB_IMPLEMENTATION_LICENSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"license:\n%s\n"</literal></expr></argument>, <argument><expr><name>license</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_VERSION</name></expr></argument>, <argument><expr><name>all_version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>GxB_IMPLEMENTATION_MAJOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>GxB_IMPLEMENTATION_MINOR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>GxB_IMPLEMENTATION_SUB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Version (%d.%d.%d)\n"</literal></expr></argument>,
        <argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>all_version</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Implementation: ("</literal><name>GBu</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>GxB_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_COMPILE_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compile_date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"compile date: %s\n"</literal></expr></argument>, <argument><expr><name>compile_date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_COMPILE_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compile_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"compile time: %s\n"</literal></expr></argument>, <argument><expr><name>compile_time</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_URL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"URL: %s\n"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GxB_SPEC_VERSION</name> <operator>&gt;=</operator> <call><name>GxB_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"The spec is &gt;= version 1.0.0\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"The spec is &lt; version 1.0.0\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GxB_SPEC_VERSION</name> <operator>&lt;</operator> <call><name>GxB_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"The spec is &lt; version 2.3.0\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"The spec is &gt;= version 2.3.0\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GxB_IMPLEMENTATION</name> <operator>&lt;</operator> <call><name>GxB_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"This implementation is &lt;  version 1.0.0\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"This implementation is &gt;= version 1.0.0\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// CUDA</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>gpu_count</name> <init>= <expr><call><name>GB_Global_gpu_count_get</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"gpu count: %d\n"</literal></expr></argument>, <argument><expr><name>gpu_count</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>gpu_control</name> <init>= <expr><operator>-</operator><literal type="number">99</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpu_control</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"gpu control: %d\n"</literal></expr></argument>, <argument><expr><name>gpu_control</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CONTROL</name></expr></argument>, <argument><expr><name>GxB_GPU_NEVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpu_control</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>gpu_control</name> <operator>==</operator> <name>GxB_GPU_NEVER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CONTROL</name></expr></argument>, <argument><expr><name>GxB_GPU_ALWAYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpu_control</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><ternary><condition><expr><name>gpu_control</name> <operator>==</operator> <operator>(</operator><name>gpu_count</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_GPU_ALWAYS</name></expr> </then><else>: <expr><name>GxB_GPU_NEVER</name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CONTROL</name></expr></argument>, <argument><expr><name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpu_control</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><ternary><condition><expr><name>gpu_control</name> <operator>==</operator> <operator>(</operator><name>gpu_count</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_DEFAULT</name></expr> </then><else>: <expr><name>GxB_GPU_NEVER</name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>gpu_chunk</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CHUNK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpu_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"gpu chunk: %g\n"</literal></expr></argument>, <argument><expr><name>gpu_chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>gpu_chunk_42</name> <init>= <expr><literal type="number">42e6</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CHUNK</name></expr></argument>, <argument><expr><name>gpu_chunk_42</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_GLOBAL_GPU_CHUNK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gpu_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>gpu_chunk</name> <operator>==</operator> <literal type="number">42e6</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"built-in types:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_INT8</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_UINT8</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_INT16</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_UINT16</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_UINT32</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_INT64</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_UINT64</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="string">"fp32"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="string">"fp64"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nprinting built-in types:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type>       <name>b</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>    <name>i8</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>   ;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>   <name>u8</name> <init>= <expr><literal type="number">44</literal></expr></init></decl>   ;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>  <name>i16</name> <init>= <expr><literal type="number">909</literal></expr></init></decl>  ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>u16</name> <init>= <expr><literal type="number">777</literal></expr></init></decl>  ;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>i32</name> <init>= <expr><literal type="number">3203</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>u32</name> <init>= <expr><literal type="number">8080</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>  <name>i64</name> <init>= <expr><operator>-</operator><literal type="number">987</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name> <init>= <expr><literal type="number">987</literal></expr></init></decl>  ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>    <name>f32</name> <init>= <expr><literal type="number">3.14</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>   <name>f64</name> <init>= <expr><literal type="number">99.4</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_BOOL_code</name></expr></argument>,   <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>  , <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_INT8_code</name></expr></argument>,   <argument><expr><operator>&amp;</operator><name>i8</name></expr></argument> , <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_UINT8_code</name></expr></argument>,  <argument><expr><operator>&amp;</operator><name>u8</name></expr></argument> , <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_INT16_code</name></expr></argument>,  <argument><expr><operator>&amp;</operator><name>i16</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_UINT16_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u16</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_INT32_code</name></expr></argument>,  <argument><expr><operator>&amp;</operator><name>i32</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_UINT32_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u32</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_INT64_code</name></expr></argument>,  <argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_UINT64_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_FP32_code</name></expr></argument>,   <argument><expr><operator>&amp;</operator><name>f32</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_FP64_code</name></expr></argument>,   <argument><expr><operator>&amp;</operator><name>f64</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>GB_UDT_code</name></expr></argument>,    <argument><expr><operator>&amp;</operator><name>f64</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Check status codes\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHKSTAT</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro>                        \
    <cpp:value>{                                                   \
        printf ("%4d : %s\n", code, string) ;           \
        CHECK (MATCH (GB_status_code (code), string)) ; \
    }</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_SUCCESS</name></expr></argument>             , <argument><expr><literal type="string">"GrB_SUCCESS"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_NO_VALUE</name></expr></argument>            , <argument><expr><literal type="string">"GrB_NO_VALUE"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_UNINITIALIZED_OBJECT</name></expr></argument>, <argument><expr><literal type="string">"GrB_UNINITIALIZED_OBJECT"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_NULL_POINTER</name></expr></argument>        , <argument><expr><literal type="string">"GrB_NULL_POINTER"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>       , <argument><expr><literal type="string">"GrB_INVALID_VALUE"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_INVALID_INDEX</name></expr></argument>       , <argument><expr><literal type="string">"GrB_INVALID_INDEX"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>     , <argument><expr><literal type="string">"GrB_DOMAIN_MISMATCH"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>  , <argument><expr><literal type="string">"GrB_DIMENSION_MISMATCH"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_OUTPUT_NOT_EMPTY</name></expr></argument>    , <argument><expr><literal type="string">"GrB_OUTPUT_NOT_EMPTY"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_NOT_IMPLEMENTED</name></expr></argument>     , <argument><expr><literal type="string">"GrB_NOT_IMPLEMENTED"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_PANIC</name></expr></argument>               , <argument><expr><literal type="string">"GrB_PANIC"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_OUT_OF_MEMORY</name></expr></argument>       , <argument><expr><literal type="string">"GrB_OUT_OF_MEMORY"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_INSUFFICIENT_SPACE</name></expr></argument>  , <argument><expr><literal type="string">"GrB_INSUFFICIENT_SPACE"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_INVALID_OBJECT</name></expr></argument>      , <argument><expr><literal type="string">"GrB_INVALID_OBJECT"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_INDEX_OUT_OF_BOUNDS</name></expr></argument> , <argument><expr><literal type="string">"GrB_INDEX_OUT_OF_BOUNDS"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><name>GrB_EMPTY_OBJECT</name></expr></argument>        , <argument><expr><literal type="string">"GrB_EMPTY_OBJECT"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHKSTAT</name> <argument_list>(<argument><expr><literal type="number">911</literal></expr></argument>                     , <argument><expr><literal type="string">"unknown GrB_Info value!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// global get/set</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name><name>bswitch</name> <index>[<expr><name>GxB_NBITMAP_SWITCH</name></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>ff</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><name>bswitch</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hyper_switch %g csc %d\n"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>ff</name> <operator>==</operator> <name>GxB_BY_COL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GxB_NBITMAP_SWITCH</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"bitmap_switch [%d]: %g\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>bswitch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>GrB_Mode</name></type> <name>mode</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_MODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mode: %d\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"# threads: %d\n"</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>chunk</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_CHUNK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"chunk: %g\n"</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check A and B aliased</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_BOOL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_BOOL</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Bh_save</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>Bh_save</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check descripter set/get for nthreads and chunk</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_CHUNK</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">12345</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_CHUNK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_wait_</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint_</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>chunk</name> <operator>==</operator> <literal type="number">12345</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nthreads</name> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// make a shallow copy of an empty matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>Q_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Q</name> <init>= <expr><call><name>GB_clear_static_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Q_header</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_shallow_copy</name> <argument_list>(<argument><expr><name>Q</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// A is empty, not iso</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>Q</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// tests with memory tracking off</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_tracking_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GB_malloc_memory</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_calloc_memory</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_realloc_memory</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_Global_malloc_is_thread_safe_get</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_is_thread_safe_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_Global_malloc_is_thread_safe_get</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_is_thread_safe_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_Global_malloc_is_thread_safe_get</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_Global_malloc_tracking_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// other global settings</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>save0</name> <init>= <expr><call><name>GB_Global_hack_get</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>save1</name> <init>= <expr><call><name>GB_Global_hack_get</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_Global_hack_set</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">90123</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_Global_hack_get</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">90123</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_hack_set</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>save0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_Global_hack_get</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>save0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_hack_set</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">99123</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_Global_hack_get</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">99123</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_hack_set</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>save1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_Global_hack_get</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>save1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GB_pslice</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Slice</name> <index>[<expr><literal type="number">30</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>Slice</name> <index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// renamed boolean monoids</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>mono</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// DIV renamed to FIRST</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>, <argument><expr><name>GrB_DIV_BOOL</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\ndiv_bool monoid:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_fprint_</name><argument_list>(<argument><expr><name>mono</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// RDIV renamed to SECOND</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>, <argument><expr><name>GxB_RDIV_BOOL</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nrdiv_bool monoid:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_fprint_</name><argument_list>(<argument><expr><name>mono</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// ISGT renamed to GT</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>, <argument><expr><name>GxB_ISGT_BOOL</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nisgt_bool monoid:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_fprint_</name><argument_list>(<argument><expr><name>mono</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// ISLT renamed to LT</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>, <argument><expr><name>GxB_ISLT_BOOL</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nislt_bool monoid:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_fprint_</name><argument_list>(<argument><expr><name>mono</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// ISGE renamed to GE</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>, <argument><expr><name>GxB_ISGE_BOOL</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nisge_bool monoid:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_fprint_</name><argument_list>(<argument><expr><name>mono</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// ISLE renamed to LE</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>, <argument><expr><name>GxB_ISLE_BOOL</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nisle_bool monoid:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_fprint_</name><argument_list>(<argument><expr><name>mono</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>user_type</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>user_type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>user_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_wait_</name><argument_list>(<argument><expr><name>user_type</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>user_type</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>user_int</name></type> <name>value</name></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>i</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT16</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>thunk</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>, <argument><expr><name>user_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type2</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>type2</name> <operator>==</operator> <name>user_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>thunk</name></expr></argument>, <argument><expr><literal type="string">"thunk"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NE_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">4</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_UDT</name> <argument_list>(<argument><expr><name>thunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_GE_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Expected error: info: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>thunk2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>thunk2</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_INT16</name> <argument_list>(<argument><expr><name>thunk2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_wait_</name><argument_list>(<argument><expr><name>thunk2</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_GE_ZERO</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Expected error: info: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_GT_ZERO</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Expected error: info: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_LT_ZERO</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Expected error: info: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_LE_ZERO</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Expected error: info: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_LE_THUNK</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Expected error: info: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>user_type</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============== B = select (A != 0)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============== B = select (A == 0)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_EQ_ZERO</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============== B = select (A != 4)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NE_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============== B = select (A == 4)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_EQ_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thunk2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_BOOL</name> <argument_list>(<argument><expr><name>thunk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============== B = select (A &gt; 0)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_GT_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============== B = select (A &gt;= 0)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_GE_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============== B = select (A &lt; 0)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_LT_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============== B = select (A &lt;= 0)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_LE_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create a test matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">100</literal><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"did setEL loop\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP64</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_wait_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GxB_get</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_AUTO_SPARSITY</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_get_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_AUTO_SPARSITY</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_get_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_get_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>fmt</name> <operator>==</operator> <name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_hyper</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_get_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_IS_HYPER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_hyper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_get_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">999</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_hyper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GxB_set</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">999</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_hyper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_get_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_AUTO_SPARSITY</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// removeElement errors</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_INDEX</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><call><name>GrB_Vector_removeElement</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_removeElement</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_removeElement</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>I</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>J</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,
        <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// remvoe element with empty matrix and vector</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"testing removeElement\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_removeElement</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_removeElement</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"removeElement: OK\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select error handling</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GxB_SelectOp</name></type> <name>selectop</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>, 
        <argument><expr><operator>(</operator><name>GxB_select_function</name><operator>)</operator> <name>select_plus_one</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_wait_</name><argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_FP64</name> <argument_list>(<argument><expr><name>thunk</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nprint in one-based, long format:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>onebased</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_PRINT_1BASED</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_PRINT_1BASED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>onebased</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>onebased</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_COMPLETE_VERBOSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_PRINT_1BASED</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_PRINT_1BASED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>onebased</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>onebased</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Error expected: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_EMPTY_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_clear</name> <argument_list>(<argument><expr><name>thunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Error expected: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Error expected: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_SelectOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>, 
        <argument><expr><operator>(</operator><name>GxB_select_function</name><operator>)</operator> <name>select_nothing</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Error expected: %d\n%s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>user_type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>user_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>user_type</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0xDEAD</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint_</name><argument_list>(<argument><expr><name>user_type</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>ytype</name></name> <operator>=</operator> <name>user_type</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint_</name><argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>user_type</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>thunk</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">0xDEAD</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>thunk</name></expr></argument>, <argument><expr><literal type="string">"thunk"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>thunk</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Error expected: %d\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_SelectOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_Scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name> <init>= <expr><literal type="number">42</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>scalar</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>scalar2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_wait_</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type>     <name>b_8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>   <name>i_8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>  <name>i_16</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>i_32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>  <name>i_64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>  <name>u_8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>u_16</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>u_32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>u_64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>    <name>x_32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>   <name>x_64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_FP64_</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_wait_</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar2</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar2</name></expr></argument>, <argument><expr><literal type="string">"scalar2"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_8</name></expr></argument>,  <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>b_8</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i_8</name></expr></argument>,  <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i_8</name>  <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_16</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i_16</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_32</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i_32</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_64</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i_64</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u_8</name></expr></argument>,  <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u_8</name>  <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u_16</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u_16</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u_32</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u_32</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u_64</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u_64</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_FP32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_32</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_32</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_64</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_64</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_clear</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Scalar_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_64</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_64</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_64</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>scalar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_64</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Vector_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_64</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>scalar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_64</name> <operator>==</operator> <literal type="number">1.25</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>u_64</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u_64</name></expr></argument>, <argument><expr><name>scalar2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u_64</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>scalar2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_wait_</name><argument_list>(<argument><expr><name>scalar2</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>scalar2</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar2</name></expr></argument>, <argument><expr><literal type="string">"scalar2"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>scalar2</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar2</name></expr></argument>, <argument><expr><literal type="string">"scalar2"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scalar2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// predefined descriptors</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_T1</name></expr></argument>     , <argument><expr><literal type="string">"T1    "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_T0</name></expr></argument>     , <argument><expr><literal type="string">"T0    "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_T0T1</name></expr></argument>   , <argument><expr><literal type="string">"T0T1  "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_C</name></expr></argument>      , <argument><expr><literal type="string">"C     "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_CT1</name></expr></argument>    , <argument><expr><literal type="string">"CT1   "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_CT0</name></expr></argument>    , <argument><expr><literal type="string">"CT0   "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_CT0T1</name></expr></argument>  , <argument><expr><literal type="string">"CT0T1 "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_S</name></expr></argument>      , <argument><expr><literal type="string">"S     "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_ST1</name></expr></argument>    , <argument><expr><literal type="string">"ST1   "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_ST0</name></expr></argument>    , <argument><expr><literal type="string">"ST0   "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_ST0T1</name></expr></argument>  , <argument><expr><literal type="string">"ST0T1 "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_SC</name></expr></argument>     , <argument><expr><literal type="string">"SC    "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_SCT1</name></expr></argument>   , <argument><expr><literal type="string">"SCT1  "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_SCT0</name></expr></argument>   , <argument><expr><literal type="string">"SCT0  "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_SCT0T1</name></expr></argument> , <argument><expr><literal type="string">"SCT0T1"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_R</name></expr></argument>      , <argument><expr><literal type="string">"R     "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RT1</name></expr></argument>    , <argument><expr><literal type="string">"RT1   "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RT0</name></expr></argument>    , <argument><expr><literal type="string">"RT0   "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RT0T1</name></expr></argument>  , <argument><expr><literal type="string">"RT0T1 "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RC</name></expr></argument>     , <argument><expr><literal type="string">"RC    "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RCT1</name></expr></argument>   , <argument><expr><literal type="string">"RCT1  "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RCT0</name></expr></argument>   , <argument><expr><literal type="string">"RCT0  "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RCT0T1</name></expr></argument> , <argument><expr><literal type="string">"RCT0T1"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RS</name></expr></argument>     , <argument><expr><literal type="string">"RS    "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RST1</name></expr></argument>   , <argument><expr><literal type="string">"RST1  "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RST0</name></expr></argument>   , <argument><expr><literal type="string">"RST0  "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RST0T1</name></expr></argument> , <argument><expr><literal type="string">"RST0T1"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RSC</name></expr></argument>    , <argument><expr><literal type="string">"RSC   "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RSCT1</name></expr></argument>  , <argument><expr><literal type="string">"RSCT1 "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RSCT0</name></expr></argument>  , <argument><expr><literal type="string">"RSCT0 "</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>GrB_DESC_RSCT0T1</name></expr></argument>, <argument><expr><literal type="string">"RSCT0T1"</literal></expr></argument>,<argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Duh</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><name>GxB_AxB_SAXPY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint_</name><argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><name>GxB_AxB_HASH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint_</name><argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><name>GxB_AxB_GUSTAVSON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint_</name><argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><name>GxB_AxB_DOT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint_</name><argument_list>(<argument><expr><name>Duh</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Duh</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>GrB_DESC_S</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>GrB_DESC_S</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// burble</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>burble</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_BURBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>burble</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"burble: %d\n"</literal></expr></argument>, <argument><expr><name>burble</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select ops</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_TRIL</name></expr></argument>,     <argument><expr><literal type="string">"tril"</literal></expr></argument>    , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_TRIU</name></expr></argument>,     <argument><expr><literal type="string">"triu"</literal></expr></argument>    , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_DIAG</name></expr></argument>,     <argument><expr><literal type="string">"diag"</literal></expr></argument>    , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_OFFDIAG</name></expr></argument>,  <argument><expr><literal type="string">"offidiag"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_NONZERO</name></expr></argument>,  <argument><expr><literal type="string">"nonzero"</literal></expr></argument> , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_EQ_ZERO</name></expr></argument>,  <argument><expr><literal type="string">"eq_zero"</literal></expr></argument> , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_GT_ZERO</name></expr></argument>,  <argument><expr><literal type="string">"gt_zero"</literal></expr></argument> , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_GE_ZERO</name></expr></argument>,  <argument><expr><literal type="string">"ge_zero"</literal></expr></argument> , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_LT_ZERO</name></expr></argument>,  <argument><expr><literal type="string">"lt_zero"</literal></expr></argument> , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_LE_ZERO</name></expr></argument>,  <argument><expr><literal type="string">"le_zero"</literal></expr></argument> , <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_NE_THUNK</name></expr></argument>, <argument><expr><literal type="string">"ne_thunk"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_EQ_THUNK</name></expr></argument>, <argument><expr><literal type="string">"eq_thunk"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_GT_THUNK</name></expr></argument>, <argument><expr><literal type="string">"gt_thunk"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_GE_THUNK</name></expr></argument>, <argument><expr><literal type="string">"ge_thunk"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_LT_THUNK</name></expr></argument>, <argument><expr><literal type="string">"lt_thunk"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>GxB_LE_THUNK</name></expr></argument>, <argument><expr><literal type="string">"le_thunk"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// assign scalar into hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>n</name> <init>= <expr><name>INT32_MAX</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">1024</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1</literal></expr></argument>,
        <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A iso full"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>I0</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_OUT_OF_MEMORY</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2</literal></expr></argument>,
        <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// setElement typecast</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>user_type</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_BOOL</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT8</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT16</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT32</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT64</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UINT8</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UINT16</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UINT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UINT64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_FP32</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_FP64</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_setElement_FC32</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_CMPLXF</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_setElement_FC64</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_error</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Test GrB_error:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Type_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>user_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_UnaryOp_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>GrB_AINV_FP32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_BinaryOp_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_SelectOp_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>GxB_TRIL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Monoid_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>GrB_LOR_MONOID_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Semiring_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>GrB_PLUS_TIMES_SEMIRING_FP32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>GrB_DESC_T0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int16_t</name></type> <name>fortytwo</name> <init>= <expr><literal type="number">42</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>fortytwo</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>err</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// wrapup</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// #include "GB_Test_about_mkl_template.c"</comment>
    <expr_stmt><expr><call><name>GB_mx_put_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   
    <expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll errors printed above were expected.\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GB_mex_about: all tests passed\n\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
