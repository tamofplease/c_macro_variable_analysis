<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_assign.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_assign: C&lt;Mask&gt;(I,J) = accum (C (I,J), A)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">// This function is a wrapper for GrB_Matrix_assign, GrB_Matrix_assign_T</comment>
<comment type="line">// GrB_Vector_assign, and GrB_Vector_assign_T (when kind=0 or by default).  For</comment>
<comment type="line">// these uses, the Mask must always be the same size as C.</comment>

<comment type="line">// This mexFunction does calls GrB_Row_assign (when kind=2) or GrB_Col_assign</comment>
<comment type="line">// (when kind=1).  In these cases, the Mask is a single row or column,</comment>
<comment type="line">// respectively.  C is not modified outside that single row (for</comment>
<comment type="line">// GrB_Row_assign) or column (for GrB_Col_assign).</comment>

<comment type="line">// This function does the same thing as the mimics GB_spec_assign.m</comment>
<comment type="line">// (when kind=0), GB_spec_Col_assign (when kind=1), and GB_spec_Row_assign</comment>
<comment type="line">// (when kind=2).</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_assign(C,Mask,acc,A,I,J,desc,kind) or (C,Work,ctrl)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    GrB_Matrix_free_(&amp;A) ;              \
    GrB_Matrix_free_(&amp;Mask) ;           \
    GrB_Matrix_free_(&amp;C) ;              \
    GrB_Descriptor_free_(&amp;desc) ;       \
    GB_mx_put_global (true) ;           \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> \
    <cpp:value>C = GB_mx_mxArray_to_Matrix (pargin [0], "C input", true, true) ;         \
    if (have_sparsity_control)                                                \
    {                                                                         \
        GxB_Matrix_Option_set (C, GxB_SPARSITY_CONTROL, C_sparsity_control) ; \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>GrB_Matrix_free_(&amp;C) ;</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Mask</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>ni</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>I_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>nj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>J_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignore</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<function_decl><type><name>GrB_Info</name></type> <name>assign</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>C_sparsity_control</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>M_sparsity_control</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_sparsity_control</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_GrB_Scalar</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

<function_decl><type><name>GrB_Info</name></type> <name>many_assign</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nwork</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fA</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fI</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fJ</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>faccum</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fMask</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fdesc</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fscalar</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list> ;</function_decl>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// assign: perform a single assignment</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                      \
<cpp:value>{                                       \
    info = method ;                     \
    if (info != GrB_SUCCESS)            \
    {                                   \
        return (info) ;                 \
    }                                   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>assign</name> <parameter_list>( )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>at</name> <init>= <expr><operator>(</operator><name>desc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>in0</name></name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>pr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ph</name> <init>= <expr><operator>(</operator><name>pr</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for GB_mex_assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>Mask</name></expr></argument>, <argument><expr><literal type="string">"Mask for GB_mex_assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for GB_mex_assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><literal type="string">"accum for GB_mex_assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_DESCRIPTOR_OK_OR_NULL</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"desc for GB_mex_assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// test GrB_Col_assign</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mask</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>Mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>Mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>A</name></expr></argument>,
            <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name><name>J</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// test GrB_Row_assign</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mask</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>Mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_VECTOR_OK_OR_NULL</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>Mask</name></expr></argument>, <argument><expr><literal type="string">"row mask"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_VECTOR_OK</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>A</name></expr></argument>, <argument><expr><literal type="string">"row u"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>Mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>A</name></expr></argument>,
            <argument><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>use_GrB_Scalar</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// use GrB_Matrix_assign_Scalar or GrB_Vector_assign_Scalar</comment>
        <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>S</name> <init>= <expr><operator>(</operator><name>GrB_Scalar</name><operator>)</operator> <name>A</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>Mask</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_Scalar</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>Mask</name></expr></argument>,
                <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_Scalar</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>Mask</name></expr></argument>,
                <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt> <comment type="line">// OK: A is a scalar with exactly one entry</comment>

        <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nj</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>Mask</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>I</name> <operator>!=</operator> <name>GrB_ALL</name> <operator>&amp;&amp;</operator> <name>J</name> <operator>!=</operator> <name>GrB_ALL</name>
            <operator>&amp;&amp;</operator> <call><name>GB_op_is_second</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name> <operator>&lt;=</operator> <name>GB_FC64_code</name>
            <operator>&amp;&amp;</operator> <name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">// test GrB_Matrix_setElement</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                         \
            <cpp:value>{                                                           \
                type x = ((type *) Ax) [0] ;                            \
                OK (prefix ## Matrix_setElement ## suffix               \
                    (C, x, I [0], J [0])) ;                             \
            } break ;</cpp:value></cpp:define>

            <switch>switch <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UDT_code</name></expr>    :</case>
                <default>default:</default>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"GB_mex_assign: unknown type, setEl"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></switch>

            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C after setElement"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>Mask</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>Mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>

            <comment type="line">// test GrB_Vector_assign_scalar functions</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>ASSIGN</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                          \
            <cpp:value>{                                                           \
                type x = ((type *) Ax) [0] ;                            \
                OK (prefix ## Vector_assign ## suffix ((GrB_Vector) C,  \
                    (GrB_Vector) Mask, accum, x, I, ni, desc)) ;        \
            } break ;</cpp:value></cpp:define>

            <switch>switch <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UDT_code</name></expr>    :</case>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_UDT</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>,
                            <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>Mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block>
                    <break>break ;</break>
                <default>default:</default>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"GB_mex_assign: unknown type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></switch>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">// test Matrix_assign_scalar functions</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>ASSIGN</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                  \
            <cpp:value>{                                                   \
                type x = ((type *) Ax) [0] ;                    \
                OK (prefix ## Matrix_assign ## suffix           \
                    (C, Mask, accum, x, I, ni, J, nj,desc)) ;   \
            } break ;</cpp:value></cpp:define>

            <switch>switch <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UDT_code</name></expr>    :</case>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_UDT</name>
                        <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <default>default:</default>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown type: mtx assign"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>Mask</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>Mask</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>at</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// test GrB_Vector_assign</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>Mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>,
            <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// standard submatrix assignment</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"Final C before wait"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// many_assign: do a sequence of assignments</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The list of assignments is in a struct array</comment>

<function><type><name>GrB_Info</name></type> <name>many_assign</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nwork</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fA</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fI</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fJ</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>faccum</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fMask</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fdesc</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fscalar</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nwork</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the kth work to do</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// each struct has fields A, I, J, and optionally Mask, accum, and desc</comment>

        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>p</name></decl> ;</decl_stmt>

        <comment type="line">// [ turn off malloc debugging</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>save</name> <init>= <expr><call><name>GB_Global_malloc_debug_get</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_Global_malloc_debug_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// get Mask (deep copy)</comment>
        <expr_stmt><expr><name>Mask</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fMask</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fMask</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Mask</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Mask"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>Mask</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Mask failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>have_sparsity_control</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>,
                    <argument><expr><name>M_sparsity_control</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get A (deep copy)</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get accum, if present</comment>
        <expr_stmt><expr><name>accum</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>faccum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>faccum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>user_complex</name> <init>= <expr><operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>accum</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"accum"</literal></expr></argument>,
                <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"accum failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get I</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fI</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get J</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fJ</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>J</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get desc</comment>
        <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fdesc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fdesc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_Descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"desc failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get use_GrB_Scalar</comment>
        <expr_stmt><expr><name>use_GrB_Scalar</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fscalar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fscalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>use_GrB_Scalar</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator> <operator>(</operator><call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get kind</comment>
        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fkind</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fkind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// restore malloc debugging to test the method</comment>
        <expr_stmt><expr><call><name>GB_Global_malloc_debug_set</name> <argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// ]</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;Mask&gt;(I,J) = A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>assign</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Mask</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"Final C before wait"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_assign mexFunction</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Mask</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>accum</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>I</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name>ni</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>J</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name>nj</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>malloc_debug</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <name>GrB_SUCCESS</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>C_sparsity_control</name> <operator>=</operator> <name>GxB_AUTO_SPARSITY</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>M_sparsity_control</name> <operator>=</operator> <name>GxB_AUTO_SPARSITY</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>have_sparsity_control</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>malloc_debug</name> <operator>=</operator> <call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Mask</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator>
        <operator>(</operator><name>nargin</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargin</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>nargin</name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <name>nargin</name> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator>
         <name>nargin</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get control if present: [C_sparsity_control M_sparsity_control]</comment>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"invalid control"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>have_sparsity_control</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetDoubles</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>C_sparsity_control</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>M_sparsity_control</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C (make a deep copy)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargin</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get a list of work to do: a struct array of length nwork</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// each entry is a struct with fields:</comment>
        <comment type="line">// Mask, accum, A, I, J, desc</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsStruct</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"2nd argument must be a struct"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>nwork</name> <init>= <expr><call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nf</name> <init>= <expr><call><name>mxGetNumberOfFields</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name>nf</name></expr> ;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>p</name></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nwork</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>fA</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fI</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fJ</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>faccum</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"accum"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fMask</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Mask"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fdesc</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fkind</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fscalar</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"scalar"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>fA</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fI</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fJ</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A,I,J required"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>many_assign</name> <argument_list>(<argument><expr><name>nwork</name></expr></argument>, <argument><expr><name>fA</name></expr></argument>, <argument><expr><name>fI</name></expr></argument>, <argument><expr><name>fJ</name></expr></argument>, <argument><expr><name>faccum</name></expr></argument>, <argument><expr><name>fMask</name></expr></argument>, <argument><expr><name>fdesc</name></expr></argument>,
            <argument><expr><name>fscalar</name></expr></argument>, <argument><expr><name>fkind</name></expr></argument>, <argument><expr><name>pargin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;Mask&gt;(I,J) = A, with a single assignment</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// get Mask (deep copy)</comment>
        <expr_stmt><expr><name>Mask</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Mask"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Mask</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Mask failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get A (deep copy)</comment>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get accum, if present</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>user_complex</name> <init>= <expr><operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>accum</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>accum</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"accum"</literal></expr></argument>,
            <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"accum failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get I</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get J</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>J</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get desc</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_Descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><call><name>PARGIN</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"desc failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get kind (0: matrix/vector, 1: col_assign, 2: row_assign)</comment>
        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// C&lt;Mask&gt;(I,J) = A</comment>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>assign</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return C as a struct</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C assign result"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
