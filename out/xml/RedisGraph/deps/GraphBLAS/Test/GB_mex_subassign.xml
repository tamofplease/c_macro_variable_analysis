<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_subassign.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_subassign: C(I,J)&lt;M&gt; = accum (C (I,J), A)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">// This function is a wrapper for all GxB_*_subassign functions.</comment>
<comment type="line">// For these uses, the mask M must always be the same size as C(I,J) and A.</comment>

<comment type="line">// GxB_Matrix_subassign: M has the same size as C(I,J) and A</comment>
<comment type="line">// GxB_Matrix_subassign_TYPE: M has the same size as C(I,J).  A is scalar.</comment>

<comment type="line">// GxB_Vector_subassign: M has the same size as C(I,J) and A</comment>
<comment type="line">// GxB_Vector_subassign_TYPE: M has the same size as C(I,J).  A is scalar.</comment>

<comment type="line">// GxB_Col_subassign: on input to GB_mex_subassign, M and A are a single</comment>
<comment type="line">// columns, the same size as the single subcolumn C(I,j).  They are not column</comment>
<comment type="line">// vectors.</comment>

<comment type="line">// GxB_Row_subassign: on input to GB_mex_subassign, M and A are single ROWS,</comment>
<comment type="line">// the same size as the single subrow C(i,J).  They are not column vectors.</comment>
<comment type="line">// Before GxB_Row_subassign is called, the A and the mask M (if present) are</comment>
<comment type="line">// transposed.</comment>

<comment type="line">// Thus, in all cases, A and the mask M (if present) have the same size as</comment>
<comment type="line">// C(I,J), except in the case where A is a scalar.  In that case, A is</comment>
<comment type="line">// implicitly expanded into a matrix the same size as C(I,J), but this occurs</comment>
<comment type="line">// inside GxB_*subassign, not here.</comment>

<comment type="line">// This function does the same thing as the mimic GB_spec_subassign.m.</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"[C,s,t] = GB_mex_subassign " \
              "(C, M, accum, A, I, J, desc, reduce) or (C, Work, control)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    bool A_is_M = (A == M) ;            \
    bool A_is_C = (A == C) ;            \
    bool C_is_M = (C == M) ;            \
    GrB_Matrix_free_(&amp;A) ;              \
    if (A_is_C) C = NULL ;              \
    if (A_is_M) M = NULL ;              \
    GrB_Matrix_free_(&amp;C) ;              \
    if (C_is_M) M = NULL ;              \
    GrB_Matrix_free_(&amp;M) ;              \
    GrB_Descriptor_free_(&amp;desc) ;       \
    if (!user_complex) GrB_Monoid_free_(&amp;reduce) ;                \
    GB_mx_put_global (true) ;           \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro>                                                   \
<cpp:value>{                                                                       \
    C = GB_mx_mxArray_to_Matrix (pargin [0], "C input", true, true) ;   \
    if (have_sparsity_control)                                          \
    {                                                                   \
        GxB_Matrix_Option_set (C, GxB_SPARSITY_CONTROL, C_sparsity_control) ; \
    }                                                                   \
    if (nargin &gt; 3 &amp;&amp; mxIsChar (pargin [1]))                            \
    {                                                                   \
        M = GB_mx_alias ("M", pargin [1], "C", C, "A", A) ;             \
    }                                                                   \
    if (nargin &gt; 3 &amp;&amp; mxIsChar (pargin [3]))                            \
    {                                                                   \
        A = GB_mx_alias ("A", pargin [3], "C", C, "M", M) ;             \
    }                                                                   \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro>          \
<cpp:value>{                               \
    if (A == C) A = NULL ;      \
    if (M == C) M = NULL ;      \
    GrB_Matrix_free_(&amp;C) ;      \
}</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>mask</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>ni</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>I_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>nj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>J_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignore</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>reduce</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>user_complex</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>C_sparsity_control</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>M_sparsity_control</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>have_sparsity_control</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>use_GrB_Scalar</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

<function_decl><type><name>GrB_Info</name></type> <name>assign</name> <parameter_list>(<parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>)</parameter_list> ;</function_decl>

<function_decl><type><name>GrB_Info</name></type> <name>many_subassign</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nwork</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fA</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fI</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fJ</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>faccum</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fM</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fdesc</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fscalar</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list> ;</function_decl>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// assign: perform a single assignment</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                      \
<cpp:value>{                                       \
    info = method ;                     \
    if (info != GrB_SUCCESS)            \
    {                                   \
        GrB_Matrix_free_(&amp;mask) ;       \
        GrB_Matrix_free_(&amp;u) ;          \
        return (info) ;                 \
    }                                   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>assign</name> <parameter_list>(<parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>at</name> <init>= <expr><operator>(</operator><name>desc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>in0</name></name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>pr</name> <init>= <expr><name>GB0</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ph</name> <init>= <expr><operator>(</operator><name>pr</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C before mex assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><literal type="string">"accum for mex assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for mex assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>use_GrB_Scalar</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// use GxB_Matrix_subassign_Scalar or GxB_Vector_subassign_Scalar</comment>
        <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>S</name> <init>= <expr><operator>(</operator><name>GrB_Scalar</name><operator>)</operator> <name>A</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign_Scalar</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>M</name></expr></argument>,
                <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign_Scalar</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M</name></expr></argument>,
                <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt> <comment type="line">// OK: A is a scalar with exactly one entry</comment>

        <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nj</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>M</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>I</name> <operator>!=</operator> <name>GrB_ALL</name> <operator>&amp;&amp;</operator> <name>J</name> <operator>!=</operator> <name>GrB_ALL</name>
            <operator>&amp;&amp;</operator> <call><name>GB_op_is_second</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name> <operator>&lt;=</operator> <name>GB_FC64_code</name>
            <operator>&amp;&amp;</operator> <name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"setElement\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="line">// test GrB_Matrix_setElement</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                          \
            <cpp:value>{                                                           \
                type x = ((type *) Ax) [0] ;                            \
                OK (prefix ## Matrix_setElement ## suffix               \
                    (C, x, I [0], J [0])) ;                             \
            } break ;</cpp:value></cpp:define>

            <switch>switch <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>

                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UDT_code</name></expr>    :</case>
                <default>default:</default>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></switch>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ASSIGN</name></cpp:undef>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">// test GxB_Vector_subassign_scalar functions</comment>
            <if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"scalar assign to vector\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                 \
            <cpp:value>{                                           \
                type x = ((type *) Ax) [0] ;            \
                OK (GxB_Vector_subassign ## suffix      \
                    ((GrB_Vector) C, (GrB_Vector) M,    \
                    accum, x, I, ni, desc)) ;           \
            } break ;</cpp:value></cpp:define>

            <switch>switch <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>

                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UDT_code</name></expr>    :</case>
                <block>{<block_content>
                    <comment type="line">// user-defined Complex type</comment>
                    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign_UDT</name>
                        <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>M</name></expr></argument>,
                        <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block>
                <break>break ;</break>
                <default>default:</default>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></switch>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ASSIGN</name></cpp:undef>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">// test Matrix_subassign_scalar functions</comment>
            <if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"scalar assign to matrix\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                     \
            <cpp:value>{                                               \
                type x = ((type *) Ax) [0] ;                \
                OK (GxB_Matrix_subassign ## suffix          \
                    (C, M, accum, x, I, ni, J, nj,desc)) ;  \
            } break ;</cpp:value></cpp:define>

            <switch>switch <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>

                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>ASSIGN</name> <argument_list>(<argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UDT_code</name></expr>    :</case>
                <block>{<block_content>
                    <comment type="line">// user-defined Complex type</comment>
                    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign_UDT</name>
                        <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <default>default:</default>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></switch>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ASSIGN</name></cpp:undef>

        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>at</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// test GxB_Vector_subassign</comment>
        <if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"vector assign\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>,
            <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>nj</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>at</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// test GxB_Col_subassign</comment>
        <if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"col assign\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>A</name></expr></argument>,
            <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name><name>J</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ni</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nj</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>M</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>at</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// test GxB_Row_subassign; this is not meant to be efficient,</comment>
        <comment type="line">// just for testing</comment>
        <if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"row assign\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// mask = M'</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mnrows</name></decl>, <decl><type ref="prev"/><name>mncols</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mnrows</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mncols</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><name><name>M</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>mncols</name></expr></argument>, <argument><expr><name>mnrows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>mask</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// u = A'</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ancols</name></decl>, <decl><type ref="prev"/><name>anrows</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>, <argument><expr><name>anrows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>u</name></expr></argument>,
            <argument><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// standard submatrix assignment</comment>
        <if_stmt><if>if <condition>(<expr><name>ph</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"submatrix assign\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C after assign"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// many_subassign: do a sequence of assignments</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The list of assignments is in a struct array</comment>

<function><type><name>GrB_Info</name></type> <name>many_subassign</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nwork</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fA</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fI</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fJ</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>faccum</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fM</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fdesc</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>fscalar</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nwork</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the kth work to do</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// each struct has fields A, I, J, and optionally Mask, accum, and desc</comment>

        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>p</name></decl> ;</decl_stmt>

        <comment type="line">// [ turn off malloc debugging</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>save</name> <init>= <expr><call><name>GB_Global_malloc_debug_get</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_Global_malloc_debug_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// get M (deep copy)</comment>
        <expr_stmt><expr><name>M</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fM</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fM</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Mask"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"M failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>have_sparsity_control</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>,
                    <argument><expr><name>M_sparsity_control</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get A (true copy)</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get accum, if present</comment>
        <expr_stmt><expr><name>accum</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>faccum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>faccum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>user_complex</name> <operator>=</operator> <operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>accum</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"accum"</literal></expr></argument>,
                <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"accum failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get I</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fI</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get J</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fJ</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>J</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get desc</comment>
        <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fdesc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fdesc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_Descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"desc failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get use_GrB_Scalar</comment>
        <expr_stmt><expr><name>use_GrB_Scalar</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fscalar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>fscalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>use_GrB_Scalar</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator> <operator>(</operator><call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// restore malloc debugging to test the method</comment>
        <expr_stmt><expr><call><name>GB_Global_malloc_debug_set</name> <argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// ]</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C(I,J)&lt;M&gt; = A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>assign</name> <argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_subassign mexFunction</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>M</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>accum</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>I</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name>ni</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>J</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name>nj</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>malloc_debug</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <name>GrB_SUCCESS</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>reduce</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>user_complex</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>C_sparsity_control</name> <operator>=</operator> <name>GxB_AUTO_SPARSITY</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>M_sparsity_control</name> <operator>=</operator> <name>GxB_AUTO_SPARSITY</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>have_sparsity_control</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>malloc_debug</name> <operator>=</operator> <call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>M</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>user_complex</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>reduce</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_CONTEXT</name> <argument_list>(<argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>nargout</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nargin</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargin</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator>
            <name>nargin</name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <name>nargin</name> <operator>==</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
          <operator>(</operator><operator>(</operator><name>nargout</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargout</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>nargin</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargin</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// get control if present:</comment>
        <comment type="line">// [C_sparsity_control M_sparsity_control]</comment>
        <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"invalid control"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>have_sparsity_control</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetDoubles</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>C_sparsity_control</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M_sparsity_control</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get C (deep copy)</comment>
        <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get a list of work to do: a struct array of length nwork</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// each entry is a struct with fields:</comment>
        <comment type="line">// Mask, accum, A, I, J, desc</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsStruct</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"2nd argument must be a struct"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>nwork</name> <init>= <expr><call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nf</name> <init>= <expr><call><name>mxGetNumberOfFields</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name>nf</name></expr> ;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>p</name></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nwork</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>fA</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fI</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fJ</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>faccum</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"accum"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fM</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Mask"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fdesc</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fscalar</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"scalar"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>fA</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fI</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fJ</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A,I,J required"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>many_subassign</name> <argument_list>(<argument><expr><name>nwork</name></expr></argument>, <argument><expr><name>fA</name></expr></argument>, <argument><expr><name>fI</name></expr></argument>, <argument><expr><name>fJ</name></expr></argument>, <argument><expr><name>faccum</name></expr></argument>, <argument><expr><name>fM</name></expr></argument>, <argument><expr><name>fdesc</name></expr></argument>,
            <argument><expr><name>fscalar</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>pargin</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C(I,J)&lt;M&gt; = A, with a single assignment</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// get M (deep copy)</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"M failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get A (deep copy)</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get C (deep copy)</comment>
        <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get accum, if present</comment>
        <expr_stmt><expr><name>user_complex</name> <operator>=</operator> <operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name>accum</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>accum</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"accum"</literal></expr></argument>,
            <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"accum failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get I</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get J</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>J</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get desc</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_Descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><call><name>PARGIN</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"desc failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nargout</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargout</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// get reduce operator</comment>
            <expr_stmt><expr><name>user_complex</name> <operator>=</operator> <operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><call><name>PARGIN</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"op"</literal></expr></argument>,
                <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"op failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// get the reduce monoid</comment>
            <if_stmt><if>if <condition>(<expr><name>user_complex</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>Complex_plus</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>reduce</name> <operator>=</operator> <name>Complex_plus_monoid</name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>Complex_times</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>reduce</name> <operator>=</operator> <name>Complex_times_monoid</name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"user reduce failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// create the reduce monoid</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_Monoid</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>reduce</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>malloc_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"reduce failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// C(I,J)&lt;M&gt; = A</comment>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>assign</name> <argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// apply the reduce monoid</comment>
        <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nargout</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargout</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>

            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_create_full</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetData</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REDUCE</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>zero</name></type></parameter>)</parameter_list></cpp:macro>                            \
            <cpp:value>{                                                                  \
                type c = zero ;                                                \
                prefix ## Matrix_reduce ## suffix (&amp;c, NULL, reduce, C, NULL) ;\
                memcpy (p, &amp;c, sizeof (type)) ;                                \
            }                                                                  \
            break ;</cpp:value></cpp:define>

            <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

            <switch>switch <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>

                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>      , <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>    , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument>   , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument>   , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument>   , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument>   , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>  , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>  , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>  , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>     , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>    , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case>
                    <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC32</name></expr></argument>, <argument><expr><name>GxB_FC32_t</name></expr></argument>, <argument><expr><call><name>GxB_CMPLXF</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case>
                    <expr_stmt><expr><call><name>REDUCE</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>, <argument><expr><call><name>GxB_CMPLX</name>  <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <case>case <expr><name>GB_UDT_code</name></expr>    :</case>
                    <block>{<block_content>
                        <comment type="line">// user-defined Complex type</comment>
                        <decl_stmt><decl><type><name>GxB_FC64_t</name></type> <name>c</name> <init>= <expr><call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GrB_Matrix_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>reduce</name></expr></argument>,
                            <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block>
                    <break>break ;</break>

                <default>default             :</default>
                    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown type: subassign reduce"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></switch>

            <expr_stmt><expr><call><name>GrB_Matrix_reduce_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return C as a struct</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"Final C before wait"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>A</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>      <comment type="line">// do not free A if it is aliased to C</comment>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>M</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>M</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>      <comment type="line">// do not free M if it is aliased to C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C assign result"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
