<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_BinaryOp_to_Monoid.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_BinaryOp_to_Monoid: convert a binary op to a monoid</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>GrB_Monoid</name></type> <name>GB_mx_BinaryOp_to_Monoid</name> <comment type="line">// monoid, or NULL if error</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>add</name></decl></parameter>          <comment type="line">// monoid operator</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>add</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"monoid operator missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name></expr>)</condition> <comment type="line">// &amp;&amp; add-&gt;ztype == Complex)</comment>
    <block>{<block_content>
        <comment type="line">// user-defined monoids</comment>
        <if_stmt><if>if <condition>(<expr><name>add</name> <operator>==</operator> <name>Complex_plus</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>Complex_plus_monoid</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>add</name> <operator>==</operator> <name>Complex_times</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>Complex_times_monoid</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_MIN_binop_code</name></expr>     :</case>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 11 MIN monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bool case redudant with AND</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_BOOL_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_INT8_MONOID</name>     <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_UINT8_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_INT16_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_UINT16_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_INT32_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_UINT32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_INT64_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_UINT64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FP32_MONOID</name>     <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FP64_MONOID</name>     <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type (MIN)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_MAX_binop_code</name></expr>     :</case>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 11 MAX monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bool case redundant with OR</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_BOOL_MONOID</name>     <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_INT8_MONOID</name>     <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_UINT8_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_INT16_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_UINT16_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_INT32_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_UINT32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_INT64_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_UINT64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FP32_MONOID</name>     <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FP64_MONOID</name>     <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type (MAX)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_PLUS_binop_code</name></expr>    :</case>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 11 PLUS monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bool case redundant with OR</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_BOOL_MONOID</name>     <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_INT8_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_UINT8_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_INT16_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_UINT16_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_INT32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_UINT32_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_INT64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_UINT64_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FP32_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FP64_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FC32_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FC64_MONOID</name>    <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type (PLUS)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_TIMES_binop_code</name></expr>   :</case>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 11 TIMES monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bool case redundant with AND</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_BOOL_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_INT8_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_UINT8_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_INT16_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_UINT16_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_INT32_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_UINT32_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_INT64_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_UINT64_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FP32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FP64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FC32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FC64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type (TIMES)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 11 ANY monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_BOOL_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_INT8_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT8_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_INT16_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT16_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_INT32_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT32_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_INT64_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT64_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FP32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FP64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FC32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FC64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type (ANY)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_LOR_binop_code</name></expr>      :</case>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 2 OR boolean monoids</comment>
            <comment type="line">// both GrB_LOR and GxB_LOR_BOOL (same opcode)</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_BOOL_MONOID</name>     <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid (OR)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_LAND_binop_code</name></expr>     :</case>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 2 AND boolean monoids</comment>
            <comment type="line">// both GrB_LAND and GxB_LAND_BOOL (same opcode)</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_BOOL_MONOID</name>    <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid (AND)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_LXOR_binop_code</name></expr>     :</case> <comment type="line">// GrB_LXOR and GxB_LXOR_BOOL (same opcode)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 2 XOR boolean monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_BOOL_MONOID</name>    <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid (XOR)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>


        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_ISEQ_binop_code</name></expr>     :</case> <comment type="line">// both GrB_EQ_BOOL and GxB_ISEQ_BOOL</comment>
        <case>case <expr><name>GB_EQ_binop_code</name></expr>       :</case> <comment type="line">// (different opcode)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// EQ and ISEQ boolean monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_BOOL_MONOID</name>      <operator>)</operator></expr> ;</return>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid (EQ)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BOR_binop_code</name></expr> :</case>     <comment type="line">// z = (x | y), bitwise or</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_UINT8_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_UINT16_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_UINT32_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_UINT64_MONOID</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BAND_binop_code</name></expr> :</case>    <comment type="line">// z = (x &amp; y), bitwise and</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_UINT8_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_UINT16_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_UINT32_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_UINT64_MONOID</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BXOR_binop_code</name></expr> :</case>    <comment type="line">// z = (x ^ y), bitwise xor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_UINT8_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_UINT16_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_UINT32_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_UINT64_MONOID</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BXNOR_binop_code</name></expr> :</case>   <comment type="line">// z = ~(x ^ y), bitwise xnor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_UINT8_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_UINT16_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_UINT32_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_UINT64_MONOID</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>


        <comment type="line">//----------------------------------------------------------------------</comment>
        <default>default:</default> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unsupported add operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown monoid"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
