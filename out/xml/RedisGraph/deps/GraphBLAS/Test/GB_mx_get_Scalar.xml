<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_get_Scalar.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_get_Scalar: get a GrB_Scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>GrB_Scalar</name></type> <name>GB_mx_get_Scalar</name>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>mx_scalar</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>mx_scalar</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"scalar missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"sparse scalar not supported"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>Scalar</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>scalar_type</name> <init>= <expr><call><name>GB_mx_Type</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Scalar</name></expr></argument>, <argument><expr><name>scalar_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetData</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_BOOL_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetInt8s</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_INT8_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetInt16s</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_INT16_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetInt32s</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_INT32_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetInt64s</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_INT64_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetUint8s</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_UINT8_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetUint16s</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_UINT16_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetUint32s</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_UINT32_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetUint64s</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_UINT64_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetSingles</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_FP32_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetDoubles</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_FP64_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GxB_FC32_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetComplexSingles</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GxB_Scalar_setElement_FC32_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GxB_FC64_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetComplexDoubles</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GxB_Scalar_setElement_FC64_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>scalar_type</name> <operator>==</operator> <name>Complex</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GxB_FC64_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetComplexDoubles</name> <argument_list>(<argument><expr><name>mx_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Scalar_setElement_UDT</name> <argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>scalar_type</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown scalar type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GrB_Scalar_wait_</name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Scalar</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
