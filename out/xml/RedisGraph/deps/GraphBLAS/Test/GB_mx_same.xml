<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_same.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_same: check if two arrays are equal</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_same</name>     <comment type="line">// true if arrays X and Y are the same</comment>
<parameter_list>(
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>len</name></decl></parameter>     <comment type="line">// length of X and Y</comment>
)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <name>Y</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>Y</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>X</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>Y</name> <index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt> 
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
