<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_about7.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_about7: still more basic tests</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Test lots of random stuff.  The function otherwise serves no purpose.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex_errors.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"GB_mex_about7"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Y_mangled</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Y</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C1</name> <init>= <expr><name>NULL</name></expr></init></decl>,
        <decl><type ref="prev"/><name>C2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// startup GraphBLAS</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>expected</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// matrix check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A valid"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\ninvalid A-&gt;p:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>save</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A with invalid A-&gt;p"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>save</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\ninvalid A-&gt;h:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>save</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A with invalid A-&gt;h"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name>save</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\ninvalid A-&gt;Y:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC2</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A with invalid A-&gt;Y"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Y_mangled</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Y</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name>Y_mangled</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A with invalid A-&gt;Y (wrong type)"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A valid (sparse)"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name>Y_mangled</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A with invalid A-&gt;Y (not hyper)"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Y_mangled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A valid (hypersparse)"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Y</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_pack_HyperHash</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">1.2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>B</name><operator>-&gt;</operator><name>Y</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_print_mem_shallow_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>B</name></expr></argument>,
        <argument><expr><literal type="string">"B valid (shallow hypersparse: print_mem_shallow true)"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_print_mem_shallow_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>B</name></expr></argument>,
        <argument><expr><literal type="string">"B valid (shallow hypersparse: print_mem_shallow false)"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>B</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A still valid (hypersparse)"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>Y</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_pack_HyperHash</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A hypersparse (pack did nothing)"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">99</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A-&gt;Y invalid (not found) "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Yx</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>Yx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">99</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A-&gt;Y invalid (wrong k) "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// hyper_hash with many collisions</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// The hyper_hash test assumes the following hash function and # of</comment>
    <comment type="line">// buckets:</comment>

    <comment type="line">// int64_t yvdim = ((uint64_t) 1) &lt;&lt; (GB_FLOOR_LOG2 (anvec) + 1) ;</comment>
    <comment type="line">// // divide by 4 to get a load factor of 2 to 4:</comment>
    <comment type="line">// yvdim = yvdim / 4 ;</comment>
    <comment type="line">// yvdim = GB_IMAX (yvdim, 4) ;</comment>
    <comment type="line">// #define GB_HASHF2(i,b) ((((i) &gt;&gt; 2) + 17L*((i) &gt;&gt; 8)) &amp; (b))</comment>

    <comment type="line">// The hash bucket zero will 257 entries:  change this if yvdim in</comment>
    <comment type="line">// GB_hyper_hash_build.c, or GB_HASHF2 in GB_hash.h, change.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C2</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>C1</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>C2</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>List</name> <index>[<expr><literal type="number">257</literal></expr>]</index></name> <init>= <expr><block>{
        <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,
        <expr><literal type="number">1640</literal></expr>, <expr><literal type="number">1641</literal></expr>, <expr><literal type="number">1642</literal></expr>, <expr><literal type="number">1643</literal></expr>,
        <expr><literal type="number">3280</literal></expr>, <expr><literal type="number">3281</literal></expr>, <expr><literal type="number">3282</literal></expr>, <expr><literal type="number">3283</literal></expr>,
        <expr><literal type="number">6492</literal></expr>, <expr><literal type="number">6493</literal></expr>, <expr><literal type="number">6494</literal></expr>, <expr><literal type="number">6495</literal></expr>,
        <expr><literal type="number">8132</literal></expr>, <expr><literal type="number">8133</literal></expr>, <expr><literal type="number">8134</literal></expr>, <expr><literal type="number">8135</literal></expr>,
        <expr><literal type="number">11344</literal></expr>, <expr><literal type="number">11345</literal></expr>, <expr><literal type="number">11346</literal></expr>, <expr><literal type="number">11347</literal></expr>,
        <expr><literal type="number">12984</literal></expr>, <expr><literal type="number">12985</literal></expr>, <expr><literal type="number">12986</literal></expr>, <expr><literal type="number">12987</literal></expr>,
        <expr><literal type="number">16196</literal></expr>, <expr><literal type="number">16197</literal></expr>, <expr><literal type="number">16198</literal></expr>, <expr><literal type="number">16199</literal></expr>,
        <expr><literal type="number">17836</literal></expr>, <expr><literal type="number">17837</literal></expr>, <expr><literal type="number">17838</literal></expr>, <expr><literal type="number">17839</literal></expr>,
        <expr><literal type="number">21048</literal></expr>, <expr><literal type="number">21049</literal></expr>, <expr><literal type="number">21050</literal></expr>, <expr><literal type="number">21051</literal></expr>,
        <expr><literal type="number">22688</literal></expr>, <expr><literal type="number">22689</literal></expr>, <expr><literal type="number">22690</literal></expr>, <expr><literal type="number">22691</literal></expr>,
        <expr><literal type="number">25900</literal></expr>, <expr><literal type="number">25901</literal></expr>, <expr><literal type="number">25902</literal></expr>, <expr><literal type="number">25903</literal></expr>,
        <expr><literal type="number">27540</literal></expr>, <expr><literal type="number">27541</literal></expr>, <expr><literal type="number">27542</literal></expr>, <expr><literal type="number">27543</literal></expr>,
        <expr><literal type="number">29180</literal></expr>, <expr><literal type="number">29181</literal></expr>, <expr><literal type="number">29182</literal></expr>, <expr><literal type="number">29183</literal></expr>,
        <expr><literal type="number">30752</literal></expr>, <expr><literal type="number">30753</literal></expr>, <expr><literal type="number">30754</literal></expr>, <expr><literal type="number">30755</literal></expr>,
        <expr><literal type="number">32392</literal></expr>, <expr><literal type="number">32393</literal></expr>, <expr><literal type="number">32394</literal></expr>, <expr><literal type="number">32395</literal></expr>,
        <expr><literal type="number">34032</literal></expr>, <expr><literal type="number">34033</literal></expr>, <expr><literal type="number">34034</literal></expr>, <expr><literal type="number">34035</literal></expr>,
        <expr><literal type="number">35604</literal></expr>, <expr><literal type="number">35605</literal></expr>, <expr><literal type="number">35606</literal></expr>, <expr><literal type="number">35607</literal></expr>,
        <expr><literal type="number">37244</literal></expr>, <expr><literal type="number">37245</literal></expr>, <expr><literal type="number">37246</literal></expr>, <expr><literal type="number">37247</literal></expr>,
        <expr><literal type="number">38884</literal></expr>, <expr><literal type="number">38885</literal></expr>, <expr><literal type="number">38886</literal></expr>, <expr><literal type="number">38887</literal></expr>,
        <expr><literal type="number">40456</literal></expr>, <expr><literal type="number">40457</literal></expr>, <expr><literal type="number">40458</literal></expr>, <expr><literal type="number">40459</literal></expr>,
        <expr><literal type="number">42096</literal></expr>, <expr><literal type="number">42097</literal></expr>, <expr><literal type="number">42098</literal></expr>, <expr><literal type="number">42099</literal></expr>,
        <expr><literal type="number">43736</literal></expr>, <expr><literal type="number">43737</literal></expr>, <expr><literal type="number">43738</literal></expr>, <expr><literal type="number">43739</literal></expr>,
        <expr><literal type="number">46948</literal></expr>, <expr><literal type="number">46949</literal></expr>, <expr><literal type="number">46950</literal></expr>, <expr><literal type="number">46951</literal></expr>,
        <expr><literal type="number">48588</literal></expr>, <expr><literal type="number">48589</literal></expr>, <expr><literal type="number">48590</literal></expr>, <expr><literal type="number">48591</literal></expr>,
        <expr><literal type="number">51800</literal></expr>, <expr><literal type="number">51801</literal></expr>, <expr><literal type="number">51802</literal></expr>, <expr><literal type="number">51803</literal></expr>,
        <expr><literal type="number">53440</literal></expr>, <expr><literal type="number">53441</literal></expr>, <expr><literal type="number">53442</literal></expr>, <expr><literal type="number">53443</literal></expr>,
        <expr><literal type="number">56652</literal></expr>, <expr><literal type="number">56653</literal></expr>, <expr><literal type="number">56654</literal></expr>, <expr><literal type="number">56655</literal></expr>,
        <expr><literal type="number">58292</literal></expr>, <expr><literal type="number">58293</literal></expr>, <expr><literal type="number">58294</literal></expr>, <expr><literal type="number">58295</literal></expr>,
        <expr><literal type="number">61504</literal></expr>, <expr><literal type="number">61505</literal></expr>, <expr><literal type="number">61506</literal></expr>, <expr><literal type="number">61507</literal></expr>,
        <expr><literal type="number">63144</literal></expr>, <expr><literal type="number">63145</literal></expr>, <expr><literal type="number">63146</literal></expr>, <expr><literal type="number">63147</literal></expr>,
        <expr><literal type="number">66356</literal></expr>, <expr><literal type="number">66357</literal></expr>, <expr><literal type="number">66358</literal></expr>, <expr><literal type="number">66359</literal></expr>,
        <expr><literal type="number">67996</literal></expr>, <expr><literal type="number">67997</literal></expr>, <expr><literal type="number">67998</literal></expr>, <expr><literal type="number">67999</literal></expr>,
        <expr><literal type="number">71208</literal></expr>, <expr><literal type="number">71209</literal></expr>, <expr><literal type="number">71210</literal></expr>, <expr><literal type="number">71211</literal></expr>,
        <expr><literal type="number">72848</literal></expr>, <expr><literal type="number">72849</literal></expr>, <expr><literal type="number">72850</literal></expr>, <expr><literal type="number">72851</literal></expr>,
        <expr><literal type="number">74488</literal></expr>, <expr><literal type="number">74489</literal></expr>, <expr><literal type="number">74490</literal></expr>, <expr><literal type="number">74491</literal></expr>,
        <expr><literal type="number">76060</literal></expr>, <expr><literal type="number">76061</literal></expr>, <expr><literal type="number">76062</literal></expr>, <expr><literal type="number">76063</literal></expr>,
        <expr><literal type="number">77700</literal></expr>, <expr><literal type="number">77701</literal></expr>, <expr><literal type="number">77702</literal></expr>, <expr><literal type="number">77703</literal></expr>,
        <expr><literal type="number">79340</literal></expr>, <expr><literal type="number">79341</literal></expr>, <expr><literal type="number">79342</literal></expr>, <expr><literal type="number">79343</literal></expr>,
        <expr><literal type="number">80912</literal></expr>, <expr><literal type="number">80913</literal></expr>, <expr><literal type="number">80914</literal></expr>, <expr><literal type="number">80915</literal></expr>,
        <expr><literal type="number">82552</literal></expr>, <expr><literal type="number">82553</literal></expr>, <expr><literal type="number">82554</literal></expr>, <expr><literal type="number">82555</literal></expr>,
        <expr><literal type="number">84192</literal></expr>, <expr><literal type="number">84193</literal></expr>, <expr><literal type="number">84194</literal></expr>, <expr><literal type="number">84195</literal></expr>,
        <expr><literal type="number">85764</literal></expr>, <expr><literal type="number">85765</literal></expr>, <expr><literal type="number">85766</literal></expr>, <expr><literal type="number">85767</literal></expr>,
        <expr><literal type="number">87404</literal></expr>, <expr><literal type="number">87405</literal></expr>, <expr><literal type="number">87406</literal></expr>, <expr><literal type="number">87407</literal></expr>,
        <expr><literal type="number">89044</literal></expr>, <expr><literal type="number">89045</literal></expr>, <expr><literal type="number">89046</literal></expr>, <expr><literal type="number">89047</literal></expr>,
        <expr><literal type="number">92256</literal></expr>, <expr><literal type="number">92257</literal></expr>, <expr><literal type="number">92258</literal></expr>, <expr><literal type="number">92259</literal></expr>,
        <expr><literal type="number">93896</literal></expr>, <expr><literal type="number">93897</literal></expr>, <expr><literal type="number">93898</literal></expr>, <expr><literal type="number">93899</literal></expr>,
        <expr><literal type="number">97108</literal></expr>, <expr><literal type="number">97109</literal></expr>, <expr><literal type="number">97110</literal></expr>, <expr><literal type="number">97111</literal></expr>,
        <expr><literal type="number">98748</literal></expr>, <expr><literal type="number">98749</literal></expr>, <expr><literal type="number">98750</literal></expr>, <expr><literal type="number">98751</literal></expr>,
        <expr><literal type="number">101960</literal></expr>, <expr><literal type="number">101961</literal></expr>, <expr><literal type="number">101962</literal></expr>, <expr><literal type="number">101963</literal></expr>,
        <expr><literal type="number">103600</literal></expr>, <expr><literal type="number">103601</literal></expr>, <expr><literal type="number">103602</literal></expr>, <expr><literal type="number">103603</literal></expr>,
        <expr><literal type="number">106812</literal></expr>, <expr><literal type="number">106813</literal></expr>, <expr><literal type="number">106814</literal></expr>, <expr><literal type="number">106815</literal></expr>,
        <expr><literal type="number">108452</literal></expr>, <expr><literal type="number">108453</literal></expr>, <expr><literal type="number">108454</literal></expr>, <expr><literal type="number">108455</literal></expr>,
        <expr><literal type="number">111664</literal></expr>, <expr><literal type="number">111665</literal></expr>, <expr><literal type="number">111666</literal></expr>, <expr><literal type="number">111667</literal></expr>,
        <expr><literal type="number">113304</literal></expr>, <expr><literal type="number">113305</literal></expr>, <expr><literal type="number">113306</literal></expr>, <expr><literal type="number">113307</literal></expr>,
        <expr><literal type="number">116516</literal></expr>, <expr><literal type="number">116517</literal></expr>, <expr><literal type="number">116518</literal></expr>, <expr><literal type="number">116519</literal></expr>,
        <expr><literal type="number">118156</literal></expr>, <expr><literal type="number">118157</literal></expr>, <expr><literal type="number">118158</literal></expr>, <expr><literal type="number">118159</literal></expr>,
        <expr><literal type="number">119796</literal></expr>, <expr><literal type="number">119797</literal></expr>, <expr><literal type="number">119798</literal></expr>, <expr><literal type="number">119799</literal></expr>,
        <expr><literal type="number">121368</literal></expr>, <expr><literal type="number">121369</literal></expr>, <expr><literal type="number">121370</literal></expr>, <expr><literal type="number">121371</literal></expr>,
        <expr><literal type="number">123008</literal></expr>, <expr><literal type="number">123009</literal></expr>, <expr><literal type="number">123010</literal></expr>, <expr><literal type="number">123011</literal></expr>,
        <expr><literal type="number">124648</literal></expr>, <expr><literal type="number">124649</literal></expr>, <expr><literal type="number">124650</literal></expr>, <expr><literal type="number">124651</literal></expr>,
        <expr><literal type="number">126220</literal></expr>, <expr><literal type="number">126221</literal></expr>, <expr><literal type="number">126222</literal></expr>, <expr><literal type="number">126223</literal></expr>,
        <expr><literal type="number">127860</literal></expr>, <expr><literal type="number">127861</literal></expr>, <expr><literal type="number">127862</literal></expr>, <expr><literal type="number">127863</literal></expr>,
        <expr><literal type="number">129500</literal></expr>, <expr><literal type="number">129501</literal></expr>, <expr><literal type="number">129502</literal></expr>, <expr><literal type="number">129503</literal></expr>,
        <expr><literal type="number">131072</literal></expr> }</block></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">257</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>List</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">257</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>k</name> <operator>+</operator> <literal type="number">200000</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A-&gt;Y with many collisions"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">257</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C1</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_TIMES_SEMIRING_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
        <argument><expr><name>GrB_DESC_T0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_TIMES_SEMIRING_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
        <argument><expr><name>GrB_DESC_T0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C1</name></expr></argument>, <argument><expr><literal type="string">"C&lt;A&gt;=A'*A"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>C1</name></expr></argument>, <argument><expr><name>C2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// axv2 and avx512f</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>have_avx2</name> <init>= <expr><call><name>GB_Global_cpu_features_avx2</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>have_avx512f</name> <init>= <expr><call><name>GB_Global_cpu_features_avx512f</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\navx2: %d avx512f: %d\n"</literal></expr></argument>, <argument><expr><name>have_avx2</name></expr></argument>, <argument><expr><name>have_avx512f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compiler</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compiler</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>compiler_version</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_COMPILER_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_COMPILER_VERSION</name></expr></argument>, <argument><expr><name>compiler_version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GraphBLAS compiled with:\n[%s] [v%d.%d.%d]\n"</literal></expr></argument>, <argument><expr><name>compiler</name></expr></argument>,
        <argument><expr><name><name>compiler_version</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>compiler_version</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>compiler_version</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// iterator errors</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GxB_Iterator</name></type> <name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Iterator_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Iterator_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// wrapup</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_mx_put_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nGB_mex_about7: all tests passed\n\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
