<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_random_matrix.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Test/GB_mx_random_matrix.c: create a random matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Creates a random sparse matrix, using either setElement or build.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                                                          \
<cpp:value>{                                                                           \
    info = method ;                                                         \
    if (! (info == GrB_SUCCESS || info == GrB_NO_VALUE))                    \
    {                                                                       \
        FREE_ALL ;                                                          \
        return (info) ;                                                     \
    }                                                                       \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                    \
    <cpp:value>GrB_Matrix_free (&amp;A) ;          \
    GrB_Matrix_free (&amp;Areal) ;      \
    GrB_Matrix_free (&amp;Aimag) ;      \
    if (I != NULL) mxFree (I) ;     \
    if (J != NULL) mxFree (J) ;     \
    if (X != NULL) mxFree (X) ;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// create a random matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_mx_random_matrix</name>      <comment type="line">// create a random double-precision matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A_output</name></decl></parameter>,   <comment type="line">// handle of matrix to create</comment>
    <parameter><decl><type><name>bool</name></type> <name>make_symmetric</name></decl></parameter>,    <comment type="line">// if true, return A as symmetric</comment>
    <parameter><decl><type><name>bool</name></type> <name>no_self_edges</name></decl></parameter>,     <comment type="line">// if true, then do not create self edges</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>nrows</name></decl></parameter>,          <comment type="line">// number of rows</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>ncols</name></decl></parameter>,          <comment type="line">// number of columns</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>nedges</name></decl></parameter>,         <comment type="line">// number of edges</comment>
    <parameter><decl><type><name>int</name></type> <name>method</name></decl></parameter>,             <comment type="line">// method to use: 0:setElement, 1:build,</comment>
    <parameter><decl><type><name>bool</name></type> <name>A_complex</name></decl></parameter>          <comment type="line">// if true, create a Complex matrix</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Areal</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Aimag</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>A_output</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>J</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>make_symmetric</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>nrows</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ncols</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create a Complex matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A_complex</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Areal = real random matrix</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Areal</name></expr></argument>, <argument><expr><name>make_symmetric</name></expr></argument>, <argument><expr><name>no_self_edges</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>,
            <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>nedges</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// Aimag = real random matrix</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Aimag</name></expr></argument>, <argument><expr><name>make_symmetric</name></expr></argument>, <argument><expr><name>no_self_edges</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>,
            <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>nedges</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// A = Areal + imag(Aimag)</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>Complex</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,         <argument><expr><name>Complex_complex_real</name></expr></argument>,
            <argument><expr><name>Areal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Complex_complex_imag</name></expr></argument>,
            <argument><expr><name>Aimag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>A_output</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create a real double matrix (GrB_FP64)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// use GrB_Matrix_setElement: no need to allocate tuples</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// This is just about as fast as the GrB_Matrix_build method with</comment>
        <comment type="line">// non-blocking mode (about 10% more time, regardless of the problem</comment>
        <comment type="line">// size).  This is mainly because setElement doesn't know how many</comment>
        <comment type="line">// tuples will eventually be added, so it must dynamically reallocate</comment>
        <comment type="line">// its internal storage.  In constrast, the arrays I, J, and X are a</comment>
        <comment type="line">// fixed, known size and are not reallocated as tuples are added.</comment>

        <comment type="line">// Note how simple this code is, below.  A user application can use</comment>
        <comment type="line">// setElement without having to create its own I,J,X tuple lists.  It</comment>
        <comment type="line">// can create the tuples in any order.  The code is simpler, and the</comment>
        <comment type="line">// performance penalty is neglible.</comment>

        <comment type="line">// With blocking mode, setElement is EXTREMELY slow, since the matrix</comment>
        <comment type="line">// is rebuilt on every iteration.  In this case, it is easily a 1,000</comment>
        <comment type="line">// or even a million times slower than using build when the matrix is</comment>
        <comment type="line">// very large.  Don't attempt to do this with large matrices with</comment>
        <comment type="line">// blocking mode enabled.  Actual run time could increase from 1 minute</comment>
        <comment type="line">// to 1 year (!) in the extreme case, with a matrix that can be</comment>
        <comment type="line">// generated on a commodity laptop.</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nedges</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>simple_rand_i</name> <argument_list>( )</argument_list></call> <operator>%</operator> <name>nrows</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>simple_rand_i</name> <argument_list>( )</argument_list></call> <operator>%</operator> <name>ncols</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>no_self_edges</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>simple_rand_x</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
            <comment type="line">// A (i,j) = x</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>make_symmetric</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// A (j,i) = x</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// use GrB_Matrix_build: allocate initial space for tuples</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// This method is harder for a user application to use.  It is slightly</comment>
        <comment type="line">// faster than the setElement method.  Its performance is not affected</comment>
        <comment type="line">// by the mode (blocking or non-blocking).</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>make_symmetric</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>nedges</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>I</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>J</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>   )</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>J</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>X</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>   <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// create the tuples</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>ntuples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nedges</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>simple_rand_i</name> <argument_list>( )</argument_list></call> <operator>%</operator> <name>nrows</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>simple_rand_i</name> <argument_list>( )</argument_list></call> <operator>%</operator> <name>ncols</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>no_self_edges</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>simple_rand_x</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
            <comment type="line">// A (i,j) = x</comment>
            <expr_stmt><expr><name><name>I</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>J</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>X</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ntuples</name><operator>++</operator></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>make_symmetric</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// A (j,i) = x</comment>
                <expr_stmt><expr><name><name>I</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>J</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>X</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ntuples</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// build the matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>GrB_SECOND_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>A_output</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
