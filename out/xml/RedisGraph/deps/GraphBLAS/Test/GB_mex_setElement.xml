<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_setElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_setElement: interface for A(i,j) = x</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// x = A (i,j), where i and j are zero-based.  If i and j arrays, then</comment>
<comment type="line">// x (k) = A (i (k), j (k)) is done for all k.</comment>

<comment type="line">// I and J and zero-based</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"A = GB_mex_setElement (A, I, J, X, debug_wait,scalar)"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>bool</name></type> <name>debug_wait</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>do_scalar</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    GrB_Matrix_free_(&amp;A) ;              \
    GB_mx_put_global (true) ;           \
}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>__GNUC__</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wmissing-prototypes"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Return</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ GrB_Scalar_free (&amp;Scalar) ; return (info) ; }</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// set all elements of a matrix and return if an error is encountered</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setEl</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                                             \
<cpp:value>GrB_Info set_ ## name                                                       \
(GrB_Matrix A, type *X, GrB_Index *I, GrB_Index *J, GrB_Index ni)           \
{                                                                           \
    GrB_Info info ;                                                         \
    GrB_Scalar Scalar = NULL ;                                              \
    if (do_scalar)                                                          \
    {                                                                       \
        info = GrB_Scalar_new (&amp;Scalar, xtype) ;                            \
        if (info != GrB_SUCCESS)                                            \
        {                                                                   \
            Return (info) ;                                                 \
        }                                                                   \
    }                                                                       \
    for (int64_t k = 0 ; k &lt; ni ; k++)                                      \
    {                                                                       \
        if (do_scalar)                                                      \
        {                                                                   \
            info = prefix ## Scalar_setElement_ ## name                     \
                (Scalar, AMPERSAND (X [k])) ;                               \
            if (info != GrB_SUCCESS)                                        \
            {                                                               \
                Return (info) ;                                             \
            }                                                               \
            info = GrB_Matrix_setElement_Scalar                             \
                (A, Scalar, I [k], J [k]) ;                                 \
        }                                                                   \
        else                                                                \
        {                                                                   \
            info = prefix ## Matrix_setElement_ ## name                     \
                (A, AMPERSAND (X [k]), I [k], J [k]) ;                      \
        }                                                                   \
        if (info != GrB_SUCCESS)                                            \
        {                                                                   \
            Return (info) ;                                                 \
        }                                                                   \
    }                                                                       \
    if (debug_wait)                                                         \
    {                                                                       \
        Return (GB_wait (A, "A", NULL)) ;                                   \
    }                                                                       \
    Return (GrB_SUCCESS) ;                                                  \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// create all the local set_TYPE functions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMPERSAND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>   , <argument><expr><name>bool</name></expr></argument>          )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>INT8</name></expr></argument>   , <argument><expr><name>int8_t</name></expr></argument>        )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UINT8</name></expr></argument>  , <argument><expr><name>uint8_t</name></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>INT16</name></expr></argument>  , <argument><expr><name>int16_t</name></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UINT16</name></expr></argument> , <argument><expr><name>uint16_t</name></expr></argument>      )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>INT32</name></expr></argument>  , <argument><expr><name>int32_t</name></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UINT32</name></expr></argument> , <argument><expr><name>uint32_t</name></expr></argument>      )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>INT64</name></expr></argument>  , <argument><expr><name>int64_t</name></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UINT64</name></expr></argument> , <argument><expr><name>uint64_t</name></expr></argument>      )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>FP32</name></expr></argument>   , <argument><expr><name>float</name></expr></argument>         )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>FP64</name></expr></argument>   , <argument><expr><name>double</name></expr></argument>        )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>FC32</name></expr></argument>   , <argument><expr><name>GxB_FC32_t</name></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>FC64</name></expr></argument>   , <argument><expr><name>GxB_FC64_t</name></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>AMPERSAND</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMPERSAND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;x</cpp:value></cpp:define>
<expr_stmt><expr><call><name>setEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UDT</name></expr></argument>    , <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>AMPERSAND</name></cpp:undef>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// set all elements of a vector and return if an error is encountered</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsetEl</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>name</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                                            \
<cpp:value>GrB_Info vset_ ## name                                                      \
(GrB_Matrix A, type *X, GrB_Index *I, GrB_Index ni)                         \
{                                                                           \
    GrB_Info info ;                                                         \
    GrB_Scalar Scalar = NULL ;                                              \
    if (do_scalar)                                                          \
    {                                                                       \
        info = GrB_Scalar_new (&amp;Scalar, xtype) ;                            \
        if (info != GrB_SUCCESS) Return (info) ;                            \
    }                                                                       \
    GrB_Vector w = (GrB_Vector) A ;                                         \
    for (int64_t k = 0 ; k &lt; ni ; k++)                                      \
    {                                                                       \
        if (do_scalar)                                                      \
        {                                                                   \
            info = prefix ## Scalar_setElement_ ## name                     \
                (Scalar, AMPERSAND (X [k])) ;                               \
            if (info != GrB_SUCCESS) Return (info) ;                        \
            info = GrB_Vector_setElement_Scalar                             \
                (w, Scalar, I [k]) ;                                        \
        }                                                                   \
        else                                                                \
        {                                                                   \
            info = prefix ## Vector_setElement_ ## name                     \
                (w, AMPERSAND (X [k]), I [k]) ;                             \
        }                                                                   \
        if (info != GrB_SUCCESS) Return (info) ;                            \
    }                                                                       \
    if (debug_wait)                                                         \
    {                                                                       \
        Return (GB_wait (A, "A", NULL)) ;                                   \
    }                                                                       \
    Return (GrB_SUCCESS) ;                                                  \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// create all the local set_TYPE functions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMPERSAND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>   , <argument><expr><name>bool</name></expr></argument>          )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>INT8</name></expr></argument>   , <argument><expr><name>int8_t</name></expr></argument>        )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UINT8</name></expr></argument>  , <argument><expr><name>uint8_t</name></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>INT16</name></expr></argument>  , <argument><expr><name>int16_t</name></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UINT16</name></expr></argument> , <argument><expr><name>uint16_t</name></expr></argument>      )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>INT32</name></expr></argument>  , <argument><expr><name>int32_t</name></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UINT32</name></expr></argument> , <argument><expr><name>uint32_t</name></expr></argument>      )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>INT64</name></expr></argument>  , <argument><expr><name>int64_t</name></expr></argument>       )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UINT64</name></expr></argument> , <argument><expr><name>uint64_t</name></expr></argument>      )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>FP32</name></expr></argument>   , <argument><expr><name>float</name></expr></argument>         )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>FP64</name></expr></argument>   , <argument><expr><name>double</name></expr></argument>        )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>FC32</name></expr></argument>   , <argument><expr><name>GxB_FC32_t</name></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>FC64</name></expr></argument>   , <argument><expr><name>GxB_FC64_t</name></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>AMPERSAND</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMPERSAND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>&amp;x</cpp:value></cpp:define>
<expr_stmt><expr><call><name>vsetEl</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>UDT</name></expr></argument>    , <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>AMPERSAND</name></cpp:undef>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_setElement</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Y</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>ni</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>I_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>nj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>J_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_list</name></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get A (deep copy)</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> \
    <cpp:value>A = GB_mx_mxArray_to_Matrix (pargin [0], "A input", true, true) ;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>GrB_Matrix_free_(&amp;A) ;</cpp:value></cpp:define>
    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get I</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_list</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_list</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I is invalid; must be a list"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get J</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>J</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_list</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_list</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J is invalid; must be a list"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>!=</operator> <name>nj</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I and J must be the same size"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get X</comment>
    <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>!=</operator> <call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I and X must be the same size"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>mxIsNumeric</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>mxIsLogical</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X must be a numeric or logical array"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X cannot be sparse"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get debug_wait (if true, to GB_wait after setElements)</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>debug_wait</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get do_scalar (if true use GrB_*_setElement_Scalar)</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>do_scalar</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mxIsComplex</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>Complex</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <call><name>mxGetComplexDoubles</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <call><name>GB_mx_Type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X must be numeric"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></init></decl> ;</decl_stmt>

    <comment type="line">// A (i,j) = x, for a list of elements</comment>

    <comment type="line">// the METHOD (...) macro is not used on each call to setElement, but</comment>
    <comment type="line">// to all of them.  Thus, if any failure occurs, the computation is rolled</comment>
    <comment type="line">// back to the very beginning, and another fresh, deep, copy of A is made,</comment>
    <comment type="line">// and the sequence of setElements is tried again.  If a setElement fails</comment>
    <comment type="line">// by running out of memory, it clears to whole matrix, so recovery cannot</comment>
    <comment type="line">// be made.</comment>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// test GrB_Vector_setElement</comment>
        <switch>switch <condition>(<expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_BOOL</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>       <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_INT8</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name>     <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_INT16</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name>    <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_INT32</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name>    <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_INT64</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name>    <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_UINT8</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name>    <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_UINT16</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name>   <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_UINT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name>   <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_UINT64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name>   <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_FP32</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name>      <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_FP64</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name>     <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_FC32</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_FC64</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UDT_code</name></expr>    :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vset_UDT</name>    <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name>       <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <default>default:</default>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// test GrB_Matrix_setElement</comment>
        <switch>switch <condition>(<expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_BOOL</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>       <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_INT8</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name>     <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_INT16</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name>    <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_INT32</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name>    <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_INT64</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name>    <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_UINT8</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name>    <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_UINT16</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name>   <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_UINT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name>   <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_UINT64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name>   <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_FP32</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name>      <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_FP64</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name>     <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_FC32</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_FC64</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UDT_code</name></expr>    :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>set_UDT</name>    <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name>       <operator>*</operator><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <default>default:</default>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// only do debug checks after adding lots of tuples</comment>
    <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A added pending tuples"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> </block_content>}</block></if></if_stmt>

    <comment type="line">// return A as a struct and free the GraphBLAS A</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><literal type="string">"A output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
