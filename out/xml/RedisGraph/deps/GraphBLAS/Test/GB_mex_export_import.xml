<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_export_import.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_export_import: export and then reimport a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// format_matrix for matrices and vectors:</comment>

<comment type="line">//      case 1 :    // standard CSR</comment>
<comment type="line">//      case 2 :    // standard CSC</comment>
<comment type="line">//      case 3 :    // hypersparse CSR</comment>
<comment type="line">//      case 4 :    // hypersparse CSC</comment>
<comment type="line">//      case 5 :    // bitmapR</comment>
<comment type="line">//      case 6 :    // bitmapC</comment>
<comment type="line">//      case 7 :    // FullR</comment>
<comment type="line">//      case 8 :    // FullC</comment>
<comment type="line">//      case 9 :    // to control == 11, then bitmap</comment>

<comment type="line">// format_export: for export/import</comment>

<comment type="line">//      case 0 :    // standard CSR</comment>
<comment type="line">//      case 1 :    // standard CSC</comment>
<comment type="line">//      case 2 :    // hypersparse CSR</comment>
<comment type="line">//      case 3 :    // hypersparse CSC</comment>
<comment type="line">//      case 4 :    // bitmapR</comment>
<comment type="line">//      case 5 :    // bitmapC</comment>
<comment type="line">//      case 6 :    // FullR</comment>
<comment type="line">//      case 7 :    // FullC</comment>
<comment type="line">//      case 8 :    // standard CSR, not jumbled</comment>
<comment type="line">//      case 9 :    // standard CSC, not jumbled</comment>
<comment type="line">//      case 10 :   // hypersparse CSR, not jumbled</comment>
<comment type="line">//      case 11 :   // hypersparse CSC, not jumbled</comment>

<comment type="line">//      case 12 :   // CSR using GrB_Matrix_export/import    (matrices only)</comment>
<comment type="line">//      case 13 :   // CSC using GrB_Matrix_export/import    (matrices only)</comment>
<comment type="line">//      case 14 :   // COO using GrB_Matrix_export/import    (matrices only)</comment>
<comment type="line">//      case 15 :   // FullR using GrB_Matrix_export/import  (matrices only)</comment>
<comment type="line">//      case 16 :   // FullC using GrB_Matrix_export/import  (matrices only)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_export_import (A, format_matrix, format_export, mode)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_WORK</name></cpp:macro>                                   \
<cpp:value>{                                                   \
    if (Cp != NULL) { mxFree (Cp) ; Cp = NULL ; }   \
    if (Ch != NULL) { mxFree (Ch) ; Ch = NULL ; }   \
    if (Cb != NULL) { mxFree (Cb) ; Cb = NULL ; }   \
    if (Ci != NULL) { mxFree (Ci) ; Ci = NULL ; }   \
    if (Cx != NULL) { mxFree (Cx) ; Cx = NULL ; }   \
    GrB_Matrix_free_(&amp;C) ;                          \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                                \
<cpp:value>{                                               \
    FREE_WORK ;                                 \
    GrB_Matrix_free_(&amp;A) ;                      \
    GrB_Descriptor_free_(&amp;desc) ;               \
    GB_mx_put_global (true) ;                   \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                              \
<cpp:value>{                                               \
    info = method ;                             \
    if (info != GrB_SUCCESS)                    \
    {                                           \
        FREE_WORK ;                             \
        return (info) ;                         \
    }                                           \
}</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Cp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ch</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ci</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Tp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ti</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Cx</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Tx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>Cb</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GB_Context</name></type> <name>Context</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ncols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Type</name></type> <name>type2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows2</name></decl>, <decl><type ref="prev"/><name>ncols2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>typesize</name></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Cp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Tp_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ch_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Cb_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ci_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Ti_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Cx_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Tx_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>iso</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ignore</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>jumbled</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>

<function_decl><type><name>GrB_Info</name></type> <name>export_import</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>format_matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format_export</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>GrB_Info</name></type> <name>vector_export_import</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>format_matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format_export</name></decl></parameter>)</parameter_list> ;</function_decl>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_exporter: export a matrix with GrB_Matrix_export_T</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>GB_exporter</name> <parameter_list>(<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ai</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ax</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap_len</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ai_len</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ax_len</name></decl></parameter>, <parameter><decl><type><name>GrB_Format</name></type> <name>format</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_BOOL_</name>  <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>       <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_INT8_</name>  <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name>     <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_INT16_</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name>    <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_INT32_</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name>    <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_INT64_</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name>    <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_UINT8_</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name>    <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_UINT16_</name><argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name>   <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_UINT32_</name><argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name>   <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_UINT64_</name><argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name>   <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_FP32_</name>  <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name>      <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_FP64_</name>  <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name>     <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GxB_Matrix_export_FC32_</name>  <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GxB_Matrix_export_FC64_</name>  <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UDT_code</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_export_UDT_</name>   <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name>       <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <default>default             :</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_NOT_IMPLEMENTED</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_importer: import a matrix with GrB_Matrix_import_T</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>GB_importer</name> <parameter_list>(<parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Ap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Ai</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Ax</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>Ap_len</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>Ai_len</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>Ax_len</name></decl></parameter>, <parameter><decl><type><name>GrB_Format</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_BOOL_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>bool</name>       <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_INT8_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int8_t</name>     <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_INT16_</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name>    <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_INT32_</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name>    <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_INT64_</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name>    <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_UINT8_</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name>    <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name>   <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name>   <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name>   <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_FP32_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name>      <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_FP64_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>double</name>     <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GxB_Matrix_import_FC32_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>GxB_Matrix_import_FC64_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UDT_code</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>GrB_Matrix_import_UDT_</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name>       <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name>Ap_len</name></expr></argument>, <argument><expr><name>Ai_len</name></expr></argument>, <argument><expr><name>Ax_len</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <default>default             :</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_NOT_IMPLEMENTED</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_export_import mexFunction</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get A (shallow copy)</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <comment type="line">// get matrix format (1 to 8, and -1 to -8)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>format_matrix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>do_matrix</name> <init>= <expr><operator>(</operator><name>format_matrix</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>format_matrix</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>format_matrix</name> <operator>=</operator> <operator>-</operator><name>format_matrix</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get export/import format (0 to 11)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>format_export</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>

    <comment type="line">// get mode: 0:default, 502:secure, else:fast</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GxB_SECURE_IMPORT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_IMPORT</name></expr></argument>, <argument><expr><name>GxB_SECURE_IMPORT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="line">// mode is GxB_FAST_IMPORT)</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_IMPORT</name></expr></argument>, <argument><expr><name>GxB_FAST_IMPORT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro>   <cpp:value>GrB_Matrix_dup (&amp;C, A) ;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro>  <cpp:value>GrB_Matrix_free (&amp;C) ;</cpp:value></cpp:define>

    <comment type="line">// C = deep copy of A</comment>
    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>

    <comment type="line">// convert matrix, export, then import</comment>
    <if_stmt><if>if <condition>(<expr><name>do_matrix</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>export_import</name> <argument_list>(<argument><expr><name>format_matrix</name></expr></argument>, <argument><expr><name>format_export</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>FREE_DEEP_COPY</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>

    <comment type="line">// convert vector, export, then import, if C can be cast as a GrB_Vector</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>format_export</name> <operator>&lt;=</operator> <literal type="number">11</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>vector_export_import</name> <argument_list>(<argument><expr><name>format_matrix</name></expr></argument>, <argument><expr><name>format_export</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// return C as a struct and free the GraphBLAS C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>export_import</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>format_matrix</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>format_export</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert C to the requested format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>format_matrix</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// standard CSR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_NEVER_HYPER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">2</literal></expr> :</case>    <comment type="line">// standard CSC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_NEVER_HYPER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">3</literal></expr> :</case>    <comment type="line">// hypersparse CSR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_ALWAYS_HYPER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>,
                <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">4</literal></expr> :</case>    <comment type="line">// hypersparse CSC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_ALWAYS_HYPER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>,
                <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">5</literal></expr> :</case>    <comment type="line">// bitmapR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">6</literal></expr> :</case>    <comment type="line">// bitmapC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">7</literal></expr> :</case>    <comment type="line">// FullR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_FULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">8</literal></expr> :</case>    <comment type="line">// FullC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_FULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">9</literal></expr> :</case>    <comment type="line">// to control == 11, then bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>,
               <argument><expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default :</default> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"invalid mtx format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export then import</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type2</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows2</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols2</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>typesize</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <switch>switch <condition>(<expr><name>format_export</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">0</literal></expr> :</case>    <comment type="line">// standard CSR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// standard CSC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">2</literal></expr> :</case>    <comment type="line">// hypersparse CSR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>,
                <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">3</literal></expr> :</case>    <comment type="line">// hypersparse CSC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>,
                <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">4</literal></expr> :</case>    <comment type="line">// bitmapR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_BitmapR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cb_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_BitmapR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cb_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">5</literal></expr> :</case>    <comment type="line">// bitmapC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_BitmapC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cb_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_BitmapC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cb_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">6</literal></expr> :</case>    <comment type="line">// FullR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_FullR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_FullR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">7</literal></expr> :</case>    <comment type="line">// FullC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_FullC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_FullC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">8</literal></expr> :</case>    <comment type="line">// standard CSR, not jumbled</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>false</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">9</literal></expr> :</case>    <comment type="line">// standard CSC, not jumbled</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>false</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">10</literal></expr> :</case>    <comment type="line">// hypersparse CSR, not jumbled</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>,
                <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">11</literal></expr> :</case>    <comment type="line">// hypersparse CSC, not jumbled</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>,
                <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">12</literal></expr> :</case>   <comment type="line">// CSR using GrB_Matrix_export/import    (matrices only)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// export in CSR format, then free C</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_exportSize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Tp_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ti_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tx_len</name></expr></argument>,
                <argument><expr><name>GrB_CSR_FORMAT</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Tp</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Tp_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Ti</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Ti_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Tx</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Tx_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>typesize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_exporter</name> <argument_list>(<argument><expr><name>Tp</name></expr></argument>, <argument><expr><name>Ti</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tp_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ti_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tx_len</name></expr></argument>, <argument><expr><name>GrB_CSR_FORMAT</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// import in CSR format, then free Tp, Ti, Tx</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_importer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>, <argument><expr><name>nrows2</name></expr></argument>, <argument><expr><name>ncols2</name></expr></argument>, <argument><expr><name>Tp</name></expr></argument>, <argument><expr><name>Ti</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>,
                <argument><expr><name>Tp_len</name></expr></argument>, <argument><expr><name>Ti_len</name></expr></argument>, <argument><expr><name>Tx_len</name></expr></argument>, <argument><expr><name>GrB_CSR_FORMAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Tp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Ti</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Tx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">13</literal></expr> :</case>   <comment type="line">// CSC using GrB_Matrix_export/import    (matrices only)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// export in CSC format, then free C</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_exportSize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Tp_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ti_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tx_len</name></expr></argument>,
                <argument><expr><name>GrB_CSC_FORMAT</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Tp</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Tp_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Ti</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Ti_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Tx</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Tx_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>typesize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_exporter</name> <argument_list>(<argument><expr><name>Tp</name></expr></argument>, <argument><expr><name>Ti</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tp_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ti_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tx_len</name></expr></argument>, <argument><expr><name>GrB_CSC_FORMAT</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// import in CSC format, then free Tp, Ti, Tx</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_importer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>, <argument><expr><name>nrows2</name></expr></argument>, <argument><expr><name>ncols2</name></expr></argument>, <argument><expr><name>Tp</name></expr></argument>, <argument><expr><name>Ti</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>,
                <argument><expr><name>Tp_len</name></expr></argument>, <argument><expr><name>Ti_len</name></expr></argument>, <argument><expr><name>Tx_len</name></expr></argument>, <argument><expr><name>GrB_CSC_FORMAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Tp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Ti</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Tx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

<comment type="line">//      //----------------------------------------------------------------------</comment>
<comment type="line">//      case 15 :   // FullR using GrB_Matrix_export/import  (matrices only)</comment>
<comment type="line">//      //----------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">//          // export in FullR format, then free C</comment>
<comment type="line">//          OK (GrB_Matrix_exportSize (&amp;Tp_len, &amp;Ti_len, &amp;Tx_len,</comment>
<comment type="line">//              GrB_DENSE_ROW_FORMAT, C)) ;</comment>
<comment type="line">//          Tx = mxMalloc ((Tx_len+1) * typesize) ;</comment>
<comment type="line">//          OK (GB_exporter (Tp, Ti, Tx, &amp;Tp_len, &amp;Ti_len, &amp;Tx_len, GrB_DENSE_ROW_FORMAT, C)) ;</comment>
<comment type="line">//          OK (GrB_Matrix_free (&amp;C)) ;</comment>
<comment type="line">//          // import in FullR format, then free Tx</comment>
<comment type="line">//          OK (GB_importer (&amp;C, type2, nrows2, ncols2, Tp, Ti, Tx,</comment>
<comment type="line">//              Tp_len, Ti_len, Tx_len, GrB_DENSE_ROW_FORMAT)) ;</comment>
<comment type="line">//          mxFree (Tx) ;</comment>
<comment type="line">//          break ;</comment>

<comment type="line">//      //----------------------------------------------------------------------</comment>
<comment type="line">//      case 16 :   // FullC using GrB_Matrix_export/import  (matrices only)</comment>
<comment type="line">//      //----------------------------------------------------------------------</comment>
<comment type="line">//</comment>
<comment type="line">//          // export in FullC format, then free C</comment>
<comment type="line">//          OK (GrB_Matrix_exportSize (&amp;Tp_len, &amp;Ti_len, &amp;Tx_len,</comment>
<comment type="line">//              GrB_DENSE_COL_FORMAT, C)) ;</comment>
<comment type="line">//          Tx = mxMalloc ((Tx_len+1) * typesize) ;</comment>
<comment type="line">//          OK (GB_exporter (Tp, Ti, Tx, &amp;Tp_len, &amp;Ti_len, &amp;Tx_len, GrB_DENSE_COL_FORMAT, C)) ;</comment>
<comment type="line">//          OK (GrB_Matrix_free (&amp;C)) ;</comment>
<comment type="line">//          // import in CSR format, then free Tx</comment>
<comment type="line">//          OK (GB_importer (&amp;C, type2, nrows2, ncols2, Tp, Ti, Tx,</comment>
<comment type="line">//              Tp_len, Ti_len, Tx_len, GrB_DENSE_COL_FORMAT)) ;</comment>
<comment type="line">//          mxFree (Tx) ;</comment>
<comment type="line">//          break ;</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">14</literal></expr> :</case>   <comment type="line">// COO using GrB_Matrix_export/import    (matrices only)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// export in COO format, then free C</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_exportSize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Tp_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ti_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tx_len</name></expr></argument>,
                <argument><expr><name>GrB_COO_FORMAT</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Tp</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Tp_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Ti</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Ti_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Tx</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><name>Tx_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>typesize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_exporter</name> <argument_list>(<argument><expr><name>Tp</name></expr></argument>, <argument><expr><name>Ti</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tp_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ti_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tx_len</name></expr></argument>, <argument><expr><name>GrB_COO_FORMAT</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// import in COO format, then free Tp, Ti, Tx</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><call><name>GB_importer</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>, <argument><expr><name>nrows2</name></expr></argument>, <argument><expr><name>ncols2</name></expr></argument>, <argument><expr><name>Tp</name></expr></argument>, <argument><expr><name>Ti</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>,
                <argument><expr><name>Tp_len</name></expr></argument>, <argument><expr><name>Ti_len</name></expr></argument>, <argument><expr><name>Tx_len</name></expr></argument>, <argument><expr><name>GrB_COO_FORMAT</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Tp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Ti</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name>Tx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default :</default> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"invalid export format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>vector_export_import</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>format_matrix</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>format_export</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert C as a vector to the requested format, if available</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>format_matrix</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// standard CSR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">2</literal></expr> :</case>    <comment type="line">// standard CSC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set_</name><argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>,
                <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">3</literal></expr> :</case>    <comment type="line">// hypersparse CSR </comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">4</literal></expr> :</case>    <comment type="line">// hypersparse CSC (will be sparse, not hypersparse)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set_</name><argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>,
                <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">5</literal></expr> :</case>    <comment type="line">// bitmapR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">6</literal></expr> :</case>    <comment type="line">// bitmapC</comment>
        <case>case <expr><literal type="number">9</literal></expr> :</case>    <comment type="line">// bitmapC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set_</name><argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>,
                <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">7</literal></expr> :</case>    <comment type="line">// FullR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">8</literal></expr> :</case>    <comment type="line">// FullC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set_</name><argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>,
                <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_FULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default :</default> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"invalid format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export then import</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>format_export</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">0</literal></expr> :</case>    <comment type="line">// standard CSR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// standard CSC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">2</literal></expr> :</case>    <comment type="line">// hypersparse CSR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">3</literal></expr> :</case>    <comment type="line">// hypersparse CSC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">4</literal></expr> :</case>    <comment type="line">// bitmapR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">5</literal></expr> :</case>    <comment type="line">// bitmapC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_Bitmap</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cb_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_Bitmap</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cb_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">6</literal></expr> :</case>    <comment type="line">// FullR</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">7</literal></expr> :</case>    <comment type="line">// FullC</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_Full</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_Full</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">8</literal></expr> :</case>    <comment type="line">// standard CSR, not jumbled</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">9</literal></expr> :</case>    <comment type="line">// standard CSC, not jumbled</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>Ci_size</name></expr></argument>, <argument><expr><name>Cx_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">10</literal></expr> :</case>    <comment type="line">// hypersparse CSR, not jumbled</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">11</literal></expr> :</case>    <comment type="line">// hypersparse CSC, not jumbled</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        <default>default :</default> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"invalid format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
