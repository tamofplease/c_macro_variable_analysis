<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_string_to_UnaryOp.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_string_to_UnaryOp.c: get a GraphBLAS operator from built-in strings</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<comment type="line">// opname_mx: a built-in string defining the operator name</comment>

<comment type="line">// optype_mx: a built-in string defining the operator type for built-in ops</comment>

<comment type="line">// default_optype: default type if optype_mx is NULL</comment>

<function><type><name>bool</name></type> <name>GB_mx_string_to_UnaryOp</name>            <comment type="line">// true if successful, false otherwise</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_UnaryOp</name> <modifier>*</modifier></type><name>op_handle</name></decl></parameter>,             <comment type="line">// the unary op</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>default_optype</name></decl></parameter>,      <comment type="line">// default operator type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>opname_mx</name></decl></parameter>,           <comment type="line">// built-in string with operator name</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>optype_mx</name></decl></parameter>,           <comment type="line">// built-in string with operator type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>user_complex</name></decl></parameter>             <comment type="line">// true if X is complex</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_UnaryOp</name></type> <name>op</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the string</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>opname</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GB_mx_mxArray_to_string</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>opname_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the optype from the optype_mx string, if present</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>optype</name> <init>= <expr><call><name>GB_mx_string_to_Type</name> <argument_list>(<argument><expr><name>optype_mx</name></expr></argument>, <argument><expr><name>default_optype</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>optype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unrecognized op type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert the string to a GraphBLAS unary operator, built-in or Complex</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>user_complex</name> <operator>&amp;&amp;</operator> <name>optype</name> <operator>==</operator> <name>Complex</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// X complex</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>                 <comment type="line">// no default Complex operator</comment>
        </block_content>}</block></if>

        <comment type="line">// 7 unary operators z=f(x), both x,z are Complex (6 same as builtin)</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_one</name></expr>      ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"identity"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_identity</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ainv"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_ainv</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"abs"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_abs</name></expr>      ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"minv"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_minv</name></expr>     ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// this is not built-in</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"not"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_not</name></expr>      ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"conj"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_conj</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"real"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_real</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"imag"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_imag</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"carg"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_angle</name></expr>    ;</expr_stmt> </block_content>}</block></if>

        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"Complex op unrecognized"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// X is real (Z might be Complex)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name></decl> ;</decl_stmt>

             <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ONE_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"identity"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_IDENTITY_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ainv"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_AINV_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"abs"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ABS_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"minv"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_MINV_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"not"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LNOT_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"conj"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_CONJ_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"real"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_CREAL_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"imag"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_CIMAG_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"carg"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_CARG_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"sqrt"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SQRT_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LOG_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"exp"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_EXP_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"sin"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SIN_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"cos"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_COS_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"tan"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_TAN_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"asin"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ASIN_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"acos"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ACOS_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"atan"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ATAN_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"sinh"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SINH_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"cosh"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_COSH_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"tanh"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_TANH_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"asinh"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ASINH_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"acosh"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ACOSH_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"atanh"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ATANH_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"signum"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SIGNUM_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ceil"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_CEIL_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"floor"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FLOOR_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"round"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ROUND_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"trunc"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_TRUNC_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"exp2"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_EXP2_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"expm1"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_EXPM1_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"log10"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LOG10_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"log1p"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LOG1P_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"log2"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LOG2_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"lgamma"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LGAMMA_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"tgamma"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_TGAMMA_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"erf"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ERF_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"erfc"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ERFC_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"cbrt"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_CBRT_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"frexpx"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FREXPX_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"frexpe"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FREXPE_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isinf"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISINF_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isnan"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISNAN_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isfinite"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISFINITE_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitnot"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BNOT_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitcmp"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BNOT_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bnot"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BNOT_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bcmp"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BNOT_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"positioni"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POSITIONI_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>         )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POSITIONI_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"positioni1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POSITIONI1_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"i1"</literal></expr></argument>        )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POSITIONI1_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"positionj"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POSITIONJ_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"j"</literal></expr></argument>         )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POSITIONJ_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"positionj1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POSITIONJ1_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"j1"</literal></expr></argument>        )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POSITIONJ1_unop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unrecognized function name"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>optype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>is64</name> <init>= <expr><operator>(</operator><name>xcode</name> <operator>==</operator> <name>GB_INT64_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>xcode</name> <operator>==</operator> <name>GB_INT64_code</name> <operator>||</operator> <name>xcode</name> <operator>==</operator> <name>GB_INT32_code</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_ONE_unop_code</name></expr>:</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONE_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_IDENTITY_unop_code</name></expr>:</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_IDENTITY_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_IDENTITY_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_IDENTITY_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ABS_unop_code</name></expr>:</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ABS_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ABS_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ABS_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_AINV_unop_code</name></expr>:</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_AINV_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_AINV_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_AINV_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MINV_unop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINV_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_MINV_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_MINV_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LNOT_unop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LNOT</name></expr>        ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LNOT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BNOT_unop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BNOT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BNOT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BNOT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BNOT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BNOT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BNOT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BNOT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BNOT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// unary operators for floating-point types (real and complex)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

            <case>case <expr><name>GB_SQRT_unop_code</name></expr> :</case>    <comment type="line">// z = sqrt (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SQRT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SQRT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SQRT_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SQRT_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LOG_unop_code</name></expr> :</case>     <comment type="line">// z = log (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_EXP_unop_code</name></expr> :</case>     <comment type="line">// z = exp (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXP_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXP_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXP_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXP_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


            <case>case <expr><name>GB_SIN_unop_code</name></expr> :</case>     <comment type="line">// z = sin (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SIN_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SIN_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SIN_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SIN_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_COS_unop_code</name></expr> :</case>     <comment type="line">// z = cos (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COS_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COS_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COS_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COS_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_TAN_unop_code</name></expr> :</case>     <comment type="line">// z = tan (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TAN_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TAN_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TAN_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TAN_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


            <case>case <expr><name>GB_ASIN_unop_code</name></expr> :</case>    <comment type="line">// z = asin (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ASIN_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ASIN_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ASIN_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ASIN_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ACOS_unop_code</name></expr> :</case>    <comment type="line">// z = acos (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ACOS_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ACOS_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ACOS_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ACOS_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ATAN_unop_code</name></expr> :</case>    <comment type="line">// z = atan (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATAN_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATAN_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATAN_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATAN_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


            <case>case <expr><name>GB_SINH_unop_code</name></expr> :</case>    <comment type="line">// z = sinh (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SINH_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SINH_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SINH_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SINH_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_COSH_unop_code</name></expr> :</case>    <comment type="line">// z = cosh (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COSH_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COSH_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COSH_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COSH_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_TANH_unop_code</name></expr> :</case>    <comment type="line">// z = tanh (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TANH_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TANH_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TANH_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TANH_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


            <case>case <expr><name>GB_ASINH_unop_code</name></expr> :</case>   <comment type="line">// z = asinh (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ASINH_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ASINH_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ASINH_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ASINH_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ACOSH_unop_code</name></expr> :</case>   <comment type="line">// z = acosh (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ACOSH_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ACOSH_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ACOSH_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ACOSH_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ATANH_unop_code</name></expr> :</case>   <comment type="line">// z = atanh (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATANH_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATANH_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATANH_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATANH_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


            <case>case <expr><name>GB_SIGNUM_unop_code</name></expr> :</case>    <comment type="line">// z = signum (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SIGNUM_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SIGNUM_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SIGNUM_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SIGNUM_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_CEIL_unop_code</name></expr> :</case>    <comment type="line">// z = ceil (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CEIL_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CEIL_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CEIL_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CEIL_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_FLOOR_unop_code</name></expr> :</case>   <comment type="line">// z = floor (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FLOOR_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FLOOR_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FLOOR_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FLOOR_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ROUND_unop_code</name></expr> :</case>   <comment type="line">// z = round (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ROUND_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ROUND_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ROUND_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ROUND_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_TRUNC_unop_code</name></expr> :</case>   <comment type="line">// z = trunc (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TRUNC_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TRUNC_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TRUNC_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TRUNC_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


            <case>case <expr><name>GB_EXP2_unop_code</name></expr> :</case>    <comment type="line">// z = exp2 (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXP2_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXP2_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXP2_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXP2_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_EXPM1_unop_code</name></expr> :</case>   <comment type="line">// z = expm1 (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXPM1_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXPM1_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXPM1_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EXPM1_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LOG10_unop_code</name></expr> :</case>   <comment type="line">// z = log10 (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG10_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG10_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG10_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG10_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LOG1P_unop_code</name></expr> :</case>   <comment type="line">// z = log1P (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG1P_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG1P_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG1P_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG1P_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LOG2_unop_code</name></expr> :</case>    <comment type="line">// z = log2 (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG2_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG2_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG2_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOG2_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// unary operators for real floating-point types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

            <case>case <expr><name>GB_LGAMMA_unop_code</name></expr> :</case>  <comment type="line">// z = lgamma (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LGAMMA_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LGAMMA_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_TGAMMA_unop_code</name></expr> :</case>  <comment type="line">// z = tgamma (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TGAMMA_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TGAMMA_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ERF_unop_code</name></expr> :</case>     <comment type="line">// z = erf (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ERF_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ERF_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ERFC_unop_code</name></expr> :</case>    <comment type="line">// z = erfc (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ERFC_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ERFC_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_CBRT_unop_code</name></expr> :</case>    <comment type="line">// z = cbrt (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CBRT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CBRT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_FREXPX_unop_code</name></expr> :</case>  <comment type="line">// z = frexpx (x), mantissa from frexp</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FREXPX_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FREXPX_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_FREXPE_unop_code</name></expr> :</case>  <comment type="line">// z = frexpe (x), exponent from frexp</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FREXPE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FREXPE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// unary operators for complex types only</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

            <case>case <expr><name>GB_CONJ_unop_code</name></expr> :</case>    <comment type="line">// z = conj (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CONJ_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CONJ_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// unary operators where z is real and x is complex</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

            <case>case <expr><name>GB_CREAL_unop_code</name></expr> :</case>   <comment type="line">// z = creal (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CREAL_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CREAL_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_CIMAG_unop_code</name></expr> :</case>   <comment type="line">// z = cimag (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CIMAG_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CIMAG_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_CARG_unop_code</name></expr> :</case>    <comment type="line">// z = carg (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CARG_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CARG_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// unary operators where z is bool and x is any floating-point type</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

            <case>case <expr><name>GB_ISINF_unop_code</name></expr> :</case>   <comment type="line">// z = isinf (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISINF_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISINF_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISINF_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISINF_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISNAN_unop_code</name></expr> :</case>   <comment type="line">// z = isnan (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNAN_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNAN_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNAN_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNAN_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISFINITE_unop_code</name></expr>:</case> <comment type="line">// z = isfinite (x)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISFINITE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISFINITE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISFINITE_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISFINITE_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// positional ops</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

            <case>case <expr><name>GB_POSITIONI_unop_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_POSITIONI_INT64</name></expr>  </then><else>: <expr><name>GxB_POSITIONI_INT32</name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_POSITIONI1_unop_code</name></expr> :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_POSITIONI1_INT64</name></expr> </then><else>: <expr><name>GxB_POSITIONI1_INT32</name></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_POSITIONJ_unop_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_POSITIONJ_INT64</name></expr>  </then><else>: <expr><name>GxB_POSITIONJ_INT32</name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_POSITIONJ1_unop_code</name></expr> :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_POSITIONJ1_INT64</name></expr> </then><else>: <expr><name>GxB_POSITIONJ1_INT32</name></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>

    <comment type="line">//--------------------------------------------------------------------------</comment>

            <default>default :</default> 
                <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown unary operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// return the unary operator to the caller</comment>
    <expr_stmt><expr><call><name>ASSERT_UNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"got unary op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_handle</name><operator>)</operator> <operator>=</operator> <name>op</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
