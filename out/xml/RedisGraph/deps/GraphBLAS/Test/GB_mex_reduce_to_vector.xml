<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_reduce_to_vector.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_reduce_to_vector: c = accum(c,reduce_to_vector(A))</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Reduce a matrix to a vector: w&lt;mask&gt; = accum (w, reduce_to_vector (A))</comment>

<comment type="line">// Test interface to GrB_reduce, which relies on GrB_Matrix_reduce_BinaryOp</comment>
<comment type="line">// and GrB_Matrix_reduce_Monoid to reduce a matrix to a vector.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"w = GB_mex_reduce_to_vector (w, mask, accum, reduce, A, desc)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    GrB_Matrix_free_(&amp;A) ;              \
    GrB_Vector_free_(&amp;w) ;              \
    GrB_Vector_free_(&amp;mask) ;           \
    GrB_Descriptor_free_(&amp;desc) ;       \
    if (!user_complex)                  \
    {                                   \
        GrB_Monoid_free_(&amp;reduce) ;     \
    }                                   \
    GB_mx_put_global (true) ;           \
}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>w</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>mask</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>reduce</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>user_complex</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">5</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get w (make a deep copy)</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> \
    <cpp:value>w = GB_mx_mxArray_to_Vector (pargin [0], "w input", true, true) ;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>GrB_Vector_free_(&amp;w) ;</cpp:value></cpp:define>
    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"w failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get mask (shallow copy)</comment>
    <expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Vector</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mask"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"mask failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get A (shallow copy)</comment>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get reduce operator</comment>
    <expr_stmt><expr><name>user_complex</name> <operator>=</operator> <operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"op"</literal></expr></argument>,
        <argument><expr><name><name>w</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"op failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the reduce monoid</comment>
    <if_stmt><if>if <condition>(<expr><name>user_complex</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>Complex_plus</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>reduce</name> <operator>=</operator> <name>Complex_plus_monoid</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>Complex_times</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>reduce</name> <operator>=</operator> <name>Complex_times_monoid</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"reduce failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// create the reduce monoid</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_Monoid</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>reduce</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>malloc_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"reduce failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// get accum, if present</comment>
    <expr_stmt><expr><name>user_complex</name> <operator>=</operator> <operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>w</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>accum</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"accum"</literal></expr></argument>,
        <argument><expr><name><name>w</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"accum failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get desc</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_Descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><call><name>PARGIN</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"desc failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// test GrB_Matrix_reduce_BinaryOp, if possible</comment>

    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>GrB_MIN_INT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_INT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_INT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_INT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_UINT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_FP32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MIN_FP64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_INT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_INT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_INT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_INT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_UINT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_FP32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_MAX_FP64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_INT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_INT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_INT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_INT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_UINT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_FP32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_PLUS_FP64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_PLUS_FC32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_PLUS_FC64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_INT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_INT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_INT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_INT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_UINT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_FP32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_TIMES_FP64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_TIMES_FC32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_TIMES_FC64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_BOOL</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_INT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_INT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_INT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_INT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_UINT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_FP32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_FP64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_FC32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GxB_ANY_FC64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_LOR</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_LAND</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_LXOR</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_LXNOR</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BOR_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BOR_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BOR_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BOR_UINT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BAND_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BAND_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BAND_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BAND_UINT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BXOR_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BXOR_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BXOR_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BXOR_UINT64</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BXNOR_UINT8</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BXNOR_UINT16</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BXNOR_UINT32</name>
    <operator>||</operator>  <name>op</name> <operator>==</operator> <name>GrB_BXNOR_UINT64</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// w&lt;mask&gt; = accum (w, reduce_to_vector (A)) using a binary op</comment>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// w&lt;mask&gt; = accum (w, reduce_to_vector (A)) using a monoid</comment>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>reduce</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// return w as a struct and free the GraphBLAS w</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Vector_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><literal type="string">"w output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
