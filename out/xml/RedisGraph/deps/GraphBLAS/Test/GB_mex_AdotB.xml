<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_AdotB.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_AdotB: compute C=spones(Mask).*(A'*B)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns a plain built-in sparse matrix, not a struct.  Only works in double</comment>
<comment type="line">// and complex.  Input matrices must be built-in sparse matrices, or GraphBLAS</comment>
<comment type="line">// structs in CSC format.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_AdotB (A,B,Mask,flipxy)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                            \
<cpp:value>{                                           \
    GrB_Matrix_free_(&amp;A) ;                  \
    GrB_Matrix_free_(&amp;Aconj) ;              \
    GrB_Matrix_free_(&amp;B) ;                  \
    GrB_Matrix_free_(&amp;C) ;                  \
    GrB_Matrix_free_(&amp;Mask) ;               \
    GrB_Monoid_free_(&amp;add) ;                \
    GrB_Semiring_free_(&amp;semiring) ;         \
    GB_mx_put_global (true) ;               \
}</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Aconj</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Mask</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>add</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>semiring</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<function_decl><type><name>GrB_Info</name></type> <name>adotb_complex</name> <parameter_list>(<parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>GrB_Info</name></type> <name>adotb</name> <parameter_list>(<parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>)</parameter_list> ;</function_decl>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>anrows</name></decl>, <decl><type ref="prev"/><name>ancols</name></decl>, <decl><type ref="prev"/><name>bnrows</name></decl>, <decl><type ref="prev"/><name>bncols</name></decl>, <decl><type ref="prev"/><name>mnrows</name></decl>, <decl><type ref="prev"/><name>mncols</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flipxy</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>C_header</name></decl> ;</decl_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>adotb_complex</name> <parameter_list>(<parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Aconj</name></expr></argument>, <argument><expr><name>Complex</name></expr></argument>, <argument><expr><name>anrows</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>Aconj</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Aconj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>Aconj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_conj</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Aconj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// force completion</comment>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>Aconj</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Aconj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>mask_applied</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>semiring</name> <init>= <expr><name>Complex_plus_times</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>Mask</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// C&lt;M&gt; = A'*B using dot product method</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_dot3</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Aconj</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
            <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>mask_applied</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// C = A'*B using dot product method</comment>
        <expr_stmt><expr><name>mask_applied</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>  <comment type="line">// no mask to apply</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_dot2</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Aconj</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Aconj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>adotb</name> <parameter_list>(<parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
    <comment type="line">// create the Semiring for regular z += x*y</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GrB_Monoid_new_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>GrB_TIMES_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// C = A'*B</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>mask_applied</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>Mask</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// C&lt;M&gt; = A'*B using dot product method</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_dot3</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
            <argument><expr><name>semiring</name></expr></argument> <comment type="block">/* GxB_PLUS_TIMES_FP64 */</comment>,
            <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>mask_applied</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>mask_applied</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>  <comment type="line">// no mask to apply</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_dot2</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <argument><expr><name>false</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument> <comment type="block">/* GxB_PLUS_TIMES_FP64 */</comment>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_CONTEXT</name> <argument_list>(<argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
    <comment type="line">// get A and B (shallow copies)</comment>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"B input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>B</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"B failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bnrows</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bncols</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>||</operator> <operator>!</operator><name><name>B</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"matrices must be CSC only"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>||</operator> <name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"matrices must be non-iso only"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get Mask (shallow copy)</comment>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>Mask</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Mask input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mnrows</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mncols</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Mask</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"matrices must be CSC only"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>mnrows</name> <operator>!=</operator> <name>ancols</name> <operator>||</operator> <name>mncols</name> <operator>!=</operator> <name>bncols</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"mask wrong dimension"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>anrows</name> <operator>!=</operator> <name>bnrows</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"inner dimensions of A'*B do not match"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>anrows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"inner dimensions of A'*B must be &gt; 0"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get flipxy</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>C_header</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>GB_clear_static_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// C = A'*B, complex case</comment>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>adotb_complex</name> <argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>adotb</name> <argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// return C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C AdotB result"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
