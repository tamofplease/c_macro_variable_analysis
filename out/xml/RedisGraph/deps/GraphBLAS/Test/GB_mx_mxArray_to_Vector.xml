<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_mxArray_to_Vector.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_mxArray_to_Vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>GrB_Vector</name></type> <name>GB_mx_mxArray_to_Vector</name>     <comment type="line">// returns GraphBLAS version of V</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>V_builtin</name></decl></parameter>,           <comment type="line">// built-in version of V</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,                   <comment type="line">// name of the argument</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>deep_copy</name></decl></parameter>,               <comment type="line">// if true, return a deep copy</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>empty</name></decl></parameter>    <comment type="line">// if false, 0-by-0 matrices are returned as NULL.</comment>
                        <comment type="line">// if true, a 0-by-0 matrix is returned.</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>V</name> <init>= <expr><call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name>V_builtin</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>deep_copy</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>V</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"must be a column vector"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>V</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>V</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
