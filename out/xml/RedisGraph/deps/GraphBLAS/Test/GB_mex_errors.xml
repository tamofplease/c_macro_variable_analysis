<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_errors.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_errors: test error handling</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This mexFunction intentionally creates many errors for GraphBLAS, to test</comment>
<comment type="line">// error-handling.  Many error messages are printed.  If the test ends with</comment>
<comment type="line">// "All tests passed" then all errors were expected.  The test fails if</comment>
<comment type="line">// GraphBLAS does not catch the error with the right error code, or if it</comment>
<comment type="line">// generates an unexpected error.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"GB_mex_errors"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                                                          \
<cpp:value>{                                                                         \
    GrB_Matrix_free_(&amp;Empty1) ;       CHECK (Empty1       == NULL) ;      \
    GrB_Matrix_free_(&amp;A) ;            CHECK (A            == NULL) ;      \
    GrB_Matrix_free_(&amp;B) ;            CHECK (B            == NULL) ;      \
    GrB_Matrix_free_(&amp;C) ;            CHECK (C            == NULL) ;      \
    GrB_Matrix_free_(&amp;Z) ;            CHECK (Z            == NULL) ;      \
    GrB_Matrix_free_(&amp;E) ;            CHECK (E            == NULL) ;      \
    GrB_Matrix_free_(&amp;F) ;            CHECK (F            == NULL) ;      \
    GrB_Matrix_free_(&amp;H) ;            CHECK (H            == NULL) ;      \
    GrB_Matrix_free_(&amp;Acrud) ;        CHECK (Acrud        == NULL) ;      \
    GrB_Matrix_free_(&amp;Aempty) ;       CHECK (Aempty       == NULL) ;      \
    GrB_Type_free_(&amp;T) ;              CHECK (T            == NULL) ;      \
    GrB_Type_free_(&amp;Tcrud) ;          CHECK (Tcrud        == NULL) ;      \
    GrB_UnaryOp_free_(&amp;op1) ;         CHECK (op1          == NULL) ;      \
    GrB_UnaryOp_free_(&amp;op1crud) ;     CHECK (op1crud      == NULL) ;      \
    GrB_BinaryOp_free_(&amp;op2) ;        CHECK (op2          == NULL) ;      \
    GrB_BinaryOp_free_(&amp;op3) ;        CHECK (op3          == NULL) ;      \
    GrB_UnaryOp_free_(&amp;op1b) ;        CHECK (op1b         == NULL) ;      \
    GrB_BinaryOp_free_(&amp;op2b) ;       CHECK (op2b         == NULL) ;      \
    GrB_Monoid_free_(&amp;monoidb) ;      CHECK (monoidb      == NULL) ;      \
    GrB_Semiring_free_(&amp;semiring2) ;  CHECK (semiring2    == NULL) ;      \
    GrB_Descriptor_free_(&amp;descb) ;    CHECK (descb        == NULL) ;      \
    GrB_Vector_free_(&amp;vb) ;           CHECK (vb           == NULL) ;      \
    GrB_BinaryOp_free_(&amp;op2crud) ;    CHECK (op2crud      == NULL) ;      \
    GrB_Monoid_free_(&amp;monoid) ;       CHECK (monoid       == NULL) ;      \
    GrB_Monoid_free_(&amp;monoid_crud) ;  CHECK (monoid_crud  == NULL) ;      \
    GrB_Semiring_free_(&amp;semiring) ;   CHECK (semiring     == NULL) ;      \
    GrB_Semiring_free_(&amp;semicrud) ;   CHECK (semicrud     == NULL) ;      \
    GrB_Vector_free_(&amp;v) ;            CHECK (v            == NULL) ;      \
    GrB_Vector_free_(&amp;w) ;            CHECK (w            == NULL) ;      \
    GrB_Vector_free_(&amp;u) ;            CHECK (u            == NULL) ;      \
    GrB_Vector_free_(&amp;z) ;            CHECK (z            == NULL) ;      \
    GrB_Vector_free_(&amp;h) ;            CHECK (h            == NULL) ;      \
    GrB_Vector_free_(&amp;vcrud) ;        CHECK (vcrud        == NULL) ;      \
    GrB_Vector_free_(&amp;vempty) ;       CHECK (vempty       == NULL) ;      \
    GrB_Descriptor_free_(&amp;desc) ;     CHECK (desc         == NULL) ;      \
    GrB_Descriptor_free_(&amp;dtn) ;      CHECK (dtn          == NULL) ;      \
    GrB_Descriptor_free_(&amp;dnt) ;      CHECK (dnt          == NULL) ;      \
    GrB_Descriptor_free_(&amp;dtt) ;      CHECK (dtt          == NULL) ;      \
    GrB_Descriptor_free_(&amp;dcrud) ;    CHECK (dcrud        == NULL) ;      \
    GxB_SelectOp_free_(&amp;selectop) ;   CHECK (selectop     == NULL) ;      \
    GxB_SelectOp_free_(&amp;selectopcrud) ; CHECK (selectopcrud == NULL) ;    \
    GrB_Scalar_free_(&amp;a_scalar) ;                                         \
    GB_mx_put_global (true) ;                                             \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex_errors.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G3</name></cpp:macro> <cpp:value>GxB_COMPLETE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G2</name></cpp:macro> <cpp:value>GxB_SHORT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G1</name></cpp:macro> <cpp:value>GxB_SUMMARY</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G0</name></cpp:macro> <cpp:value>GxB_SILENT</cpp:value></cpp:define>

<typedef>typedef <type><name>int16_t</name></type> <name>user_int</name> ;</typedef>

<function_decl><type><name>void</name></type> <name>f1</name> <parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>void</name></type> <name>f2</name> <parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> ;</function_decl>

<function><type><name>void</name></type> <name>f1</name> <parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>f2</name> <parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>y</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>f3</name> <parameter_list>(<parameter><decl><type><name>GxB_FC64_t</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GxB_FC64_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> ;</function_decl>
<function><type><name>void</name></type> <name>f3</name> <parameter_list>(<parameter><decl><type><name>GxB_FC64_t</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GxB_FC64_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <call><name>GB_FC64_add</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>fselect</name> <parameter_list>(<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list> ;</function_decl>
<function><type><name>bool</name></type> <name>fselect</name> <parameter_list>(<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// select entries in triu(A) that are greater than k</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i2</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>j2</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>j</name></expr></init></decl> ;</decl_stmt>
    <return>return <expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>j2</name><operator>-</operator><name>i2</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name> <argument_list>(<argument><expr><literal type="string">"errlog.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>ff</name> <init>= <expr><call><name>fopen</name> <argument_list>(<argument><expr><literal type="string">"fprint.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>, <decl><type ref="prev"/><name>expected</name></decl>  ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_Global_GrB_init_called_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_finalize</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_Global_GrB_init_called_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>, <argument><expr><name>mxMalloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mxFree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// mxMalloc, mxCalloc, mxRealloc, and mxFree are not thread safe</comment>
    <expr_stmt><expr><call><name>GB_Global_malloc_is_thread_safe_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_Global_abort_function_set</name> <argument_list>(<argument><expr><name>GB_mx_abort</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_tracking_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="string">"\n========================================================\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="string">"=== GB_mex_errors : testing error handling =============\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="string">"========================================================\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="string">"many errors are expected\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint_</name><argument_list>(<argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint_</name><argument_list>(<argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nmalloc</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>nmalloc</name> <operator>=</operator> <call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nmalloc %d at start\n"</literal></expr></argument>, <argument><expr><name>nmalloc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>nmalloc</name> <operator>=</operator> <call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nmalloc %d after complex init\n"</literal></expr></argument>, <argument><expr><name>nmalloc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Z</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Acrud</name> <init>= <expr><name>NULL</name></expr></init></decl>,
               <decl><type ref="prev"/><name>Aempty</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>F</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>A0</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>H</name> <init>= <expr><name>NULL</name></expr></init></decl>,
               <decl><type ref="prev"/><name>Empty1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>A4</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C4</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>vcrud</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>vempty</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><name>NULL</name></expr></init></decl>,
               <decl><type ref="prev"/><name>v0</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>z</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>vb</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>T</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Tcrud</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_UnaryOp</name></type> <name>op1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>op1crud</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>o1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>op1b</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op2</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>op2crud</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>o2</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>op0</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>op3</name> <init>= <expr><name>NULL</name></expr></init></decl>,
                <decl><type ref="prev"/><name>op2b</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>monoid</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>monoid_crud</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>m2</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>m0</name> <init>= <expr><name>NULL</name></expr></init></decl>,
        <decl><type ref="prev"/><name>monoidb</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>semiring</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>semicrud</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>s2</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>s0</name> <init>= <expr><name>NULL</name></expr></init></decl>,
        <decl><type ref="prev"/><name>semiring2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>dcrud</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>d0</name> <init>= <expr><name>NULL</name></expr></init></decl>,
        <decl><type ref="prev"/><name>dnt</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>dtn</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>dtt</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>descb</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>dval</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>uvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I0</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>J0</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>I</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">8</literal></expr>,   <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>,       <decl><type ref="prev"/><name><name>I2</name> <index>[<expr><name>LEN</name></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>J</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>,   <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>,       <decl><type ref="prev"/><name><name>J2</name> <index>[<expr><name>LEN</name></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>    <name><name>X</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4.5</literal></expr>, <expr><literal type="number">8.2</literal></expr>, <expr><literal type="number">9.1</literal></expr>, <expr><operator>-</operator><literal type="number">1.2</literal></expr>, <expr><literal type="number">3.14159</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>X2</name> <index>[<expr><name>LEN</name></expr>]</index></name></decl>  ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Pending</name></type> <name>AP</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>x_bool</name></decl>, <decl><type ref="prev"/><name>ok</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>      <name>x_int8</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>     <name>x_int16</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type>    <name>x_uint16</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>x_int32</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>    <name>x_uint32</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>     <name>x_int64</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>    <name>x_uint64</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>       <name>x_float</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>      <name>x_double</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_FC64_t</name></type>  <name>c</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GxB_SelectOp</name></type> <name>selectop</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>selectopcrud</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>sel0</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>a_scalar</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_CONTEXT</name> <argument_list>(<argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nargin</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initialize simple_rand</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"rand seed----------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"random seed is %g\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <call><name>simple_rand_getseed</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>simple_rand_seed</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"random seed is now %g\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <call><name>simple_rand_getseed</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// init</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_init-----------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// can't call it twice</comment>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>, <argument><expr><name>mxMalloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mxFree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_GrB_init_called_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// invalid mode</comment>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>mxMalloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mxFree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mxFree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mxFree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><name>mxMalloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>  )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Type</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Type-----------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>Tcrud</name> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Tcrud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">42</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>Tcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>T</name> <operator>=</operator> <name>GrB_INT32</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>GrB_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>GrB_INT32</name> <operator>==</operator> <name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>s</name> <operator>==</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GB_code_size</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"new type"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"new type"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FREE_DEEP_COPY</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_DEEP_COPY</name></cpp:undef>

    <for>for <control>(<init><decl><type><name>GB_Type_code</name></type> <name>tcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tcode</name> <operator>&lt;=</operator> <name>GB_UDT_code</name></expr> ;</condition> <incr><expr><name>tcode</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Type</name></type> <name>utype</name> <init>= <expr><name>Complex</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ttype</name> <init>= <expr><call><name>GB_code_type</name> <argument_list>(<argument><expr><name>tcode</name></expr></argument>, <argument><expr><name>utype</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n----------------------------------tcode: %d\n"</literal></expr></argument>, <argument><expr><name>tcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>ttype</name></expr></argument>, <argument><expr><literal type="string">"GB_code_type:"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint_</name><argument_list>(<argument><expr><name>ttype</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Tcrud is allocated but uninitialized</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// UnaryOp</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_UnaryOp--------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><name>Tcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>Tcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_ztype</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_xtype</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>op1crud</name> <operator>=</operator> <name>op1</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op1</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op1crud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">99</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name>GrB_IDENTITY_BOOL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o1</name> <operator>==</operator> <name>GrB_IDENTITY_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>o1</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>GrB_UnaryOp</name></type> <name>opzz</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opzz</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>opzz</name></expr></argument>, <argument><expr><literal type="string">"new unary opzz"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_fprint</name> <argument_list>(<argument><expr><name>opzz</name></expr></argument>, <argument><expr><literal type="string">"new unary opzz"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opzz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>opzz</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FREE_DEEP_COPY</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_DEEP_COPY</name></cpp:undef>

    <comment type="line">// op1crud is allocated but uninitialized</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// BinaryOp</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_BinaryOp-------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// void f2 (int32_t *z, uint8_t *x, int16_t *y)</comment>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>GrB_UINT8</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><name>GrB_UINT8</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>GrB_UINT8</name></expr></argument>, <argument><expr><name>Tcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>GrB_UINT8</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ztype</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_xtype</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ytype</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>op2crud</name> <operator>=</operator> <name>op2</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op2crud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">77</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ytype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>GrB_PLUS_FP64</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>GrB_UINT8</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>opxx</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opxx</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>GrB_UINT8</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>opxx</name></expr></argument>, <argument><expr><literal type="string">"new binary opxx"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_fprint</name> <argument_list>(<argument><expr><name>opxx</name></expr></argument>, <argument><expr><literal type="string">"new binary opxx"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_fprint_</name><argument_list>(<argument><expr><name>opxx</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opxx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>opxx</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FREE_DEEP_COPY</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_DEEP_COPY</name></cpp:undef>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// SelectOp</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GxB_SelectOp-------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_select_function</name><operator>)</operator> <name>fselect</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_ttype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_select_function</name><operator>)</operator> <name>fselect</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_xtype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_ttype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Monoid</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Monoid---------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UDT</name>     <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL</name>    <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8</name>    <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32</name>    <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64</name>    <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UDT</name>     <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL</name>    <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8</name>    <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32</name>    <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64</name>    <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_EQ_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// These feel like they should work, but '0' becomes int, and it does not</comment>
    <comment type="line">// match the type of the operator.  So it is expected to fail with a</comment>
    <comment type="line">// domain mismatch.</comment>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// likewise, all these fail:</comment>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_new_FC32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><call><name>GxB_CMPLXF</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_new_FC64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>, <argument><expr><call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// this works</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoid</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_identity</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_identity</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>monoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>x_double</name> <operator>=</operator> <literal type="number">97.0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_identity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_double</name> <operator>==</operator> <literal type="number">97.0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_identity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>GxB_TIMES_FP64_MONOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_double</name> <operator>==</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>has_terminal</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>x_double</name> <operator>=</operator> <literal type="number">42.0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_terminal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>has_terminal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>GxB_TIMES_FP64_MONOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>has_terminal</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_double</name> <operator>==</operator> <literal type="number">42.0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_terminal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>has_terminal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_int64</name></expr></argument>, <argument><expr><name>GxB_MAX_INT64_MONOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>has_terminal</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_int64</name> <operator>==</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_terminal</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_MAX_FP64_MONOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_terminal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>has_terminal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_MAX_FP64_MONOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_terminal</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>GxB_MAX_FP64_MONOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_terminal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>has_terminal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>monoid_crud</name> <operator>=</operator> <name>monoid</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>monoid_crud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">8080</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>monoid</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>x_double</name> <operator>=</operator> <literal type="number">33.</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_identity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>monoid_crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_double</name> <operator>==</operator> <literal type="number">33.</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_operator</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_operator</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_TIMES_FP64_MONOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_operator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_operator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>, <argument><expr><name>GxB_TIMES_FP64_MONOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>GrB_TIMES_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>GxB_TIMES_FP64_MONOID</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>m2</name> <operator>==</operator> <name>GxB_TIMES_FP64_MONOID</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_operator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>, <argument><expr><name>monoid_crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>m2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>m2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>m2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// monoid_crud is allocated but not initialized</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Semiring</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Semiring-------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_MAX_FP64_MONOID</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>GxB_MAX_FP64_MONOID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>monoid_crud</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>GxB_MAX_FP32_MONOID</name></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>GxB_MAX_FP32_MONOID</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>GxB_MAX_FP64_MONOID</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>, <argument><expr><name>GxB_MAX_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><name>GxB_MAX_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>m2</name> <operator>==</operator> <name>GxB_MAX_FP64_MONOID</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_multiply</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_multiply</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_MAX_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_add</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_add</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_MAX_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>m2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>semicrud</name> <operator>=</operator> <name>semiring</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>semicrud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">747</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>semiring</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>GxB_MAX_INT32_MONOID</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><name>semicrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>m2</name> <operator>==</operator> <name>GxB_MAX_INT32_MONOID</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>GxB_LXOR_BOOL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>o2</name></expr></argument>, <argument><expr><name>semicrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>o2</name> <operator>==</operator> <name>GxB_LXOR_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>GxB_PLUS_TIMES_FP64</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>s2</name> <operator>==</operator> <name>GxB_PLUS_TIMES_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><name>GxB_MAX_FP64_MONOID</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>s2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>s2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// semicrud is allocated but not initialized</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// user defined ops</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>Complex_finalize ( ) ;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>Complex_finalize</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>Complex_init</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>Complex_finalize</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>Complex_init</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FREE_DEEP_COPY</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_DEEP_COPY</name></cpp:undef>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// basic Scalar methods</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Vector---------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a_scalar</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>a_scalar</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>i_scalar</name> <init>= <expr><literal type="number">33</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_INT32</name> <argument_list>(<argument><expr><name>a_scalar</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_scalar</name></expr></argument>, <argument><expr><name>a_scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i_scalar</name> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Scalar_fprint_</name><argument_list>(<argument><expr><name>a_scalar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// force a zombie</comment>
    <expr_stmt><expr><name>i_scalar</name> <operator>=</operator> <literal type="number">33</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>scalar_is_full</name> <init>= <expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>a_scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>scalar_is_full</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>a_scalar</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_FLIP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>a_scalar</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Scalar_extractElement_INT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_scalar</name></expr></argument>, <argument><expr><name>a_scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i_scalar</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>scalar_is_full</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">42</literal></expr> </then><else>: <expr><literal type="number">33</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><ternary><condition><expr><name>info</name> <operator>==</operator> <operator>(</operator><name>scalar_is_full</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_SUCCESS</name></expr> </then><else>: <expr><name>GrB_NO_VALUE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a_scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>i_scalar</name> <operator>=</operator> <literal type="number">207</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a_scalar</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Scalar_fprint_</name><argument_list>(<argument><expr><name>a_scalar</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_fprint_</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>a_scalar</name></expr></argument>, <argument><expr><call><name>GrB_Scalar_setElement_INT32</name> <argument_list>(<argument><expr><name>a_scalar</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_scalar</name></expr></argument>, <argument><expr><name>a_scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i_scalar</name> <operator>==</operator> <literal type="number">207</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected: %d\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a_scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// basic Vector methods</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Vector---------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vempty</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>vempty</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>vempty</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>vempty</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vempty</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>vempty</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>vcrud</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>vcrud</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>vcrud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">1024</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_UINT16</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_clear</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_clear</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_size</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <literal type="number">7</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT32</name>  <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_BOOL</name>   <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT8</name>   <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UINT8</name>  <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT16</name>  <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UINT16</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT32</name>  <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UINT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT64</name>  <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UINT64</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP32</name>   <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP64</name>   <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"vector 18:28"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_wait</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nvals "</literal><name>GBd</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"vector 18:28"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>zz</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>zz</name></expr></argument>, <argument><expr><literal type="string">"zz ok vector"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_convert_any_to_hyper</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>zz</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>zz</name></expr></argument>, <argument><expr><literal type="string">"zz mangled: vectors cannot be hyper"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_clear</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_type</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_type</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_type</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_type</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <literal type="number">42</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// vcrud is allocated but not initialized</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Vector build</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Vector_build---------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_BOOL</name>   <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_INT8</name>   <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_UINT8</name>  <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_INT16</name>  <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_UINT16</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_INT32</name>  <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_UINT32</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_INT64</name>  <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_UINT64</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP32</name>   <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64</name>   <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_UDT</name>    <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<comment type="line">//  dup NULL is now OK</comment>
<comment type="line">//  ERR1 (v, GrB_Vector_build_FP64_(v, I, X,    0, NULL)) ;</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>GrB_SECOND_FP64</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>GB_NMAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_LE_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"build udt:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>user_type</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>user_type</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>user_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>user_type</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Vector_build_UDT</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"info %d expected error: %s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_fprint</name> <argument_list>(<argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><literal type="string">"Complex-plus op"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>Complex</name></expr></argument>, <argument><expr><literal type="string">"Complex user type"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>GxB_FC64</name></expr></argument>, <argument><expr><literal type="string">"Complex built-in type"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_OUTPUT_NOT_EMPTY</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Vector_clear</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Vector_clear</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v clear"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>GxB_RANGE</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error, index out of bounds:\n%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v bad"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_build_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// v is a valid 10-by-1 FP64 vector with no entries</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Vector setElement</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Vector_setElement----------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_UDT</name>    <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_BOOL</name>   <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_INT8</name>   <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_UINT8</name>  <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_INT16</name>  <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_UINT16</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_INT32</name>  <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_UINT32</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_INT64</name>  <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_UINT64</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_FP32</name>   <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_FP64</name>   <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_UDT</name>    <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_INDEX</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_INT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_Vector_setElement_UDT</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Vector extractElement</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Vector_extractElement------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_INDEX</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP64</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">22.8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP64</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">44.9</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_UDT</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>x_double</name> <operator>=</operator> <literal type="number">404</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_double</name> <operator>==</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP64</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">77.3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_double</name> <operator>==</operator> <literal type="number">77.3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_wait_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"vector nvals: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n2</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// v is now a valid FP64 vector with 3 entries</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Vector extractTuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Vector_extractTuples-------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <name>n2</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>vcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INSUFFICIENT_SPACE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <name>n2</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_FP64_</name><argument_list>(<argument><expr><name>I2</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <name>n2</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_FP64_</name><argument_list>(<argument><expr><name>I2</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d: v("</literal><name>GBu</name><literal type="string">") = %g\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>I2</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>X2</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extractTuples_UDT_</name><argument_list>(<argument><expr><name>I2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// basic Matrix methods</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix---------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Aempty</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Aempty</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Aempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Aempty</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Aempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Aempty</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Aempty</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Aempty</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Acrud</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Acrud</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Acrud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">1024</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_UINT16</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>C</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>C</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Aempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_clear</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>C</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>C</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_clear</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Aempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">999</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Aempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">999</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_INDEX</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Aempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_clear</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Aempty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <literal type="number">42</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Acrud is allocated but not initialized</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Matrix build</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_build---------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_BOOL</name>   <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_INT8</name>   <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UINT8</name>  <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_INT16</name>  <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UINT16</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_INT32</name>  <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UINT32</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_INT64</name>  <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UINT64</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP32</name>   <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64</name>   <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UDT</name>    <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>,    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>,    <argument><expr><name>J</name></expr></argument>,    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<comment type="line">//  dup of NULL is now OK</comment>
<comment type="line">//  ERR1 (A, GrB_Matrix_build_FP64_(A, I,    J,    X,    0, NULL)) ;</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>GrB_SECOND_FP64</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>,       <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>GB_NMAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>op2crud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_LE_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>user_type</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"info %d expected error: %s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_OUTPUT_NOT_EMPTY</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_clear</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_clear</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// A is a valid 10-by-5 FP64 matrix with no entries</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Matrix setElement</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_setElement----------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UDT</name>    <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_BOOL</name>   <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT8</name>   <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UINT8</name>  <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT16</name>  <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UINT16</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT32</name>  <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UINT32</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT64</name>  <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UINT64</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_FP32</name>   <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_FP64</name>   <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UDT</name>    <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_INDEX</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Matrix extractElement</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_extractElement------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">22.8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">44.9</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_INDEX</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">911</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">911</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_UDT</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>x_double</name> <operator>=</operator> <literal type="number">404</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_double</name> <operator>==</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">707.3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_double</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_double</name> <operator>==</operator> <literal type="number">707.3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"nvals: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// A is now a valid FP64 matrix with 3 entries</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Matrix extractTuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_extractTuples-------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <name>n2</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_BOOL</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT8</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT8</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT16</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT16</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT32</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT32</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT64</name>  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT64</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP32</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP64</name>   <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UDT</name>    <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Acrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INSUFFICIENT_SPACE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <name>n2</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP64_</name><argument_list>(<argument><expr><name>I2</name></expr></argument>, <argument><expr><name>J2</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <name>n2</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP64_</name><argument_list>(<argument><expr><name>I2</name></expr></argument>, <argument><expr><name>J2</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d: A("</literal><name>GBu</name><literal type="string">","</literal><name>GBu</name><literal type="string">") = %g\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>I2</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>J2</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>X2</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <name>n2</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UDT_</name><argument_list>(<argument><expr><name>I2</name></expr></argument>, <argument><expr><name>J2</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// The following are now allocated; keep them for the rest the tests:</comment>
    <comment type="line">// Acrud, Tcrud, op1crud, op2crud, monoid_crud, semicrud, Aempty, vempty</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_Descriptor-----------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dcrud</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>dcrud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">22309483</literal></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>dnull</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>dnull</name></expr></argument>, <argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>dnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>dnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>dnull</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>dnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>, <argument><expr><name>dcrud</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>dnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>, <argument><expr><name>dnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// The following are now allocated; keep them for the rest the tests:</comment>
    <comment type="line">// Acrud, Tcrud, op1crud, op2crud, monoid_crud, semicrud, Aempty, vempty,</comment>
    <comment type="line">// desc, dcrud</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>d7</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>d7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"new descriptor"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"new descriptor"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FREE_DEEP_COPY</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_DEEP_COPY</name></cpp:undef>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"new descriptor (default)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><name>GxB_AxB_DOT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"new descriptor (dot)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dval</name></expr></argument>, <argument><expr><name>d7</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dval</name> <operator>==</operator> <name>GxB_AxB_DOT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><name>GxB_AxB_GUSTAVSON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"new descriptor (Gustavson)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERRD</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><literal type="number">911911</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"new descriptor (still Gustavson)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>d7</name><operator>-&gt;</operator><name>axb</name></name> <operator>=</operator> <literal type="number">99</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>d7</name><operator>-&gt;</operator><name>axb</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>d7</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <literal type="number">99</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>d7</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>d7</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>GxB_AxB_HASH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>d7</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>d7</name><operator>-&gt;</operator><name>axb</name></name> <operator>=</operator> <name>GrB_TRAN</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>d7</name></expr></argument>, <argument><expr><literal type="string">"d7"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>d7</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>d7</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create some valid matrices and vectors</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"create test matrices-----------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>F</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Z</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// complex</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_wait_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_wait_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"complex vector:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>Complex</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>dnt</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_wait_</name><argument_list>(<argument><expr><name>dnt</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>dtn</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_wait_</name><argument_list>(<argument><expr><name>dtn</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>dtt</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>dtt</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_wait_</name><argument_list>(<argument><expr><name>dtt</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_mxm, mxv, and vxm</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_mxm------------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>GxB_MAX_PLUS_FP32</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>GrB_MAX_FP32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>C</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>C</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>C</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>dcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>C</name></expr></argument>    , <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>C</name></expr></argument>    , <argument><expr><name>o2</name></expr></argument>     , <argument><expr><name>semicrud</name></expr></argument>, <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>dcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>o2</name></expr></argument>     , <argument><expr><name>semicrud</name></expr></argument>, <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>dcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>o2</name></expr></argument>     , <argument><expr><name>semicrud</name></expr></argument>, <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument> ,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>    ,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>o2</name></expr></argument>     , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument> ,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>o2</name></expr></argument>     , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument> ,  <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>    ,  <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>o2</name></expr></argument>     , <argument><expr><name>NULL</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>v</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>  , <argument><expr><name>B</name></expr></argument>   , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>   , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>  , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>B</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus_times</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus_times</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"last error was [%s]\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// The following are now allocated; keep them for the rest the tests:</comment>
    <comment type="line">// Acrud, Tcrud, op1crud, op2crud, monoid_crud, semicrud, Aempty, vempty,</comment>
    <comment type="line">// desc, dcrud, A, B, C, E, F, Z, v, u</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_mxm dot product</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>huge</name> <init>= <expr><name>GB_NMAX</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>HugeRow</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>HugeRow</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>huge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>HugeRow</name></expr></argument>, <argument><expr><literal type="string">"huge row"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>HugeRow</name></expr></argument>, <argument><expr><literal type="string">"HugeRow"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>HugeMatrix_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>HugeMatrix</name> <init>= <expr><call><name>GB_clear_static_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>HugeMatrix_header</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_AxB_dot2</name> <argument_list>(<argument><expr><name>HugeMatrix</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
        <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HugeRow</name></expr></argument>, <argument><expr><name>HugeRow</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>HugeMatrix</name></expr></argument>, <argument><expr><literal type="string">"HugeMatrix"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>HugeMatrix</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>HugeRow</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// eWiseMult and eWiseAdd</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_eWise ---------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>GxB_MIN_FP64_MONOID</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>GxB_PLUS_ISEQ_FP32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s0</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector semiring</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix semiring</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s0</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector semiring</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix semiring</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m0</name> <operator>=</operator> <name>monoid_crud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <name>semicrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s0</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector semiring</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix semiring</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s0</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector semiring</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// vector op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix semiring</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>s2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>Z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_complex</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>Z</name></expr></argument> , <argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>Z</name></expr></argument> , <argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op3</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f3</name></expr></argument>, <argument><expr><name>Complex</name></expr></argument>, <argument><expr><name>Complex</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>Z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op3</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>Z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op3</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op3</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_complex</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op3</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_complex</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>B</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>B</name></expr></argument> , <argument><expr><name>dtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>B</name></expr></argument> , <argument><expr><name>dnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>B</name></expr></argument> , <argument><expr><name>dtt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// The following are now allocated; keep them for the rest the tests:</comment>
    <comment type="line">// Acrud, Tcrud, op1crud, op2crud, monoid_crud, semicrud, Aempty, vempty,</comment>
    <comment type="line">// desc, dcrud, A, B, C, E, F, Z, v, u, dnt, dtn, dtt</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_kronecker</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_kronecker -----------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>GxB_MIN_FP64_MONOID</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>GxB_PLUS_ISEQ_FP32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>  <comment type="line">// matrix op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m0</name> <operator>=</operator> <name>monoid_crud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <name>semicrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>Z</name></expr></argument> , <argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>B</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>B</name></expr></argument> , <argument><expr><name>dtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>B</name></expr></argument> , <argument><expr><name>dnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp_</name>  <argument_list>(<argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>B</name></expr></argument> , <argument><expr><name>dtt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_extract -------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,    <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// vector extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,    <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,    <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// column extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// matrix extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>dcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,    <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// vector extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,    <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,    <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>,    <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>,    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// column extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// matrix extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>              <comment type="line">// vector extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>u</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <comment type="line">// column extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// matrix extract</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_INDEX</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// column extract</comment>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">911</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// column extract</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>H</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">911</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_extract</name> <argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>J</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">911</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_extract</name> <argument_list>(<argument><expr><name>H</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>J</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// subassign</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>
    
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GxB_subassign -----------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <comment type="line">// GxB_Vector_subassign   (w,mask,acc,u,I,ni,d)</comment>
    <comment type="line">// GxB_Matrix_subassign   (C,Mask,acc,A,I,ni,J,nj,d)</comment>
    <comment type="line">// GxB_Col_subassign      (C,mask,acc,u,I,ni,j,d)</comment>
    <comment type="line">// GxB_Row_subassign      (C,mask,acc,u,i,J,nj,d)</comment>
    <comment type="line">// GxB_Vector_subassign_T (w,mask,acc,x,I,ni,d)</comment>
    <comment type="line">// GxB_Matrix_subassign_T (C,Mask,acc,x,I,ni,J,nj,d)</comment>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <comment type="line">// vector assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt><comment type="line">// matrix assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// column assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// row assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> ,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_FP64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <comment type="line">// vector scalar</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_BOOL_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_BOOL_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_INT8_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UINT8_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_INT16_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UINT16_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_INT32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UINT32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_INT64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UINT64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_FP32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UDT_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>


    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt><comment type="line">// matrix scalar</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_BOOL_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_INT8_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UINT8_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_INT16_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UINT16_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_INT32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UINT32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_INT64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UINT64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>dcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// vector assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// column assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// row assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> ,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument> ,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_FP64</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <comment type="line">// vector scalar</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_BOOL</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_BOOL</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_BOOL</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_BOOL</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_INT8</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT8</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT8</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT8</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UINT8</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT8</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT8</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT8</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_INT16</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT16</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT16</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT16</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UINT16</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT16</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT16</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT16</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_INT32</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UINT32</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_INT64</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_INT64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_UINT64</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UINT64</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_subassign_FP32</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP32</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// matrix scalar</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_BOOL_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_INT8_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UINT8_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_INT16_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UINT16_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_INT32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UINT32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_INT64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UINT64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>Complex_plus</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <comment type="line">// vector assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// matrix assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <comment type="line">// column assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Col_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <comment type="line">// row assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <comment type="line">// vector scalar</comment>

    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> ,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign_FP64_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_FP64_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  ,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_subassign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// matrix scalar</comment>
    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> ,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  ,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Row_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> ,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><literal type="string">"test for indices out of bounds:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><literal type="string">"I [%d] = %g\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><literal type="string">"J [%d] = %g\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>J</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A4</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A4</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A4</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><literal type="string">"done bounds test: error returned:\n%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>I3</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">4</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>J3</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">4</literal></expr> }</block></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>I3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>J3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>I3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>J3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>J3</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C4</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C4</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>C4</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><name>I3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>J3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_INDEX</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A4</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A4</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>x_double</name></expr></argument>, <argument><expr><name>I3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>J3</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>I3</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A4</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A4</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign_FP64_</name><argument_list>(<argument><expr><name>A4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>x_double</name></expr></argument>, <argument><expr><name>I3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// assign</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>
    
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_assign---------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <comment type="line">// GrB_Vector_assign   (w,mask,acc,u,I,ni,d)</comment>
    <comment type="line">// GrB_Matrix_assign   (C,Mask,acc,A,I,ni,J,nj,d)</comment>
    <comment type="line">// GrB_Col_assign      (C,mask,acc,u,I,ni,j,d)</comment>
    <comment type="line">// GrB_Row_assign      (C,mask,acc,u,i,J,nj,d)</comment>
    <comment type="line">// GrB_Vector_assign_T (w,mask,acc,x,I,ni,d)</comment>
    <comment type="line">// GrB_Matrix_assign_T (C,Mask,acc,x,I,ni,J,nj,d)</comment>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// vector assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// matrix assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// column assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// row assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> ,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// vector scalar</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_BOOL_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_BOOL_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_INT8_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UINT8_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_INT16_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UINT16_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_INT32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UINT32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_INT64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UINT64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_FP32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// matrix scalar</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_BOOL_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_INT8_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UINT8_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_INT16_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UINT16_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_INT32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UINT32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_INT64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UINT64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_FP32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>I</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>dcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// vector assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// matrix assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// column assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// row assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> ,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument> ,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// vector scalar</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_BOOL_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_BOOL_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_BOOL_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_BOOL_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_INT8_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UINT8_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT8_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_INT16_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UINT16_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT16_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_INT32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UINT32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_INT64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_INT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UINT64_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UINT64_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_FP32_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP32_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// matrix scalar</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_BOOL_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_BOOL_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_INT8_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UINT8_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT8_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_INT16_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UINT16_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT16_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_INT32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UINT32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_INT64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_INT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UINT64_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UINT64_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_FP32_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP32_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> ,  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>Complex_plus</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>               <comment type="line">// vector assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <comment type="line">// matrix assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <comment type="line">// column assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <comment type="line">// row assign</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// vector scalar and matrix-scalar</comment>
    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_FP64_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> ,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  ,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_assign_UDT_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>
    
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> ,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  ,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_UDT_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>c</name></expr></argument> , <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Row_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> ,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>v5</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v5</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_fprint_</name><argument_list>(<argument><expr><name>v5</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_fprint_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Col_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>v5</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// column assign</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mask wrong size:\n%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// matrix assign, mask wrong size</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A5</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A5</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A5</name></expr></argument>, <argument><expr><literal type="string">"A5"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"mask wrong size:\n%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// change of op-2nd type</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>I_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>J_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>X_0</name> <init>= <expr><literal type="number">42</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A5</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_FP32</name> <argument_list>(<argument><expr><name>A5</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_SECOND_FP32</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>,
        <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A5</name></expr></argument>, <argument><expr><literal type="string">"A5 with 2nd:fp32"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_FP32</name> <argument_list>(<argument><expr><name>A5</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_SECOND_BOOL</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>,
        <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A5</name></expr></argument>, <argument><expr><literal type="string">"A5 with 2nd:bool"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A5</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A5</name></expr></argument>, <argument><expr><literal type="string">"A5 done"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_apply----------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_apply</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_apply</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_apply</name> <argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>dcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Vector_apply_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_apply_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_apply_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_apply_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_apply_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Vector_apply_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name>  <operator>=</operator> <name>Complex_plus</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply_BinaryOp1st_INT32_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply_BinaryOp2nd_INT32_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_BinaryOp1st_INT32_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_BinaryOp2nd_INT32_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_BinaryOp1st_INT32_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_BinaryOp2nd_INT32_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>C</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GxB_select---------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_select_function</name><operator>)</operator> <name>fselect</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><literal type="string">"select op OK"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectopcrud</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>selectopcrud</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_select_function</name><operator>)</operator> <name>fselect</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectopcrud</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>selectopcrud</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <literal type="number">22309483</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectopcrud</name></expr></argument>, <argument><expr><literal type="string">"select crud"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>dcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>sel0</name> <operator>=</operator> <name>selectopcrud</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>  , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sel0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>thresh</name> <init>= <expr><literal type="number">42</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>Thunk</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Thunk</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_FP64</name> <argument_list>(<argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name>  <operator>=</operator> <name>Complex_plus</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>selectop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>sel0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_TRIL</name></expr></argument>, <argument><expr><name>C</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Thunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce to scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_reduce (to scalar)---------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>GrB_PLUS_FP32</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>GxB_TIMES_FP64_MONOID</name></expr> ;</expr_stmt>

    <comment type="line">// matrix to scalar</comment>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// vector to scalar</comment>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m0</name> <operator>=</operator> <name>monoid_crud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>

    <comment type="line">// matrix to scalar</comment>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// vector to scalar</comment>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_BOOL_</name><argument_list>(<argument><expr><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT8</name> <argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT8</name> <argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT8_</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT8_</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT16_</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT16_</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT32_</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT32_</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_INT64_</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UINT64_</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP32_</name><argument_list>(<argument><expr><operator>(</operator><name>float</name>    <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP64_</name><argument_list>(<argument><expr><operator>(</operator><name>double</name>   <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_UDT_</name><argument_list>(<argument><expr><operator>(</operator><name>void</name>     <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>o2</name>  <operator>=</operator> <name>Complex_plus</name></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>Complex_plus_monoid</name></expr></argument>  , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>Complex_plus_monoid</name></expr></argument>  , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>Complex_plus_monoid</name></expr></argument>  , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name>  <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UDT</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>Complex_plus_monoid</name></expr></argument>  , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument> , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>Complex_plus_monoid</name></expr></argument>  , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>Complex_plus_monoid</name></expr></argument>  , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>Complex_plus_monoid</name></expr></argument>  , <argument><expr><name>Z</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_UDT</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>Complex_plus_monoid</name></expr></argument>  , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce to vector</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_reduce (to vector)---------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>GrB_PLUS_FP64</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>GxB_TIMES_FP64_MONOID</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// reduce via op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// reduce via monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m0</name> <operator>=</operator> <name>monoid_crud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>vcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>Acrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>dcrud</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// reduce via op</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>o2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>m0</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// reduce via monoid</comment>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v0</name></expr></argument>  , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>op0</name></expr></argument> , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument> , <argument><expr><name>v</name></expr></argument>   , <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>m2</name></expr></argument> , <argument><expr><name>A</name></expr></argument> , <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>m0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>op0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>Complex_plus</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>z</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>dtn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>v</name></expr></argument>,  <argument><expr><call><name>GrB_Matrix_reduce_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>d0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transpose</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB_transpose------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>    , <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>    , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>op2crud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>    , <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>   , <argument><expr><name>A</name></expr></argument>    , <argument><expr><name>dcrud</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_DIMENSION_MISMATCH</name></expr> </then><else>: <expr><name>GrB_DOMAIN_MISMATCH</name></expr></else></ternary></expr> ;</expr_stmt>

    <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>Complex_plus</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>   , <argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>  , <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,  <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>C</name></expr></argument>   , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>dtn</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">//=== internal functions ===================================================</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Entry print</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_entry_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_entry_check (type, x, pr, f)"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_entry_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_entry_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_entry_check</name> <argument_list>(<argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_entry_check</name> <argument_list>(<argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_entry_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Type check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_Type_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Type_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null type"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><literal type="string">"Tcrud"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// test the function instead of the macro:</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GrB_Type_new</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GrM_Type_new</name></cpp:undef>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><call><name>GRB</name> <argument_list>(<argument><expr><name>Type_new</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Type_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T ok (via function)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">99</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T bad code"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>GB_UDT_code</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T bad size"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>GB_code_string</name> <argument_list>(<argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"unknown code: [%s]\n"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"unknown type!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>GB_status_code</name> <argument_list>(<argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"unknown info: [%s]\n"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>strcmp</name> <argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"unknown GrB_Info value!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"type ok"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_Type_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// UnaryOp check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_UnaryOp_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_UnaryOp_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null unary op"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1b</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// test the function instead of the macro:</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GrB_UnaryOp_new</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GrM_UnaryOp_new</name></cpp:undef>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><call><name>GRB</name> <argument_list>(<argument><expr><name>UnaryOp_new</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1b</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_wait_</name><argument_list>(<argument><expr><name>op1b</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_UnaryOp_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>op1b</name></expr></argument>, <argument><expr><literal type="string">"op1b ok (via function)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>op1b</name></expr></argument>, <argument><expr><literal type="string">"op1b freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>unop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>op1b</name></expr></argument>, <argument><expr><literal type="string">"op1b null func"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>unop_function</name></name> <operator>=</operator> <operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>f1</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <literal type="number">1024</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>op1b</name></expr></argument>, <argument><expr><literal type="string">"op1b invalid opcode"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>GB_USER_unop_code</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>ztype</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>op1b</name></expr></argument>, <argument><expr><literal type="string">"op1b invalid ztype"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>ztype</name></name> <operator>=</operator> <name>GrB_FP64</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>op1b</name></expr></argument>, <argument><expr><literal type="string">"op1b invalid xtype"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op1b</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>GrB_UINT32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_UnaryOp_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// BinaryOp check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_BinaryOp_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_BinaryOp_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null unary op"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2b</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// test the function instead of the macro:</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GrB_BinaryOp_new</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GrM_BinaryOp_new</name></cpp:undef>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><call><name>GRB</name> <argument_list>(<argument><expr><name>BinaryOp_new</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2b</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>GrB_UINT8</name></expr></argument>, <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_BinaryOp_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2b</name></expr></argument>, <argument><expr><literal type="string">"op2b ok (via function)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2b</name></expr></argument>, <argument><expr><literal type="string">"op2b freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>binop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2b</name></expr></argument>, <argument><expr><literal type="string">"op2b null func"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>binop_function</name></name> <operator>=</operator> <operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>f2</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <literal type="number">1024</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2b</name></expr></argument>, <argument><expr><literal type="string">"op2b invalid opcode"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>GB_USER_binop_code</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>ztype</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2b</name></expr></argument>, <argument><expr><literal type="string">"op2b invalid ztype"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>ztype</name></name> <operator>=</operator> <name>GrB_INT32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2b</name></expr></argument>, <argument><expr><literal type="string">"op2b invalid xtype"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>GrB_UINT8</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>ytype</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2b</name></expr></argument>, <argument><expr><literal type="string">"op2b invalid ytype"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op2b</name><operator>-&gt;</operator><name>ytype</name></name> <operator>=</operator> <name>GrB_UINT16</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_BinaryOp_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// SelectOp check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_SelectOp_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_SelectOp_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null selectop"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// test the function instead of the macro:</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_SelectOp_new</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxM_SelectOp_new</name></cpp:undef>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><call><name>GXB</name> <argument_list>(<argument><expr><name>SelectOp_new</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>, <argument><expr><operator>(</operator><name>GxB_select_function</name><operator>)</operator> <name>fselect</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_SelectOp_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><literal type="string">"user selectop ok (via function)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>,
        <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><literal type="string">"selectop freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>selop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><literal type="string">"selectop invalid function"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>selop_function</name></name> <operator>=</operator> <operator>(</operator><name>GxB_select_function</name><operator>)</operator> <name>fselect</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <literal type="number">9999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><literal type="string">"selectop invalid opcode"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>GB_USER_selop_code</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>Tcrud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><literal type="string">"selectop invalid xtype"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>selectop</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>GrB_FP64</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectop</name></expr></argument>, <argument><expr><literal type="string">"user selectop ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_SelectOp_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Monoid check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_Monoid_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Monoid_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null monoid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoidb</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>monoidb</name></expr></argument>, <argument><expr><name>GrB_TIMES_INT32</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoidb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Monoid_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>monoidb</name></expr></argument>, <argument><expr><literal type="string">"monoidb ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>monoidb</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>monoidb</name></expr></argument>, <argument><expr><literal type="string">"monoidb freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>monoidb</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>monoidb</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>monoidb</name></expr></argument>, <argument><expr><literal type="string">"monoidb invalid op"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>monoidb</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>GrB_TIMES_INT32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>monoidb</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>GrB_EQ_INT32</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>monoidb</name></expr></argument>, <argument><expr><literal type="string">"monoidb invalid op domains"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>monoidb</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>GrB_TIMES_INT32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>Complex_plus_monoid</name></expr></argument>, <argument><expr><literal type="string">"complex plus monoid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>Complex_times_monoid</name></expr></argument>, <argument><expr><literal type="string">"complex times monoid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_Monoid_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Semiring check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_Semiring_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Semiring_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null semiring"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring2</name></expr></argument>, <argument><expr><name>GxB_MAX_FP32_MONOID</name></expr></argument>, <argument><expr><name>GrB_TIMES_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Semiring_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>semiring2</name></expr></argument>, <argument><expr><literal type="string">"semiring2 ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>semiring2</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>semiring2</name></expr></argument>, <argument><expr><literal type="string">"semiring2 freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>semiring2</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>semiring2</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>semiring2</name></expr></argument>, <argument><expr><literal type="string">"semiring2 invalid add monoid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>semiring2</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>GxB_MAX_FP32_MONOID</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>semiring2</name><operator>-&gt;</operator><name>multiply</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>semiring2</name></expr></argument>, <argument><expr><literal type="string">"semiring2 invalid mult"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>semiring2</name><operator>-&gt;</operator><name>multiply</name></name> <operator>=</operator> <name>GrB_TIMES_FP32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>semiring2</name><operator>-&gt;</operator><name>multiply</name></name> <operator>=</operator> <name>GrB_TIMES_INT32</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>semiring2</name></expr></argument>, <argument><expr><literal type="string">"semiring2 invalid mix"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>semiring2</name><operator>-&gt;</operator><name>multiply</name></name> <operator>=</operator> <name>GrB_TIMES_FP32</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_Semiring_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Descriptor check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_Descriptor_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Descriptor_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null descriptor"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>descb</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>descb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>descb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Descriptor_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>descb</name></expr></argument>, <argument><expr><literal type="string">"descb ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>descb</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>descb</name></expr></argument>, <argument><expr><literal type="string">"descb freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>descb</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>descb</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <literal type="number">42</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>descb</name></expr></argument>, <argument><expr><literal type="string">"descb invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>descb</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_Descriptor_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Vector check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_Vector_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Vector_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null vector"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Vector_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">990</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT32</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">991</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_wait_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v ok (might be bitmap)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v ok (sparse)"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v jumbled"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v fixed"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>psave</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>p_size_save</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>p_size</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>p_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>p_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v p[0] invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>mxFree</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>psave</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>p_size_save</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>p_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>psave</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v OK now"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_Vector_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Matrix check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n-------------- GB_Matrix_check:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Matrix_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null matrix"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Matrix_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A freed"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"p[0] invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid dimensions"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <literal type="number">10</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid type"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>GrB_FP64</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>psave</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"NULL Ap"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>psave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>I00</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>J00</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">3.14159</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_BOOL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_SECOND_FP64</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>I00</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J00</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pending pi"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pending pi again"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nvals %ld\n"</literal></expr></argument>, <argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n========================================== valid pi\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pi"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n===================================================\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A empty"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// change the type of the pending tuples, forcing a wait</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_BOOL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_SECOND_FP64</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>true</name></expr></argument>,
        <argument><expr><name>I00</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J00</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"with bool pending"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">3.14159</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"with pi pending"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>AP</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>AP</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">9.0909</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>AP</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>AP</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"with pi and 9.0909 pending"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Matrix_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>psave</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"NULL Ai"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>psave</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pi"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"Ap[0] invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>isave</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"Ap[1] invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"Ap[ncols] invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"negative zombies"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">1000</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"too many zombies"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"row index invalid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"bad zombies"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n========================================== valid [pi 7.1]\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">7.1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pending [pi 7.1]"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n===================================================\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Matrix_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>AP</name><operator>-&gt;</operator><name>n</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"negative pending"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>psave</name> <operator>=</operator> <name><name>AP</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"missing pending"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>psave</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pending [pi 7.1]"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>AP</name><operator>-&gt;</operator><name>j</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>AP</name><operator>-&gt;</operator><name>j</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>j</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1070</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"bad pending tuple"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>j</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pending [pi 7.1]"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n====================================== valid [pi 7.1 11.4]\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">11.4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pending [pi 7.1 11.4]"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n=========================================================\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Matrix_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>AP</name><operator>-&gt;</operator><name>j</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>j</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"jumbled pending tuples"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"jumbled pending tuples"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>j</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pending [pi 7.1 11.4]"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>AP</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>op2crud</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid operator"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>AP</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid pending [pi 7.1 11.4]"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n=========================================================\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n###### get nvals; assemble the pending tuples ##### \n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Matrix_check"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n====================================== valid [pi 7.1 11.4]\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid [pi 7 11.4]"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n=========================================================\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"jumbled"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"jumbled info %d\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"jumbled"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"jumbled info %d\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_INVALID_OBJECT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Empty1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>J</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Empty1</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid zombie"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">99099</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"no more zombie"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Empty1</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid zombie"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"again no more zombie"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Pending</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid, no pending"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// #define FREE_DEEP_COPY ;</comment>
    <comment type="line">// #define GET_DEEP_COPY ;</comment>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A now hyper"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_NEVER_HYPER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_hyper</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_IS_HYPER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A_is_hyper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// historical</comment>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>A_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_ALWAYS_HYPER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_IS_HYPER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A_is_hyper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// historical</comment>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// make sure A-&gt;nvec_nonempty is valid</comment>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <call><name>GB_nvec_nonempty</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// now make invalid.  GB_Matrix_check requires it to be -1, or correct value</comment>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>isave</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INDEX_OUT_OF_BOUNDS</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A with bad nvec_nonempty"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>isave</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A fixed"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>hratio</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>hratio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>hratio2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hratio2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>hratio</name> <operator>==</operator> <name>hratio2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name><name>bswitch</name> <index>[<expr><name>GxB_NBITMAP_SWITCH</name></expr>]</index></name></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GxB_NBITMAP_SWITCH</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>bswitch</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>k</name> <operator>/</operator> <literal type="number">16.0</literal></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><name>bswitch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name><name>bswitch2</name> <index>[<expr><name>GxB_NBITMAP_SWITCH</name></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><name>bswitch2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GxB_NBITMAP_SWITCH</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>fabs</name> <argument_list>(<argument><expr><name><name>bswitch</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>bswitch2</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-5</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><name>bswitch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GxB_NBITMAP_SWITCH</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"default bswitch [%d] = %g\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>bswitch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>format</name> <operator>==</operator> <name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>format</name> <operator>==</operator> <name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="number">99</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>format</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><literal type="number">77.33f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hratio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%g\n"</literal></expr></argument>, <argument><expr><name>hratio</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>hratio</name> <operator>==</operator> <literal type="number">77.33f</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_HYPER_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hratio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>hratio</name> <operator>==</operator> <name>GxB_HYPER_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>O_NULL</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>O_NULL</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>O_NULL</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected (A format null):%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected:%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected:%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected (bad field):%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected:%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected:%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><literal type="number">909090</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_error_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected:%s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Ah_save</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"h invalid"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>Ah_save</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"h restored"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"nvec invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>nvec</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"nvec restored"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>jsave</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"h[0] invalid"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>jsave</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"h[0] restored"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Eleven</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Eleven</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_BOOL</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>true</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven"</literal></expr></argument>, <argument><expr><name>G2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>pr</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl> ;</init> <condition><expr><name>pr</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><name>pr</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven is OK"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_convert_hyper_to_sparse</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nothing</name> <init>= <expr><literal type="number">42</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nEleven invalid hypersparse:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_free_memory</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>Eleven</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>Eleven</name><operator>-&gt;</operator><name>h_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Eleven</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <operator>&amp;</operator><name>nothing</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Eleven</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><name>Eleven</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven invalid"</literal></expr></argument>, <argument><expr><name>G2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven"</literal></expr></argument>, <argument><expr><name>G2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven invalid"</literal></expr></argument>, <argument><expr><name>G2</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><name>Eleven</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Eleven</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Eleven</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Eleven</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">11</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">11</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GrB_Matrix_setElement_BOOL</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>Eleven</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait_</name><argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">121</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>Eleven</name></expr></argument>, <argument><expr><literal type="string">"Eleven"</literal></expr></argument>, <argument><expr><name>G2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Eleven</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll GB_Matrix_check tests passed (errors expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// blocking vs non-blocking mode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">32.4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A with one pending"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>AP</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_mode_set</name> <argument_list>(<argument><expr><name>GrB_BLOCKING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_block</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A with no pending"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">99.4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A blocking mode"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_mode_set</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>AP</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>AP</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll blocking/nonblocking mode tests passed\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// restore all 'crud' objects so they can be freed</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// printf ("\n-------------- Restore crud objects:\n") ;</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_UNINITIALIZED_OBJECT</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB *_check"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>op1crud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>monoid_crud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>semicrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
         <expr_stmt><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectopcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectopcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_fprint</name> <argument_list>(<argument><expr><name>op1crud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_fprint</name> <argument_list>(<argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_fprint</name> <argument_list>(<argument><expr><name>monoid_crud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_fprint</name> <argument_list>(<argument><expr><name>semicrud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
         <expr_stmt><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>selectopcrud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint</name> <argument_list>(<argument><expr><name>selectopcrud</name></expr></argument>, <argument><expr><literal type="string">"crud"</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMAGIC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (p != NULL) p-&gt;magic = GB_MAGIC ;</cpp:value></cpp:define>
    <macro><name>REMAGIC</name> <argument_list>(<argument>Tcrud</argument>)</argument_list></macro>
    <macro><name>REMAGIC</name> <argument_list>(<argument>op1crud</argument>)</argument_list></macro>
    <macro><name>REMAGIC</name> <argument_list>(<argument>op2crud</argument>)</argument_list></macro>
    <macro><name>REMAGIC</name> <argument_list>(<argument>monoid_crud</argument>)</argument_list></macro>
    <macro><name>REMAGIC</name> <argument_list>(<argument>semicrud</argument>)</argument_list></macro>
    <macro><name>REMAGIC</name> <argument_list>(<argument>vcrud</argument>)</argument_list></macro>
    <macro><name>REMAGIC</name> <argument_list>(<argument>Acrud</argument>)</argument_list></macro>
    <macro><name>REMAGIC</name> <argument_list>(<argument>dcrud</argument>)</argument_list></macro>
    <macro><name>REMAGIC</name> <argument_list>(<argument>selectopcrud</argument>)</argument_list></macro>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>REMAGIC</name></cpp:undef>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_UnaryOp_check</name> <argument_list>(<argument><expr><name>op1crud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name>op2crud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Monoid_check</name> <argument_list>(<argument><expr><name>monoid_crud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Semiring_check</name> <argument_list>(<argument><expr><name>semicrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_check</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_SelectOp_check</name> <argument_list>(<argument><expr><name>selectopcrud</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint_</name><argument_list>(<argument><expr><name>Tcrud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_fprint_</name><argument_list>(<argument><expr><name>op1crud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_fprint_</name><argument_list>(<argument><expr><name>op2crud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_fprint_</name><argument_list>(<argument><expr><name>monoid_crud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_fprint_</name><argument_list>(<argument><expr><name>semicrud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint_</name><argument_list>(<argument><expr><name>vcrud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint_</name><argument_list>(<argument><expr><name>Acrud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint_</name><argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_SelectOp_fprint_</name><argument_list>(<argument><expr><name>selectopcrud</name></expr></argument>, <argument><expr><name>G0</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GB_Descriptor_get</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>dcrud</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>x_bool</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_Descriptor_get"</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GB_Descriptor_get</name> <argument_list>(<argument><expr><name>dcrud</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_bool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>x_bool</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>dcrud</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// malloc wrappers</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>x</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>GB_malloc_memory</name> <argument_list>(<argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>pp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>x</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>GB_calloc_memory</name> <argument_list>(<argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>pp</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>GB_realloc_memory</name> <argument_list>(<argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">911</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>UINT64_MAX</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>UINT64_MAX</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>UINT32_MAX</name><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>UINT32_MAX</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>UINT32_MAX</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>UINT32_MAX</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>UINT32_MAX</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>UINT32_MAX</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>s</name> <operator>==</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>UINT32_MAX</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>UINT32_MAX</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GrB_error"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">911</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">911</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GB_NMAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>GB_NMAX</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>GB_NMAX</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>GB_NMAX</name><operator>)</operator></expr></argument>,
        <argument><expr><operator>(</operator><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>GB_NMAX</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name><operator>)</operator> <literal type="number">16777216</literal><operator>/</operator><literal type="number">2</literal></expr> ;</expr_stmt>     <comment type="line">// (2^24)/2</comment>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name><operator>)</operator> <literal type="number">16777216</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// printf ("%lld %lld n\n", n, a*b) ;</comment>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <macro><name>CHECK</name> <argument_list>(<argument>n == a*b</argument>)</argument_list></macro>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// internal GB * routines</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    OK (GxB_Matrix_fprint (A, "A for bix_alloc", G3, NULL)) ;
    CHECK (A != NULL) ;
    Context-&gt;where = "GB_bix_alloc" ;
    info = GB_bix_alloc (A, GB_NMAX+1, GxB_SPARSE, true, true, false,
        Context) ;
    CHECK (info == GrB_OUT_OF_MEMORY) ;
    OK (GrB_Matrix_free_(&amp;A)) ;
    OK (GrB_Matrix_new (&amp;A, GrB_BOOL, 11, 11)) ;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_ix_realloc"</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for ix_realloc"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_ix_realloc</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GB_NMAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A pattern 1"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_ix_realloc</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A pattern 2"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_bix_free</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_phy_free</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>C</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>B</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for shallow op"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Context</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <literal type="string">"GB_shallow_op"</literal></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>Q_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Q</name> <init>= <expr><call><name>GB_clear_static_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Q_header</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_shallow_op</name> <argument_list>(<argument><expr><name>Q</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_AINV_FP32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>Q</name></expr></argument>, <argument><expr><literal type="string">"Q empty, float"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>imin</name></decl>, <decl><type ref="prev"/><name>imax</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_op_is_second</name> <argument_list>(<argument><expr><name>GrB_SECOND_FP64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for inputs aliased with outputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"free A:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"free B:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"free C:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"free E:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>E</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"free F:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>F</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"free v:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"free u:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"free z:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NWHAT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>NWHAT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <literal type="number">40</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>uvals</name> <operator>=</operator> <literal type="number">4</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>ilist</name> <index>[<expr><name>NWHAT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>jlist</name> <index>[<expr><name>NWHAT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP64</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">3.4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>E</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>E</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>u</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>what</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>what</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr> ;</condition> <incr><expr><name>what</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Amask</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>umask</name></decl> ;</decl_stmt>
        <switch>switch <condition>(<expr><name>what</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>Amask</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name>umask</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>Amask</name> <operator>=</operator> <name>A</name></expr>    ;</expr_stmt> <expr_stmt><expr><name>umask</name> <operator>=</operator> <name>u</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Amask</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>F</name></expr></argument>,<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>uvals</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// vectors cannot be hypersparse</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// vectors cannot be CSC: this is a hack just for brutal testing</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>umask</name> <operator>=</operator> <operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>F</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>F</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <default>default:</default>
            <break>break ;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>umask</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>umask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GrB_mxm, GrB_vxm, and GrB_mxv</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Amask</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>Amask</name></expr></argument>, <argument><expr><literal type="string">"Amask ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"u ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>umask</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>umask</name></expr></argument>, <argument><expr><literal type="string">"umask ok"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxv</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GrB_eWiseMult</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>,  <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>,  <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,        <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,        <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>,  <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseMult_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>,  <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseMult_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GrB_eWiseAdd</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>,  <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>,  <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,        <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,        <argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>,  <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_Semiring_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP64</name></expr></argument>,  <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_Monoid_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>,        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GrB_extract</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nGrB_extract ============================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"start u "</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"start v "</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_extract_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"u to check"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v to check"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Col_extract_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GxB_subassign</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>jlist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>jlist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_subassign</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GrB_assign</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>jlist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>jlist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_assign_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>ilist</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="string">"v"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><literal type="string">"u"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GrB_apply</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_apply_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_apply_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_AINV_FP64</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1e-14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GxB_select</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_select_</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>umask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GrB_transepose</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Amask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>ignore</name></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_mx_isequal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Amask</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>umask</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// nthreads</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n----------------------------- nthreads\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nthreads</name> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nthreads</name> <operator>==</operator> <literal type="number">43</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_DESCRIPTOR_NTHREADS</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_DESCRIPTOR_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nthreads</name> <operator>==</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// import/export</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n----------------------------- import/export\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to import/export"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ai</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Aj</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ah</name></decl>, <decl><type ref="prev"/><name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>, <decl><type ref="prev"/><name>nvecs</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>Ax</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>jumbled</name></decl>, <decl><type ref="prev"/><name>iso</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>Ap_size</name></decl>, <decl><type ref="prev"/><name>Aj_size</name></decl>, <decl><type ref="prev"/><name>Ai_size</name></decl>, <decl><type ref="prev"/><name>Ax_size</name></decl>, <decl><type ref="prev"/><name>Ah_size</name></decl>, <decl><type ref="prev"/><name>Ab_size</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>atype</name></expr></argument>, <argument><expr><literal type="string">"type of A"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Ax_size %llu\n"</literal></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nrows</name><operator>)</operator></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"exported row %lld\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"   col %lld value %g\n"</literal></expr></argument>, <argument><expr><name><name>Aj</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Ax</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A imported"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>




    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>


    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>



    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>





    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>


    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A still OK"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>


    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>


    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A also OK"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>



    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>


    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A here too OK"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvecs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>



    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>


    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>



    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A yet still OK"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvecs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>



    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
        <argument><expr><name>nvecs</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A yet again OK"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// vector import/export</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>nvals</name> <operator>=</operator> <literal type="number">99</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"u to import/export"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>utype</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>utype</name></expr></argument>, <argument><expr><literal type="string">"type of u"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nvals %llu\n"</literal></expr></argument>, <argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nvals</name> <operator>!=</operator> <literal type="number">99</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nvals</name><operator>)</operator></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name><name>Ax</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"   col %lld value %g\n"</literal></expr></argument>, <argument><expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Ax</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>utype</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"u imported"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<comment type="line">//  ERR (GxB_Vector_export_CSC (&amp;u, &amp;utype, &amp;n, &amp;Ai, (void **) &amp;Ax, &amp;Ai_size, &amp;Ax_size, &amp;iso, &amp;nvals, NULL, desc)) ;</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"u still OK"</literal></expr></argument>, <argument><expr><name>G1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>utype</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>utype</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>utype</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>utype</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>utype</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><name>utype</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Vector_check</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"u still OK"</literal></expr></argument>, <argument><expr><name>G3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free all</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// this is also done by FREE_ALL, but the list is meant to be</comment>
    <comment type="line">// accurate, so nmalloc should be zero at the check below</comment>

    <expr_stmt><expr><name>nmalloc</name> <operator>=</operator> <call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n\nfree all: nmalloc %d\n"</literal></expr></argument>, <argument><expr><name>nmalloc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Empty1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Empty1</name>       <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>v</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>A</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>u</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>z</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>h</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>B</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>C</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>E</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>E</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>F</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>F</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Z</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Z</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>H</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>H</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>              <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>T</name>            <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Acrud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Acrud</name>        <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Tcrud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Tcrud</name>        <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_UnaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op1crud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1crud</name>      <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op2crud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2crud</name>      <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op3</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op3</name>          <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_UnaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op1b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op1b</name>         <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op2b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>op2b</name>         <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>semiring2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semiring2</name>    <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>descb</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>descb</name>        <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vb</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>vb</name>           <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monoidb</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoidb</name>      <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monoid_crud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>monoid_crud</name>  <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>semicrud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>semicrud</name>     <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vcrud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>vcrud</name>        <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Aempty</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>Aempty</name>       <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vempty</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>vempty</name>       <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>desc</name>         <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dtn</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dtn</name>          <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dnt</name>          <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dtt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dtt</name>          <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Descriptor_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dcrud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>dcrud</name>        <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_SelectOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectop</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectop</name>     <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_SelectOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectopcrud</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>selectopcrud</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>nmalloc</name> <operator>=</operator> <call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nmalloc %d before complex_finalize\n"</literal></expr></argument>, <argument><expr><name>nmalloc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>Complex_finalize</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nmalloc</name> <operator>=</operator> <call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nmalloc %d done\n"</literal></expr></argument>, <argument><expr><name>nmalloc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_finalize</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nmalloc</name> <operator>=</operator> <call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nmalloc %d all freed\n"</literal></expr></argument>, <argument><expr><name>nmalloc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nmalloc</name> <operator>=</operator> <call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nmalloc %d all freed\n"</literal></expr></argument>, <argument><expr><name>nmalloc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nblocks</name> <init>= <expr><call><name>GB_Global_free_pool_nblocks_total</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nblocks in free_pool %ld\n"</literal></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_finalize</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nmalloc</name> <operator>=</operator> <call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nmalloc %d after finalize\n"</literal></expr></argument>, <argument><expr><name>nmalloc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nmalloc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>GB_Global_free_pool_nblocks_total</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>nblocks</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\ncheck errlog.txt for errors tested\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"All error-handling tests passed"</literal>
            <literal type="string">" (all errors above were expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\nAll error-handling tests passed"</literal>
            <literal type="string">" (all errors above were expected)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
