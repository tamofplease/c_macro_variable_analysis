<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_get_global.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_get_global: get variables from the global workspace</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_get_global</name>       <comment type="line">// true if doing malloc_debug</comment>
<parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>cover</name></decl></parameter>              <comment type="line">// true if doing statement coverage</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get malloc debug</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>debug</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>debug_builtin</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>debug_builtin</name> <operator>=</operator> <call><name>mexGetVariablePtr</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS_debug"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>debug_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>debug_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// doesn't exist; create it and set it to false</comment>
        <expr_stmt><expr><name>debug_builtin</name> <operator>=</operator> <call><name>GB_mx_create_full</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>debug</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>debug_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>debug</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"debug_builtin null?!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>debug</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <comment type="line">// copy it into the global workspace</comment>
        <expr_stmt><expr><call><name>mexPutVariable</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS_debug"</literal></expr></argument>, <argument><expr><name>debug_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>debug</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>debug_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>debug</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"debug_builtin null!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>malloc_debug</name> <operator>=</operator> <name><name>debug</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <comment type="line">// if (malloc_debug) printf ("GraphBLAS malloc debug enabled\n") ;</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get test coverage</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GBCOVER</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>cover</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GB_cover_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initialize GraphBLAS</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>burble</name> <init>= <expr><call><name>GB_Global_burble_get</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>            <comment type="line">// save current burble</comment>
    <expr_stmt><expr><call><name>GB_Global_GrB_init_called_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>, <argument><expr><name>mxMalloc</name></expr></argument>, <argument><expr><name>mxCalloc</name></expr></argument>, <argument><expr><name>mxRealloc</name></expr></argument>, <argument><expr><name>mxFree</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// mxMalloc, mxCalloc, mxRealloc, and mxFree are not thread safe</comment>
    <expr_stmt><expr><call><name>GB_Global_malloc_is_thread_safe_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Global_nmalloc_get</name> <argument_list>( )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_abort_function_set</name> <argument_list>(<argument><expr><name>GB_mx_abort</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_tracking_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_BURBLE</name></expr></argument>, <argument><expr><name>burble</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// restore the burble</comment>
    <expr_stmt><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_PRINTF</name></expr></argument>, <argument><expr><name>mexPrintf</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get nthreads</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nthreads</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>nthreads_builtin</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>nthreads_builtin</name> <operator>=</operator> <call><name>mexGetVariablePtr</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS_nthreads"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nthreads_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>nthreads_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// doesn't exist; create it and set it to 1</comment>
        <expr_stmt><expr><name>nthreads_builtin</name> <operator>=</operator> <call><name>GB_mx_create_full</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>nthreads_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"nthreads_builtin null?!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>nthreads</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <comment type="line">// copy it into the global workspace</comment>
        <expr_stmt><expr><call><name>mexPutVariable</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS_nthreads"</literal></expr></argument>, <argument><expr><name>nthreads_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>nthreads_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"nthreads_builtin null!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><name><name>nthreads</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get chunk</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>chunk_builtin</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>chunk_builtin</name> <operator>=</operator> <call><name>mexGetVariablePtr</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS_chunk"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>chunk_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>chunk_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// doesn't exist; create it and set it to GB_CHUNK_DEFAULT</comment>
        <expr_stmt><expr><name>chunk_builtin</name> <operator>=</operator> <call><name>GB_mx_create_full</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>chunk_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"chunk_builtin null?!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>chunk</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GB_CHUNK_DEFAULT</name></expr> ;</expr_stmt>
        <comment type="line">// copy it into the global workspace</comment>
        <expr_stmt><expr><call><name>mexPutVariable</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS_chunk"</literal></expr></argument>, <argument><expr><name>chunk_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>chunk_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"chunk_builtin null!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_CHUNK</name></expr></argument>, <argument><expr><name><name>chunk</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get GraphBLAS_complex flag and allocate the complex type and operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>builtin_complex</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>builtin_complex_builtin</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>builtin_complex_builtin</name> <operator>=</operator>
        <call><name>mexGetVariablePtr</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS_builtin_complex"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>builtin_complex_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>builtin_complex_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// doesn't exist; create it and set it to TRUE</comment>
        <expr_stmt><expr><name>builtin_complex_builtin</name> <operator>=</operator> <call><name>GB_mx_create_full</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>builtin_complex</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>builtin_complex_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>builtin_complex</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"builtin_complex_builtin null?!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>builtin_complex</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <comment type="line">// copy it into the global workspace</comment>
        <expr_stmt><expr><call><name>mexPutVariable</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS_builtin_complex"</literal></expr></argument>,
            <argument><expr><name>builtin_complex_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>builtin_complex</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>builtin_complex_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>builtin_complex</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"builtin_complex_builtin null!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>Complex_init</name> <argument_list>(<argument><expr><name><name>builtin_complex</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return malloc debug status</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>malloc_debug</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
