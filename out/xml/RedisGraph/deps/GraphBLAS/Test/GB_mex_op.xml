<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_op.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_op: apply a built-in GraphBLAS operator to built-in arrays</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Usage:</comment>

<comment type="line">// Z = GB_mex_op (op, X, Y)</comment>
<comment type="line">// Z = GB_mex_op (op, X)</comment>

<comment type="line">// Apply a built-in GraphBLAS operator or a user-defined Complex operator to</comment>
<comment type="line">// one or two arrays X and Y of any built-in logical or numeric type.  X and Y</comment>
<comment type="line">// are first typecasted into the x and y operand types of the op.  The output Z</comment>
<comment type="line">// has the same type as the z type of the op.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"Z = GB_mex_op (opname, X, Y, cover)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    GB_mx_put_global (do_cover) ;       \
}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Y</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Z</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>X_type</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>Y_type</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ncols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ny</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nrows2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ncols2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>Y_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>do_cover</name> <init>= <expr><operator>(</operator><name>nargin</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>do_cover</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// if Y is char and cover present, treat as if nargin == 2</comment>
    <if_stmt><if>if <condition>(<expr><name>do_cover</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>nargin</name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get op; default type is the same type as X</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_UnaryOp</name></type>  <name>op1</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>op_ztype</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>op_xtype</name></decl>, <decl><type ref="prev"/><name>op_ytype</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>   <name>op_zsize</name></decl>, <decl><type ref="prev"/><name>op_xsize</name></decl>, <decl><type ref="prev"/><name>op_ysize</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name> <init>= <expr><call><name>GB_mx_Type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check for complex case</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>XisComplex</name> <init>= <expr><call><name>mxIsComplex</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>YisComplex</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nargin</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>mxIsComplex</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>user_complex</name> <init>= <expr><operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>XisComplex</name> <operator>||</operator> <name>YisComplex</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// get a binary op</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"GB_mex_op"</literal></expr></argument>,
            <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>op2</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"binary op missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>op_ztype</name> <operator>=</operator> <name><name>op2</name><operator>-&gt;</operator><name>ztype</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>op_zsize</name> <operator>=</operator> <name><name>op_ztype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_xtype</name> <operator>=</operator> <name><name>op2</name><operator>-&gt;</operator><name>xtype</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>op_xsize</name> <operator>=</operator> <name><name>op_xtype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_ytype</name> <operator>=</operator> <name><name>op2</name><operator>-&gt;</operator><name>ytype</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>op_ysize</name> <operator>=</operator> <name><name>op_ytype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>, <argument><expr><literal type="string">"binary op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_OP_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"binary positional op not supported"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// get a unary op</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_UnaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"GB_mex_op"</literal></expr></argument>,
            <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>op1</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unary op missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>op_ztype</name> <operator>=</operator> <name><name>op1</name><operator>-&gt;</operator><name>ztype</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>op_zsize</name> <operator>=</operator> <name><name>op_ztype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_xtype</name> <operator>=</operator> <name><name>op1</name><operator>-&gt;</operator><name>xtype</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>op_xsize</name> <operator>=</operator> <name><name>op_xtype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_ytype</name> <operator>=</operator> <name>NULL</name></expr>       ;</expr_stmt> <expr_stmt><expr><name>op_ysize</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_UNARYOP_OK</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><literal type="string">"unary op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_OP_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unary positional op not supported"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>op_ztype</name></expr></argument>, <argument><expr><literal type="string">"Z type"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get X</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_mx_mxArray_to_array</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nx</name> <operator>=</operator> <name>nrows</name> <operator>*</operator> <name>ncols</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>X_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X must be numeric"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>X_type</name></expr></argument>, <argument><expr><literal type="string">"X type"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>X_size</name> <init>= <expr><name><name>X_type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>op_xtype</name></expr></argument>, <argument><expr><name>X_type</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"op xtype not compatible with X"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get Y</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GB_mx_mxArray_to_array</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ny</name> <operator>=</operator> <name>nrows2</name> <operator>*</operator> <name>ncols2</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nrows2</name> <operator>!=</operator> <name>nrows</name> <operator>||</operator> <name>ncols2</name> <operator>!=</operator> <name>ncols</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X and Y must be the same size"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>Y_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Y must be numeric"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>Y_type</name></expr></argument>, <argument><expr><literal type="string">"Y type"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Y_size</name> <operator>=</operator> <name><name>Y_type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>op_ytype</name></expr></argument>, <argument><expr><name>Y_type</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"op ytype not compatible with Y"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create Z of the same type as op_ztype</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_create_full</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>op_ztype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Z</name> <operator>=</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get scalar workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>char</name></type> <name><name>xwork</name> <index>[<expr><call><name>GB_VLA</name> <argument_list>(<argument><expr><name>op_xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ywork</name> <index>[<expr><call><name>GB_VLA</name> <argument_list>(<argument><expr><name>op_ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_X</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>op_xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>X_type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// do the op</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Z = f (X,Y)</comment>
        <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>f_binary</name> <init>= <expr><name><name>op2</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_Y</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>op_ytype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>,<argument><expr><name><name>Y_type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nx</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cast_X</name> <argument_list>(<argument><expr><name>xwork</name></expr></argument>, <argument><expr><name>X</name> <operator>+</operator><operator>(</operator><name>k</name><operator>*</operator><name>X_size</name><operator>)</operator></expr></argument>, <argument><expr><name>X_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>cast_Y</name> <argument_list>(<argument><expr><name>ywork</name></expr></argument>, <argument><expr><name>Y</name> <operator>+</operator><operator>(</operator><name>k</name><operator>*</operator><name>Y_size</name><operator>)</operator></expr></argument>, <argument><expr><name>Y_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// printf ("x: ")   ; GB_code_check (op_xtype-&gt;code,xwork,3,NULL) ;</comment>
            <comment type="line">// printf ("\ny: ") ; GB_code_check (op_ytype-&gt;code,ywork,3,NULL) ;</comment>
            <expr_stmt><expr><call><name>f_binary</name> <argument_list>(<argument><expr><name>Z</name> <operator>+</operator><operator>(</operator><name>k</name><operator>*</operator><name>op_zsize</name><operator>)</operator></expr></argument>, <argument><expr><name>xwork</name></expr></argument>, <argument><expr><name>ywork</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// printf ("\nz: ") ; GB_code_check (op_ztype-&gt;code,</comment>
            <comment type="line">//                    Z +(k*op_zsize), 3, NULL) ; printf ("\n") ;</comment>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// Z = f (X)</comment>
        <decl_stmt><decl><type><name>GxB_unary_function</name></type> <name>f_unary</name> <init>= <expr><name><name>op1</name><operator>-&gt;</operator><name>unop_function</name></name></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nx</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cast_X</name> <argument_list>(<argument><expr><name>xwork</name></expr></argument>, <argument><expr><name>X</name> <operator>+</operator><operator>(</operator><name>k</name><operator>*</operator><name>X_size</name><operator>)</operator></expr></argument>, <argument><expr><name>X_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>f_unary</name> <argument_list>(<argument><expr><name>Z</name> <operator>+</operator><operator>(</operator><name>k</name><operator>*</operator><name>op_zsize</name><operator>)</operator></expr></argument>, <argument><expr><name>xwork</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
