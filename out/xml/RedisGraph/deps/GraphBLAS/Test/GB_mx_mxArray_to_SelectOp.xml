<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_mxArray_to_SelectOp.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_mxArray_to_SelectOp</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Convert a built-in string to a built-in GraphBLAS SelectOp.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_mxArray_to_SelectOp</name>          <comment type="line">// true if successful</comment>
<parameter_list>(
    <parameter><decl><type><name>GxB_SelectOp</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,               <comment type="line">// returns GraphBLAS version of op</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>op_builtin</name></decl></parameter>,          <comment type="line">// built-in version of op</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>                    <comment type="line">// name of the argument</comment>
)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>opname_mx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>op_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>op_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"select op missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>mxIsChar</name> <argument_list>(<argument><expr><name>op_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// op is a string</comment>
        <expr_stmt><expr><name>opname_mx</name> <operator>=</operator> <name>op_builtin</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"select op must be string"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// find the corresponding built-in GraphBLAS operator</comment>
    <decl_stmt><decl><type><name>GxB_SelectOp</name></type> <name>op</name></decl> ;</decl_stmt>

    <comment type="line">// get the string</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>opname</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GB_mx_mxArray_to_string</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>opname_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if      <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"tril"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TRIL</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"triu"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TRIU</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"diag"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_DIAG</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"offdiag"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_OFFDIAG</name></expr> ;</expr_stmt> </block_content>}</block></if>

    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"nonzero"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_NONZERO</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"eq_zero"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EQ_ZERO</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"gt_zero"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_GT_ZERO</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ge_zero"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_GE_ZERO</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"lt_zero"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LT_ZERO</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"le_zero"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LE_ZERO</name></expr> ;</expr_stmt> </block_content>}</block></if>

    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ne_thunk"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_NE_THUNK</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"eq_thunk"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EQ_THUNK</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"gt_thunk"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_GT_THUNK</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ge_thunk"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_GE_THUNK</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"lt_thunk"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LT_THUNK</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"le_thunk"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LE_THUNK</name></expr> ;</expr_stmt> </block_content>}</block></if>

    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isnan"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> </block_content>}</block></if>

    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown select op"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// return the op</comment>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT_SELECTOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>op</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
