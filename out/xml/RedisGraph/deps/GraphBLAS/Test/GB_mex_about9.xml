<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_about9.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_about9: still more basic tests (not for Windows)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Windows is limited to user-defined types of size 128 or less.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex_errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"GB_mex_about9"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name><name>stuff</name> <index>[<expr><literal type="number">32</literal></expr>]</index></name></decl> ;</decl_stmt>
}</block></struct></type>
<name>bigtype</name> ;</typedef>

 <function_decl><type><name>void</name></type> <name>f1</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
 <function_decl><type><name>void</name></type> <name>f2</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> ;</function_decl>
 <function_decl><type><name>void</name></type> <name>i1</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list> ;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name></cpp:macro>                                                              \
<cpp:value>"void f1 (void *z, const void *x) "                                     \
"{ (*((double *)z)) = 2*(*(double *)x) ; } "</cpp:value></cpp:define>
 <function><type><name>void</name></type> <name>f1</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
 <block>{<block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>z</name><operator>)</operator><operator>)</operator> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>x</name><operator>)</operator></expr> ;</expr_stmt> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2</name></cpp:macro>                                                              \
<cpp:value>"void f2 (void *z, const void *x, const void *y) "                      \
"{ (*((double *)z)) = 2*(*(double *)x) + 1 ; }   "</cpp:value></cpp:define>
 <function><type><name>void</name></type> <name>f2</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
 <block>{<block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>z</name><operator>)</operator><operator>)</operator> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>x</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I1</name></cpp:macro>                                                          \
<cpp:value>"void i1 (void *z, const void *x, GrB_Index i, GrB_Index j, "       \
" const void *thunk) "                                              \
"{ (*((bool *)z)) = (i == j) ; }"</cpp:value></cpp:define>
 <function><type><name>void</name></type> <name>i1</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
 <block>{<block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator><name>z</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator></expr> ;</expr_stmt> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// startup GraphBLAS</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// user-defined type of 256 bytes</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>BigType</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>BigType</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>bigtype</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"bigtype"</literal></expr></argument>,
        <argument><expr><literal type="string">"typedef struct { double stuff [32] ; } bigtype"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>BigType</name></expr></argument>, <argument><expr><literal type="string">"(256-byte big type)"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>,
        <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>BigType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// user-defined operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_UnaryOp</name></type> <name>op1</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><literal type="string">"f1"</literal></expr></argument>, <argument><expr><name>F1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_UnaryOp_fprint</name> <argument_list>(<argument><expr><name>op1</name></expr></argument>, <argument><expr><literal type="string">"f1"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>,
        <argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><name>F2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_fprint</name> <argument_list>(<argument><expr><name>op2</name></expr></argument>, <argument><expr><literal type="string">"f2"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_BinaryOp_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_IndexUnaryOp</name></type> <name>opi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>,
        <argument><expr><literal type="string">"i1"</literal></expr></argument>, <argument><expr><name>I1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_IndexUnaryOp_fprint</name> <argument_list>(<argument><expr><name>opi</name></expr></argument>, <argument><expr><literal type="string">"i1"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>opi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce an empty matrix to a scalar using the ANY monoid</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"empty matrix"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">42</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_ANY_FP32_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nreduce empty matrix to non-opaque scalar via ANY: %g\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_FP32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"scalar == 33"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_Monoid_Scalar</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_ANY_FP32_MONOID</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nreduce empty matrix to opaque scalar via ANY:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"empty scalar"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// enumify, macrofy, and related methods</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>GB_charify_identity_or_terminal</name> <argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Using GB_boolean_rename results in  these cases not being tested.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ecode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_MIN_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_MAX_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_TIMES_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_PLUS_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_NE_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_ISEQ_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_ISNE_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_DIV_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_RDIV_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_RMINUS_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_POW_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">71</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_binop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_MINUS_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_enumify_identity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_MIN_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_identity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_MAX_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>ecode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_terminal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_TIMES_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ecode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_terminal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_MIN_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_enumify_terminal</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ecode</name></expr></argument>, <argument><expr><name>GB_MAX_binop_code</name></expr></argument>, <argument><expr><name>GB_BOOL_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ecode</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name> <argument_list>(<argument><expr><literal type="string">"/tmp/GB_tcov_gunk.h"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_binop</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"nothing"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">199</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// wrapup</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_mx_put_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nGB_mex_about9: all tests passed\n\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
