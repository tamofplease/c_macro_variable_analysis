<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_mxArray_to_Semiring.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_mxArray_to_Semiring</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Get a built-in semiring struct and convert it into a GraphBLAS semiring.</comment>
<comment type="line">//</comment>
<comment type="line">// The semiring struct must contain the following strings:</comment>
<comment type="line">//</comment>
<comment type="line">//      multiply    a string with the name of the 'multiply' binary operator.</comment>
<comment type="line">//      add         a string with the name of the 'add' binary operator.</comment>
<comment type="line">//                  The operator must be commutative.</comment>
<comment type="line">//      type        the type of x and y for the multiply operator.</comment>
<comment type="line">//                  ('logical', 'int8', ... 'double complex').  optional.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_mxArray_to_Semiring</name>          <comment type="line">// true if successful</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Semiring</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,               <comment type="line">// the semiring</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>semiring_builtin</name></decl></parameter>,    <comment type="line">// built-in version of semiring</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,                   <comment type="line">// name of the argument</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>default_optype</name></decl></parameter>,      <comment type="line">// default operator type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>user_complex</name></decl></parameter>             <comment type="line">// if true, use user-defined Complex op</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>multiply_mx</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type_mx</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>add_mx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>semiring_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>semiring_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// semiring is not present; defaults will be used</comment>
        <empty_stmt>;</empty_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>mxIsStruct</name> <argument_list>(<argument><expr><name>semiring_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// look for semiring.multiply</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>fieldnumber</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>semiring_builtin</name></expr></argument>, <argument><expr><literal type="string">"multiply"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>multiply_mx</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>semiring_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// look for semiring.class</comment>
        <expr_stmt><expr><name>fieldnumber</name> <operator>=</operator> <call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>semiring_builtin</name></expr></argument>, <argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>type_mx</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>semiring_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// look for semiring.add</comment>
        <expr_stmt><expr><name>fieldnumber</name> <operator>=</operator> <call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>semiring_builtin</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>add_mx</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>semiring_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"invalid semiring"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// find the corresponding GraphBLAS multiply operator</comment>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>multiply</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_string_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>multiply</name></expr></argument>, <argument><expr><name>default_optype</name></expr></argument>,
        <argument><expr><name>multiply_mx</name></expr></argument>, <argument><expr><name>type_mx</name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>multiply</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"mult missing or failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>multiply</name></expr></argument>, <argument><expr><literal type="string">"semiring multiply"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// find the corresponding GraphBLAS add operator</comment>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>add</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>add</name></expr></argument>, <argument><expr><name>add_mx</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name><name>multiply</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>,
        <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>add</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"add missing or failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="string">"semiring add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create the monoid with the add operator and its identity value</comment>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>monoid</name> <init>= <expr><call><name>GB_mx_BinaryOp_to_Monoid</name> <argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MONOID_OK</name> <argument_list>(<argument><expr><name>monoid</name></expr></argument>, <argument><expr><literal type="string">"semiring monoid"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"monoid missing or failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// create the semiring</comment>
    <decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>semiring</name> <init>= <expr><call><name>GB_mx_semiring</name> <argument_list>(<argument><expr><name>monoid</name></expr></argument>, <argument><expr><name>multiply</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>semiring</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT_SEMIRING_OK</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>, <argument><expr><literal type="string">"semiring"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>semiring</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
