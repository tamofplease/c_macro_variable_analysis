<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_mxArray_to_indices.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_mxArray_to_indices</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Get a list of indices from a built-in array</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_mxArray_to_indices</name>       <comment type="line">// true if successful, false otherwise</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>,             <comment type="line">// index array returned</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>I_builtin</name></decl></parameter>,       <comment type="line">// built-in mxArray to get</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>ni</name></decl></parameter>,                  <comment type="line">// length of I, or special</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,           <comment type="line">// for all but GB_LIST</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>I_is_list</name></decl></parameter>                 <comment type="line">// true if GB_LIST</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>X</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>I_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>I</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name>GrB_ALL</name></expr> ;</expr_stmt>       <comment type="line">// like the ":" in C=A(:,j)</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>I</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_is_list</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <comment type="line">// Icolon not used</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mxIsStruct</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// a struct with 3 integers: I.begin, I.inc, I.end</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_is_list</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

            <comment type="line">// look for I.begin (required)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>fieldnumber</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>, <argument><expr><literal type="string">"begin"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"I.begin missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// look for I.end (required)</comment>
            <expr_stmt><expr><name>fieldnumber</name> <operator>=</operator> <call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"I.end missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>X</name></decl> ;</decl_stmt>
            <expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// look for I.inc (optional)</comment>
            <expr_stmt><expr><name>fieldnumber</name> <operator>=</operator> <call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>, <argument><expr><literal type="string">"inc"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <name>GxB_RANGE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// </comment>
                <expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iinc</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>iinc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// this can be either a stride, or backwards.  Either </comment>
                    <comment type="line">// one works the same, but try a mixture, just for testing.</comment>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then>
                        <expr><name>GxB_STRIDE</name></expr> </then><else>: <expr><name>GxB_BACKWARDS</name></expr></else></ternary></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>iinc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <name>GxB_STRIDE</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>]</index></name> <operator>=</operator> <name>iinc</name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// GraphBLAS must be given the magnitude of the stride</comment>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <name>GxB_BACKWARDS</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>iinc</name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>Icolon</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsClass</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"indices must be uint64"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_is_list</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>I</name> <operator>=</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name>I_builtin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>I</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
