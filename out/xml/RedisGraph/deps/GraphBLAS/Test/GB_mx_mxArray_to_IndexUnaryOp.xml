<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_mxArray_to_IndexUnaryOp.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_mxArray_to_IndexUnaryOp</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Convert a built-in string or struct to a built-in GraphBLAS IndexUnaryOp.</comment>
<comment type="line">// The mxArray is either a struct containing two terms: opname (an operator</comment>
<comment type="line">// name), and an optional built-in string optype (a string, 'logical',</comment>
<comment type="line">// 'double', etc).  If not present, the default type is used (provided on</comment>
<comment type="line">// input).</comment>
<comment type="line">//</comment>
<comment type="line">// op = 'tril' ;    % GrB_TRIL operator, no type needed</comment>
<comment type="line">//</comment>
<comment type="line">// op.opname = 'rowindex' ; op.type = 'int32' ; % the GrB_ROWINDEX_INT32</comment>
<comment type="line">// operator.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_mxArray_to_IndexUnaryOp</name>      <comment type="line">// true if successful, false otherwise</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_IndexUnaryOp</name> <modifier>*</modifier></type><name>op_handle</name></decl></parameter>,        <comment type="line">// the binary op</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>op_builtin</name></decl></parameter>,          <comment type="line">// built-in version of op</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,                   <comment type="line">// name of the argument</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>default_optype</name></decl></parameter>       <comment type="line">// default operator type</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>opname_mx</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>optype_mx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>op_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>op_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// op is not present; defaults will be used</comment>
        <empty_stmt>;</empty_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>mxIsStruct</name> <argument_list>(<argument><expr><name>op_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// look for op.opname</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>fieldnumber</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>op_builtin</name></expr></argument>, <argument><expr><literal type="string">"opname"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>opname_mx</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>op_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// look for op.optype</comment>
        <expr_stmt><expr><name>fieldnumber</name> <operator>=</operator> <call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>op_builtin</name></expr></argument>, <argument><expr><literal type="string">"optype"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>optype_mx</name> <operator>=</operator> <call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>op_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// op must be a string.  default type will be used</comment>
        <expr_stmt><expr><name>opname_mx</name> <operator>=</operator> <name>op_builtin</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// find the corresponding built-in GraphBLAS operator</comment>
    <decl_stmt><decl><type><name>GrB_IndexUnaryOp</name></type> <name>op</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_string_to_IndexUnaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><name>default_optype</name></expr></argument>, <argument><expr><name>opname_mx</name></expr></argument>,
        <argument><expr><name>optype_mx</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// return the op</comment>
    <expr_stmt><expr><call><name>ASSERT_INDEXUNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_handle</name><operator>)</operator> <operator>=</operator> <name>op</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
