<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_create_full.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_create_full: create a full built-in matrix of a given GrB_Type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>mxArray</name> <modifier>*</modifier></type><name>GB_mx_create_full</name>      <comment type="line">// return new built-in full matrix</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>ncols</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>               <comment type="line">// type of the matrix to create</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate an dense matrix of the right type</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateLogicalMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxSINGLE_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxDOUBLE_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxINT8_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxINT16_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxINT32_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxUINT8_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxUINT16_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxUINT32_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxUINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxSINGLE_CLASS</name></expr></argument>,
            <argument><expr><name>mxCOMPLEX</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>Complex</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>mxDOUBLE_CLASS</name></expr></argument>,
            <argument><expr><name>mxCOMPLEX</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
