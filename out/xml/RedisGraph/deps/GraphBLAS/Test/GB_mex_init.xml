<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_init.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_init: initialize GraphBLAS</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns the status of all global settings.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"[nthreads format hyper_switch " \
"name version date about license compiledate compiletime api api_about" \
" chunk bitmap_switch] = GB_mex_init"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mexPrintf</name> <argument_list>(<argument><expr><literal type="string">"usage:\n%s\n"</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>, <argument><expr><name>mxMalloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mxFree</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// mxMalloc, mxCalloc, mxRealloc, and mxFree are not thread safe</comment>
    <expr_stmt><expr><call><name>GB_Global_malloc_is_thread_safe_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_abort_function_set</name> <argument_list>(<argument><expr><name>GB_mx_abort</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_tracking_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// built-in default is by column</comment>
    <expr_stmt><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>format</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>hyper_switch</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hyper_switch</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>hyper_switch</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>version</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_VERSION</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetPr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>version</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>version</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>p</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>version</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>date</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>about</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_ABOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><name>about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>license</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_LICENSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>license</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><name>license</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compile_date</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_COMPILE_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compile_date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><name>compile_date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compile_time</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_LIBRARY_COMPILE_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compile_time</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><name>compile_time</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>api</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_API_VERSION</name></expr></argument>, <argument><expr><name>api</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>mxGetPr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>a</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>api</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>a</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>api</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>a</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>api</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>api_about</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_API_ABOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>api_about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><name>api_about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>chunk</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_CHUNK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name><name>bitmap_switch</name> <index>[<expr><name>GxB_NBITMAP_SWITCH</name></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get_</name><argument_list>(<argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><name>bitmap_switch</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GxB_NBITMAP_SWITCH</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>bswitch</name> <init>= <expr><call><name>mxGetPr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GxB_NBITMAP_SWITCH</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>bswitch</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>bitmap_switch</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GxB_NBITMAP_SWITCH</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"bitmap_switch [%d] = %g "</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>bswitch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"for vectors and matrices with 1 row or column\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <name>GxB_NBITMAP_SWITCH</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> 
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"for matrices with min dimension &gt; %d\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"for matrices with min dimension %d to %d\n"</literal></expr></argument>,
                <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// #include "GB_Test_init_mkl_template.c"</comment>

    <expr_stmt><expr><call><name>GrB_finalize</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
