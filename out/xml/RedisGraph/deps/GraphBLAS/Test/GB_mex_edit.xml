<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_edit.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_edit: add/remove entries from a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_edit (C, I, J, X, Action)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    GrB_Matrix_free_(&amp;C) ;              \
    GB_mx_put_global (true) ;           \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                      \
<cpp:value>{                                       \
    info = method ;                     \
    if (info != GrB_SUCCESS)            \
    {                                   \
        mexErrMsgTxt ("fail") ;         \
    }                                   \
}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>ni</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>I_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>nj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>J_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ignore</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nwork</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>malloc_debug</name> <operator>=</operator> <call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>nargin</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C (make a deep copy)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"C input"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_hyper</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_IS_HYPER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_hyper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// historical</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_vector</name> <init>= <expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>GxB_BY_COL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_hyper</name> <operator>&amp;&amp;</operator> <name>ncols</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// get I</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get J</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>J</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get X; must be double</comment>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><call><name>mxGetDoubles</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// get Action: must be double</comment>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>Action</name> <init>= <expr><call><name>mxGetDoubles</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><name>nwork</name> <operator>=</operator> <name>ni</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nwork</name> <operator>!=</operator> <name>nj</name> <operator>||</operator>
        <name>nwork</name> <operator>!=</operator> <call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
        <name>nwork</name> <operator>!=</operator> <call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>mxGetClassID</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>mxDOUBLE_CLASS</name> <operator>||</operator>
        <call><name>mxGetClassID</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>mxDOUBLE_CLASS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// turn off malloc debugging</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>save</name> <init>= <expr><call><name>GB_Global_malloc_debug_get</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_debug_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>Scalar</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Scalar</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// create an empty scalar</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// edit the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nwork</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>J</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name><name>X</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>action</name> <init>= <expr><name><name>Action</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>action</name> <operator>&lt;=</operator> <literal type="number">0.2</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// remove the (i,j) entry</comment>
            <if_stmt><if>if <condition>(<expr><name>is_vector</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_removeElement</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_removeElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>action</name> <operator>&lt;=</operator> <literal type="number">0.4</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// remove the (i,j) entry using setElement_Scalar</comment>
            <if_stmt><if>if <condition>(<expr><name>is_vector</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_Scalar</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><name>Scalar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_Scalar</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Scalar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// add the (i,j) entry</comment>
            <if_stmt><if>if <condition>(<expr><name>is_vector</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_FP64_</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>C</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64_</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// restore malloc debugging to test the method</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_debug_set</name> <argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return C as a built-in sparse matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C mex_edit result"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
