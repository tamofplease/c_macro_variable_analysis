<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_string_to_IndexUnaryOp.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_string_to_IndexUnaryOp.c: get GraphBLAS operator from built-in strings</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<comment type="line">// opname_mx: a built-in string defining the operator name:</comment>
<comment type="line">// rowindex, colindex, diagindex, tril, triu, diag, offdiag, colle, colgt,</comment>
<comment type="line">// rowle, rowgt, valueeq, valuene, valuelt, valuele, valuegt, valuege</comment>

<comment type="line">// optype_mx: a built-in string defining one of 11 operator types:</comment>
<comment type="line">//  'logical', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64',</comment>
<comment type="line">//  'uint64', 'single', 'double', 'single complex', or 'double complex'</comment>

<comment type="line">// default_optype: default operator type if optype_mx is NULL or if</comment>
<comment type="line">// the type is not part of the string</comment>

<function><type><name>bool</name></type> <name>GB_mx_string_to_IndexUnaryOp</name>       <comment type="line">// true if successful, false otherwise</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_IndexUnaryOp</name> <modifier>*</modifier></type><name>op_handle</name></decl></parameter>,    <comment type="line">// the op</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>default_optype</name></decl></parameter>,  <comment type="line">// default operator type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>opname_mx</name></decl></parameter>,       <comment type="line">// built-in string with operator name</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>optype_mx</name></decl></parameter>        <comment type="line">// built-in string with operator type</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_IndexUnaryOp</name></type> <name>op</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the string</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>opname</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GB_mx_mxArray_to_string</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>opname_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>                 <comment type="line">// op is not present</comment>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the optype from the optype_mx string, if present</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>optype</name> <init>= <expr><call><name>GB_mx_string_to_Type</name> <argument_list>(<argument><expr><name>optype_mx</name></expr></argument>, <argument><expr><name>default_optype</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>optype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unrecognized op type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>optype</name> <operator>==</operator> <name>Complex</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>optype</name> <operator>=</operator> <name>GxB_FC64</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert the string to a builtin GraphBLAS idxunop operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name></decl> ;</decl_stmt> 

<comment type="line">// rowindex, colindex, diagindex, tril, triu, diag, offdiag, colle, colgt,</comment>
<comment type="line">// rowle, rowgt, valueeq, valuene, valuelt, valuele, valuegt, valuege</comment>

         <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"rowindex"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ROWINDEX_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"colindex"</literal></expr></argument> )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_COLINDEX_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"diagindex"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_DIAGINDEX_idxunop_code</name></expr>;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"tril"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_TRIL_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"triu"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_TRIU_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"diag"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_DIAG_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"offdiag"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_OFFDIAG_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"colle"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_COLLE_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"colgt"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_COLGT_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"rowle"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ROWLE_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"rowgt"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ROWGT_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"valueeq"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_VALUEEQ_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"valuene"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_VALUENE_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"valuegt"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_VALUEGT_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"valuege"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_VALUEGE_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"valuelt"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_VALUELT_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"valuele"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_VALUELE_idxunop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unrecognized function name"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>optype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// Result is INT32 or INT64, depending on i and/or j, and thunk:</comment>
        <case>case <expr><name>GB_ROWINDEX_idxunop_code</name></expr>  :</case> <comment type="line">// (i+thunk): row index - thunk</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ROWINDEX_INT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ROWINDEX_INT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_COLINDEX_idxunop_code</name></expr>  :</case> <comment type="line">// (j+thunk): col index - thunk</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_COLINDEX_INT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_COLINDEX_INT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_DIAGINDEX_idxunop_code</name></expr> :</case> <comment type="line">// (j-(i+thunk)): diag index + thunk</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIAGINDEX_INT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIAGINDEX_INT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">// Result is BOOL, depending on i and/or j, and thunk:</comment>
        <case>case <expr><name>GB_TRIL_idxunop_code</name></expr>      :</case> <comment type="line">// (j &lt;= (i+thunk)): tril (A,thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TRIL</name></expr> ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_TRIU_idxunop_code</name></expr>      :</case> <comment type="line">// (j &gt;= (i+thunk)): triu (A,thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TRIU</name></expr> ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_DIAG_idxunop_code</name></expr>      :</case> <comment type="line">// (j == (i+thunk)): diag(A,thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIAG</name></expr>;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_OFFDIAG_idxunop_code</name></expr>   :</case> <comment type="line">// (j != (i+thunk)): offdiag(A,thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_OFFDIAG</name></expr>;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_COLLE_idxunop_code</name></expr>     :</case> <comment type="line">// (j &lt;= thunk): A (:,0:thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_COLLE</name></expr>;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_COLGT_idxunop_code</name></expr>     :</case> <comment type="line">// (j &gt; thunk): A (:,thunk+1:ncols-1)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_COLGT</name></expr>;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ROWLE_idxunop_code</name></expr>     :</case> <comment type="line">// (i &lt;= thunk): A (0:thunk,:)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ROWLE</name></expr>;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ROWGT_idxunop_code</name></expr>     :</case> <comment type="line">// (i &gt; thunk): A (thunk+1:nrows-1,:)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ROWGT</name></expr>;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">// Result is BOOL, depending on the value aij and thunk:</comment>
        <case>case <expr><name>GB_VALUENE_idxunop_code</name></expr>   :</case> <comment type="line">// (aij != thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUENE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_VALUENE_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_VALUENE_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_VALUEEQ_idxunop_code</name></expr>   :</case> <comment type="line">// (aij == thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEEQ_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_VALUEEQ_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_VALUEEQ_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_VALUEGT_idxunop_code</name></expr>   :</case> <comment type="line">// (aij &gt; thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_VALUEGE_idxunop_code</name></expr>   :</case> <comment type="line">// (aij &gt;= thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUEGE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_VALUELT_idxunop_code</name></expr>   :</case> <comment type="line">// (aij &lt; thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_VALUELE_idxunop_code</name></expr>   :</case> <comment type="line">// (aij &lt;= thunk)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_VALUELE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <default>default              :</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

            <default>default :</default> 
                <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown idxunop operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// return the idxunop operator to the caller</comment>
    <expr_stmt><expr><call><name>ASSERT_INDEXUNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"got idxunop op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_handle</name><operator>)</operator> <operator>=</operator> <name>op</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
