<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_serialize.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_serialize: copy a matrix, using serialize/deserialize</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// copy a matrix using one of:</comment>
<comment type="line">// GxB_Matrix_serialize and GxB_Matrix_deserialize</comment>
<comment type="line">// GrB_Matrix_serialize and GrB_Matrix_deserialize</comment>
<comment type="line">// GxB_Vector_serialize and GxB_Vector_deserialize</comment>
<comment type="line">// GrB_Vector_serialize and GrB_Vector_deserialize</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex_errors.h"</cpp:file></cpp:include>

<comment type="line">// method:</comment>
<comment type="line">// -2                          // GrB*serialize with default LZ4 compression</comment>
<comment type="line">// GxB_COMPRESSION_NONE -1     // no compression</comment>
<comment type="line">// GxB_COMPRESSION_DEFAULT 0   // LZ4</comment>
<comment type="line">// GxB_COMPRESSION_LZ4   1000  // LZ4</comment>
<comment type="line">// GxB_COMPRESSION_LZ4HC 2000  // LZ4HC, with default level 9</comment>
<comment type="line">// GxB_COMPRESSION_LZ4HC 2001  // LZ4HC:1</comment>
<comment type="line">// ...</comment>
<comment type="line">// GxB_COMPRESSION_LZ4HC 2009  // LZ4HC:9</comment>

<comment type="line">// GxB_COMPRESSION_ZSTD  3000  // ZSTD with default level 3</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_serialize (A, method)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    mxFree (blob) ;                     \
    GrB_Matrix_free_(&amp;A) ;              \
    GrB_Matrix_free_(&amp;C) ;              \
    GrB_Descriptor_free_(&amp;desc) ;       \
    GB_mx_put_global (true) ;           \
}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>blob</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>blob_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro>  <cpp:value>;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <comment type="line">// get A (shallow copy)</comment>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the type of A</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get method</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>use_GrB_serialize</name> <init>= <expr><operator>(</operator><name>method</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>use_GrB_serialize</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>method</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_COMPRESSION</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// serialize A into the blob and then deserialize into C</comment>
    <if_stmt><if>if <condition>(<expr><name>use_GrB_serialize</name></expr>)</condition>
    <block>{<block_content>
<comment type="line">//      if (GB_VECTOR_OK (A))</comment>
<comment type="line">//      {</comment>
<comment type="line">//          // test the vector methods</comment>
<comment type="line">//          METHOD (GrB_Vector_serializeSize (&amp;blob_size, (GrB_Vector) A)) ;</comment>
<comment type="line">//          blob = mxMalloc (blob_size) ;</comment>
<comment type="line">//          METHOD (GrB_Vector_serialize (blob, &amp;blob_size, (GrB_Vector) A)) ;</comment>
<comment type="line">//          METHOD (GrB_Vector_deserialize ((GrB_Vector *) &amp;C, atype,</comment>
<comment type="line">//              blob, blob_size)) ;</comment>
<comment type="line">//      }</comment>
<comment type="line">//      else</comment>
        <block>{<block_content>
            <comment type="line">// test the matrix methods</comment>
            <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_serializeSize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>blob_size</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>blob</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><name>blob_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_serialize</name> <argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_size</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_deserialize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// test the vector methods</comment>
            <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Vector_serialize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_size</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <name>A</name></expr></argument>,
                <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Vector_deserialize</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>,
                <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// test the matrix methods</comment>
            <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_serialize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>blob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_size</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_deserialize</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// check the type</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>type_name1</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>type_name2</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name></expr>]</index></name></decl>,
         <decl><type ref="prev"/><name><name>type_name3</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_type_name</name> <argument_list>(<argument><expr><name>type_name1</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_type_name</name> <argument_list>(<argument><expr><name>type_name2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_deserialize_type_name</name> <argument_list>(<argument><expr><name>type_name3</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>blob_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type_name1</name></expr></argument>, <argument><expr><name>type_name2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type_name1</name></expr></argument>, <argument><expr><name>type_name3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// return C as a struct and free the GraphBLAS C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
