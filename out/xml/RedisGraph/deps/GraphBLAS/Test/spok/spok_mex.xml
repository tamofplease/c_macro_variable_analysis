<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/spok/spok_mex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spok.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mex.h"</cpp:file></cpp:include>

<comment type="block">/* -------------------------------------------------------------------------- */</comment>
<comment type="block">/* SPOK mexFunction */</comment>
<comment type="block">/* -------------------------------------------------------------------------- */</comment>

<comment type="block">/* Copyright 2008-2011, Timothy A. Davis, http://suitesparse.com */</comment>
<comment type="block">/* SPDX-License-Identifier: Apache-2.0 */</comment>

<comment type="block">/* Checks the validity of a built-in sparse matrix.  Returns 1 if OK (or if the
   matrix is not sparse), 0 if the row indices are jumbled (C=A' might lead to
   a valid C matrix) or if the matrix includes explicit zero entries (which can
   be fixed with C=A*1).  Raises an error if the matrix is corrupted beyond
   repair.  Reports a warning if the matrix is not sparse (it is not checked),
   or if the matrix has jumbled row indices or explicit zeros.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>mexErrMsgIdAndTxt  ("SPOK:InvalidMatrix", s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>mexErrMsgIdAndTxt  ("SPOK:InvalidUsage", s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARNING</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mexWarnMsgIdAndTxt ("SPOK:QuestionableMatrix", s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SPOK_INT</name> <modifier>*</modifier></type><name>Ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ai</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>Ax</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Az</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>As</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>SPOK_INT</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>njumbled</name></decl>, <decl><type ref="prev"/><name>nzeros</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nzmax</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>

    <comment type="block">/* ---------------------------------------------------------------------- */</comment>
    <comment type="block">/* check the usage */</comment>
    <comment type="block">/* ---------------------------------------------------------------------- */</comment>

    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>USAGE</name> <argument_list>(<argument><expr><literal type="string">"too many output arguments"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>USAGE</name> <argument_list>(<argument><expr><literal type="string">"usage: spok(A) where A is sparse"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"SPOK:NotSparse"</literal></expr></argument>, <argument><expr><literal type="string">"non-sparse matrix not checked"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>Ap</name> <operator>=</operator> <operator>(</operator><name>SPOK_INT</name> <operator>*</operator><operator>)</operator> <call><name>mxGetJc</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Ai</name> <operator>=</operator> <operator>(</operator><name>SPOK_INT</name> <operator>*</operator><operator>)</operator> <call><name>mxGetIr</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>mxGetM</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mxGetN</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nzmax</name> <operator>=</operator> <call><name>mxGetNzmax</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mxIsComplex</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>Az</name> <operator>=</operator> <call><name>mxGetPi</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Az</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"complex, but with no imaginary part"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>Az</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mxIsLogical</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>Ax</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>As</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>As</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"logical, but with no values present"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>Ax</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>As</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ax</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"double, but with no values present"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

   <switch>switch <condition>(<expr><call><name>spok</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nzmax</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>Az</name></expr></argument>, <argument><expr><name>As</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>njumbled</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nzeros</name></expr></argument>)</argument_list></call></expr>)</condition>
   <block>{<block_content>

        <case>case <expr><name>SPOK_FATAL_M</name></expr>:</case>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"negative number of rows"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <case>case <expr><name>SPOK_FATAL_N</name></expr>:</case>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"negative number of columns"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <case>case <expr><name>SPOK_FATAL_NZMAX</name></expr>:</case>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"nzmax(A) invalid"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <case>case <expr><name>SPOK_FATAL_P</name></expr>:</case>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"column pointers invalid"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <case>case <expr><name>SPOK_FATAL_I</name></expr>:</case>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"row indices out of range"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <case>case <expr><name>SPOK_WARNING</name></expr>:</case>
            <expr_stmt><expr><call><name>sprintf</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%g jumbled row indices, %g explicit zeros"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>njumbled</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nzeros</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>WARNING</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return ;</return>

        <case>case <expr><name>SPOK_OK</name></expr>:</case>
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return ;</return>

    </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
