<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/spok/spok.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spok.h"</cpp:file></cpp:include>

<comment type="block">/* check the validity of a built-in sparse matrix */</comment>

<comment type="block">/* Copyright 2008-2011, Timothy A. Davis, http://suitesparse.com */</comment>
<comment type="block">/* SPDX-License-Identifier: Apache-2.0 */</comment>

<function><type><name>SPOK_INT</name></type> <name>spok</name>
<parameter_list>(
    <comment type="block">/* inputs, not modified */</comment>
    <parameter><decl><type><name>SPOK_INT</name></type> <name>m</name></decl></parameter>,             <comment type="block">/* number of rows */</comment>
    <parameter><decl><type><name>SPOK_INT</name></type> <name>n</name></decl></parameter>,             <comment type="block">/* number of columns */</comment>
    <parameter><decl><type><name>SPOK_INT</name></type> <name>nzmax</name></decl></parameter>,         <comment type="block">/* max # of entries */</comment>
    <parameter><decl><type><name>SPOK_INT</name> <modifier>*</modifier></type><name>Ap</name></decl></parameter>,           <comment type="block">/* size n+1, column pointers */</comment>
    <parameter><decl><type><name>SPOK_INT</name> <modifier>*</modifier></type><name>Ai</name></decl></parameter>,           <comment type="block">/* size nz = Ap [n], row indices */</comment>
    <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>Ax</name></decl></parameter>,             <comment type="block">/* double matrices always have Ax */</comment>
    <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>Az</name></decl></parameter>,             <comment type="block">/* imaginary matrices always have Az */</comment>
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>As</name></decl></parameter>,               <comment type="block">/* logical matrices always have As */</comment>

    <comment type="block">/* outputs, not defined on input */</comment>
    <parameter><decl><type><name>SPOK_INT</name> <modifier>*</modifier></type><name>p_njumbled</name></decl></parameter>,   <comment type="block">/* # of jumbled row indices (-1 if not computed) */</comment>
    <parameter><decl><type><name>SPOK_INT</name> <modifier>*</modifier></type><name>p_nzeros</name></decl></parameter>      <comment type="block">/* number of explicit zeros (-1 if not computed) */</comment>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>z</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>SPOK_INT</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>njumbled</name></decl>, <decl><type ref="prev"/><name>nzeros</name></decl>, <decl><type ref="prev"/><name>ilast</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>s</name></decl> ;</decl_stmt>

    <comment type="block">/* ---------------------------------------------------------------------- */</comment>
    <comment type="block">/* in case of early return */</comment>
    <comment type="block">/* ---------------------------------------------------------------------- */</comment>

    <if_stmt><if>if <condition>(<expr><name>p_njumbled</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p_njumbled</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>p_nzeros</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p_nzeros</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* ---------------------------------------------------------------------- */</comment>
    <comment type="block">/* check the dimensions */</comment>
    <comment type="block">/* ---------------------------------------------------------------------- */</comment>

    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>SPOK_FATAL_M</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>SPOK_FATAL_N</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>nzmax</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> 
    <block>{<block_content>
        <comment type="block">/* note that nzmax cannot be zero */</comment>
        <return>return <expr><operator>(</operator><name>SPOK_FATAL_NZMAX</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* ---------------------------------------------------------------------- */</comment>
    <comment type="block">/* check the column pointers */</comment>
    <comment type="block">/* ---------------------------------------------------------------------- */</comment>

    <if_stmt><if>if <condition>(<expr><name>Ap</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>Ap</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* column pointers invalid */</comment>
        <return>return <expr><operator>(</operator><name>SPOK_FATAL_P</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>pend</name> <operator>=</operator> <name><name>Ap</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pend</name> <argument_list type="generic">&lt; <argument><expr><name>p</name> <operator>||</operator> <name>pend</name></expr></argument> &gt;</argument_list></name> <name>nzmax</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* column pointers not monotonically non-decreasing */</comment>
            <return>return <expr><operator>(</operator><name>SPOK_FATAL_P</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* ---------------------------------------------------------------------- */</comment>
    <comment type="block">/* check the row indices and numerical values */</comment>
    <comment type="block">/* ---------------------------------------------------------------------- */</comment>

    <if_stmt><if>if <condition>(<expr><name>Ai</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* row indices not present */</comment>
        <return>return <expr><operator>(</operator><name>SPOK_FATAL_I</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>njumbled</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nzeros</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ilast</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        <comment type="line">// printf ("column %lld [%lld : %lld]\n", j, Ap [j], Ap [j+1]-1) ;</comment>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr> ;</expr_stmt>
            <comment type="line">// printf ("row %lld value: ", i) ;</comment>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* row indices out of range */</comment>
                <return>return <expr><operator>(</operator><name>SPOK_FATAL_I</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>ilast</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* row indices unsorted, or duplicates present */</comment>
                <expr_stmt><expr><name>njumbled</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>As</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>As</name> <index>[<expr><name>p</name></expr>]</index></name></expr></else></ternary></expr> ;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Ax</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>Ax</name> <index>[<expr><name>p</name></expr>]</index></name></expr></else></ternary></expr> ;</expr_stmt>
            <expr_stmt><expr><name>z</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Az</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>Az</name> <index>[<expr><name>p</name></expr>]</index></name></expr></else></ternary></expr> ;</expr_stmt>
            <comment type="line">// printf (" %d %g %g\n", s, x, z) ;</comment>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>z</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* an explicit zero is present */</comment>
                <expr_stmt><expr><name>nzeros</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>ilast</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="block">/* ---------------------------------------------------------------------- */</comment>
    <comment type="block">/* return results */</comment>
    <comment type="block">/* ---------------------------------------------------------------------- */</comment>

    <if_stmt><if>if <condition>(<expr><name>p_njumbled</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p_njumbled</name> <operator>=</operator> <name>njumbled</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>p_nzeros</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p_nzeros</name> <operator>=</operator> <name>nzeros</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>njumbled</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nzeros</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SPOK_WARNING</name></expr> </then><else>: <expr><name>SPOK_OK</name></expr></else></ternary><operator>)</operator></expr> ;</return>
</block_content>}</block></function>
</unit>
