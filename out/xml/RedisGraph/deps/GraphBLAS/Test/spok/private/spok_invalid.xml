<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/spok/private/spok_invalid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../spok.h"</cpp:file></cpp:include>

<comment type="block">/* spok_invalid: returns an invalid sparse matrix to test SPOK. */</comment>

<comment type="block">/* Copyright 2008-2011, Timothy A. Davis, http://suitesparse.com */</comment>
<comment type="block">/* SPDX-License-Identifier: Apache-2.0 */</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SPOK_INT</name> <modifier>*</modifier></type><name>Ap</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ai</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>Ax</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>kind</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>kind</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="block">/* a sparse 2-by-2 matrix with invalid column pointers*/</comment>
        <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateSparse</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ap</name> <operator>=</operator> <operator>(</operator><name>mwSignedIndex</name> <operator>*</operator><operator>)</operator> <call><name>mxGetJc</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ai</name> <operator>=</operator> <operator>(</operator><name>mwSignedIndex</name> <operator>*</operator><operator>)</operator> <call><name>mxGetIr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ax</name> <operator>=</operator> <call><name>mxGetPr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ap</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ap</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ap</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="block">/* a sparse 1-by-1 matrix with one explicit zero */</comment>
        <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateSparse</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ap</name> <operator>=</operator> <operator>(</operator><name>mwSignedIndex</name> <operator>*</operator><operator>)</operator> <call><name>mxGetJc</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ai</name> <operator>=</operator> <operator>(</operator><name>mwSignedIndex</name> <operator>*</operator><operator>)</operator> <call><name>mxGetIr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ax</name> <operator>=</operator> <call><name>mxGetPr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ap</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ap</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ai</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ax</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="block">/* a sparse 2-by-2 matrix with jumbled row indices */</comment>
        <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateSparse</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ap</name> <operator>=</operator> <operator>(</operator><name>mwSignedIndex</name> <operator>*</operator><operator>)</operator> <call><name>mxGetJc</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ai</name> <operator>=</operator> <operator>(</operator><name>mwSignedIndex</name> <operator>*</operator><operator>)</operator> <call><name>mxGetIr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ax</name> <operator>=</operator> <call><name>mxGetPr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ap</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ap</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ap</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ai</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ai</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ax</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Ax</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>

    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
