<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_export.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_export: test import/export</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_export (C, format, hyper, csc, dump, clear_nvec)"</cpp:value></cpp:define>

<comment type="line">// If Ap, Ah, etc are exported, then they are not NULL and not in the global</comment>
<comment type="line">// memtable.  If they are not exported, they are NULL, and are part of the</comment>
<comment type="line">// matrix, and in the global memtable.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_WORK</name></cpp:macro>                                               \
<cpp:value>{                                                               \
    GrB_Matrix_free_(&amp;C) ;                                      \
    if (Ap != NULL) { mxFree (Ap) ; Ap = NULL ; }               \
    if (Ah != NULL) { mxFree (Ah) ; Ah = NULL ; }               \
    if (Ai != NULL) { mxFree (Ai) ; Ai = NULL ; }               \
    if (Aj != NULL) { mxFree (Aj) ; Aj = NULL ; }               \
    if (Ax != NULL) { mxFree (Ax) ; Ax = NULL ; }               \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                                                \
<cpp:value>{                                                               \
    FREE_WORK ;                                                 \
    GB_mx_put_global (true) ;                                   \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                      \
<cpp:value>{                                       \
    info = method ;                     \
    if (info != GrB_SUCCESS)            \
    {                                   \
        if (dump) printf ("method fail %d: %d\n", __LINE__, info) ; \
        FREE_WORK ;                     \
        return (info) ;                 \
    }                                   \
}</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>v</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ah</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ai</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Aj</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>ncols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ai_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ax_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>iso</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ap_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Aj_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ah_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ignore</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>jumbled</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_hyper</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>clear_nvec</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_csc</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dump</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<function_decl><type><name>GrB_Info</name></type> <name>import_export</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>GrB_Info</name></type> <name>import_export2</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> ;</function_decl>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>import_export</name> <parameter_list>( )</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C to export"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export/import a vector</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>C</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asize</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export standard CSC vector: %llu-by-1, nvals %llu:\n"</literal></expr></argument>,
                <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_SUMMARY</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>code</name> <init>= <expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>nvals</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  row %llu value "</literal></expr></argument>, <argument><expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><name>p</name></expr></else></ternary><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_import_CSC</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Vector</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>C</name><operator>)</operator></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export/import a matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>format</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">0</literal></expr> :</case> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asize</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>nvec</name> <operator>=</operator> <name>nrows</name></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nexport standard CSR: %llu-by-%llu, Ax_size %llu:\n"</literal></expr></argument>,
                    <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_SUMMARY</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>code</name> <init>= <expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrows</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Row %lld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  col %llu value "</literal></expr></argument>, <argument><expr><name><name>Aj</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><name>p</name></expr></else></ternary><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>,
                            <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C reimported"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">1</literal></expr> :</case> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><name>nvec</name> <operator>=</operator> <name>ncols</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asize</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nexport standard CSC: %llu-by-%llu, Ax_size %llu:\n"</literal></expr></argument>,
                    <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_SUMMARY</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>code</name> <init>= <expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ncols</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Col %lld\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  row %llu value "</literal></expr></argument>, <argument><expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><name>p</name></expr></else></ternary><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>,
                            <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C reimported"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">2</literal></expr> :</case> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asize</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nexport hyper CSR: %llu-by-%llu, Ax_size %llu, "</literal>
                    <literal type="string">"nvec %llu:\n"</literal></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_SUMMARY</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>code</name> <init>= <expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Row %lld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  col %llu value "</literal></expr></argument>, <argument><expr><name><name>Aj</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><name>p</name></expr></else></ternary><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>,
                            <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>,
                <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C reimported"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">3</literal></expr> :</case> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asize</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export hyper CSC: %llu-by-%llu, Ax_size %llu, "</literal>
                    <literal type="string">"c %llu:\n"</literal></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Type_check</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_SUMMARY</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>code</name> <init>= <expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Col %lld\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  row %llu value "</literal></expr></argument>, <argument><expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_code_check</name> <argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><name>p</name></expr></else></ternary><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>,
                            <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>Ax</name></expr></argument>,
                <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_Matrix_check</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C reimported"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <default>default :</default> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"bad format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
    </block_content>}</block></switch>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>import_export2</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>import_export</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>import_export</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get format for import/export</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get hyper flag </comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>is_hyper</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get csc flag </comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>is_csc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get dump flag </comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>dump</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get clear_nvec flag </comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>clear_nvec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get C (make a deep copy)</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> \
    <cpp:value>{                                                                       \
        C = GB_mx_mxArray_to_Matrix (pargin [0], "C input", true, true) ;   \
        if (!is_csc)                                                        \
        {                                                                   \
            <comment type="block">/* convert C to CSR */</comment>                                          \
            GB_transpose_in_place (C, false, NULL) ;                        \
        }                                                                   \
        if (is_hyper &amp;&amp; !GB_IS_FULL (C))                                    \
        {                                                                   \
            <comment type="block">/* convert C to hypersparse */</comment>                                  \
            GB_convert_sparse_to_hyper (C, NULL) ;                          \
        }                                                                   \
    }</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>GrB_Matrix_free_(&amp;C) ;</cpp:value></cpp:define>
    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// import/export</comment>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>import_export2</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// return C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C export/import"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
