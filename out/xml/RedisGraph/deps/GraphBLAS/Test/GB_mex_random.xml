<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_random.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_random: construct a random matrix, double or Complex</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"A = GB_mex_random (nrows, ncols, ntuples," \
              " complex, seed, make_symmetric, no_self_edges, method)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro> <cpp:value>GB_mx_put_global (true) ;</cpp:value></cpp:define>   

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>nargin</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>nargin</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> , <argument><expr><name>nrows</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> , <argument><expr><name>ncols</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument> , <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>    , <argument><expr><name>A_complex</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>    , <argument><expr><name>make_symmetric</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>    , <argument><expr><name>no_self_edges</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>     , <argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>

    <comment type="line">// construct the random matrix</comment>
    <expr_stmt><expr><call><name>simple_rand_seed</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// test out-of-memory condition</comment>
        <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>make_symmetric</name></expr></argument>, <argument><expr><name>no_self_edges</name></expr></argument>,
            <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>A_complex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_mx_random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>make_symmetric</name></expr></argument>, <argument><expr><name>no_self_edges</name></expr></argument>,
            <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>A_complex</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"GB_mx_random_matrix failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// return A</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><literal type="string">"A final"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
