<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/CUDA/GB_cuda_type_bits.c"><comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function_decl><type><name>size_t</name></type> <name>GB_cuda_type_bits</name> <parameter_list>(<parameter><decl><type><name>GB_Type_code</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>size_t</name></type> <name>GB_cuda_type_bits</name> <parameter_list>(<parameter><decl><type><name>GB_Type_code</name></type> <name>type_code</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
    <switch>switch <condition>(<expr><name>type_code</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><literal type="number">16</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><literal type="number">32</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><literal type="number">64</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><literal type="number">8</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><literal type="number">16</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><literal type="number">32</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><literal type="number">64</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="number">32</literal><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><literal type="number">64</literal><operator>)</operator></expr> ;</return>
<comment type="line">//      case GB_FC32_code   : return (64) ;</comment>
<comment type="line">//      case GB_FC64_code   : return (128) ;</comment>
        <default>default             :</default> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
