<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/CUDA/GB_cuda_init.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_cuda_init: initialize the GPUs for use by GraphBLAS</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_cuda_init queries the system for the # of GPUs available, their memory</comment>
<comment type="line">// sizes, SM counts, and other capabilities.  Unified Memory support is</comment>
<comment type="line">// assumed.  Then each GPU is "warmed up" by allocating a small amount of</comment>
<comment type="line">// memory.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_cuda_init</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GB_Global_gpu_control_set</name> <argument_list>(<argument><expr><name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Global_gpu_count_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PANIC</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>gpu_count</name> <init>= <expr><call><name>GB_Global_gpu_count_get</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>device</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>device</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>device</name><operator>++</operator></expr></incr>)</control> <comment type="line">// TODO for GPU: gpu_count</comment>
    <block>{<block_content>
        <comment type="line">// query the GPU and then warm it up</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Global_gpu_device_properties_get</name> <argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>GrB_PANIC</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_cuda_warmup</name> <argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>GrB_PANIC</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// make GPU 0 the default device</comment>
    <expr_stmt><expr><call><name>GB_cuda_set_device</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// also check for jit cache, pre-load library of common kernels ...</comment>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
