<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/CUDA/GB_int64_multiply.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_int64_multiply:  multiply two integers and guard against overflow</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// c = a*b where c is GrB_Index (uint64_t), and a and b are int64_t.</comment>
<comment type="line">// Check for overflow.  Requires a &gt;= 0 and b &gt;= 0.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_CUDA_KERNEL</name></cpp:ifdef>
<function><type><name>__device__</name> <specifier>static</specifier> <specifier>inline</specifier>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>restrict</name></cpp:macro> <cpp:value>__restrict__</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_index.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>bool</name></type> <name>GB_int64_multiply</name>      <comment type="line">// true if ok, false if overflow</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>c</name></decl></parameter>,  <comment type="line">// c = a*b, or zero if overflow occurs</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>a</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>b</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>a</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>a</name></expr></argument> &gt;</argument_list></name> <name>GB_NMAX</name> <operator>||</operator> <name><name>b</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>b</name></expr></argument> &gt;</argument_list></name> <name>GB_NMAX</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// a or b are out of range</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_CUDA_KERNEL</name></cpp:ifndef> <comment type="line">// fixme for CUDA</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GB_CEIL_LOG2</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GB_CEIL_LOG2</name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// a * b may overflow</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// a * b will not overflow</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
