<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/graphcontext.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/uuid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../redismodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/thpool/pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../serializers/graphcontext_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../commands/execution_ctx.h"</cpp:file></cpp:include>

<comment type="line">// Global array tracking all extant GraphContexts (defined in module.c)</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>GraphContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>graphs_in_keyspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>uint</name></type> <name>aux_field_counter</name></decl>;</decl_stmt>
<comment type="line">// GraphContext type as it is registered at Redis.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RedisModuleType</name> <modifier>*</modifier></type><name>GraphContextRedisModuleType</name></decl>;</decl_stmt>

<comment type="line">// Forward declarations.</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_GraphContext_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_GraphContext_UpdateVersion</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// delete a GraphContext reference from the `graphs_in_keyspace` global array</comment>
<function><type><name>void</name></type> <name>_GraphContext_RemoveFromRegistry</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>graph_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>graphs_in_keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>graph_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>graphs_in_keyspace</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>gc</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>graphs_in_keyspace</name> <operator>=</operator> <call><name>array_del_fast</name><argument_list>(<argument><expr><name>graphs_in_keyspace</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// increase graph context ref count by 1</comment>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>GraphContext_IncreaseRefCount</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>__atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// decrease graph context ref count by 1</comment>
<function><type><specifier>inline</specifier> <name>void</name></type> <name>GraphContext_DecreaseRefCount</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// if the reference count is 0</comment>
	<comment type="line">// the graph has been marked for deletion and no queries are active</comment>
	<comment type="line">// free the graph</comment>
	<if_stmt><if>if<condition>(<expr><call><name>__atomic_sub_fetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>async_delete</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_ASYNC_DELETE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// remove graph context from global `graphs_in_keyspace` array</comment>
		<expr_stmt><expr><call><name>_GraphContext_RemoveFromRegistry</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>async_delete</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// Async delete</comment>
			<comment type="line">// add deletion task to pool using force mode</comment>
			<comment type="line">// we can't lose this task in-case pool's queue is full</comment>
			<expr_stmt><expr><call><name>ThreadPools_AddWorkWriter</name><argument_list>(<argument><expr><name>_GraphContext_Free</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Sync delete</comment>
			<expr_stmt><expr><call><name>_GraphContext_Free</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphContext API</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// creates and initializes a graph context struct</comment>
<function><type><name>GraphContext</name> <modifier>*</modifier></type><name>GraphContext_New</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GraphContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>version</name></name>          <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// initial graph version</comment>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>slowlog</name></name>          <operator>=</operator> <call><name>SlowLog_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>ref_count</name></name>        <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// no refences</comment>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name>       <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>index_count</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// no indicies</comment>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name>   <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name> <operator>=</operator> <call><name>GraphEncodeContext_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name> <operator>=</operator> <call><name>GraphDecodeContext_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// read NODE_CREATION_BUFFER size from configuration</comment>
	<comment type="line">// this value controls how much extra room we're willing to spend for:</comment>
	<comment type="line">// 1. graph entity storage</comment>
	<comment type="line">// 2. matrices dimensions</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>node_cap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>edge_cap</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_NODE_CREATION_BUFFER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_cap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>edge_cap</name> <operator>=</operator> <name>node_cap</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>Graph_New</name><argument_list>(<argument><expr><name>node_cap</name></expr></argument>, <argument><expr><name>edge_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name> <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// allocate the default space for schemas and indices</comment>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Schema</name> <operator>*</operator></expr></argument>, <argument><expr><name>GRAPH_DEFAULT_LABEL_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Schema</name> <operator>*</operator></expr></argument>, <argument><expr><name>GRAPH_DEFAULT_RELATION_TYPE_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// initialize the read-write lock to protect access to the attributes rax</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// build the execution plans cache</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>cache_size</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_CACHE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>Cache_New</name><argument_list>(<argument><expr><name>cache_size</name></expr></argument>, <argument><expr><operator>(</operator><name>CacheEntryFreeFunc</name><operator>)</operator><name>ExecutionCtx_Free</name></expr></argument>,
						  <argument><expr><operator>(</operator><name>CacheEntryCopyFunc</name><operator>)</operator><name>ExecutionCtx_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_FLUSH_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>gc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* _GraphContext_Create tries to get a graph context, and if it does not exists, create a new one.
 * The try-get-create flow is done when module global lock is acquired, to enforce consistency
 * while BGSave is called. */</comment>
<function><type><specifier>static</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>_GraphContext_Create</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Create and initialize a graph context.</comment>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>GraphContext_New</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>graphID</name> <init>= <expr><call><name>RedisModule_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graph_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>RedisModule_OpenKey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graphID</name></expr></argument>, <argument><expr><name>REDISMODULE_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// set value in key</comment>
	<expr_stmt><expr><call><name>RedisModule_ModuleTypeSetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>GraphContextRedisModuleType</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// register graph context for BGSave</comment>
	<expr_stmt><expr><call><name>GraphContext_RegisterWithModule</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RedisModule_FreeString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graphID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_CloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>gc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GraphContext</name> <modifier>*</modifier></type><name>GraphContext_Retrieve</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>graphID</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>readOnly</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>shouldCreate</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// check if we're still replicating, if so don't allow access to the graph</comment>
	<if_stmt><if>if<condition>(<expr><name>aux_field_counter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// the whole module is currently replicating, emit an error</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"ERR RedisGraph module is currently replicating"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rwFlag</name> <init>= <expr><ternary><condition><expr><name>readOnly</name></expr> ?</condition><then> <expr><name>REDISMODULE_READ</name></expr> </then><else>: <expr><name>REDISMODULE_WRITE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>RedisModule_OpenKey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graphID</name></expr></argument>, <argument><expr><name>rwFlag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_KeyType</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_KEYTYPE_EMPTY</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>shouldCreate</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// Key doesn't exist, create it.</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graphName</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>graphID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>_GraphContext_Create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graphName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Key does not exist and won't be created, emit an error.</comment>
			<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"ERR Invalid graph operation on empty key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>RedisModule_ModuleTypeGetType</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GraphContextRedisModuleType</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>RedisModule_ModuleTypeGetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// Key exists but is not a graph, emit an error.</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>REDISMODULE_ERRORMSG_WRONGTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>RedisModule_CloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>gc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GraphContext_IncreaseRefCount</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>gc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphContext_MarkWriter</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>graphID</name> <init>= <expr><call><name>RedisModule_CreateString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Reopen only if key exists (do not re-create) make sure key still exists.</comment>
	<decl_stmt><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>RedisModule_OpenKey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graphID</name></expr></argument>, <argument><expr><name>REDISMODULE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_KeyType</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_KEYTYPE_EMPTY</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>RedisModule_CloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Mark as writer.</comment>
	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>RedisModule_OpenKey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graphID</name></expr></argument>, <argument><expr><name>REDISMODULE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_CloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>RedisModule_FreeString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graphID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GraphContext_GetName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphContext_Rename</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name> <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>XXH32_hash_t</name></type> <name>GraphContext_GetVersion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>gc</name><operator>-&gt;</operator><name>version</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Update graph context version</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_GraphContext_UpdateVersion</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Update graph version by hashing 'str' representing the current
	 * addition to the graph schema: (Label, Relationship-type, Attribute)
	 *
	 * Using the current graph version as a seed, by doing so we avoid
	 * hashing the entire graph schema on each change, while guaranteeing the
	 * exact same version across a cluster: same graph version on both
	 * primary and replica shards. */</comment>

	<decl_stmt><decl><type><name>XXH32_state_t</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>XXH32_createState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>XXH32_reset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XXH32_update</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>XXH32_digest</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XXH32_freeState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Schema API</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Find the ID associated with a label for schema and matrix access</comment>
<function><type><name>int</name></type> <name>_GraphContext_GetLabelID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Choose the appropriate schema array given the entity type</comment>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier><modifier>*</modifier></type><name>schemas</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>t</name> <operator>==</operator> <name>SCHEMA_NODE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr> </then><else>: <expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<comment type="line">// TODO optimize lookup</comment>
	<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>schemas</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>schemas</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>GRAPH_NO_LABEL</name></expr>;</return> <comment type="line">// equivalent to GRAPH_NO_RELATION</comment>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>GraphContext_SchemaCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>SCHEMA_NODE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Schema</name> <modifier>*</modifier></type><name>GraphContext_GetSchemaByID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier><modifier>*</modifier></type><name>schemas</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>t</name> <operator>==</operator> <name>SCHEMA_NODE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr> </then><else>: <expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>id</name> <operator>==</operator> <name>GRAPH_NO_LABEL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>schemas</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Schema</name> <modifier>*</modifier></type><name>GraphContext_GetSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>_GraphContext_GetLabelID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Schema</name> <modifier>*</modifier></type><name>GraphContext_AddSchema</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>label_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>SCHEMA_NODE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>label_id</name> <operator>=</operator> <call><name>Graph_AddLabel</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>Schema_New</name><argument_list>(<argument><expr><name>SCHEMA_NODE</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>label_id</name> <operator>=</operator> <call><name>Graph_AddRelationType</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>Schema_New</name><argument_list>(<argument><expr><name>SCHEMA_EDGE</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// new schema added, update graph version</comment>
	<expr_stmt><expr><call><name>_GraphContext_UpdateVersion</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>schema</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphContext_RemoveSchema</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>schema_id</name></decl></parameter>, <parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>SCHEMA_NODE</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>schema</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name><index>[<expr><name>schema_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Schema_Free</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name> <operator>=</operator> <call><name>array_del</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr></argument>, <argument><expr><name>schema_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>schema</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name><index>[<expr><name>schema_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Schema_Free</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name> <operator>=</operator> <call><name>array_del</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr></argument>, <argument><expr><name>schema_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GraphContext_GetEdgeRelationType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>reltype_id</name> <init>= <expr><call><name>Graph_GetEdgeRelation</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>reltype_id</name> <operator>!=</operator> <name>GRAPH_NO_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name><index>[<expr><name>reltype_id</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>GraphContext_AttributeCount</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>size</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Attribute_ID</name></type> <name>GraphContext_FindOrAddAttribute</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attribute</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>created</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>created_flag</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	
	<comment type="line">// Acquire a read lock for looking up the attribute.</comment>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// See if attribute already exists.</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>attribute_id</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>attribute</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>attribute_id</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// We are writing to the shared GraphContext; release the held lock and re-acquire as a writer.</comment>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Lookup the attribute again now that we are in a critical region.</comment>
		<expr_stmt><expr><name>attribute_id</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>attribute</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// If it has been set by another thread, use the retrieved value.</comment>
		<if_stmt><if>if<condition>(<expr><name>attribute_id</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// Otherwise, it will be assigned an ID equal to the current mapping size.</comment>
			<expr_stmt><expr><name>attribute_id</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>raxSize</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Insert the new attribute key and ID.</comment>
			<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>,
					  <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>attribute</name></expr></argument>,
					  <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>attribute_id</name></expr></argument>,
					  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name></expr></argument>, <argument><expr><call><name>rm_strdup</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>created_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<comment type="line">// new attribute been added, update graph version</comment>
			<expr_stmt><expr><call><name>_GraphContext_UpdateVersion</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Release the lock.</comment>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>created</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>created</name> <operator>=</operator> <name>created_flag</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>attribute_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GraphContext_GetAttributeString</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>Attribute_ID</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Attribute_ID</name></type> <name>GraphContext_GetAttributeID</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attribute</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Acquire a read lock for looking up the attribute.</comment>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Look up the attribute ID.</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>attribute</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Release the lock.</comment>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>id</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ATTRIBUTE_ID_NONE</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphContext_RemoveAttribute</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>Attribute_ID</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attribute</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>raxRemove</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>,  <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>attribute</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name> <operator>=</operator> <call><name>array_del</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Index API</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<function><type><name>bool</name></type> <name>GraphContext_HasIndices</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>schema_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>schema_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>Schema_HasIndices</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>schema_count</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>schema_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>Schema_HasIndices</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>Index</name> <modifier>*</modifier></type><name>GraphContext_GetIndexByID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
								 <parameter><decl><type><name>Attribute_ID</name> <modifier>*</modifier></type><name>attribute_id</name></decl></parameter>, <parameter><decl><type><name>IndexType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>     <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Retrieve the schema for given id</comment>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>attribute_id</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Index</name> <modifier>*</modifier></type><name>GraphContext_GetIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
							 <parameter><decl><type><name>Attribute_ID</name> <modifier>*</modifier></type><name>attribute_id</name></decl></parameter>, <parameter><decl><type><name>IndexType</name></type> <name>type</name></decl></parameter>,
							 <parameter><decl><type><name>SchemaType</name></type> <name>schema_type</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Retrieve the schema for this label</comment>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>schema_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>attribute_id</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>GraphContext_AddExactMatchIndex</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>SchemaType</name></type> <name>schema_type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>    <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>     <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Retrieve the schema for this label</comment>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>schema_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_AddSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>schema_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>IndexField</name></type> <name>idx_field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>field_id</name> <init>= <expr><call><name>GraphContext_FindOrAddAttribute</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>IndexField_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idx_field</name></expr></argument>, <argument><expr><name>field_id</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>INDEX_FIELD_DEFAULT_WEIGHT</name></expr></argument>,
				   <argument><expr><name>INDEX_FIELD_DEFAULT_NOSTEM</name></expr></argument>, <argument><expr><name>INDEX_FIELD_DEFAULT_PHONETIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>Schema_AddIndex</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx_field</name></expr></argument>, <argument><expr><name>IDX_EXACT_MATCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>result_set</name> <init>= <expr><call><name>QueryCtx_GetResultSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ResultSet_IndexCreated</name><argument_list>(<argument><expr><name>result_set</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>GraphContext_AddFullTextIndex</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>SchemaType</name></type> <name>schema_type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,
	<parameter><decl><type><name>double</name></type> <name>weight</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>nostem</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>phonetic</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>    <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>     <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Retrieve the schema for this label</comment>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>schema_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_AddSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>schema_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>IndexField</name></type> <name>index_field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>field_id</name> <init>= <expr><call><name>GraphContext_FindOrAddAttribute</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>IndexField_New</name><argument_list>(<argument><expr><operator>&amp;</operator><name>index_field</name></expr></argument>, <argument><expr><name>field_id</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>, <argument><expr><name>nostem</name></expr></argument>, <argument><expr><name>phonetic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>Schema_AddIndex</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_field</name></expr></argument>, <argument><expr><name>IDX_FULLTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>result_set</name> <init>= <expr><call><name>QueryCtx_GetResultSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ResultSet_IndexCreated</name><argument_list>(<argument><expr><name>result_set</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>GraphContext_DeleteIndex</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>SchemaType</name></type> <name>schema_type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,
	<parameter><decl><type><name>IndexType</name></type> <name>type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>     <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// retrieve the schema for this label</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>INDEX_FAIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>schema_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Schema_RemoveIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>INDEX_FAIL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// update resultset statistics</comment>
			<decl_stmt><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>result_set</name> <init>= <expr><call><name>QueryCtx_GetResultSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ResultSet_IndexDeleted</name><argument_list>(<argument><expr><name>result_set</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Functions for globally tracking GraphContexts</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// register a new GraphContext for module-level tracking</comment>
<function><type><name>void</name></type> <name>GraphContext_RegisterWithModule</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<comment type="line">// increase graph context ref count</comment>
	<expr_stmt><expr><call><name>GraphContext_IncreaseRefCount</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// See if the graph context is not already in the keyspace.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>graph_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>graphs_in_keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>graph_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>graphs_in_keyspace</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>gc</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>graphs_in_keyspace</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GraphContext</name> <modifier>*</modifier></type><name>GraphContext_GetRegisteredGraphContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>graph_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>graphs_in_keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>graph_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>graphs_in_keyspace</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>graph_name</name></expr></argument>, <argument><expr><name>graph_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>gc</name> <operator>=</operator> <name><name>graphs_in_keyspace</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>gc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Slowlog API</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Return slowlog associated with graph context.</comment>
<function><type><name>SlowLog</name> <modifier>*</modifier></type><name>GraphContext_GetSlowLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>gc</name><operator>-&gt;</operator><name>slowlog</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Cache API</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Return cache associated with graph context and current thread id.</comment>
<function><type><name>Cache</name> <modifier>*</modifier></type><name>GraphContext_GetCache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>gc</name><operator>-&gt;</operator><name>cache</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Free routine</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Free all data associated with graph</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_GraphContext_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><operator>(</operator><name>GraphContext</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>len</name></decl>;</decl_stmt>

	<comment type="line">// Disable matrix synchronization for graph deletion.</comment>
	<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>GraphDecodeContext_Finished</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Graph_Free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>Graph_PartialFree</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


	<decl_stmt><decl><type><name>bool</name></type> <name>async_delete</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_ASYNC_DELETE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>async_delete</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>RedisModule_GetThreadSafeContext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// GIL need to be acquire because RediSearch change Redis global data structure</comment>
		<expr_stmt><expr><call><name>RedisModule_ThreadSafeContextLock</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Free node schemas</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>Schema_Free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>node_schemas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Free relation schemas</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>Schema_Free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>relation_schemas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>async_delete</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ThreadSafeContextUnlock</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_FreeThreadSafeContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Free attribute mappings</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>string_mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gc</name><operator>-&gt;</operator><name>_attribute_rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>slowlog</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SlowLog_Free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>slowlog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Clear cache</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name><name>gc</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Cache_Free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>GraphEncodeContext_Free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GraphDecodeContext_Free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
