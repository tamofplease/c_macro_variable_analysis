<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/graph_hub.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph_hub.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../undo_log/undo_log.h"</cpp:file></cpp:include>

<comment type="line">// delete all references to a node from any relevant index</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_DeleteNodeFromIndices</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Schema</name>    <modifier>*</modifier></type><name>s</name>       <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name>     <modifier>*</modifier></type><name>g</name>       <init>=  <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>node_id</name>  <init>=  <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// retrieve node labels</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>label_id</name> <init>= <expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// update any indices this entity is represented in</comment>
		<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_FULLTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_RemoveNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_EXACT_MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_RemoveNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_DeleteEdgeFromIndices</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Schema</name>  <modifier>*</modifier></type><name>s</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name>   <modifier>*</modifier></type><name>g</name>  <init>=  <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>relation_id</name> <init>= <expr><call><name>EDGE_GET_RELATION_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>relation_id</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update any indices this entity is represented in</comment>
	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_FULLTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_RemoveEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_EXACT_MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_RemoveEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// add node to any relevant index</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AddNodeToIndices</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Schema</name>    <modifier>*</modifier></type><name>s</name>       <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name>     <modifier>*</modifier></type><name>g</name>       <init>=  <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>node_id</name>  <init>=  <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// retrieve node labels</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>label_id</name> <init>= <expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Schema_AddNodeToIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// add edge to any relevant index</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AddEdgeToIndices</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Schema</name>  <modifier>*</modifier></type><name>s</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name>   <modifier>*</modifier></type><name>g</name>  <init>=  <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>relation_id</name> <init>= <expr><call><name>EDGE_GET_RELATION_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>relation_id</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Schema_AddEdgeToIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>CreateNode</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,
	<parameter><decl><type><name>LabelID</name> <modifier>*</modifier></type><name>labels</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>label_count</name></decl></parameter>,
	<parameter><decl><type><name>AttributeSet</name></type> <name>set</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Graph_CreateNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>labels</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name><name>n</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>

	<comment type="line">// add node labels</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Schema_AddNodeToIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// add node creation operation to undo log</comment>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UndoLog_CreateNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>CreateEdge</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>src</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>dst</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>AttributeSet</name></type> <name>set</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Graph_CreateEdge</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>relationship</name></name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// all schemas have been created in the edge blueprint loop or earlier</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Schema_AddEdgeToIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// add edge creation operation to undo log</comment>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UndoLog_CreateEdge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>DeleteNode</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// add node deletion operation to undo log	</comment>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UndoLog_DeleteNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>GraphContext_HasIndices</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_DeleteNodeFromIndices</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Graph_DeleteNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>DeleteEdge</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// add edge deletion operation to undo log</comment>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UndoLog_DeleteEdge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>GraphContext_HasIndices</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_DeleteEdgeFromIndices</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>Graph_DeleteEdge</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// update entity attributes and update undo log</comment>
<comment type="line">// in case attr_id is ATTRIBUTE_ID_ALL clear all attributes values</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Update_Entity_Property</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>ge</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>new_value</name></decl></parameter>,
	<parameter><decl><type><name>GraphEntityType</name></type> <name>entity_type</name></decl></parameter>,
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>props_set_count</name></decl></parameter>,
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>props_removed_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>attr_id</name> <operator>==</operator> <name>ATTRIBUTE_ID_ALL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// we're requested to clear entitiy's attribute-set</comment>
		<comment type="line">// backup entity's attributes in case we'll need to roolback</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>GraphEntity_GetAttributes</name><argument_list>(<argument><expr><name>ge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>id</name></decl>;</decl_stmt>
			<comment type="line">// add entity update operation to undo log</comment>
			<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>AttributeSet_GetIdx</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>UndoLog_UpdateEntity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>ge</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
					<argument><expr><name>entity_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>orig_value</name> <init>= <expr><call><name>GraphEntity_GetProperty</name><argument_list>(<argument><expr><name>ge</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// add entity update operation to undo log</comment>
		<expr_stmt><expr><call><name>UndoLog_UpdateEntity</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>ge</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><operator>*</operator><name>orig_value</name></expr></argument>,
				<argument><expr><name>entity_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// update the property and set the appropriate counter.</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>old_value</name> <init>= <expr><call><name>GraphEntity_GetProperty</name><argument_list>(<argument><expr><name>ge</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>updates</name> <init>= <expr><call><name>Graph_UpdateEntity</name><argument_list>(<argument><expr><name>ge</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>, <argument><expr><name>entity_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// removal of an attribute. In case the attribute is not present,</comment>
		<comment type="line">// the update will not be counted (Graph_UpdateEntity logic).</comment>
		<expr_stmt><expr><operator>*</operator><name>props_removed_count</name> <operator>=</operator> <name>updates</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// addition of an attribte</comment>
		<expr_stmt><expr><operator>*</operator><name>props_set_count</name> <operator>=</operator> <name>updates</name></expr>;</expr_stmt>
		<comment type="line">// overwrite exiting attribute is considered a removal</comment>
		<if_stmt><if>if<condition>(<expr><name>old_value</name> <operator>!=</operator> <name>ATTRIBUTE_NOTFOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>props_removed_count</name> <operator>=</operator> <name>updates</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// updates a graph entity attribute set. Returns as out params the number</comment>
<comment type="line">// of properties set and removed.</comment>
<function><type><name>void</name></type> <name>UpdateEntityProperties</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,             <comment type="line">// graph context</comment>
	<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>ge</name></decl></parameter>,              <comment type="line">// updated entity</comment>
	<parameter><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name></decl></parameter>,       <comment type="line">// new attributes</comment>
	<parameter><decl><type><name>GraphEntityType</name></type> <name>entity_type</name></decl></parameter>,  <comment type="line">// entity type</comment>
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>props_set_count</name></decl></parameter>,        <comment type="line">// number of attributes set</comment>
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>props_removed_count</name></decl></parameter>     <comment type="line">// number of attributes removed</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ge</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>props_set_count</name>     <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>props_removed_count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>set_props</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>removed_props</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>attributes</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>_set_props</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>_removed_props</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>_Update_Entity_Property</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>ge</name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>prop</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>entity_type</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>_set_props</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_removed_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>set_props</name>     <operator>+=</operator> <name>_set_props</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>removed_props</name> <operator>+=</operator> <name>_removed_props</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>entity_type</name> <operator>==</operator> <name>GETYPE_NODE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_AddNodeToIndices</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>ge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>_AddEdgeToIndices</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>(</operator><name>Edge</name> <operator>*</operator><operator>)</operator><name>ge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>props_set_count</name> <operator>=</operator> <name>set_props</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>props_removed_count</name> <operator>=</operator> <name>removed_props</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateNodeLabels</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,            <comment type="line">// graph context to update the entity</comment>
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,                  <comment type="line">// the node to be updated</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>add_labels</name></decl></parameter>,     <comment type="line">// labels to add to the node</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>remove_labels</name></decl></parameter>,  <comment type="line">// labels to add to the node</comment>
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>labels_added_count</name></decl></parameter>,    <comment type="line">// number of labels added (out param)</comment>
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>labels_removed_count</name></decl></parameter>   <comment type="line">// number of labels removed (out param)</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// quick return if there are no labels</comment>
	<if_stmt><if>if<condition>(<expr><name>add_labels</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>remove_labels</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>add_labels</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>add_labels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>add_labels_ids</name><index>[<expr><name>label_count</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>add_labels_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name><name>add_labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<comment type="line">// get or create label matrix</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>schema_created</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>AddSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>schema_created</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>int</name></type>  <name>schema_id</name> <init>= <expr><call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>node_labeled</name> <init>= <expr><call><name>Graph_IsNodeLabeled</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>schema_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if<condition>(<expr><operator>!</operator><name>node_labeled</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// sync matrix, make sure label matrix is of the right dimensions</comment>
				<if_stmt><if>if<condition>(<expr><name>schema_created</name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>RG_Matrix</name></type> <name>m</name> <init>= <expr><call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>schema_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="line">// append label id</comment>
				<expr_stmt><expr><name><name>add_labels_ids</name><index>[<expr><name>add_labels_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>schema_id</name></expr>;</expr_stmt>
				<comment type="line">// add to index</comment>
				<expr_stmt><expr><call><name>Schema_AddNodeToIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if<condition>(<expr><name>add_labels_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>labels_added_count</name> <operator>=</operator> <name>add_labels_index</name></expr>;</expr_stmt>

			<comment type="line">// update node's labels</comment>
			<expr_stmt><expr><call><name>Graph_LabelNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>id</name></name></expr></argument> ,<argument><expr><name>add_labels_ids</name></expr></argument>, <argument><expr><name>add_labels_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>UndoLog_AddLabels</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>add_labels_ids</name></expr></argument>, <argument><expr><name>add_labels_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>remove_labels</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>remove_labels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>remove_labels_ids</name><index>[<expr><name>label_count</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>remove_labels_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name><name>remove_labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// label removal</comment>
			<comment type="line">// get or create label matrix</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// skip removal of none existing label</comment>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// append label id</comment>
			<expr_stmt><expr><name><name>remove_labels_ids</name><index>[<expr><name>remove_labels_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// remove node from index</comment>
			<expr_stmt><expr><call><name>Schema_RemoveNodeFromIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if<condition>(<expr><name>remove_labels_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>labels_removed_count</name> <operator>=</operator> <name>remove_labels_index</name></expr>;</expr_stmt>
			
			<comment type="line">// update node's labels</comment>
			<expr_stmt><expr><call><name>Graph_RemoveNodeLabels</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>remove_labels_ids</name></expr></argument>,
					<argument><expr><name>remove_labels_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>UndoLog_RemoveLabels</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>remove_labels_ids</name></expr></argument>, <argument><expr><name>remove_labels_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>Schema</name> <modifier>*</modifier></type><name>AddSchema</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,             <comment type="line">// graph context to add the schema</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,            <comment type="line">// schema label</comment>
	<parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>                  <comment type="line">// schema type (node/edge)</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_AddSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UndoLog_AddSchema</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Attribute_ID</name></type> <name>FindOrAddAttribute</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,             <comment type="line">// graph context to add the attribute</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attribute</name></decl></parameter>         <comment type="line">// attribute name</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attribute</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>created</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name> <init>= <expr><call><name>GraphContext_FindOrAddAttribute</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>created</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// In case there was an append, the latest id should be tracked</comment>
	<if_stmt><if>if<condition>(<expr><name>created</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>UndoLog_AddAttribute</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>query_ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>attr_id</name></expr>;</return>
</block_content>}</block></function>

</unit>
