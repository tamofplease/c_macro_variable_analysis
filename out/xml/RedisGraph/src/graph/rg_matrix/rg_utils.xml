<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_utils.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>

<comment type="line">// check if i and j are within matrix boundries</comment>
<comment type="line">// i &lt; nrows</comment>
<comment type="line">// j &lt; ncols</comment>
<function><type><name>void</name></type> <name>RG_Matrix_checkBounds</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>C</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RG_DEBUG</name></expr></cpp:if>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// check bounds</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nrows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_ncols</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>j</name> <operator>&lt;</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">// check 2 matrices have same type nrows and ncols</comment>
<function><type><name>void</name></type> <name>RG_Matrix_checkCompatible</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>M</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>N</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RG_DEBUG</name></expr></cpp:if>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>n</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Type</name></type>  <name>m_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Type</name></type>  <name>n_type</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GxB_Matrix_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_type</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GxB_Matrix_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n_type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>m_type</name> <operator>==</operator> <name>n_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>m_nrows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>m_ncols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>n_nrows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>n_ncols</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nrows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_nrows</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_ncols</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_ncols</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nrows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n_nrows</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_ncols</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n_ncols</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>m_nrows</name> <operator>==</operator> <name>n_nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>m_ncols</name> <operator>==</operator> <name>n_ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RG_Matrix_validateState</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>C</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RG_DEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>bool</name></type>        <name>x_m</name>               <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>x_dp</name>              <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>x_dm</name>              <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>existing_entry</name>    <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>pending_addition</name>  <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>pending_deletion</name>  <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info_m</name>            <init>=  <expr><name>GrB_SUCCESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info_dp</name>           <init>=  <expr><name>GrB_SUCCESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info_dm</name>           <init>=  <expr><name>GrB_SUCCESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>m</name>                 <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>dp</name>                <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>dm</name>                <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// find out which entries exists</comment>
	<expr_stmt><expr><name>info_m</name>  <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_m</name></expr></argument>,  <argument><expr><name>m</name></expr></argument>,  <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info_dp</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_dp</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info_dm</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x_dm</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>existing_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>pending_addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>pending_deletion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>existing_entry</name>    <operator>=</operator>  <name>info_m</name>  <operator>==</operator> <name>GrB_SUCCESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pending_addition</name>  <operator>=</operator>  <name>info_dp</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pending_deletion</name>  <operator>=</operator>  <name>info_dm</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// impossible states</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// matrix disjoint</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>existing_entry</name>   <operator>&amp;&amp;</operator>
			 <name>pending_addition</name> <operator>&amp;&amp;</operator>
			 <name>pending_deletion</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// deletion only</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>!</operator><name>existing_entry</name>   <operator>&amp;&amp;</operator>
			 <operator>!</operator><name>pending_addition</name> <operator>&amp;&amp;</operator>
			 <name>pending_deletion</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// addition to already existing entry</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>existing_entry</name>   <operator>&amp;&amp;</operator>
			 <name>pending_addition</name> <operator>&amp;&amp;</operator>
			 <operator>!</operator><name>pending_deletion</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// pending deletion and pending addition</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>!</operator><name>existing_entry</name>   <operator>&amp;&amp;</operator>
			  <name>pending_addition</name> <operator>&amp;&amp;</operator>
			  <name>pending_deletion</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
