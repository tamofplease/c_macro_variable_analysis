<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_set_element_uint64.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>GrB_BinaryOp</name></type> <name>_graph_edge_accum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>_edge_accum</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_y</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name>       <modifier>*</modifier></type><name>z</name>  <init>=  <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator>        <name>_z</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>x</name>  <init>=  <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator>  <name>_x</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>y</name>  <init>=  <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator>  <name>_y</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// single edge ID,</comment>
	<comment type="line">// switching from single edge ID to multiple IDs</comment>
	<if_stmt><if>if<condition>(<expr><call><name>SINGLE_EDGE</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ids</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// multiple edges, adding another edge</comment>
		<expr_stmt><expr><name>ids</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>CLEAR_MSB</name><argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>SET_MSB</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// dealing with multi-value entries</comment>
<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>setMultiEdgeEntry</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                       <comment type="line">// matrix to modify</comment>
    <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>,                         <comment type="line">// scalar to assign to A(i,j)</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,                        <comment type="line">// row index</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>                         <comment type="line">// column index</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>

	<comment type="line">// create edge accumulator binary function</comment>
	<comment type="line">// TODO: remove if condition, initialize binary operation at module load</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>_graph_edge_accum</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_BinaryOp_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_graph_edge_accum</name></expr></argument>, <argument><expr><name>_edge_accum</name></expr></argument>, <argument><expr><name>GrB_UINT64</name></expr></argument>, 
								<argument><expr><name>GrB_UINT64</name></expr></argument>, <argument><expr><name>GrB_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_subassign_UINT64</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_graph_edge_accum</name></expr></argument>, 
									   <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_setElement_UINT64</name>    <comment type="line">// C (i,j) = x</comment>
<parameter_list>(
    <parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>,                        <comment type="line">// matrix to modify</comment>
    <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>,                         <comment type="line">// scalar to assign to C(i,j)</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,                        <comment type="line">// row index</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>                         <comment type="line">// column index</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RG_Matrix_checkBounds</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint64_t</name></type>  <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>  <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>      <name>entry_exists</name>       <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>          <comment type="line">//  M[i,j] exists</comment>
	<decl_stmt><decl><type><name>bool</name></type>      <name>mark_for_deletion</name>  <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>          <comment type="line">//  dm[i,j] exists</comment>

	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator>  <call><name>RG_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>transposed</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>info</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name>   <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>dp</name>  <init>= <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>dm</name>  <init>= <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RG_DEBUG</name></expr></cpp:if>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate type</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>GrB_Type</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>==</operator> <name>GrB_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// check deleted</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<expr_stmt><expr><name>mark_for_deletion</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>mark_for_deletion</name></expr>)</condition> <block>{<block_content> <comment type="line">// m contains single edge, simple replace</comment>
		<comment type="line">// clear dm[i,j]</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_removeElement</name><argument_list>(<argument><expr><name>dm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// overwrite m[i,j]</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// entry isn't marked for deletion</comment>
		<comment type="line">// see if entry already exists in 'm'</comment>
		<comment type="line">// we'll prefer setting entry in 'm' incase it already exists</comment>
		<comment type="line">// otherwise we'll set the entry in 'delta-plus'</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_UINT64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>entry_exists</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>entry_exists</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// update entry at m[i,j]</comment>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>setMultiEdgeEntry</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// update entry at dp[i,j]</comment>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>setMultiEdgeEntry</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>RG_Matrix_setDirty</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

</unit>
