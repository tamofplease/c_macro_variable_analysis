<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_add.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>RG_eWiseAdd</name>                <comment type="line">// C = A + B</comment>
<parameter_list>(
    <parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>,                    <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// defines '+' for T=A+B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>A</name></decl></parameter>,              <comment type="line">// first input:  matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>B</name></decl></parameter>               <comment type="line">// second input: matrix B</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>B</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>semiring</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type>        <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>       <name>nrows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>       <name>ncols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>       <name>DM_nvals</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>       <name>DP_nvals</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>_A</name>    <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>_B</name>    <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>_C</name>    <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>AM</name>    <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>BM</name>    <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>ADP</name>   <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>ADM</name>   <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>BDP</name>   <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>BDM</name>   <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// TODO: check A, B and C are compatible</comment>

	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>DM_nvals</name></expr></argument>, <argument><expr><name>ADM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>DP_nvals</name></expr></argument>, <argument><expr><name>ADP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>DM_nvals</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>DP_nvals</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_export</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>_A</name> <operator>=</operator> <name>AM</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>DM_nvals</name></expr></argument>, <argument><expr><name>BDM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>DP_nvals</name></expr></argument>, <argument><expr><name>BDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>DM_nvals</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>DP_nvals</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_export</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_B</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>_B</name> <operator>=</operator> <name>BM</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// C = A + B</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_eWiseAdd_Semiring</name><argument_list>(<argument><expr><name>_C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>_A</name></expr></argument>, <argument><expr><name>_B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>_A</name> <operator>!=</operator> <name>AM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>_B</name> <operator>!=</operator> <name>BM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

</unit>
