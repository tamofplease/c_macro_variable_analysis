<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_matrix.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>RG_Matrix_setDirty</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>transposed</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>RG_Matrix</name></type> <name>RG_Matrix_getTranspose</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>C</name><operator>-&gt;</operator><name>transposed</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>RG_Matrix_isDirty</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>pending_M</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>pending_DP</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>pending_DM</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GxB_Matrix_Pending</name><argument_list>(<argument><expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pending_M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GxB_Matrix_Pending</name><argument_list>(<argument><expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pending_DP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GxB_Matrix_Pending</name><argument_list>(<argument><expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pending_DM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>pending_M</name> <operator>|</operator> <name>pending_DM</name> <operator>|</operator> <name>pending_DP</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// checks if C is fully synced</comment>
<comment type="line">// a synced delta matrix does not contains any entries in</comment>
<comment type="line">// either its delta-plus and delta-minus internal matrices</comment>
<function><type><name>bool</name></type> <name>RG_Matrix_Synced</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>C</name></decl></parameter>  <comment type="line">// matrix to inquery</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// quick indication, if the matrix is marked as dirty that means</comment>
	<comment type="line">// entires exists in either DP or DM</comment>
	<if_stmt><if>if<condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>dp_nvals</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>dm_nvals</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp_nvals</name></expr></argument>, <argument><expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm_nvals</name></expr></argument>, <argument><expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>dp_nvals</name> <operator>+</operator> <name>dm_nvals</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// locks the matrix</comment>
<function><type><name>void</name></type> <name>RG_Matrix_Lock</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>C</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// unlocks the matrix</comment>
<function><type><name>void</name></type> <name>RG_Matrix_Unlock</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>C</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_nrows</name>
<parameter_list>(
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>nrows</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>GrB_Matrix_nrows</name><argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_ncols</name>
<parameter_list>(
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>ncols</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>GrB_Matrix_ncols</name><argument_list>(<argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_nvals</name>    <comment type="line">// get the number of entries in a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>nvals</name></decl></parameter>,       <comment type="line">// matrix has nvals entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>A</name></decl></parameter>       <comment type="line">// matrix to query</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>A</name>      <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nvals</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>dp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>dm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type>  <name>m_nvals</name>   <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>  <name>dp_nvals</name>  <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>  <name>dm_nvals</name>  <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// nvals = nvals(M) + nvals(DP) - nvals(DM)</comment>

	<expr_stmt><expr><name>m</name>   <operator>=</operator>  <call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dp</name>  <operator>=</operator>  <call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dm</name>  <operator>=</operator>  <call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_nvals</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp_nvals</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm_nvals</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>nvals</name> <operator>=</operator> <name>m_nvals</name> <operator>+</operator> <name>dp_nvals</name> <operator>-</operator> <name>dm_nvals</name></expr>;</expr_stmt>
	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_clear</name>
<parameter_list>(
    <parameter><decl><type><name>RG_Matrix</name></type> <name>A</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>A</name> <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>m</name>            <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info</name>         <init>=  <expr><name>GrB_SUCCESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>delta_plus</name>   <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>delta_minus</name>  <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_clear</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_clear</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_clear</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>transposed</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_type</name>
<parameter_list>(
	<parameter><decl><type><name>GrB_Type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>A</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>A</name>     <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GxB_Matrix_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>ASSERT</name><argument_list>(<argument>info == GrB_SUCCESS</argument>)</argument_list></macro>
	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>
</unit>
