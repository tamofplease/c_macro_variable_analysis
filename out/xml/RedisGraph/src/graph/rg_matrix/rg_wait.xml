<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_wait.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"configuration/config.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_SetUndirty</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>transposed</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>RG_Matrix_sync</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>m</name>     <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>dp</name>    <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>dm</name>    <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Descriptor</name></type>  <name>desc</name>  <init>=  <expr><name>GrB_NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>      <name>mask</name>  <init>=  <expr><name>GrB_NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>dp_nvals</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>dm_nvals</name></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// determin change set</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp_nvals</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm_nvals</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type>  <name>additions</name>  <init>=  <expr><name>dp_nvals</name>  <operator>&gt;</operator>  <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>deletions</name>  <init>=  <expr><name>dm_nvals</name>  <operator>&gt;</operator>  <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// perform deletions</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>deletions</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_transpose</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>GrB_DESC_RSCT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// clear delta minus</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_clear</name><argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// perform additions</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>additions</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>GrB_Type</name></type> <name>t</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t</name> <operator>==</operator> <name>GrB_BOOL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_ANY_PAIR_BOOL</name></expr> </then><else>: <expr><name>GxB_ANY_PAIR_UINT64</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_eWiseAdd_Semiring</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// clear delta plus</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_clear</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate that both delta-plus and delta-minus are cleared</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// wait on all 3 matrices</comment>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_wait</name><argument_list>(<argument><expr><name>m</name></expr></argument>,  <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_wait</name><argument_list>(<argument><expr><name>dm</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_wait</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_wait</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>A</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>force_sync</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_Matrix_wait</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>transposed</name></name></expr></argument>, <argument><expr><name>force_sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<decl_stmt><decl><type><name>GrB_Info</name></type>   <name>info</name>        <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name>           <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>delta_plus</name>  <init>= <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>delta_minus</name> <init>= <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// check if merge is required</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>delta_plus_nvals</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>delta_minus_nvals</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta_plus_nvals</name></expr></argument>, <argument><expr><name>delta_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delta_minus_nvals</name></expr></argument>, <argument><expr><name>delta_minus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint64_t</name></type> <name>delta_max_pending_changes</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_DELTA_MAX_PENDING_CHANGES</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>delta_max_pending_changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>force_sync</name> <operator>||</operator>
	   <name>delta_plus_nvals</name> <operator>+</operator> <name>delta_minus_nvals</name> <operator>&gt;=</operator> <name>delta_max_pending_changes</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_sync</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// wait on 'm', in most cases 'm' won't contain any pending work</comment>
		<comment type="line">// but it might need to build its internal hyper-hash</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_wait</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_wait</name><argument_list>(<argument><expr><name>delta_plus</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_wait</name><argument_list>(<argument><expr><name>delta_minus</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>_SetUndirty</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

</unit>
