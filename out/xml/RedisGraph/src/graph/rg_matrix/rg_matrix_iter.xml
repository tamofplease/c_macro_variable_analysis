<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_matrix_iter.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./rg_matrix_iter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">// returns true if iterator is detached from a matrix</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DETACHED</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((iter) == NULL || (iter)-&gt;A == NULL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_set_iter_range</name>
<parameter_list>(
	<parameter><decl><type><name>GxB_Iterator</name></type> <name>it</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>min_row</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>max_row</name></decl></parameter>,
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>depleted</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GxB_rowIterator_seekRow</name> <argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>min_row</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>GxB_EXHAUSTED</name></expr>:</case>
			<comment type="line">// no values to iterate on</comment>
			<expr_stmt><expr><operator>*</operator><name>depleted</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
			<break>break ;</break>
		<case>case <expr><name>GrB_NO_VALUE</name></expr>:</case>
			<comment type="line">// in sparse matrix no value in the current row</comment>
			<comment type="line">// seek to first none empty row</comment>
			<while>while <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name> <operator>&amp;&amp;</operator> <call><name>GxB_rowIterator_getRowIndex</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>max_row</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_nextRow</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
			</block_content>}</block></while>

			<expr_stmt><expr><operator>*</operator><name>depleted</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name> <operator>||</operator>
						<call><name>GxB_rowIterator_getRowIndex</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_row</name><operator>)</operator></expr> ;</expr_stmt>
			<break>break ;</break>
		<case>case <expr><name>GrB_SUCCESS</name></expr>:</case>
			<comment type="line">// in hypersparse matrix iterator move to the next row with values</comment>
			<comment type="line">// make sure seekRow didn't over-reached</comment>
			<expr_stmt><expr><operator>*</operator><name>depleted</name> <operator>=</operator> <call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_row</name></expr>;</expr_stmt>
			<break>break ;</break>		
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_init_iter</name>
<parameter_list>(
	<parameter><decl><type><name>GxB_Iterator</name></type> <name>it</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Matrix</name></type> <name>m</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>min_row</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>max_row</name></decl></parameter>,
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>depleted</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>it</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>min_row</name> <operator>&lt;=</operator> <name>max_row</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depleted</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>depleted</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt> <comment type="line">// default</comment>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_attach</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>_set_iter_range</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>min_row</name></expr></argument>, <argument><expr><name>max_row</name></expr></argument>, <argument><expr><name>depleted</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_MatrixTupleIter_iterate_row</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>rowIdx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>IS_DETACHED</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NULL_POINTER</name></expr> ;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name> <operator>=</operator> <name>rowIdx</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name> <operator>=</operator> <name>rowIdx</name></expr> ;</expr_stmt>

	<expr_stmt><expr><call><name>_set_iter_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_it</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>_set_iter_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_it</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_MatrixTupleIter_iterate_range</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,   <comment type="line">// iterator to use</comment>
	<parameter><decl><type><name>GrB_Index</name></type> <name>startRowIdx</name></decl></parameter>,      <comment type="line">// row index to start with</comment>
	<parameter><decl><type><name>GrB_Index</name></type> <name>endRowIdx</name></decl></parameter>         <comment type="line">// row index to finish with</comment>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>IS_DETACHED</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NULL_POINTER</name></expr> ;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name> <operator>=</operator> <name>startRowIdx</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name> <operator>=</operator> <name>endRowIdx</name></expr> ;</expr_stmt>

	<expr_stmt><expr><call><name>_set_iter_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_it</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>_set_iter_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_it</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr> ;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_iter_next</name>
<parameter_list>(
	<parameter><decl><type><name>GxB_Iterator</name></type> <name>it</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>max_row</name></decl></parameter>,
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>depleted</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Info</name></type>   <name>info</name></decl> ;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_nextCol</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_nextRow</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<comment type="line">// in-case iterator maintains number of yield values, we can use nvals here</comment>
		<comment type="line">// for a quick return!</comment>
		<while>while<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name> <operator>&amp;&amp;</operator> <call><name>GxB_rowIterator_getRowIndex</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>max_row</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_nextRow</name> <argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		</block_content>}</block></while>

		<comment type="line">// prep for next call to `_next_m_iter`</comment>
		<expr_stmt><expr><operator>*</operator><name>depleted</name> <operator>=</operator> <name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name> <operator>||</operator> <call><name>GxB_rowIterator_getRowIndex</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_row</name></expr> ;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// iterate over M matrix</comment>
<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>_next_m_iter_bool</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,  <comment type="line">// iterator scanning M</comment>
	<parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>DM</name></decl></parameter>,       <comment type="line">// delta-minus, masked entries</comment>
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>row</name></decl></parameter>,            <comment type="line">// optional extracted row index</comment>
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>col</name></decl></parameter>,            <comment type="line">// optional extracted column index</comment>
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,                 <comment type="line">// optional extracted value</comment>
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>depleted</name></decl></parameter>             <comment type="line">// [output] true if iterator depleted</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iter</name>     <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>DM</name>       <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depleted</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type>  <name>_row</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>  <name>_col</name></decl> ;</decl_stmt>

	<decl_stmt><decl><type><name>GxB_Iterator</name></type> <name>m_it</name> <init>= <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_it</name></name></expr></init></decl> ;</decl_stmt>

	<do>do <block>{<block_content>
		<comment type="line">// iterator depleted, return</comment>
		<if_stmt><if>if<condition>(<expr><operator>*</operator><name>depleted</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NO_VALUE</name></expr> ;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>_row</name> <operator>=</operator> <call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>m_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><name>_col</name> <operator>=</operator> <call><name>GxB_rowIterator_getColIndex</name> <argument_list>(<argument><expr><name>m_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>GxB_Iterator_get_BOOL</name> <argument_list>(<argument><expr><name>m_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// prep value for next iteration</comment>
		<expr_stmt><expr><call><name>_iter_next</name><argument_list>(<argument><expr><name>m_it</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><name>depleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>x</name></decl> ;</decl_stmt>
 		<decl_stmt><decl><type><name>GrB_Info</name></type> <name>delete_info</name> <init>= <expr><call><name>GrB_Matrix_extractElement_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>DM</name></expr></argument>, <argument><expr><name>_row</name></expr></argument>, <argument><expr><name>_col</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
 		<if_stmt><if>if<condition>(<expr><name>delete_info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt> <comment type="line">// entry isn't deleted, return</comment>
	</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition> ;</do>

	<if_stmt><if>if<condition>(<expr><name>row</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>row</name> <operator>=</operator> <name>_row</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>col</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>col</name> <operator>=</operator> <name>_col</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// advance iterator</comment>
<function><type><name>GrB_Info</name></type> <name>RG_MatrixTupleIter_next_BOOL</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,       <comment type="line">// iterator to consume</comment>
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>row</name></decl></parameter>,                 <comment type="line">// optional output row index</comment>
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>col</name></decl></parameter>,                 <comment type="line">// optional output column index</comment>
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>val</name></decl></parameter>                       <comment type="line">// optional value at A[row, col]</comment>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>IS_DETACHED</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NULL_POINTER</name></expr> ;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type>             <name>info</name>     <init>=  <expr><name>GrB_SUCCESS</name></expr></init></decl>                    ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>           <name>DM</name>       <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>A</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GxB_Iterator</name></type>         <name>dp_it</name>    <init>=  <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_it</name></name></expr></init></decl>                   ;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>_next_m_iter_bool</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>DM</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_SUCCESS</name></expr> ;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>GxB_EXHAUSTED</name></expr> ;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>row</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>row</name> <operator>=</operator> <call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>dp_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>col</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>col</name> <operator>=</operator> <call><name>GxB_rowIterator_getColIndex</name> <argument_list>(<argument><expr><name>dp_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>GxB_Iterator_get_BOOL</name> <argument_list>(<argument><expr><name>dp_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// prep value for next iteration</comment>
	<expr_stmt><expr><call><name>_iter_next</name><argument_list>(<argument><expr><name>dp_it</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// iterate over M matrix</comment>
<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>_next_m_iter_uint64</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,  <comment type="line">// iterator scanning M</comment>
	<parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>DM</name></decl></parameter>,       <comment type="line">// delta-minus, masked entries</comment>
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>row</name></decl></parameter>,            <comment type="line">// optional extracted row index</comment>
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>col</name></decl></parameter>,            <comment type="line">// optional extracted column index</comment>
	<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,             <comment type="line">// optional extracted value</comment>
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>depleted</name></decl></parameter>             <comment type="line">// [output] true if iterator depleted</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iter</name>     <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>DM</name>       <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depleted</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type>  <name>_row</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>  <name>_col</name></decl> ;</decl_stmt>

	<decl_stmt><decl><type><name>GxB_Iterator</name></type> <name>m_it</name> <init>= <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_it</name></name></expr></init></decl> ;</decl_stmt>

	<do>do <block>{<block_content>
		<comment type="line">// iterator depleted, return</comment>
		<if_stmt><if>if<condition>(<expr><operator>*</operator><name>depleted</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NO_VALUE</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>_row</name> <operator>=</operator> <call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>m_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><name>_col</name> <operator>=</operator> <call><name>GxB_rowIterator_getColIndex</name> <argument_list>(<argument><expr><name>m_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>GxB_Iterator_get_UINT64</name> <argument_list>(<argument><expr><name>m_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// prep value for next iteration</comment>
		<expr_stmt><expr><call><name>_iter_next</name><argument_list>(<argument><expr><name>m_it</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><name>depleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>x</name></decl> ;</decl_stmt>
 		<decl_stmt><decl><type><name>GrB_Info</name></type> <name>delete_info</name> <init>= <expr><call><name>GrB_Matrix_extractElement_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>DM</name></expr></argument>, <argument><expr><name>_row</name></expr></argument>, <argument><expr><name>_col</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
 		<if_stmt><if>if<condition>(<expr><name>delete_info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt> <comment type="line">// entry isn't deleted, return</comment>
	</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition> ;</do>

	<if_stmt><if>if<condition>(<expr><name>row</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>row</name> <operator>=</operator> <name>_row</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>col</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>col</name> <operator>=</operator> <name>_col</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// advance iterator</comment>
<function><type><name>GrB_Info</name></type> <name>RG_MatrixTupleIter_next_UINT64</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,       <comment type="line">// iterator to consume</comment>
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>row</name></decl></parameter>,                 <comment type="line">// optional output row index</comment>
	<parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>col</name></decl></parameter>,                 <comment type="line">// optional output column index</comment>
	<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>                  <comment type="line">// optional value at A[row, col]</comment>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>IS_DETACHED</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NULL_POINTER</name></expr> ;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type>             <name>info</name>     <init>=  <expr><name>GrB_SUCCESS</name></expr></init></decl>                    ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>           <name>DM</name>       <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>A</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GxB_Iterator</name></type>         <name>dp_it</name>    <init>=  <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_it</name></name></expr></init></decl>                    ;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>_next_m_iter_uint64</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>DM</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_SUCCESS</name></expr> ;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>GxB_EXHAUSTED</name></expr> ;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>row</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>row</name> <operator>=</operator> <call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>dp_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>col</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>col</name> <operator>=</operator> <call><name>GxB_rowIterator_getColIndex</name> <argument_list>(<argument><expr><name>dp_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>GxB_Iterator_get_UINT64</name> <argument_list>(<argument><expr><name>dp_it</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// prep value for next iteration</comment>
	<expr_stmt><expr><call><name>_iter_next</name><argument_list>(<argument><expr><name>dp_it</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// reset iterator, assumes the iterator is valid</comment>
<function><type><name>GrB_Info</name></type> <name>RG_MatrixTupleIter_reset</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>       <comment type="line">// iterator to reset</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>IS_DETACHED</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NULL_POINTER</name></expr> ;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>_set_iter_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_it</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>_set_iter_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_it</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<return>return <expr><name>info</name></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// returns true if iterator is attached to given matrix false otherwise</comment>
<function><type><name>bool</name></type> <name>RG_MatrixTupleIter_is_attached</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,       <comment type="line">// iterator to check</comment>
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>M</name></decl></parameter>                     <comment type="line">// matrix attached to</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>A</name></name> <operator>==</operator> <name>M</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// update iterator to scan given matrix</comment>
<function><type><name>GrB_Info</name></type> <name>RG_MatrixTupleIter_attach</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,       <comment type="line">// iterator to update</comment>
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>A</name></decl></parameter>              <comment type="line">// matrix to scan</comment>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>RG_MatrixTupleIter_AttachRange</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>RG_ITER_MIN_ROW</name></expr></argument>,
		<argument><expr><name>RG_ITER_MAX_ROW</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// update iterator to scan given matrix</comment>
<function><type><name>GrB_Info</name></type> <name>RG_MatrixTupleIter_AttachRange</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,       <comment type="line">// iterator to update</comment>
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>A</name></decl></parameter>,              <comment type="line">// matrix to scan</comment>
	<parameter><decl><type><name>GrB_Index</name></type> <name>min_row</name></decl></parameter>,              <comment type="line">// minimum row for iteration</comment>
	<parameter><decl><type><name>GrB_Index</name></type> <name>max_row</name></decl></parameter>               <comment type="line">// maximum row for iteration</comment>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NULL_POINTER</name></expr> ;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_NULL_POINTER</name></expr> ;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name>  <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>DP</name> <init>= <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>A</name></name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name> <operator>=</operator> <name>min_row</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name> <operator>=</operator> <name>max_row</name></expr> ;</expr_stmt>

	<expr_stmt><expr><call><name>_init_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_it</name></name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>_init_iter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_it</name></name></expr></argument>, <argument><expr><name>DP</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>min_row</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>max_row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// free iterator data</comment>
<function><type><name>GrB_Info</name></type> <name>RG_MatrixTupleIter_detach</name>
<parameter_list>(
	<parameter><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>       <comment type="line">// iterator to free</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>A</name></name>           <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>m_depleted</name></name>  <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dp_depleted</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr> ;</return>
</block_content>}</block></function>
</unit>
