<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_remove_element.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_removeElement_BOOL</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>,                    <comment type="line">// matrix to remove entry from</comment>
	<parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,                    <comment type="line">// row index</comment>
	<parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>                     <comment type="line">// column index</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RG_Matrix_checkBounds</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type>        <name>m_x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>dm_x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>dp_x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Type</name></type>    <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>in_m</name>        <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>in_dp</name>       <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>in_dm</name>       <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>m</name>           <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>dp</name>          <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>dm</name>          <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_removeElement_BOOL</name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>transposed</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>info</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_m</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp_x</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_dp</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm_x</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_dm</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="line">// mask 'in_m' incase it is marked for deletion</comment>
	<expr_stmt><expr><name>in_m</name> <operator>=</operator> <name>in_m</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>in_dm</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="line">// entry missing from both 'm' and 'dp'</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>in_m</name> <operator>||</operator> <name>in_dp</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>GrB_NO_VALUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// entry can't exists in both 'm' and 'dp'</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>in_m</name> <operator>!=</operator> <name>in_dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// entry exists in 'M'</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>in_m</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// mark deletion in delta minus</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement</name><argument_list>(<argument><expr><name>dm</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// entry exists in 'delta-plus'</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>in_dp</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// remove entry from 'dp'</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_removeElement</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RG_Matrix_setDirty</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_removeElement_UINT64</name>
<parameter_list>(
    <parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>,                    <comment type="line">// matrix to remove entry from</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,                    <comment type="line">// row index</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>                     <comment type="line">// column index</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RG_Matrix_checkBounds</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint64_t</name></type>    <name>m_x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type>    <name>dm_x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type>    <name>dp_x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Type</name></type>    <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>in_m</name>        <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>in_dp</name>       <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>in_dm</name>       <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>m</name>           <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>dp</name>          <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>dm</name>          <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RG_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_removeElement_BOOL</name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>transposed</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>info</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_m</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp_x</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_dp</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dm_x</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_dm</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="line">// mask 'in_m' incase it is marked for deletion</comment>
	<expr_stmt><expr><name>in_m</name> <operator>=</operator> <name>in_m</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>in_dm</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="line">// entry missing from both 'm' and 'dp'</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>in_m</name> <operator>||</operator> <name>in_dp</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>GrB_NO_VALUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// entry can't exists in both 'm' and 'dp'</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>in_m</name> <operator>!=</operator> <name>in_dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// entry exists in 'M'</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>in_m</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// free multi-edge entry, leave M[i,j] dirty</comment>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SINGLE_EDGE</name><argument_list>(<argument><expr><name>m_x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>m_x</name> <operator>=</operator> <call><name>CLEAR_MSB</name><argument_list>(<argument><expr><name>m_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>m_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// mark deletion in delta minus</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement</name><argument_list>(<argument><expr><name>dm</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// entry exists in 'delta-plus'</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>in_dp</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// free multi-edge entry</comment>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SINGLE_EDGE</name><argument_list>(<argument><expr><name>dp_x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>dp_x</name> <operator>=</operator> <call><name>CLEAR_MSB</name><argument_list>(<argument><expr><name>dp_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>dp_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// remove entry from 'dp'</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_removeElement</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RG_Matrix_setDirty</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

</unit>
