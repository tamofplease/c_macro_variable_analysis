<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_free.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../entities/graph_entity.h"</cpp:file></cpp:include>

<comment type="line">// free multi-edge arrays GraphBLAS unary operation</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>GrB_UnaryOp</name></type> <name>free_multi_edge_op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="line">// unary GraphBLAS operation which frees all multi-edge array entries</comment>
<comment type="line">// within a matrix</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>free_multiedge_array</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>EdgeID</name> <modifier>*</modifier></type><name>_out</name> <init>= <expr><operator>(</operator><name>EdgeID</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>EdgeID</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>EdgeID</name> <operator>*</operator><operator>)</operator><name>in</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SINGLE_EDGE</name><argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="line">// entry is a pointer to dynamic array, free it</comment>
		<decl_stmt><decl><type><name>EdgeID</name> <modifier>*</modifier></type><name>ids</name> <init>= <expr><operator>(</operator><name>EdgeID</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>CLEAR_MSB</name><argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// set out to 0</comment>
	<expr_stmt><expr><operator>*</operator><name>_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// free RG_Matrix's internal matrices:</comment>
<comment type="line">// M, delta-plus, delta-minus and transpose</comment>
<function><type><name>void</name></type> <name>RG_Matrix_free</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name> <modifier>*</modifier></type><name>C</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type> <name>M</name> <init>= <expr><operator>*</operator><name>C</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RG_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>M</name><operator>-&gt;</operator><name>transposed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name>  <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>dp</name> <init>= <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// free edges</comment>
	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MULTI_EDGE</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>free_multi_edge_op</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// create unary operation</comment>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_UnaryOp_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>free_multi_edge_op</name></expr></argument>, <argument><expr><name>free_multiedge_array</name></expr></argument>, 
				<argument><expr><name>GrB_UINT64</name></expr></argument>, <argument><expr><name>GrB_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// frees multi-edge arrays</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_apply</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>free_multi_edge_op</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_apply</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>free_multi_edge_op</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>M</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>M</name><operator>-&gt;</operator><name>delta_plus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>M</name><operator>-&gt;</operator><name>delta_minus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>M</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><operator>*</operator><name>C</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
