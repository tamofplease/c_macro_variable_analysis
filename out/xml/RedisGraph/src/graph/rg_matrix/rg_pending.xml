<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_pending.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_pending</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>C</name></decl></parameter>,              <comment type="line">// matrix to query</comment>
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>                   <comment type="line">// are there any pending operations</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>C</name>       <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>p</name>        <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>res</name>      <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>M</name>        <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>DP</name>       <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>DM</name>       <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RG_MATRIX_MAINTAIN_TRANSPOSE</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_pending</name><argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>transposed</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>pending</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><name>GrB_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// check if M contains pending changes</comment>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_Pending</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>p</name></expr>;</expr_stmt>

	<comment type="line">// check if delta-plus contains pending changes</comment>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_Pending</name><argument_list>(<argument><expr><name>DP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>p</name></expr>;</expr_stmt>

	<comment type="line">// check if delta-plus contains pending changes</comment>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_Pending</name><argument_list>(<argument><expr><name>DM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>|=</operator> <name>p</name></expr>;</expr_stmt>

	<comment type="line">// set output</comment>
	<expr_stmt><expr><operator>*</operator><name>pending</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

</unit>
