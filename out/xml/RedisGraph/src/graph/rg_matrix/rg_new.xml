<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_new.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>_RG_Matrix_init</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>A</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>dirty</name></name>    <operator>=</operator>  <name>false</name></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// create m, delta-plus and delta-minus</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// m, can be either hypersparse or sparse</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_set</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name> <operator>|</operator> <name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// delta-plus, always hypersparse</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>delta_plus</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_set</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>delta_plus</name></name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_set</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>delta_plus</name></name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_ALWAYS_HYPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// delta-minus, always hypersparse</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>delta_minus</name></name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_set</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>delta_minus</name></name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_set</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>delta_minus</name></name></expr></argument>, <argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><name>GxB_ALWAYS_HYPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// creates a new matrix</comment>
<function><type><name>GrB_Info</name></type> <name>RG_Matrix_new</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type> <name>matrix</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_RG_Matrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// input validations</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// supported types: boolean and uint64</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>_RG_Matrix_init</name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// create transpose matrix if required</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>matrix</name><operator>-&gt;</operator><name>transposed</name></name> <operator>=</operator> <call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_RG_Matrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>_RG_Matrix_init</name><argument_list>(<argument><expr><name><name>matrix</name><operator>-&gt;</operator><name>transposed</name></name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>mutex_res</name> <init>= <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>matrix</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mutex_res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>A</name> <operator>=</operator> <name>matrix</name></expr>;</expr_stmt>
	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

</unit>
