<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/rg_matrix/rg_copy.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rg_matrix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_copyMatrix</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>in</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Matrix</name></type> <name>out</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Index</name></type>   <name>nvals</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>    <name>info</name> <init>=  <expr><name>GrB_SUCCESS</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>nvals</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_apply</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_IDENTITY_BOOL</name></expr></argument>, <argument><expr><name>in</name></expr></argument>,
				<argument><expr><name>GrB_DESC_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>GrB_Matrix_clear</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>RG_Matrix_copy</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>C</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>A</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>RG_Matrix_checkCompatible</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>in_m</name>             <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>out_m</name>            <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>in_delta_plus</name>    <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>in_delta_minus</name>   <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>out_delta_plus</name>   <init>=  <expr><call><name>RG_MATRIX_DELTA_PLUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>  <name>out_delta_minus</name>  <init>=  <expr><call><name>RG_MATRIX_DELTA_MINUS</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>_copyMatrix</name><argument_list>(<argument><expr><name>in_m</name></expr></argument>, <argument><expr><name>out_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_copyMatrix</name><argument_list>(<argument><expr><name>in_delta_plus</name></expr></argument>, <argument><expr><name>out_delta_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_copyMatrix</name><argument_list>(<argument><expr><name>in_delta_minus</name></expr></argument>, <argument><expr><name>out_delta_minus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>GrB_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

</unit>
