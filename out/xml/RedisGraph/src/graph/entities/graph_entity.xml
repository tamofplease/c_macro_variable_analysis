<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/entities/graph_entity.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph_entity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../datatypes/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../datatypes/array.h"</cpp:file></cpp:include>

<comment type="line">// add a new property to entity</comment>
<function><type><name>bool</name></type> <name>GraphEntity_AddProperty</name>
<parameter_list>(
	<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AttributeSet_Add</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name> <modifier>*</modifier></type><name>GraphEntity_GetProperty</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// e-&gt;attributes is NULL when dealing with an "intermediate" entity,</comment>
	<comment type="line">// one which didn't had its attribute-set allocated within the graph datablock.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
 		<comment type="line">// note that this exception may cause memory to be leaked in the caller</comment>
 		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Attempted to access undefined attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 		<return>return <expr><name>ATTRIBUTE_NOTFOUND</name></expr>;</return>
 	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>AttributeSet_Get</name><argument_list>(<argument><expr><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// updates existing property value</comment>
<function><type><name>bool</name></type> <name>GraphEntity_SetProperty</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>AttributeSet_Update</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns an SIArray of all keys in graph entity properties</comment>
<function><type><name>SIValue</name></type> <name>GraphEntity_Keys</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>GraphEntity_GetAttributes</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>prop_count</name> <init>= <expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>keys</name> <init>= <expr><call><name>SIArray_New</name><argument_list>(<argument><expr><name>prop_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prop_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AttributeSet_GetIdx</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>GraphContext_GetAttributeString</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keys</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>keys</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns a map containing all the properties in the given node, or edge. </comment>
<function><type><name>SIValue</name></type> <name>GraphEntity_Properties</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>GraphEntity_GetAttributes</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>propCount</name> <init>= <expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>map</name> <init>= <expr><call><name>SI_Map</name><argument_list>(<argument><expr><name>propCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>propCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>AttributeSet_GetIdx</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>GraphContext_GetAttributeString</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// prints the attribute set into a buffer, returns what is the string length</comment>
<comment type="line">// buffer can be re-allocated if needed</comment>
<function><type><name>size_t</name></type> <name>GraphEntity_PropertiesToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bufferLen</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bytesWritten</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// make sure there is enough space for "{...}\0"</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>GraphEntity_GetAttributes</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>propCount</name> <init>= <expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>propCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>AttributeSet_GetIdx</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// print key</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>GraphContext_GetAttributeString</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// check for enough space</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>keyLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <name>keyLen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <name>keyLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// print value</comment>
		<expr_stmt><expr><call><name>SIValue_ToString</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// if not the last element print ", "</comment>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>propCount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></for>
	<comment type="line">// check for enough space for close with "}\0"</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>*</operator><name>bytesWritten</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEntity_ToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bufferLen</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bytesWritten</name></decl></parameter>,
	<parameter><decl><type><name>GraphEntityStringFromat</name></type> <name>format</name></decl></parameter>,
	<parameter><decl><type><name>GraphEntityType</name></type> <name>entityType</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// space allocation</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition>  <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// get open an close symbols</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>openSymbole</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>closeSymbole</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>entityType</name> <operator>==</operator> <name>GETYPE_NODE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>openSymbole</name> <operator>=</operator> <literal type="string">"("</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>closeSymbole</name> <operator>=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>openSymbole</name> <operator>=</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>closeSymbole</name> <operator>=</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>openSymbole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// write id</comment>
	<if_stmt><if>if<condition>(<expr><name>format</name> <operator>&amp;</operator> <name>ENTITY_ID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// write label</comment>
	<if_stmt><if>if<condition>(<expr><name>format</name> <operator>&amp;</operator> <name>ENTITY_LABELS_OR_RELATIONS</name></expr>)</condition> <block>{<block_content>
		<switch>switch<condition>(<expr><name>entityType</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>GETYPE_NODE</name></expr>:</case> <block>{<block_content>
				<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>e</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="line">// retrieve node labels</comment>
				<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>Schema_GetName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<comment type="line">// allocate space if needed</comment>
					<decl_stmt><decl><type><name>size_t</name></type> <name>labelLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <name>labelLen</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <name>labelLen</name></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			</block_content>}</block>

			<case>case <expr><name>GETYPE_EDGE</name></expr>:</case> <block>{<block_content>
				<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><operator>(</operator><name>Edge</name> <operator>*</operator><operator>)</operator><name>e</name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>edge</name><operator>-&gt;</operator><name>relationship</name></name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>size_t</name></type> <name>relationshipLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>edge</name><operator>-&gt;</operator><name>relationship</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <name>relationshipLen</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <name>relationshipLen</name></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name><name>edge</name><operator>-&gt;</operator><name>relationship</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

			<default>default:</default>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// write properies</comment>
	<if_stmt><if>if<condition>(<expr><name>format</name> <operator>&amp;</operator> <name>ENTITY_PROPERTIES</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>GraphEntity_PropertiesToString</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// check for enough space for close with closing symbol</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buffer</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>closeSymbole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>GraphEntity_IsDeleted</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Graph_EntityIsDeleted</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>const</specifier> <name>AttributeSet</name></type> <name>GraphEntity_GetAttributes</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>int</name></type> <name>GraphEntity_ClearAttributes</name>
<parameter_list>(
	<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><operator>*</operator><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
</unit>
