<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/entities/qg_edge.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qg_edge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qg_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>

<function><type><name>QGEdge</name> <modifier>*</modifier></type><name>QGEdge_New</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relationship</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QGEdge</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name>          <operator>=</operator>  <name>alias</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name></name>       <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name></name>     <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name>            <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name>           <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>minHops</name></name>        <operator>=</operator>  <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>maxHops</name></name>        <operator>=</operator>  <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>bidirectional</name></name>  <operator>=</operator>  <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>shortest_path</name></name>  <operator>=</operator>  <name>false</name></expr>;</expr_stmt>

	<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>QGEdge_Alias</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QGNode</name> <modifier>*</modifier></type><name>QGEdge_Src</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QGNode</name> <modifier>*</modifier></type><name>QGEdge_Dest</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QGEdge</name> <modifier>*</modifier></type><name>QGEdge_Clone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QGEdge</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QGEdge</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name></name></expr></argument>, <argument><expr><name><name>orig</name><operator>-&gt;</operator><name>reltypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name></name></expr></argument>, <argument><expr><name><name>orig</name><operator>-&gt;</operator><name>reltypeIDs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>QGEdge_VariableLength</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>e</name><operator>-&gt;</operator><name>minHops</name></name> <operator>!=</operator> <name><name>e</name><operator>-&gt;</operator><name>maxHops</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>QGEdge_IsShortestPath</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>shortest_path</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QGEdge_RelationCount</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>QGEdge_Relation</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <call><name>QGEdge_RelationCount</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>QGEdge_RelationID</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <call><name>QGEdge_RelationCount</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QGEdge_Reverse</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>QGNode_RemoveOutgoingEdge</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QGNode_RemoveIncomingEdge</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Reconnect nodes with the source and destination reversed.</comment>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>QGNode_ConnectNode</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QGEdge_ToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>&amp;&amp;</operator> <name>buff</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>reltype_count</name> <init>= <expr><call><name>QGEdge_RelationCount</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>reltype_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Multiple relationship types are printed separated by pipe characters</comment>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>minHops</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>maxHops</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>maxHops</name></name> <operator>==</operator> <name>EDGE_LENGTH_INF</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"*%u..INF"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>minHops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"*%u..%u"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>minHops</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>maxHops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QGEdge_Free</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
