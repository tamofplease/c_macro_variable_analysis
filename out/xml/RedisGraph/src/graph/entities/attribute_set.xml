<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/entities/attribute_set.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attribute_set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">// compute size of attribute set in bytes</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTRIBUTESET_BYTE_SIZE</name><parameter_list>(<parameter><type><name>set</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((set) == NULL ? sizeof(_AttributeSet) : sizeof(_AttributeSet) + sizeof(Attribute) * (set)-&gt;attr_count)</cpp:value></cpp:define>

<comment type="line">// determine if set is empty</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTRIBUTESET_EMPTY</name><parameter_list>(<parameter><type><name>set</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(set) == NULL</cpp:value></cpp:define>

<comment type="line">// returned value for a missing attribute</comment>
<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>ATTRIBUTE_NOTFOUND</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SIValue</name><operator>)</operator> <block>{
	<expr><operator>.</operator><name>longval</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// removes an attribute from set</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_AttributeSet_Remove</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AttributeSet</name></type> <name>_set</name> <init>= <expr><operator>*</operator><name>set</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>attr_count</name> <init>= <expr><name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// locate attribute position</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>attr_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>attr_id</name> <operator>!=</operator> <name><name>_set</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// if this is the last attribute free the attribute-set</comment>
		<if_stmt><if>if<condition>(<expr><name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// attribute located</comment>
		<comment type="line">// free attribute value</comment>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>_set</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// overwrite deleted attribute with the last</comment>
		<comment type="line">// attribute and shrink set</comment>
		<expr_stmt><expr><name><name>_set</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>_set</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>attr_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="line">// update attribute count</comment>
		<expr_stmt><expr><name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name><operator>--</operator></expr>;</expr_stmt>

		<comment type="line">// compute new set size</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>ATTRIBUTESET_BYTE_SIZE</name><argument_list>(<argument><expr><name>_set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><name>_set</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// attribute removed</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></for>

	<comment type="line">// unable to locate attribute</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// create new empty attribute set</comment>
<function><type><name>AttributeSet</name></type> <name>AttributeSet_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_AttributeSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>set</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// retrieves a value from set</comment>
<comment type="line">// NOTE: if the key does not exist</comment>
<comment type="line">//       we return the special constant value ATTRIBUTE_NOTFOUND</comment>
<function><type><name>SIValue</name> <modifier>*</modifier></type><name>AttributeSet_Get</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name></decl></parameter>,  <comment type="line">// set to retieve attribute from</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>     <comment type="line">// attribute identifier</comment>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>set</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ATTRIBUTE_NOTFOUND</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>attr_id</name> <operator>==</operator> <name>ATTRIBUTE_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ATTRIBUTE_NOTFOUND</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// TODO: benchmark, consider alternatives:</comment>
	<comment type="line">// sorted set</comment>
	<comment type="line">// array divided in two:</comment>
	<comment type="line">// [attr_id_0, attr_id_1, attr_id_2, value_0, value_1, value_2]</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>attr_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>attributes</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>attr_id</name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// note, unsafe as attribute-set can get reallocated</comment>
			<comment type="line">// TODO: why do we return a pointer to value instead of a copy ?</comment>
			<comment type="line">// especially when AttributeSet_GetIdx returns SIValue</comment>
			<comment type="line">// note AttributeSet_Update operate on this pointer</comment>
			<return>return <expr><operator>&amp;</operator><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ATTRIBUTE_NOTFOUND</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// retrieves a value from set by index</comment>
<function><type><name>SIValue</name></type> <name>AttributeSet_GetIdx</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name></decl></parameter>,  <comment type="line">// set to retieve attribute from</comment>
	<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,                   <comment type="line">// index of the property</comment>
	<parameter><decl><type><name>Attribute_ID</name> <modifier>*</modifier></type><name>attr_id</name></decl></parameter>    <comment type="line">// attribute identifier</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>attr_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attr_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>attributes</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>attr_id</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AttributeSet</name></type> <name>AttributeSet_AddPrepare</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,     <comment type="line">// set to update</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>  <comment type="line">// attribute identifier</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attr_id</name> <operator>!=</operator> <name>ATTRIBUTE_ID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AttributeSet</name></type> <name>_set</name> <init>= <expr><operator>*</operator><name>set</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// make sure attribute isn't already in set</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AttributeSet_Get</name><argument_list>(<argument><expr><name>_set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ATTRIBUTE_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// allocate room for new attribute</comment>
	<if_stmt><if>if<condition>(<expr><name>_set</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>_set</name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_AttributeSet</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Attribute</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name><operator>++</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>ATTRIBUTESET_BYTE_SIZE</name><argument_list>(<argument><expr><name>_set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>_set</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><name>_set</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>_set</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// adds an attribute to the set without cloning the SIvalue</comment>
<function><type><name>void</name></type> <name>AttributeSet_AddNoClone</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,     <comment type="line">// set to update</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,  <comment type="line">// attribute identifier</comment>
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>          <comment type="line">// attribute value</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// validate value type</comment>
	<comment type="line">// value must be a valid property type</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_VALID_PROPERTY_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AttributeSet</name></type> <name>_set</name> <init>= <expr><call><name>AttributeSet_AddPrepare</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// set attribute</comment>
	<decl_stmt><decl><type><name>Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>_set</name><operator>-&gt;</operator><name>attributes</name></name> <operator>+</operator> <name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>attr_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

	<comment type="line">// update pointer</comment>
	<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <name>_set</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// adds an attribute to the set</comment>
<function><type><name>void</name></type> <name>AttributeSet_Add</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,     <comment type="line">// set to update</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,  <comment type="line">// attribute identifier</comment>
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>          <comment type="line">// attribute value</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// validate value type</comment>
	<comment type="line">// value must be a valid property type</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_VALID_PROPERTY_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AttributeSet</name></type> <name>_set</name> <init>= <expr><call><name>AttributeSet_AddPrepare</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// set attribute</comment>
	<decl_stmt><decl><type><name>Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>_set</name><operator>-&gt;</operator><name>attributes</name></name> <operator>+</operator> <name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>attr_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>SI_CloneValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update pointer</comment>
	<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <name>_set</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// adds or updates an attribute to the set null value allowed</comment>
<function><type><name>void</name></type> <name>AttributeSet_Set_Allow_Null</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,     <comment type="line">// set to update</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,  <comment type="line">// attribute identifier</comment>
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>          <comment type="line">// attribute value</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attr_id</name> <operator>!=</operator> <name>ATTRIBUTE_ID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AttributeSet</name></type> <name>_set</name> <init>= <expr><operator>*</operator><name>set</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// validate value type</comment>
	<comment type="line">// value must be a valid property type</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>SI_VALID_PROPERTY_VALUE</name> <operator>|</operator> <name>T_NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update the attribute if it is already presented in the set</comment>
	<if_stmt><if>if<condition>(<expr><call><name>AttributeSet_Get</name><argument_list>(<argument><expr><name>_set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ATTRIBUTE_NOTFOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AttributeSet_Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// update pointer</comment>
		<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <name>_set</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// allocate room for new attribute</comment>
	<expr_stmt><expr><name>_set</name> <operator>=</operator> <call><name>AttributeSet_AddPrepare</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set attribute</comment>
	<decl_stmt><decl><type><name>Attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><name><name>_set</name><operator>-&gt;</operator><name>attributes</name></name> <operator>+</operator> <name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>attr_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>SI_CloneValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update pointer</comment>
	<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <name>_set</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// updates existing attribute, return true if attribute been updated</comment>
<function><type><name>bool</name></type> <name>AttributeSet_UpdateNoClone</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,     <comment type="line">// set to update</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,  <comment type="line">// attribute identifier</comment>
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>          <comment type="line">// new value</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attr_id</name> <operator>!=</operator> <name>ATTRIBUTE_ID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// setting an attribute value to NULL removes that attribute</comment>
	<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_AttributeSet_Remove</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><call><name>AttributeSet_Get</name><argument_list>(<argument><expr><operator>*</operator><name>set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>current</name> <operator>!=</operator> <name>ATTRIBUTE_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SIValue_Compare</name><argument_list>(<argument><expr><operator>*</operator><name>current</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// value != current, update entity</comment>
	<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><operator>*</operator><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// free previous value</comment>
	<expr_stmt><expr><operator>*</operator><name>current</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// updates existing attribute, return true if attribute been updated</comment>
<function><type><name>bool</name></type> <name>AttributeSet_Update</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,     <comment type="line">// set to update</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,  <comment type="line">// attribute identifier</comment>
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>          <comment type="line">// new value</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attr_id</name> <operator>!=</operator> <name>ATTRIBUTE_ID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// setting an attribute value to NULL removes that attribute</comment>
	<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_AttributeSet_Remove</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><call><name>AttributeSet_Get</name><argument_list>(<argument><expr><operator>*</operator><name>set</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>current</name> <operator>!=</operator> <name>ATTRIBUTE_NOTFOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// compare current value to new value, only update if current != new</comment>
	<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>SIValue_Compare</name><argument_list>(<argument><expr><operator>*</operator><name>current</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// value != current, update entity</comment>
	<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><operator>*</operator><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// free previous value</comment>
	<expr_stmt><expr><operator>*</operator><name>current</name> <operator>=</operator> <call><name>SI_CloneValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// clones attribute set</comment>
<function><type><name>AttributeSet</name></type> <name>AttributeSet_Clone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name></decl></parameter>  <comment type="line">// set to clone</comment>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>set</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>ATTRIBUTESET_BYTE_SIZE</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttributeSet</name></type> <name>clone</name>  <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>attr_count</name></name>   <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>attr_count</name></name></expr>;</expr_stmt>
	
	<for>for <control>(<init><decl><type><name>ushort</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>attr_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute</name> <modifier>*</modifier></type><name>attr</name>        <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>attributes</name></name>   <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Attribute</name> <modifier>*</modifier></type><name>clone_attr</name>  <init>= <expr><name><name>clone</name><operator>-&gt;</operator><name>attributes</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>clone_attr</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clone_attr</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>SI_CloneValue</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

    <return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// free attribute set</comment>
<function><type><name>void</name></type> <name>AttributeSet_Free</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>  <comment type="line">// set to be freed</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AttributeSet</name></type> <name>_set</name> <init>= <expr><operator>*</operator><name>set</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>_set</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// free all allocated properties</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>_set</name><operator>-&gt;</operator><name>attr_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>_set</name><operator>-&gt;</operator><name>attributes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
