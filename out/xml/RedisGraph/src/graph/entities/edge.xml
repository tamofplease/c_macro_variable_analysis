<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/graph/entities/edge.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"edge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph_entity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<function><type><name>NodeID</name></type> <name>Edge_GetSrcNodeID</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>edge</name><operator>-&gt;</operator><name>srcNodeID</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>NodeID</name></type> <name>Edge_GetDestNodeID</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>edge</name><operator>-&gt;</operator><name>destNodeID</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Edge_GetRelationID</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>edge</name><operator>-&gt;</operator><name>relationID</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Node</name> <modifier>*</modifier></type><name>Edge_GetSrcNode</name>
<parameter_list>(
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Node</name> <modifier>*</modifier></type><name>Edge_GetDestNode</name>
<parameter_list>(
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RG_Matrix</name></type> <name>Edge_GetMatrix</name>
<parameter_list>(
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// retrieve matrix from graph if edge matrix isn't set</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>mat</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// get relation matrix</comment>
		<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>relationID</name></name> <operator>==</operator> <name>GRAPH_UNKNOWN_RELATION</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>mat</name></name> <operator>=</operator> <call><name>Graph_GetZeroMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>mat</name></name> <operator>=</operator> <call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>relationID</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>mat</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Edge_SetSrcNode</name>
<parameter_list>(
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>src</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>&amp;&amp;</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>srcNodeID</name></name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Edge_SetDestNode</name>
<parameter_list>(
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>&amp;&amp;</operator> <name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>destNodeID</name></name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Edge_SetRelationID</name>
<parameter_list>(
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>relationID</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>relationID</name></name> <operator>=</operator> <name>relationID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Edge_ToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bufferLen</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bytesWritten</name></decl></parameter>,
	<parameter><decl><type><name>GraphEntityStringFromat</name></type> <name>format</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>GraphEntity_ToString</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>e</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>GETYPE_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Edge_Free</name>
<parameter_list>(
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>edge</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
