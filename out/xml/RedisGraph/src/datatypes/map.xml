<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/datatypes/map.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/strutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>_key_cmp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Pair</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Pair</name> <modifier>*</modifier></type><name>b</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Pair</name></type> <name>Pair_New</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>key</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>val</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>Pair</name><operator>)</operator> <block>{
		<expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>SI_CloneValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>val</name> <operator>=</operator> <macro><name>SI_CloneValue</name><argument_list>(<argument>val</argument>)</argument_list></macro></expr>
	}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Pair_Free</name>
<parameter_list>(
	<parameter><decl><type><name>Pair</name></type> <name>p</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Map_KeyIdx</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>key</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>n</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// search for key in map</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Pair</name></type> <name>pair</name> <init>= <expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>key</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>i</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// key not in map</comment>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// create a new map</comment>
<function><type><name>SIValue</name></type> <name>Map_New</name>
<parameter_list>(
	<parameter><decl><type><name>uint</name></type> <name>capacity</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>map</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>map</name><operator>.</operator><name>map</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Pair</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_MAP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>.</operator><name>allocation</name></name> <operator>=</operator> <name>M_SELF</name></expr>;</expr_stmt>
	<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// clone map</comment>
<function><type><name>SIValue</name></type> <name>Map_Clone</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>  <comment type="line">// map to clone</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>key_count</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>clone</name> <init>= <expr><call><name>Map_New</name><argument_list>(<argument><expr><name>key_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Pair</name></type> <name>p</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clone</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// adds key/value to map</comment>
<function><type><name>void</name></type> <name>Map_Add</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>key</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// remove key if already existed</comment>
	<expr_stmt><expr><call><name>Map_Remove</name><argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// create a new pair</comment>
	<decl_stmt><decl><type><name>Pair</name></type> <name>pair</name> <init>= <expr><call><name>Pair_New</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// add pair to the end of map</comment>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// removes key from map</comment>
<function><type><name>void</name></type> <name>Map_Remove</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>key</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// search for key in map</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>Map_KeyIdx</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// key missing from map</comment>
	<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// override removed key with last pair</comment>
	<expr_stmt><expr><call><name>Pair_Free</name><argument_list>(<argument><expr><name><name>m</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_del_fast</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// retrieves value under key, map[key]</comment>
<comment type="line">// sets 'value' to NULL if key isn't in map</comment>
<function><type><name>bool</name></type> <name>Map_Get</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>key</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>Map_KeyIdx</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// key isn't in map, set 'value' to NULL and return</comment>
	<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>SI_ShareValue</name><argument_list>(<argument><expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Map_GetIdx</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name></type> <name>map</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Pair</name></type> <name>p</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <call><name>SI_ShareValue</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>SI_ShareValue</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// checks if 'key' is in map</comment>
<function><type><name>bool</name></type> <name>Map_Contains</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>key</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><call><name>Map_KeyIdx</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>Map_KeyCount</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>map</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>Map_Keys</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>key_count</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>keys</name> <init>= <expr><call><name>SIArray_New</name><argument_list>(<argument><expr><name>key_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Pair</name></type> <name>p</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keys</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>keys</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Map_Compare</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>mapA</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>mapB</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>disjointOrNull</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>order</name>        <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Map</name></type>   <name>A</name>            <init>=  <expr><name><name>mapA</name><operator>.</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Map</name></type>   <name>B</name>            <init>=  <expr><name><name>mapB</name><operator>.</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>  <name>key_count</name>    <init>=  <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>mapA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>  <name>A_key_count</name>  <init>=  <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>mapA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>  <name>B_key_count</name>  <init>=  <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>mapB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>A_key_count</name> <operator>!=</operator> <name>B_key_count</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>A_key_count</name> <operator>&gt;</operator> <name>B_key_count</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// sort both maps</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_key_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pair</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>_key_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_key_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pair</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>_key_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// element-wise key comparison</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// if the maps contain different keys, order in favor</comment>
		<comment type="line">// of the first lexicographically greater key</comment>
		<expr_stmt><expr><name>order</name> <operator>=</operator> <call><name>SIValue_Compare</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>order</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>order</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// element-wise value comparison</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// key lookup succeeded; compare values</comment>
		<expr_stmt><expr><name>order</name> <operator>=</operator> <call><name>SIValue_Compare</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>disjointOrNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>disjointOrNull</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>disjointOrNull</name> <operator>==</operator> <name>COMPARED_NULL</name> <operator>||</operator>
							  <operator>*</operator><name>disjointOrNull</name> <operator>==</operator> <name>DISJOINT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>order</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>order</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// maps are equal</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// this method referenced by Java ArrayList.hashCode() method, which takes</comment>
<comment type="line">// into account the hashing of nested values</comment>
<function><type><name>XXH64_hash_t</name></type> <name>Map_HashCode</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// sort the map by key, so that {a:1, b:1} and {b:1, a:1}</comment>
	<comment type="line">// have the same hash value</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>key_count</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>map</name><operator>.</operator><name>map</name></name></expr></argument>, <argument><expr><name>key_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pair</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>_key_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><name>T_MAP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XXH64_hash_t</name></type> <name>hashCode</name> <init>= <expr><call><name>XXH64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Pair</name></type> <name>p</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>hashCode</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>hashCode</name> <operator>+</operator> <call><name>SIValue_HashCode</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashCode</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>hashCode</name> <operator>+</operator> <call><name>SIValue_HashCode</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>hashCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Map_ToString</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>,          <comment type="line">// map to get string representation from</comment>
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>,           <comment type="line">// buffer to populate</comment>
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bufferLen</name></decl></parameter>,    <comment type="line">// size of buffer</comment>
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bytesWritten</name></decl></parameter>  <comment type="line">// length of string</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bufferLen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bytesWritten</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// resize buffer if buffer length is less than 64</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>str_ExtendBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>key_count</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// "{" marks the beginning of a map</comment>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Pair</name></type> <name>p</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// write the next key/value pair</comment>
		<expr_stmt><expr><call><name>SIValue_ToString</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>str_ExtendBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIValue_ToString</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// if this is not the last element, add ", "</comment>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>key_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>str_ExtendBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// make sure there's enough space for "}"</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>str_ExtendBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// "}" marks the end of a map</comment>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// free map</comment>
<function><type><name>void</name></type> <name>Map_Free</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>l</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// free stored pairs</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Pair</name></type> <name>p</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Pair_Free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>map</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
