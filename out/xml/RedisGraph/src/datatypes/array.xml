<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/datatypes/array.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xxhash.h"</cpp:file></cpp:include>

<function><type><name>SIValue</name></type> <name>SIArray_New</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>initialCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>siarray</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>siarray</name><operator>.</operator><name>array</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIValue</name></expr></argument>, <argument><expr><name>initialCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>siarray</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_ARRAY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>siarray</name><operator>.</operator><name>allocation</name></name> <operator>=</operator> <name>M_SELF</name></expr>;</expr_stmt>
	<return>return <expr><name>siarray</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SIArray_Append</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>siarray</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// clone and persist incase of pointer values</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>clone</name> <init>= <expr><call><name>SI_CloneValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// append</comment>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>siarray</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIArray_Get</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>siarray</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// check index</comment>
	<if_stmt><if>if<condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>SIArray_Length</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>SI_ShareValue</name><argument_list>(<argument><expr><name><name>siarray</name><operator>.</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>SIArray_Length</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>siarray</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>siarray</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SIArray_ContainsType</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>siarray</name></decl></parameter>, <parameter><decl><type><name>SIType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>array_len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>array_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>elem</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// recursively check nested arrays</comment>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_ARRAY</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>type_is_nested</name> <init>= <expr><call><name>SIArray_ContainsType</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>type_is_nested</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SIArray_AllOfType</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>siarray</name></decl></parameter>, <parameter><decl><type><name>SIType</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>array_len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>array_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>elem</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>t</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIArray_Clone</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>siarray</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>newArray</name> <init>= <expr><call><name>SIArray_New</name><argument_list>(<argument><expr><name>arrayLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newArray</name></expr></argument>, <argument><expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>newArray</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SIArray_ToString</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bufferLen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bytesWritten</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// open array with "["</comment>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// write the next value</comment>
		<expr_stmt><expr><call><name>SIValue_ToString</name><argument_list>(<argument><expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// if it is not the last element, add ", "</comment>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>arrayLen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// close array with "]"</comment>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// this method referenced by Java ArrayList.hashCode() method, which takes</comment>
<comment type="line">// into account the hasing of nested values</comment>
<function><type><name>XXH64_hash_t</name></type> <name>SIArray_HashCode</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>siarray</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><name>T_ARRAY</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XXH64_hash_t</name></type> <name>hashCode</name> <init>= <expr><call><name>XXH64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><name><name>siarray</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>hashCode</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>hashCode</name> <operator>+</operator> <call><name>SIValue_HashCode</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>hashCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SIArray_Free</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>siarray</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>siarray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><name><name>siarray</name><operator>.</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>siarray</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
