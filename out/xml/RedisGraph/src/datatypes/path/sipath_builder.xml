<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/datatypes/path/sipath_builder.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sipath_builder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * @brief  Reverse the direction of an edge.
 * @note   A new copy of the edge is created, in order not to invalidate any data in the original edge
 *         in case it required elsewhere.
 * @param  *e: Pointer to the original edge.
 * @retval New edge with inverse direction.
 */</comment>
<function><type><specifier>static</specifier> <name>Edge</name></type> <name>_Edge_ReverseDirection</name><parameter_list>(<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Edge</name></type> <name>edge</name> <init>= <expr><operator>*</operator><name>e</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>edge</name><operator>.</operator><name>srcNodeID</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>destNodeID</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>edge</name><operator>.</operator><name>destNodeID</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>srcNodeID</name></name></expr>;</expr_stmt>
	<return>return <expr><name>edge</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_SIPath_Reverse</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Path_Reverse</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPathBuilder_New</name><parameter_list>(<parameter><decl><type><name>uint</name></type> <name>entity_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>path</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>path</name><operator>.</operator><name>ptrval</name></name> <operator>=</operator> <call><name>Path_New</name><argument_list>(<argument><expr><name>entity_count</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>path</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_PATH</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>path</name><operator>.</operator><name>allocation</name></name> <operator>=</operator> <name>M_SELF</name></expr>;</expr_stmt>
	<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SIPathBuilder_AppendNode</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>n</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Path_AppendNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SIPathBuilder_AppendEdge</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>RTLEdge</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><operator>(</operator><name>Edge</name> <operator>*</operator><operator>)</operator> <name><name>e</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// The edge should connect nodes[edge_count] to nodes[edge_count+1]</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>edge_count</name> <init>= <expr><call><name>Path_EdgeCount</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>Path_GetNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>edge_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>nId</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Validate source node is in the right place.</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nId</name> <operator>==</operator> <name><name>edge</name><operator>-&gt;</operator><name>srcNodeID</name></name> <operator>||</operator> <name>nId</name> <operator>==</operator> <name><name>edge</name><operator>-&gt;</operator><name>destNodeID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Reverse direction if needed. A direction change is needed if the last node in the path, reading
	 * RTL is the source node in the edge, and the edge direction in the query is LTR.
	 * path =[(a)]
	 * e = (a)-&gt;(b)
	 * Query: MATCH p=(a)&lt;-[]-(b)
	 * e direction needs to be change. */</comment>

	<decl_stmt><decl><type><name>Edge</name></type> <name>edge_to_append</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>RTLEdge</name> <operator>&amp;&amp;</operator> <name>nId</name> <operator>==</operator> <name><name>edge</name><operator>-&gt;</operator><name>srcNodeID</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>_Edge_ReverseDirection</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>*</operator><name>edge</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Path_AppendEdge</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>edge_to_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SIPathBuilder_AppendPath</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>new_path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>RTLEdge</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>path_node_count</name> <init>= <expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path_node_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// No need to append empty paths.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>new_path_node_count</name> <init>= <expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>new_path_node_count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>last_LTR_node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_node_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>last_LTR_node_id</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>last_LTR_node</name><operator>.</operator><name>ptrval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>new_path_node_0</name> <init>= <expr><call><name>SIPath_Head</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>new_path_node_0_id</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>new_path_node_0</name><operator>.</operator><name>ptrval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>new_path_last_node</name> <init>= <expr><call><name>SIPath_Last</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>new_path_last_node_id</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>new_path_last_node</name><operator>.</operator><name>ptrval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Validate current last LTR node is in either edges of the path.</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>last_LTR_node_id</name> <operator>==</operator> <name>new_path_node_0_id</name> <operator>||</operator> <name>last_LTR_node_id</name> <operator>==</operator> <name>new_path_last_node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>new_path_edge_count</name> <init>= <expr><call><name>SIPath_Length</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Check if path needs to be rverse inserated or not.</comment>
	<if_stmt><if>if<condition>(<expr><name>last_LTR_node_id</name> <operator>==</operator> <name>new_path_last_node_id</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_SIPath_Reverse</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>new_path_edge_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>SIPathBuilder_AppendEdge</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>SIPath_GetRelationship</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RTLEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Insert only nodes which are not the last and the first, since they will be added by append node specifically.</comment>
		<expr_stmt><expr><call><name>SIPathBuilder_AppendNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></for>
	<expr_stmt><expr><call><name>SIPathBuilder_AppendEdge</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>SIPath_GetRelationship</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>, <argument><expr><name>new_path_edge_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RTLEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
