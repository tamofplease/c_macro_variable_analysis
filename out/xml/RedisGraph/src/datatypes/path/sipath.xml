<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/datatypes/path/sipath.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sipath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../array.h"</cpp:file></cpp:include>

<function><type><name>SIValue</name></type> <name>SIPath_New</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>path</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>path</name><operator>.</operator><name>ptrval</name></name> <operator>=</operator> <call><name>Path_Clone</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>path</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_PATH</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>path</name><operator>.</operator><name>allocation</name></name> <operator>=</operator> <name>M_SELF</name></expr>;</expr_stmt>
	<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPath_Clone</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>SIPath_New</name><argument_list>(<argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPath_ToList</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nodeCount</name> <init>= <expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>edgeCount</name> <init>= <expr><call><name>SIPath_Length</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>array</name> <init>= <expr><call><name>SI_Array</name><argument_list>(<argument><expr><name>nodeCount</name> <operator>+</operator> <name>edgeCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>edge</name> <init>= <expr><call><name>SIPath_GetRelationship</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>(<expr><name>nodeCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPath_Relationships</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>edgeCount</name> <init>= <expr><call><name>Path_EdgeCount</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>array</name> <init>= <expr><call><name>SIArray_New</name><argument_list>(<argument><expr><name>edgeCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edgeCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><call><name>SI_Edge</name><argument_list>(<argument><expr><call><name>Path_GetEdge</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPath_GetRelationship</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <call><name>SIPath_Length</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>SI_Edge</name><argument_list>(<argument><expr><call><name>Path_GetEdge</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPath_Nodes</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>nodeCount</name> <init>= <expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>array</name> <init>= <expr><call><name>SIArray_New</name><argument_list>(<argument><expr><name>nodeCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>array</name></expr></argument>, <argument><expr><call><name>SI_Node</name><argument_list>(<argument><expr><call><name>Path_GetNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPath_GetNode</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>SI_Node</name><argument_list>(<argument><expr><call><name>Path_GetNode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPath_Head</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>SIPath_Last</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return<expr><operator>(</operator><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>SIPath_Length</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>Path_Len</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>SIPath_NodeCount</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>SIPath_EdgeCount</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>Path_EdgeCount</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>XXH64_hash_t</name></type> <name>SIPath_HashCode</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XXH64_hash_t</name></type> <name>hashCode</name> <init>= <expr><call><name>XXH64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nodeCount</name> <init>= <expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>hashCode</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>hashCode</name> <operator>+</operator> <call><name>SIValue_HashCode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>edge</name> <init>= <expr><call><name>SIPath_GetRelationship</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>hashCode</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>hashCode</name> <operator>+</operator> <call><name>SIValue_HashCode</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="line">// Handle last node.</comment>
	<if_stmt><if>if<condition>(<expr><name>nodeCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>hashCode</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>hashCode</name> <operator>+</operator> <call><name>SIValue_HashCode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>hashCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SIPath_ToString</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bufferLen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bytesWritten</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// 64 is defiend arbitrarily.</comment>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// open path with "["</comment>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>nodeCount</name> <init>= <expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// write the next value</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIValue_ToString</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator> <name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>edge</name> <init>= <expr><call><name>SIPath_GetRelationship</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIValue_ToString</name><argument_list>(<argument><expr><name>edge</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator> <name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="line">// Handle last node.</comment>
	<if_stmt><if>if<condition>(<expr><name>nodeCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIValue_ToString</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>bufferLen</name> <operator>-</operator> <operator>*</operator><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// close array with "]"</comment>
	<expr_stmt><expr><operator>*</operator><name>bytesWritten</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>bytesWritten</name></expr></argument>, <argument><expr><operator>*</operator><name>bufferLen</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>SIPath_Compare</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<decl_stmt><decl><type><name>size_t</name></type> <name>p1NodeCount</name> <init>= <expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>p2NodeCount</name> <init>= <expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Get minimal length</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nodeCount</name> <init>= <expr><ternary><condition><expr><name>p1NodeCount</name> <operator>&lt;=</operator> <name>p2NodeCount</name></expr> ?</condition><then> <expr><name>p1NodeCount</name></expr> </then><else>: <expr><name>p2NodeCount</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>p1node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>p2node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SIValue_Compare</name><argument_list>(<argument><expr><name>p1node</name></expr></argument>, <argument><expr><name>p2node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>p1edge</name> <init>= <expr><call><name>SIPath_GetRelationship</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>p2edge</name> <init>= <expr><call><name>SIPath_GetRelationship</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SIValue_Compare</name><argument_list>(<argument><expr><name>p1edge</name></expr></argument>, <argument><expr><name>p2edge</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="line">// Handle last node.</comment>
	<if_stmt><if>if<condition>(<expr><name>nodeCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>p1node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>p2node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SIValue_Compare</name><argument_list>(<argument><expr><name>p1node</name></expr></argument>, <argument><expr><name>p2node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>p1NodeCount</name> <operator>-</operator> <name>p2NodeCount</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SIPath_Free</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>allocation</name></name> <operator>==</operator> <name>M_SELF</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Path_Free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
