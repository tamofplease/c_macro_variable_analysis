<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/datatypes/path/path.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><name>Path</name> <modifier>*</modifier></type><name>Path_New</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>edges</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Path_EnsureLen</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>array_ensure_len</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name> <operator>=</operator> <call><name>array_ensure_len</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Path_AppendNode</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Path_AppendEdge</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Edge</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Path_SetNode</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Path_SetEdge</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>Edge</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Node</name> <modifier>*</modifier></type><name>Path_GetNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>Path_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Edge</name> <modifier>*</modifier></type><name>Path_GetEdge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>Path_EdgeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>edges</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Node</name></type> <name>Path_PopNode</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>Edge</name></type> <name>Path_PopEdge</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Path_NodeCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Path_EdgeCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Node</name></type> <name>Path_Head</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Path_Len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Path_EdgeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Path_ContainsNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>pathDepth</name> <init>= <expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>nId</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pathDepth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nId</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Path</name> <modifier>*</modifier></type><name>Path_Clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Path_Reverse</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>array_reverse</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_reverse</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Path_Clear</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Path_Free</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
