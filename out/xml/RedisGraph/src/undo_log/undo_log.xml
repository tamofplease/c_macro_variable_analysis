<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/undo_log/undo_log.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"undo_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan/ops/shared/update_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan/ops/shared/create_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/entities/attribute_set.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_index_node</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>labels</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>Schema_HasIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Schema_AddNodeToIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_index_node_with_labels</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>labels</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>label_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>Schema_HasIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Schema_AddNodeToIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_index_edge</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>relationID</name></name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>Schema_HasIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Schema_AddEdgeToIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_index_delete_node_with_labels</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>labels</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>label_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// update any indices this entity is represented in</comment>
		<expr_stmt><expr><call><name>Schema_RemoveNodeFromIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_index_delete_node</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>labels</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// update any indices this entity is represented in</comment>
		<expr_stmt><expr><call><name>Schema_RemoveNodeFromIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_index_delete_edge</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>relationID</name></name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update any indices this entity is represented in</comment>
	<expr_stmt><expr><call><name>Schema_RemoveEdgeFromIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Restore_Entity_Property</name>
<parameter_list>(
	<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>ge</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// try to get current attribute value</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>old_value</name> <init>= <expr><call><name>GraphEntity_GetProperty</name><argument_list>(<argument><expr><name>ge</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>old_value</name> <operator>==</operator> <name>ATTRIBUTE_NOTFOUND</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// adding a new attribute; do nothing if its value is NULL</comment>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>AttributeSet_AddNoClone</name><argument_list>(<argument><expr><name><name>ge</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// update attribute</comment>
		<expr_stmt><expr><call><name>AttributeSet_UpdateNoClone</name><argument_list>(<argument><expr><name><name>ge</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// rollback the updates taken place by current query</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Update_Entity</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>undo_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoUpdateOp</name> <modifier>*</modifier></type><name>update_op</name> <init>= <expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>update_op</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// update indices</comment>
		<if_stmt><if>if<condition>(<expr><name><name>update_op</name><operator>-&gt;</operator><name>entity_type</name></name> <operator>==</operator> <name>GETYPE_NODE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>_UndoLog_Restore_Entity_Property</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>update_op</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>update_op</name><operator>-&gt;</operator><name>attr_id</name></name></expr></argument>,
				<argument><expr><name><name>update_op</name><operator>-&gt;</operator><name>orig_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_index_node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>update_op</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>_UndoLog_Restore_Entity_Property</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>update_op</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>update_op</name><operator>-&gt;</operator><name>attr_id</name></name></expr></argument>,
				<argument><expr><name><name>update_op</name><operator>-&gt;</operator><name>orig_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_index_edge</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>update_op</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Set_Labels</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Graph</name>        <modifier>*</modifier></type><name>g</name>                <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoOp</name>       <modifier>*</modifier></type><name>op</name>               <init>= <expr><name>undo_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoLabelsOp</name> <modifier>*</modifier></type><name>update_labels_op</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>labels_op</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type>         <name>labels_count</name>      <init>= <expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>labels_count</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Graph_RemoveNodeLabels</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>id</name></name></expr></argument>,
				<argument><expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>label_lds</name></name></expr></argument>, <argument><expr><name>labels_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		<expr_stmt><expr><call><name>_index_delete_node_with_labels</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>update_labels_op</name><operator>-&gt;</operator><name>node</name></name><operator>)</operator></expr></argument>,
				<argument><expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>label_lds</name></name></expr></argument>, <argument><expr><name>labels_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>label_lds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Remove_Labels</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Graph</name>        <modifier>*</modifier></type><name>g</name>                <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoOp</name>       <modifier>*</modifier></type><name>op</name>               <init>= <expr><name>undo_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoLabelsOp</name> <modifier>*</modifier></type><name>update_labels_op</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>labels_op</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type>         <name>labels_count</name>      <init>= <expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>labels_count</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Graph_LabelNode</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>id</name></name></expr></argument>, 
				<argument><expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>label_lds</name></name></expr></argument>, <argument><expr><name>labels_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>_index_node_with_labels</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>update_labels_op</name><operator>-&gt;</operator><name>node</name></name><operator>)</operator></expr></argument>,
				<argument><expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>label_lds</name></name></expr></argument>, <argument><expr><name>labels_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>update_labels_op</name><operator>-&gt;</operator><name>label_lds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// undo node creation</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Create_Node</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>&amp;</operator><name><name>undo_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>create_op</name><operator>.</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_index_delete_node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Graph_DeleteNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// undo edge creation</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Create_Edge</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>undo_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>create_op</name><operator>.</operator><name>e</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_index_delete_edge</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Graph_DeleteEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// undo node deletion</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Delete_Node</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Node</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>undo_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoDeleteNodeOp</name> <modifier>*</modifier></type><name>delete_op</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>delete_node_op</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Graph_CreateNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name><name>delete_op</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>,
				<argument><expr><name><name>delete_op</name><operator>-&gt;</operator><name>label_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name><name>n</name><operator>.</operator><name>attributes</name></name> <operator>=</operator> <name><name>delete_op</name><operator>-&gt;</operator><name>set</name></name></expr>;</expr_stmt>

		<comment type="line">// re-introduce node to indices</comment>
		<expr_stmt><expr><call><name>_index_node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Cleanup after undo rollback, as the op D'tor is not called.</comment>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>delete_op</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// undo edge deletion</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Delete_Edge</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name></type> <name>e</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>undo_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoDeleteEdgeOp</name></type> <name>delete_op</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>delete_edge_op</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Graph_CreateEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>delete_op</name><operator>.</operator><name>srcNodeID</name></name></expr></argument>, <argument><expr><name><name>delete_op</name><operator>.</operator><name>destNodeID</name></name></expr></argument>,
				<argument><expr><name><name>delete_op</name><operator>.</operator><name>relationID</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name><name>e</name><operator>.</operator><name>attributes</name></name> <operator>=</operator> <name><name>delete_op</name><operator>.</operator><name>set</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>_index_edge</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// undo schema addition</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Add_Schema</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name></type> <name>e</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>undo_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoAddSchemaOp</name></type> <name>schema_op</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>schema_op</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>schema_id</name> <init>= <expr><name><name>schema_op</name><operator>.</operator><name>schema_id</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>schema_count</name> <init>= <expr><call><name>GraphContext_SchemaCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>schema_op</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>schema_id</name> <operator>==</operator> <name>schema_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GraphContext_RemoveSchema</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name>schema_id</name></expr></argument>, <argument><expr><name><name>schema_op</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>schema_op</name><operator>.</operator><name>t</name></name> <operator>==</operator> <name>SCHEMA_NODE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Graph_RemoveLabel</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>schema_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>Graph_RemoveRelation</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>schema_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>	
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// undo attribute addition</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_UndoLog_Rollback_Add_Attribute</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_start</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>seq_end</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>undo_list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>seq_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>seq_end</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name></type> <name>e</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>undo_list</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UndoAddAttributeOp</name></type> <name>attribute_op</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>attribute_op</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>attribute_id</name> <init>= <expr><name><name>attribute_op</name><operator>.</operator><name>attribute_id</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>GraphContext_RemoveAttribute</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name>attribute_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// add an operation to undo log</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_UndoLog_AddOperation</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,  <comment type="line">// undo log</comment>
	<parameter><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>op</name></decl></parameter>     <comment type="line">// undo operation</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>log</name></expr></argument>, <argument><expr><operator>*</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>UndoLog</name></type> <name>UndoLog_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name>UndoLog</name><operator>)</operator><call><name>array_new</name><argument_list>(<argument><expr><name>UndoOp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Undo add changes</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// undo node creation</comment>
<function><type><name>void</name></type> <name>UndoLog_CreateNode</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>             <comment type="line">// node created</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name>        <operator>=</operator> <name>UNDO_CREATE_NODE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>create_op</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// undo edge creation</comment>
<function><type><name>void</name></type> <name>UndoLog_CreateEdge</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>             <comment type="line">// edge created</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name>        <operator>=</operator> <name>UNDO_CREATE_EDGE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>create_op</name><operator>.</operator><name>e</name></name> <operator>=</operator> <operator>*</operator><name>edge</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// undo node deletion</comment>
<function><type><name>void</name></type> <name>UndoLog_DeleteNode</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,      <comment type="line">// undo log</comment>
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>         <comment type="line">// node deleted</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name>                        <operator>=</operator>  <name>UNDO_DELETE_NODE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_node_op</name><operator>.</operator><name>id</name></name>           <operator>=</operator>  <name><name>node</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_node_op</name><operator>.</operator><name>set</name></name>          <operator>=</operator>  <call><name>AttributeSet_Clone</name><argument_list>(<argument><expr><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>delete_node_op</name><operator>.</operator><name>label_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_node_op</name><operator>.</operator><name>labels</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LabelID</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>op</name><operator>.</operator><name>delete_node_op</name><operator>.</operator><name>label_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>.</operator><name>delete_node_op</name><operator>.</operator><name>label_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_node_op</name><operator>.</operator><name>labels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// undo edge deletion</comment>
<function><type><name>void</name></type> <name>UndoLog_DeleteEdge</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,  <comment type="line">// undo log</comment>
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>      <comment type="line">// edge deleted</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>edge</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name>                       <operator>=</operator> <name>UNDO_DELETE_EDGE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_edge_op</name><operator>.</operator><name>id</name></name>          <operator>=</operator> <name><name>edge</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_edge_op</name><operator>.</operator><name>relationID</name></name>  <operator>=</operator> <name><name>edge</name><operator>-&gt;</operator><name>relationID</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_edge_op</name><operator>.</operator><name>srcNodeID</name></name>   <operator>=</operator> <name><name>edge</name><operator>-&gt;</operator><name>srcNodeID</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_edge_op</name><operator>.</operator><name>destNodeID</name></name>  <operator>=</operator> <name><name>edge</name><operator>-&gt;</operator><name>destNodeID</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>delete_edge_op</name><operator>.</operator><name>set</name></name>         <operator>=</operator> <call><name>AttributeSet_Clone</name><argument_list>(<argument><expr><operator>*</operator><name><name>edge</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// undo entity update</comment>
<function><type><name>void</name></type> <name>UndoLog_UpdateEntity</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,                <comment type="line">// undo log</comment>
	<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>ge</name></decl></parameter>,             <comment type="line">// updated entity</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,        <comment type="line">// updated attribute ID</comment>
	<parameter><decl><type><name>SIValue</name></type> <name>orig_value</name></decl></parameter>,          <comment type="line">// attribute original value</comment>
	<parameter><decl><type><name>GraphEntityType</name></type> <name>entity_type</name></decl></parameter>  <comment type="line">// entity type</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ge</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attr_id</name> <operator>!=</operator> <name>ATTRIBUTE_ID_NONE</name> <operator>&amp;&amp;</operator> <name>attr_id</name> <operator>!=</operator> <name>ATTRIBUTE_ID_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name>                  <operator>=</operator> <name>UNDO_UPDATE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>update_op</name><operator>.</operator><name>attr_id</name></name>     <operator>=</operator> <name>attr_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>update_op</name><operator>.</operator><name>orig_value</name></name>  <operator>=</operator> <call><name>SI_CloneValue</name><argument_list>(<argument><expr><name>orig_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>update_op</name><operator>.</operator><name>entity_type</name></name> <operator>=</operator> <name>entity_type</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>entity_type</name> <operator>==</operator> <name>GETYPE_NODE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>.</operator><name>update_op</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>ge</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>.</operator><name>update_op</name><operator>.</operator><name>e</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>Edge</name> <operator>*</operator><operator>)</operator><name>ge</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// undo node add label</comment>
<function><type><name>void</name></type> <name>UndoLog_AddLabels</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,                <comment type="line">// undo log</comment>
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,                  <comment type="line">// updated node</comment>
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>label_ids</name></decl></parameter>,              <comment type="line">// added labels</comment>
	<parameter><decl><type><name>size_t</name></type> <name>labels_count</name></decl></parameter>          <comment type="line">// number of removed labels</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label_ids</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>UNDO_SET_LABELS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>labels_op</name><operator>.</operator><name>node</name></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>labels_op</name><operator>.</operator><name>label_lds</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>labels_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>labels_op</name><operator>.</operator><name>label_lds</name></name></expr></argument>, <argument><expr><name>label_ids</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>labels_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>labels_op</name><operator>.</operator><name>labels_count</name></name> <operator>=</operator> <name>labels_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// undo node remove label</comment>
<function><type><name>void</name></type> <name>UndoLog_RemoveLabels</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,                <comment type="line">// undo log</comment>
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,                  <comment type="line">// updated node</comment>
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>label_ids</name></decl></parameter>,              <comment type="line">// removed labels</comment>
	<parameter><decl><type><name>size_t</name></type> <name>labels_count</name></decl></parameter>          <comment type="line">// number of removed labels</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label_ids</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>UNDO_REMOVE_LABELS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>labels_op</name><operator>.</operator><name>node</name></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>labels_op</name><operator>.</operator><name>label_lds</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>labels_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>labels_op</name><operator>.</operator><name>label_lds</name></name></expr></argument>, <argument><expr><name>label_ids</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>labels_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>labels_op</name><operator>.</operator><name>labels_count</name></name> <operator>=</operator> <name>labels_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// undo schema addition</comment>
<function><type><name>void</name></type> <name>UndoLog_AddSchema</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,                <comment type="line">// undo log</comment>
	<parameter><decl><type><name>int</name></type> <name>schema_id</name></decl></parameter>,               <comment type="line">// id of the schema</comment>
	<parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>                 <comment type="line">// type of the schema</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>UNDO_ADD_SCHEMA</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>schema_op</name><operator>.</operator><name>schema_id</name></name> <operator>=</operator> <name>schema_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>schema_op</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UndoLog_AddAttribute</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name> <modifier>*</modifier></type><name>log</name></decl></parameter>,                <comment type="line">// undo log</comment>
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attribute_id</name></decl></parameter>             <comment type="line">// id of the attribute</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>UndoOp</name></type> <name>op</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>UNDO_ADD_ATTRIBUTE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>.</operator><name>attribute_op</name><operator>.</operator><name>attribute_id</name></name> <operator>=</operator> <name>attribute_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_UndoLog_AddOperation</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// rollback</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>UndoLog_Rollback</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name></type> <name>log</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>log</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name>  <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// apply undo operations in reverse order for rollback correctness</comment>
	<comment type="line">// find sequences of the same operation and rollback them as a bulk</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>seq_end</name> <init>= <expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>seq_end</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>UndoOpType</name></type> <name>cur_type</name> <init>= <expr><name><name>log</name><index>[<expr><name>seq_end</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>seq_start</name> <init>= <expr><name>seq_end</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>seq_end</name><operator>--</operator></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>seq_end</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>log</name><index>[<expr><name>seq_end</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>cur_type</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>seq_end</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<switch>switch<condition>(<expr><name>cur_type</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>UNDO_UPDATE</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Update_Entity</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_CREATE_NODE</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Create_Node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_CREATE_EDGE</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Create_Edge</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_DELETE_NODE</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Delete_Node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_DELETE_EDGE</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Delete_Edge</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_SET_LABELS</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Set_Labels</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_REMOVE_LABELS</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Remove_Labels</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_ADD_SCHEMA</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Add_Schema</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_ADD_ATTRIBUTE</name></expr>:</case>
				<expr_stmt><expr><call><name>_UndoLog_Rollback_Add_Attribute</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seq_start</name></expr></argument>, <argument><expr><name>seq_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
 	</block_content>}</block></while>

	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UndoLog_Free</name>
<parameter_list>(
	<parameter><decl><type><name>UndoLog</name></type> <name>log</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// free each undo operation</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>UndoOp</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>log</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>UNDO_UPDATE</name></expr>:</case>
				<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>update_op</name><operator>.</operator><name>orig_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_CREATE_NODE</name></expr>:</case>
				<break>break;</break>
			<case>case <expr><name>UNDO_CREATE_EDGE</name></expr>:</case>
				<break>break;</break>
			<case>case <expr><name>UNDO_DELETE_NODE</name></expr>:</case>
				<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>delete_node_op</name><operator>.</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>delete_node_op</name><operator>.</operator><name>set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_DELETE_EDGE</name></expr>:</case>
				<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>delete_edge_op</name><operator>.</operator><name>set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_SET_LABELS</name></expr>:</case>
			<case>case <expr><name>UNDO_REMOVE_LABELS</name></expr>:</case>
				<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>labels_op</name><operator>.</operator><name>label_lds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UNDO_ADD_SCHEMA</name></expr>:</case>
			<case>case <expr><name>UNDO_ADD_ATTRIBUTE</name></expr>:</case>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
