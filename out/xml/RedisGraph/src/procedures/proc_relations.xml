<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/procedures/proc_relations.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proc_labels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>

<comment type="line">// CALL db.relationshipTypes()</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>uint</name></type> <name>schema_id</name></decl>;</decl_stmt>     <comment type="line">// Current schema ID.</comment>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl>;</decl_stmt>   <comment type="line">// Graph context.</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>    <comment type="line">// Output label.</comment>
}</block></struct></type> <name>RelationsContext</name>;</typedef>

<function><type><name>ProcedureResult</name></type> <name>Proc_RelationsInvoke</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><operator>(</operator><name>SIValue</name> <operator>*</operator><operator>)</operator><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>RelationsContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RelationsContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>schema_id</name></name>  <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>gc</name></name>         <operator>=</operator>  <call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name>     <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>SIValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>=</operator> <name>pdata</name></expr>;</expr_stmt>
	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name> <modifier>*</modifier></type><name>Proc_RelationsStep</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>RelationsContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><operator>(</operator><name>RelationsContext</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// depleted?</comment>
	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>schema_id</name></name> <operator>&gt;=</operator> <call><name>GraphContext_SchemaCount</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// get schema name</comment>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>schema_id</name></name><operator>++</operator></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><call><name>Schema_GetName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureResult</name></type> <name>Proc_RelationsFree</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// clean up</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>RelationsContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>Proc_RelationsCtx</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privateData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name> <modifier>*</modifier></type><name>outputs</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>ProcedureOutput</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>output</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"relationshipType"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_STRING</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ProcCtxNew</name><argument_list>(<argument><expr><literal type="string">"db.relationshipTypes"</literal></expr></argument>,
								   <argument><expr><literal type="number">0</literal></expr></argument>,
								   <argument><expr><name>outputs</name></expr></argument>,
								   <argument><expr><name>Proc_RelationsStep</name></expr></argument>,
								   <argument><expr><name>Proc_RelationsInvoke</name></expr></argument>,
								   <argument><expr><name>Proc_RelationsFree</name></expr></argument>,
								   <argument><expr><name>privateData</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

</unit>
