<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/procedures/proc_list_indexes.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proc_list_indexes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../index/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../schema/schema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/array.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>               <comment type="line">// outputs</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>node_schema_id</name></decl>;</decl_stmt>         <comment type="line">// current node schema ID</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>edge_schema_id</name></decl>;</decl_stmt>         <comment type="line">// current edge schema ID</comment>
	<decl_stmt><decl><type><name>IndexType</name></type> <name>type</name></decl>;</decl_stmt>             <comment type="line">// current index type to retrieve</comment>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl>;</decl_stmt>           <comment type="line">// graph context</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_type</name></decl>;</decl_stmt>        <comment type="line">// yield index type</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_label</name></decl>;</decl_stmt>       <comment type="line">// yield index label</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_properties</name></decl>;</decl_stmt>  <comment type="line">// yield index properties</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_language</name></decl>;</decl_stmt>    <comment type="line">// yield index language</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_stopwords</name></decl>;</decl_stmt>   <comment type="line">// yield index stopwords</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_entity_type</name></decl>;</decl_stmt> <comment type="line">// yield index entity type</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_info</name></decl>;</decl_stmt>        <comment type="line">// yield info</comment>
}</block></struct></type> <name>IndexesContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_process_yield</name>
<parameter_list>(
	<parameter><decl><type><name>IndexesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_type</name></name>        <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_label</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_properties</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_language</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_stopwords</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_entity_type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_info</name></name>        <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_label</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"properties"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_properties</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_language</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"stopwords"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_stopwords</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"entitytype"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_entity_type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_info</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>out</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// CALL db.indexes()</comment>
<function><type><name>ProcedureResult</name></type> <name>Proc_IndexesInvoke</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>args</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>yield</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// TODO: introduce invoke validation, similar to arithmetic expressions</comment>
	<comment type="line">// expecting no arguments</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>arg_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><operator>(</operator><name>SIValue</name> <operator>*</operator><operator>)</operator><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>arg_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>IndexesContext</name> <modifier>*</modifier></type><name>pdata</name>    <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IndexesContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>gc</name></name>                <operator>=</operator> <name>gc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>out</name></name>               <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIValue</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>type</name></name>              <operator>=</operator> <name>IDX_EXACT_MATCH</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>node_schema_id</name></name>    <operator>=</operator> <call><name>GraphContext_SchemaCount</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>edge_schema_id</name></name>    <operator>=</operator> <call><name>GraphContext_SchemaCount</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_process_yield</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>=</operator> <name>pdata</name></expr>;</expr_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_EmitIndex</name>
<parameter_list>(
	<parameter><decl><type><name>IndexesContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><name>IndexType</name></type> <name>type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_entity_type</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCHEMA_NODE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_entity_type</name></name> <operator>=</operator> <call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"NODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_entity_type</name></name> <operator>=</operator> <call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"RELATIONSHIP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_type</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>IDX_EXACT_MATCH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_type</name></name> <operator>=</operator> <call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"exact-match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_type</name></name> <operator>=</operator> <call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"full-text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_label</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_label</name></name> <operator>=</operator> <call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>Schema_GetName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_properties</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>fields_count</name>        <init>= <expr><call><name>Index_FieldsCount</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>IndexField</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>Index_GetFields</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_properties</name></name>   <operator>=</operator> <call><name>SI_Array</name><argument_list>(<argument><expr><name>fields_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_properties</name></name></expr></argument>,
						   <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_language</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_language</name></name> <operator>=</operator>
			<call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>Index_GetLanguage</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_stopwords</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>stopwords_count</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>stopwords</name> <init>= <expr><call><name>Index_GetStopwords</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stopwords_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>stopwords</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_stopwords</name></name> <operator>=</operator> <call><name>SI_Array</name><argument_list>(<argument><expr><name>stopwords_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stopwords_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><name><name>stopwords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_stopwords</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>stopwords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_stopwords</name></name> <operator>=</operator> <call><name>SI_Array</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>stopwords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_info</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>RSIdxInfo</name></type> <name>info</name> <init>= <expr><block>{ <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>RS_INFO_CURRENT_VERSION</name></expr> }</block></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>RediSearch_IndexInfo</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>map</name> <init>= <expr><call><name>SI_Map</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"gcPolicy"</literal></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>gcPolicy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"score"</literal></expr></argument>)</argument_list></call></expr></argument>,     <argument><expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>score</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"lang"</literal></expr></argument>)</argument_list></call></expr></argument>,      <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>SIValue</name></type> <name>fields</name> <init>= <expr><call><name>SIArray_New</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>numFields</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>numFields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>RSIdxField</name></name></type> <name>f</name> <init>= <expr><name><name>info</name><operator>.</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>SIValue</name></type> <name>field</name> <init>= <expr><call><name>SI_Map</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr></argument>,             <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>,             <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"types"</literal></expr></argument>)</argument_list></call></expr></argument>,            <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>types</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></call></expr></argument>,          <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"textWeight"</literal></expr></argument>)</argument_list></call></expr></argument>,       <argument><expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>textWeight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"tagCaseSensitive"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>tagCaseSensitive</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"numDocuments"</literal></expr></argument>)</argument_list></call></expr></argument>,     <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>numDocuments</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"maxDocId"</literal></expr></argument>)</argument_list></call></expr></argument>,         <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>maxDocId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"docTableSize"</literal></expr></argument>)</argument_list></call></expr></argument>,     <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>docTableSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"sortablesSize"</literal></expr></argument>)</argument_list></call></expr></argument>,    <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>sortablesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"docTrieSize"</literal></expr></argument>)</argument_list></call></expr></argument>,      <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>docTrieSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"numTerms"</literal></expr></argument>)</argument_list></call></expr></argument>,         <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>numTerms</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"numRecords"</literal></expr></argument>)</argument_list></call></expr></argument>,       <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>numRecords</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"invertedSize"</literal></expr></argument>)</argument_list></call></expr></argument>,     <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>invertedSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"invertedCap"</literal></expr></argument>)</argument_list></call></expr></argument>,      <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>invertedCap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"skipIndexesSize"</literal></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>skipIndexesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"scoreIndexesSize"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>scoreIndexesSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"offsetVecsSize"</literal></expr></argument>)</argument_list></call></expr></argument>,   <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>offsetVecsSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"offsetVecRecords"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>offsetVecRecords</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"termsSize"</literal></expr></argument>)</argument_list></call></expr></argument>,        <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>termsSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"indexingFailures"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>indexingFailures</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"totalCollected"</literal></expr></argument>)</argument_list></call></expr></argument>,   <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>totalCollected</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"numCycles"</literal></expr></argument>)</argument_list></call></expr></argument>,        <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>numCycles</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"totalMSRun"</literal></expr></argument>)</argument_list></call></expr></argument>,       <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>totalMSRun</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Map_Add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"lastRunTimeMs"</literal></expr></argument>)</argument_list></call></expr></argument>,    <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>lastRunTimeMs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>yield_info</name></name> <operator>=</operator> <name>map</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>RediSearch_IndexInfoFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>Schema_Step</name>
<parameter_list>(
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>schema_id</name></decl></parameter>,
	<parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>,
	<parameter><decl><type><name>IndexesContext</name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// loop over all schemas from last to first</comment>
	<while>while<condition>(<expr><operator>*</operator><name>schema_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><operator>*</operator><name>schema_id</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Schema_HasIndices</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// no indexes found, continue to the next schema</comment>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>schema_id</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// populate index data if one is found</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>_EmitIndex</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IDX_FULLTEXT</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// all indexes retrieved; update schema_id, reset schema type</comment>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>schema_id</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IDX_EXACT_MATCH</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// next iteration will check the same schema for a full-text index</comment>
			<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>IDX_FULLTEXT</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>pdata</name><operator>-&gt;</operator><name>out</name></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name> <modifier>*</modifier></type><name>Proc_IndexesStep</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexesContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Schema_Step</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>node_schema_id</name></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>Schema_Step</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>edge_schema_id</name></name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureResult</name></type> <name>Proc_IndexesFree</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// clean up</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>IndexesContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>Proc_IndexesCtx</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privateData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name> <modifier>*</modifier></type><name>outputs</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>ProcedureOutput</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// index type (exact-match / fulltext)</comment>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator> <block>{
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"type"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_STRING</name></expr>
	}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// indexed label</comment>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator> <block>{
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"label"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_STRING</name></expr>
	}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// indexed properties</comment>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator> <block>{
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"properties"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_ARRAY</name></expr>
	}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// indexed language</comment>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator> <block>{
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"language"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_STRING</name></expr>
	}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// indexed stopwords</comment>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator> <block>{
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"stopwords"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_ARRAY</name></expr>
	}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// index entity type (node / relationship)</comment>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator> <block>{
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"entitytype"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_STRING</name></expr>
	}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// index info</comment>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator> <block>{
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"info"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_MAP</name></expr>
	}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ProcCtxNew</name><argument_list>(<argument><expr><literal type="string">"db.indexes"</literal></expr></argument>,
								   <argument><expr><literal type="number">0</literal></expr></argument>,
								   <argument><expr><name>outputs</name></expr></argument>,
								   <argument><expr><name>Proc_IndexesStep</name></expr></argument>,
								   <argument><expr><name>Proc_IndexesInvoke</name></expr></argument>,
								   <argument><expr><name>Proc_IndexesFree</name></expr></argument>,
								   <argument><expr><name>privateData</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>
</unit>
