<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/procedures/proc_bfs.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proc_bfs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../configuration/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algorithms/LAGraph/LAGraph_bfs.h"</cpp:file></cpp:include>

<comment type="line">// The BFS procedure performs a single source BFS scan</comment>
<comment type="line">// it's inputs are:</comment>
<comment type="line">// 1. source node to traverse from</comment>
<comment type="line">// 2. depth, how deep should the procedure traverse (0 no limit)</comment>
<comment type="line">// 3. relationship type to traverse, (NULL for edge type agnostic)</comment>
<comment type="line">//</comment>
<comment type="line">// output:</comment>
<comment type="line">// 1. nodes - an array of reachable nodes</comment>
<comment type="line">// 2. edges- an array of edges traversed</comment>
<comment type="line">//</comment>
<comment type="line">// MATCH (a:User {id: 1}) CALL algo.bfs(a, 0, 'MANAGES') YIELD nodes, edges</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>              <comment type="line">// graph scanned</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>n</name></decl>;</decl_stmt>           <comment type="line">// total number of results</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>depleted</name></decl>;</decl_stmt>         <comment type="line">// true if BFS has already been performed for this node</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>reltype_id</name></decl>;</decl_stmt>        <comment type="line">// iD of relationship matrix to traverse</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>       <comment type="line">// array with a maximum of 4 entries: ["nodes", nodes, "edges", edges]</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_nodes</name></decl>;</decl_stmt>  <comment type="line">// yield reachable nodes</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_edges</name></decl>;</decl_stmt>  <comment type="line">// yield edges traversed</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>nodes</name></decl>;</decl_stmt>      <comment type="line">// vector of reachable nodes</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>parents</name></decl>;</decl_stmt>    <comment type="line">// vector associating each node in the BFS tree with its parent</comment>
}</block></struct></type> <name>BFSCtx</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_process_yield</name>
<parameter_list>(
	<parameter><decl><type><name>BFSCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_nodes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_edges</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"nodes"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_nodes</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"edges"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_edges</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name> <operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ProcedureResult</name></type> <name>Proc_BFS_Invoke</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// validate inputs</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name>   <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>args</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><operator>(</operator><name>SIValue</name> <operator>*</operator><operator>)</operator><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_NODE</name>                 <operator>||</operator>   <comment type="line">// source node</comment>
	   <call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_INT64</name>                <operator>||</operator>   <comment type="line">// max level to iterate to, unlimited if 0</comment>
	   <operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>T_NULL</name> <operator>|</operator> <name>T_STRING</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>      <comment type="line">// relationship type to traverse if not NULL</comment>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>BFSCtx</name> <modifier>*</modifier></type><name>bfs_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_process_yield</name><argument_list>(<argument><expr><name>bfs_ctx</name></expr></argument>, <argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Process inputs</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>source_node</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ptrval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>max_level</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>longval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reltype</name> <init>= <expr><ternary><condition><expr><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>stringval</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>src_id</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>source_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Get edge matrix and transpose matrix, if available.</comment>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type>    <name>R</name>    <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name>  <modifier>*</modifier></type><name>gc</name>  <init>=  <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>reltype</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_Matrix_export</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><call><name>Graph_GetAdjacencyMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>reltype</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// failed to find schema, first step will return NULL</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_OK</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>reltype_id</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_export</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// if we're not collecting edges, pass a NULL parent pointer</comment>
	<comment type="line">// so that the algorithm will not perform unnecessary work</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>V</name> <init>= <expr><name>GrB_NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// vector of results</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>PI</name> <init>= <expr><name>GrB_NULL</name></expr></init></decl>;</decl_stmt> <comment type="line">// vector backtracking results to their parents</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name> <modifier>*</modifier></type><name>pPI</name> <init>= <expr><operator>&amp;</operator><name>PI</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>bfs_ctx</name><operator>-&gt;</operator><name>yield_edges</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pPI</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>res</name> <init>= <expr><call><name>LG_BreadthFirstSearch_SSGrB</name><argument_list>(<argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>pPI</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>src_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>max_level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// remove all values with a level less than or equal to 1</comment>
	<comment type="line">// values of 0 are not connected to the source, and values of 1 are the source</comment>
	<decl_stmt><decl><type><name>GxB_Scalar</name></type> <name>thunk</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GxB_Scalar_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>, <argument><expr><name>GrB_UINT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GxB_Scalar_setElement_UINT64</name><argument_list>(<argument><expr><name>thunk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GxB_Vector_select</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GxB_GT_THUNK</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GxB_Scalar_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// get number of entries</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GrB_Vector_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>nvals</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>parents</name></name> <operator>=</operator> <name>PI</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GxB_Vector_Option_set</name><argument_list>(<argument><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><call><name>GxB_Vector_Option_set</name><argument_list>(<argument><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GrB_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>Proc_BFS_Step</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BFSCtx</name> <modifier>*</modifier></type><name>bfs_ctx</name> <init>= <expr><operator>(</operator><name>BFSCtx</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// return NULL if the BFS for this source has already been emitted</comment>
	<comment type="line">// or there are no connected nodes</comment>
	<if_stmt><if>if<condition>(<expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>depleted</name></name> <operator>||</operator> <name><name>bfs_ctx</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>yield_nodes</name> <init>= <expr><operator>(</operator><name><name>bfs_ctx</name><operator>-&gt;</operator><name>yield_nodes</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>yield_edges</name> <init>= <expr><operator>(</operator><name><name>bfs_ctx</name><operator>-&gt;</operator><name>yield_edges</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">// build arrays for the outputs the user has requested</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>n</name> <init>= <expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>nodes</name></decl>, <decl><type ref="prev"/><name>edges</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>yield_nodes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nodes</name> <operator>=</operator> <call><name>SI_Array</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>yield_edges</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>edges</name> <operator>=</operator> <call><name>SI_Array</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// setup result iterator</comment>
	<decl_stmt><decl><type><name>NodeID</name></type>               <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type>             <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GxB_Iterator</name></type>         <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GxB_Iterator_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_attach</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_seek</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while<condition>(<expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_getIndex</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// get the reached node</comment>
		<if_stmt><if>if<condition>(<expr><name>yield_nodes</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// append each reachable node to the nodes output array</comment>
			<decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nodes</name></expr></argument>, <argument><expr><call><name>SI_Node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>yield_edges</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>GrB_Index</name></type> <name>parent_id</name></decl>;</decl_stmt>
			<comment type="line">// find the parent of the reached node</comment>
			<decl_stmt><decl><type><name>GrB_Info</name></type> <name>res</name> <init>= <expr><call><name>GrB_Vector_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parent_id</name></expr></argument>,
					<argument><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// retrieve edges connecting the parent node to the current node</comment>
			<comment type="line">// TODO: we only require a single edge</comment>
			<comment type="line">// `Graph_GetEdgesConnectingNodes` can return multiple edges</comment>
			<expr_stmt><expr><call><name>Graph_GetEdgesConnectingNodes</name><argument_list>(<argument><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>parent_id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>reltype_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// append one edge to the edges output array</comment>
			<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edges</name></expr></argument>, <argument><expr><call><name>SI_Edge</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>GxB_Iterator_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>depleted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="line">// populate output</comment>
	<if_stmt><if>if<condition>(<expr><name>yield_nodes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name><name>bfs_ctx</name><operator>-&gt;</operator><name>yield_nodes</name></name> <operator>=</operator> <name>nodes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>yield_edges</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name><name>bfs_ctx</name><operator>-&gt;</operator><name>yield_edges</name></name> <operator>=</operator> <name>edges</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// clean up</comment>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>bfs_ctx</name><operator>-&gt;</operator><name>output</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ProcedureResult</name></type> <name>Proc_BFS_Free</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// free private data</comment>
	<decl_stmt><decl><type><name>BFSCtx</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name>   <operator>!=</operator>  <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>nodes</name></name>    <operator>!=</operator>  <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><call><name>GrB_Vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>parents</name></name>  <operator>!=</operator>  <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><call><name>GrB_Vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>parents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BFSCtx</name> <modifier>*</modifier></type><name>_Build_Private_Data</name><parameter_list>()</parameter_list> <block>{<block_content>
	<comment type="line">// set up the BFS context</comment>
	<decl_stmt><decl><type><name>BFSCtx</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BFSCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>n</name></name>            <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>g</name></name>            <operator>=</operator>  <call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>nodes</name></name>        <operator>=</operator>  <name>GrB_NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name>       <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>SIValue</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>parents</name></name>      <operator>=</operator>  <name>GrB_NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>depleted</name></name>     <operator>=</operator>  <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>reltype_id</name></name>   <operator>=</operator>  <name>GRAPH_NO_RELATION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>yield_nodes</name></name>  <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>yield_edges</name></name>  <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>pdata</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>Proc_BFS_Ctx</name><parameter_list>()</parameter_list> <block>{<block_content>
	<comment type="line">// Construct procedure private data.</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privdata</name> <init>= <expr><call><name>_Build_Private_Data</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Declare possible outputs.</comment>
	<decl_stmt><decl><type><name>ProcedureOutput</name> <modifier>*</modifier></type><name>outputs</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>ProcedureOutput</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>out_nodes</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nodes"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_ARRAY</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>out_edges</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"edges"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_ARRAY</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>out_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>out_edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ProcCtxNew</name><argument_list>(<argument><expr><literal type="string">"algo.BFS"</literal></expr></argument>,
								   <argument><expr><literal type="number">3</literal></expr></argument>,
								   <argument><expr><name>outputs</name></expr></argument>,
								   <argument><expr><name>Proc_BFS_Step</name></expr></argument>,
								   <argument><expr><name>Proc_BFS_Invoke</name></expr></argument>,
								   <argument><expr><name>Proc_BFS_Free</name></expr></argument>,
								   <argument><expr><name>privdata</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

</unit>
