<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/procedures/proc_ss_paths.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proc_ss_paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/datatypes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<comment type="line">// MATCH (n:L {v: 1})</comment>
<comment type="line">// CALL algo.SSpaths({sourceNode: n,</comment>
<comment type="line">//					  relTypes: ['E'],</comment>
<comment type="line">//					  maxLen: 3,</comment>
<comment type="line">//					  weightProp: 'weight',</comment>
<comment type="line">//					  costProp: 'cost',</comment>
<comment type="line">//					  maxCost: 4,</comment>
<comment type="line">//					  pathCount: 1}) YIELD path, pathWeight, pathCost</comment>
<comment type="line">// RETURN path, pathWeight, pathCost</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>      <comment type="line">// path</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>weight</name></decl>;</decl_stmt>   <comment type="line">// path weight</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>cost</name></decl>;</decl_stmt>     <comment type="line">// path cost</comment>
}</block></struct></type> <name>WeightedPath</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>Node</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Edge</name></type> <name>edge</name></decl>;</decl_stmt>
}</block></struct></type> <name>LevelConnection</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>LevelConnection</name> <modifier>*</modifier><modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt>    <comment type="line">// nodes reached at depth i, and edges leading to them.</comment>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>                  <comment type="line">// current path.</comment>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>                    <comment type="line">// graph to traverse.</comment>
	<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>neighbors</name></decl>;</decl_stmt>             <comment type="line">// reusable buffer of edges along the current path.</comment>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>relationIDs</name></decl>;</decl_stmt>            <comment type="line">// edge type(s) to traverse.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>relationCount</name></decl>;</decl_stmt>           <comment type="line">// length of relationIDs.</comment>
	<decl_stmt><decl><type><name>GRAPH_EDGE_DIR</name></type> <name>dir</name></decl>;</decl_stmt>          <comment type="line">// traverse direction.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>minLen</name></decl>;</decl_stmt>                 <comment type="line">// path minimum length.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>maxLen</name></decl>;</decl_stmt>                 <comment type="line">// path max length.</comment>
	<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>weight_prop</name></decl>;</decl_stmt>    <comment type="line">// weight attribute id</comment>
	<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>cost_prop</name></decl>;</decl_stmt>      <comment type="line">// cost attribuite id</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>max_cost</name></decl>;</decl_stmt>             <comment type="line">// maximum cost of path</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>path_count</name></decl>;</decl_stmt>         <comment type="line">// path to return</comment>
	<union>union <block>{
		<decl_stmt><decl><type><name>WeightedPath</name></type> <name>single</name></decl>;</decl_stmt>     <comment type="line">// path_count == 1</comment>
		<decl_stmt><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>heap</name></decl>;</decl_stmt>            <comment type="line">// in case path_count &gt; 1</comment>
		<decl_stmt><decl><type><name>WeightedPath</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>     <comment type="line">// path_count == 0 return all minimum result</comment>
	}</block>;</union>                           <comment type="line">// path collection</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>             <comment type="line">// result returned</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_path</name></decl>;</decl_stmt>         <comment type="line">// yield path</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_path_weight</name></decl>;</decl_stmt>  <comment type="line">// yield path weight</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_path_cost</name></decl>;</decl_stmt>    <comment type="line">// yield path cost</comment>
}</block></struct></type> <name>SingleSourceCtx</name>;</typedef>

<comment type="line">// free SingleSourceCtx</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SingleSourceCtx_Free</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>levelsCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>levelsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Path_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>relationIDs</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationIDs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Heap_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// initialize returned values pointers</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_process_yield</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_path</name></name>         <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_path_weight</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_path_cost</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_path</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"pathWeight"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_path_weight</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"pathCost"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_path_cost</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// make sure context level array have 'cap' available entries.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_SingleSourceCtx_EnsureLevelArrayCap</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>level</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>cap</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>level</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>LevelConnection</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <call><name>array_ensure_cap</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>level</name> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><call><name>array_new</name><argument_list>(<argument><expr><name>LevelConnection</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// append given 'node' to given 'level' array.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_SingleSourceCtx_AddConnectionToLevel</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>level</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>level</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LevelConnection</name></type> <name>connection</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>connection</name><operator>.</operator><name>node</name></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>edge</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>connection</name><operator>.</operator><name>edge</name></name> <operator>=</operator> <operator>*</operator><name>edge</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SingleSourceCtx_New</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>relationIDs</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>relationCount</name></decl></parameter>,
	<parameter><decl><type><name>GRAPH_EDGE_DIR</name></type> <name>dir</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>minLen</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>maxLen</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name>              <operator>=</operator>  <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name>            <operator>=</operator>  <name>dir</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name>         <operator>=</operator>  <name>minLen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name>         <operator>=</operator>  <name>maxLen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationIDs</name></name>    <operator>=</operator>  <name>relationIDs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationCount</name></name>  <operator>=</operator>  <name>relationCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name>         <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>LevelConnection</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name>           <operator>=</operator>  <call><name>Path_New</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name>      <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_SingleSourceCtx_EnsureLevelArrayCap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_SingleSourceCtx_AddConnectionToLevel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">// validate config map and initialize SingleSourceCtx</comment>
<function><type><specifier>static</specifier> <name>ProcedureResult</name></type> <name>validate_config</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>config</name></decl></parameter>,
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>start</name></decl>;</decl_stmt>                <comment type="line">// start node</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>relationships</name></decl>;</decl_stmt>        <comment type="line">// relationship types allowed</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>dir</name></decl>;</decl_stmt>                  <comment type="line">// direction</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>max_length</name></decl>;</decl_stmt>           <comment type="line">// max traverse length</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>weight_prop</name></decl>;</decl_stmt>          <comment type="line">// weight attribute name</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>cost_prop</name></decl>;</decl_stmt>            <comment type="line">// cost attribute name</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>max_cost</name></decl>;</decl_stmt>             <comment type="line">// maximum cost</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>path_count</name></decl>;</decl_stmt>           <comment type="line">// # of paths to return</comment>
	
	<decl_stmt><decl><type><name>bool</name></type> <name>start_exists</name>         <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"sourceNode"</literal></expr></argument>,   <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>relationships_exists</name> <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"relTypes"</literal></expr></argument>,     <argument><expr><name>relationships</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>dir_exists</name>           <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"relDirection"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>max_length_exists</name>    <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"maxLen"</literal></expr></argument>,       <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>weight_prop_exists</name>   <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"weightProp"</literal></expr></argument>,   <argument><expr><name>weight_prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>cost_prop_exists</name>     <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"costProp"</literal></expr></argument>,     <argument><expr><name>cost_prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>max_cost_exists</name>      <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"maxCost"</literal></expr></argument>,      <argument><expr><name>max_cost</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>path_count_exists</name>    <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"pathCount"</literal></expr></argument>,    <argument><expr><name>path_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>start_exists</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"sourceNode is required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_NODE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"sourceNode must be of type Node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>GRAPH_EDGE_DIR</name></type> <name>direction</name> <init>= <expr><name>GRAPH_EDGE_DIR_OUTGOING</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>dir_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"relDirection values must be 'incoming', 'outgoing' or 'both'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><literal type="string">"incoming"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>direction</name> <operator>=</operator> <name>GRAPH_EDGE_DIR_INCOMING</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><literal type="string">"outgoing"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>direction</name> <operator>=</operator> <name>GRAPH_EDGE_DIR_OUTGOING</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><literal type="string">"both"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>direction</name> <operator>=</operator> <name>GRAPH_EDGE_DIR_BOTH</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"relDirection values must be 'incoming', 'outgoing' or 'both'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int64_t</name></type> <name>max_length_val</name> <init>= <expr><name>LONG_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>max_length_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>max_length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_INT64</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"maxLen must be integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>max_length_val</name> <operator>=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>types_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>relationships_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>relationships</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_ARRAY</name> <operator>||</operator>
			<operator>!</operator><call><name>SIArray_AllOfType</name><argument_list>(<argument><expr><name>relationships</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"relTypes must be array of strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>types_count</name> <operator>=</operator> <call><name>SIArray_Length</name><argument_list>(<argument><expr><name>relationships</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>types_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>types_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>types_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>rel</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>relationships</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name><name>rel</name><operator>.</operator><name>stringval</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>types_count</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>types_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>types_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>GRAPH_NO_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>SingleSourceCtx_New</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>start</name><operator>.</operator><name>ptrval</name></name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>types_count</name></expr></argument>,
		<argument><expr><name>direction</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_length_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>weight_prop</name></name> <operator>=</operator> <name>ATTRIBUTE_ID_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cost_prop</name></name> <operator>=</operator> <name>ATTRIBUTE_ID_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_cost</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>weight_prop_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>weight_prop</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"weightProp must be a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>weight_prop</name></name> <operator>=</operator> <call><name>GraphContext_GetAttributeID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>weight_prop</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>cost_prop_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>cost_prop</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"costProp must be a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cost_prop</name></name> <operator>=</operator> <call><name>GraphContext_GetAttributeID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>cost_prop</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>max_cost_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>max_cost</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_INT64</name> <operator>&amp;&amp;</operator> <call><name>SI_TYPE</name><argument_list>(<argument><expr><name>max_cost</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_DOUBLE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"maxCost must be numeric"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_cost</name></name> <operator>=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>max_cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>path_count_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>path_count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_INT64</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"pathCount must be integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>path_count</name><operator>.</operator><name>longval</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"pathCount must be greater than or equal to 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>path_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// check to see if context levels array has entries at position 'level'.</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_SingleSourceCtx_LevelNotEmpty</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>level</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><name>array_len</name><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>array_len</name><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addOutgoingNeighbors</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>LevelConnection</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>,
	<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>frontierId</name> <init>= <expr><name>INVALID_ENTITY_ID</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>frontierId</name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frontier</name><operator>-&gt;</operator><name>edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Get frontier neighbors.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>relationCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>Graph_GetNodeEdges</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frontier</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>GRAPH_EDGE_DIR_OUTGOING</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Add unvisited neighbors to next level.</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>neighborsCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>_SingleSourceCtx_EnsureLevelArrayCap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>neighborsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neighborsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Don't follow the frontier edge again.</comment>
		<if_stmt><if>if<condition>(<expr><name>frontierId</name> <operator>==</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="line">// Set the neighbor by following the edge in the correct directoin.</comment>
		<decl_stmt><decl><type><name>Node</name></type> <name>neighbor</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><call><name>Edge_GetDestNodeID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Add the node and edge to the frontier.</comment>
		<expr_stmt><expr><call><name>_SingleSourceCtx_AddConnectionToLevel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbor</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addIncomingNeighbors</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>LevelConnection</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>,
	<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>frontierId</name> <init>= <expr><name>INVALID_ENTITY_ID</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>frontierId</name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frontier</name><operator>-&gt;</operator><name>edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Get frontier neighbors.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>relationCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>Graph_GetNodeEdges</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frontier</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>GRAPH_EDGE_DIR_INCOMING</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Add unvisited neighbors to next level.</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>neighborsCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>_SingleSourceCtx_EnsureLevelArrayCap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>neighborsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neighborsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Don't follow the frontier edge again.</comment>
		<if_stmt><if>if<condition>(<expr><name>frontierId</name> <operator>==</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="line">// Set the neighbor by following the edge in the correct directoin.</comment>
		<decl_stmt><decl><type><name>Node</name></type> <name>neighbor</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><call><name>Edge_GetSrcNodeID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Add the node and edge to the frontier.</comment>
		<expr_stmt><expr><call><name>_SingleSourceCtx_AddConnectionToLevel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbor</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// traverse from the frontier node in the specified direction and add all encountered nodes and edges.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>addNeighbors</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>LevelConnection</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>,
	<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>,
	<parameter><decl><type><name>GRAPH_EDGE_DIR</name></type> <name>dir</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>GRAPH_EDGE_DIR_OUTGOING</name></expr>:</case>
			<expr_stmt><expr><call><name>addOutgoingNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frontier</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>GRAPH_EDGE_DIR_INCOMING</name></expr>:</case>
			<expr_stmt><expr><call><name>addIncomingNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frontier</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>GRAPH_EDGE_DIR_BOTH</name></expr>:</case>
			<expr_stmt><expr><call><name>addIncomingNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frontier</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addOutgoingNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frontier</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"encountered unexpected traversal direction in AllPaths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// get numeric attribute value of an entity otherwise return default value</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SIValue</name></type> <name>_get_value_or_defualt</name>
<parameter_list>(
	<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>ge</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>id</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>default_value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>GraphEntity_GetProperty</name><argument_list>(<argument><expr><name>ge</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>ATTRIBUTE_NOTFOUND</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>default_value</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_NUMERIC</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>*</operator><name>v</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>default_value</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// use DFS to find all paths from src tracking cost and weight</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SSpaths_next</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>WeightedPath</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
	<parameter><decl><type><name>double</name></type> <name>max_weight</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// as long as path is not empty OR there are neighbors to traverse.</comment>
	<while>while<condition>(<expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_SingleSourceCtx_LevelNotEmpty</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name> <init>= <expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// can we advance?</comment>
		<if_stmt><if>if<condition>(<expr><call><name>_SingleSourceCtx_LevelNotEmpty</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// get a new frontier.</comment>
			<decl_stmt><decl><type><name>LevelConnection</name></type> <name>frontierConnection</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Node</name></type> <name>frontierNode</name> <init>= <expr><name><name>frontierConnection</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>bool</name></type> <name>frontierAlreadyOnPath</name> <init>= <expr><call><name>Path_ContainsNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frontierNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// don't allow cycles</comment>
			<if_stmt><if>if<condition>(<expr><name>frontierAlreadyOnPath</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// add frontier to path.</comment>
			<expr_stmt><expr><call><name>Path_AppendNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>frontierNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// if depth is 0 this is the source node, there is no leading edge to it.</comment>
			<comment type="line">// for depth &gt; 0 for each frontier node, there is a leading edge.</comment>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>c</name> <init>= <expr><call><name>_get_value_or_defualt</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>frontierConnection</name><operator>.</operator><name>edge</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cost_prop</name></name></expr></argument>, <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>w</name> <init>= <expr><call><name>_get_value_or_defualt</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>frontierConnection</name><operator>.</operator><name>edge</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>weight_prop</name></name></expr></argument>, <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cost</name></name> <operator>+</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_cost</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>weight</name></name> <operator>+</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>max_weight</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cost</name></name> <operator>+=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>weight</name></name> <operator>+=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Path_AppendEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>frontierConnection</name><operator>.</operator><name>edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>Path_PopNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// update path depth.</comment>
			<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="line">// introduce neighbors only if path depth &lt; maximum path length.</comment>
			<comment type="line">// and frontier wasn't already expanded.</comment>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>addNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frontierConnection</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// see if we can return path.</comment>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// no way to advance, backtrack.</comment>
			<expr_stmt><expr><call><name>Path_PopNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>Path_EdgeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>Edge</name></type> <name>e</name> <init>= <expr><call><name>Path_PopEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>c</name> <init>= <expr><call><name>_get_value_or_defualt</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cost_prop</name></name></expr></argument>, <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>w</name> <init>= <expr><call><name>_get_value_or_defualt</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>weight_prop</name></name></expr></argument>, <argument><expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cost</name></name> <operator>-=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>weight</name></name> <operator>-=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="line">// couldn't find a path.</comment>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="line">// compare path by weight, cost and path length</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>path_cmp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>WeightedPath</name> <modifier>*</modifier></type><name>da</name> <init>= <expr><operator>(</operator><name>WeightedPath</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WeightedPath</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>(</operator><name>WeightedPath</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>weight</name></name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>weight</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>da</name><operator>-&gt;</operator><name>cost</name></name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>cost</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>Path_Len</name><argument_list>(<argument><expr><name><name>da</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>Path_Len</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name><name>da</name><operator>-&gt;</operator><name>cost</name></name> <operator>-</operator> <name><name>db</name><operator>-&gt;</operator><name>cost</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>da</name><operator>-&gt;</operator><name>weight</name></name> <operator>-</operator> <name><name>db</name><operator>-&gt;</operator><name>weight</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// get all minimal paths (all paths with the same weight)</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SSpaths_all_minimal</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// initialize array that contains the result</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>WeightedPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// get first path</comment>
	<decl_stmt><decl><type><name>WeightedPath</name></type> <name>p</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>max_weight</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SSpaths_next</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>max_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// iterate over all paths</comment>
	<while>while <condition>(<expr><name><name>p</name><operator>.</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if current path is better and the array is not empty clear it</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>.</operator><name>weight</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>weight</name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>Path_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// add the path to the result array</comment>
		<expr_stmt><expr><name><name>p</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>Path_Clone</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// update max weight</comment>
		<expr_stmt><expr><name>max_weight</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>weight</name></name></expr>;</expr_stmt>

		<comment type="line">// get next path where path weight is &lt;= max_weight</comment>
		<expr_stmt><expr><call><name>SSpaths_next</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>max_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">// find the single minimal weighted path</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SSpaths_single_minimal</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// initialize the result path to worst path</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>path</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>cost</name></name>   <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>

	<comment type="line">// get first path</comment>
	<decl_stmt><decl><type><name>WeightedPath</name></type> <name>p</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SSpaths_next</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>DBL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// iterate over all paths</comment>
	<while>while <condition>(<expr><name><name>p</name><operator>.</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if the current path is better replace it</comment>
		<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>weight</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>weight</name></name> <operator>||</operator>
			<name><name>p</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>cost</name></name> <operator>||</operator>
			<operator>(</operator><name><name>p</name><operator>.</operator><name>cost</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>cost</name></name> <operator>&amp;&amp;</operator>
				<call><name>Path_Len</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>Path_Len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>Path_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>Path_Clone</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>weight</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// get next path where path weight is &lt;= result weight</comment>
		<expr_stmt><expr><call><name>SSpaths_next</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <specifier>inline</specifier></type> <name>_add_path</name>
<parameter_list>(
	<parameter><decl><type><name>heap_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>heap</name></decl></parameter>,
	<parameter><decl><type><name>WeightedPath</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>WeightedPath</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WeightedPath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>Path_Clone</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cost</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cost</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Heap_offer</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// find k minimal weighted path (path can have different weight)</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SSpaths_k_minimal</name>
<parameter_list>(
	<parameter><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// initialize heap that contains the result where top path is the highest weight</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <call><name>Heap_new</name><argument_list>(<argument><expr><name>path_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// get first path</comment>
	<decl_stmt><decl><type><name>WeightedPath</name></type> <name>p</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>max_weight</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SSpaths_next</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>max_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// iterate over all paths</comment>
	<while>while <condition>(<expr><name><name>p</name><operator>.</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>Heap_count</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// fill the heap</comment>
		<expr_stmt><expr><call><name>_add_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// get next path where path weight is &lt;= max_weight</comment>
		<expr_stmt><expr><call><name>SSpaths_next</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>max_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// fill the heap</comment>
	<expr_stmt><expr><call><name>_add_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update the max weight so we will get better paths</comment>
	<decl_stmt><decl><type><name>WeightedPath</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><call><name>Heap_peek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>max_weight</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>

	<comment type="line">// get next path where path weight is &lt;= max_weight</comment>
	<expr_stmt><expr><call><name>SSpaths_next</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>max_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>p</name><operator>.</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if the heap is full check if the current path is better </comment>
		<comment type="line">// than the worst path if yes replace it</comment>
		<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>Heap_peek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>weight</name></name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>weight</name></name> <operator>||</operator>
			<name><name>p</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>cost</name></name> <operator>||</operator>
			<operator>(</operator><name><name>p</name><operator>.</operator><name>cost</name></name> <operator>==</operator> <name><name>pp</name><operator>-&gt;</operator><name>cost</name></name> <operator>&amp;&amp;</operator>
				<call><name>Path_Len</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>Path_Len</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Heap_poll</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Path_Free</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>Path_Clone</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>weight</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>cost</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Heap_offer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// update the max weight so we will get better paths</comment>
			<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>Heap_peek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>max_weight</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// get next path where path weight is &lt;= max_weight</comment>
		<expr_stmt><expr><call><name>SSpaths_next</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>max_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ProcedureResult</name></type> <name>Proc_SSpathsInvoke</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>single_source_ctx</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SingleSourceCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>validate_config</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>single_source_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SingleSourceCtx_Free</name><argument_list>(<argument><expr><name>single_source_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>=</operator> <name>single_source_ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIValue</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_process_yield</name><argument_list>(<argument><expr><name>single_source_ctx</name></expr></argument>, <argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SSpaths_all_minimal</name><argument_list>(<argument><expr><name>single_source_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if<condition>(<expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SSpaths_single_minimal</name><argument_list>(<argument><expr><name>single_source_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>SSpaths_k_minimal</name><argument_list>(<argument><expr><name>single_source_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>Proc_SSpathsStep</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>single_source_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WeightedPath</name></type> <name>p</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>array_pop</name><argument_list>(<argument><expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>path_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>single_source_ctx</name><operator>-&gt;</operator><name>single</name></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>single</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>WeightedPath</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><call><name>Heap_poll</name><argument_list>(<argument><expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>pp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
	<if_stmt><if>if<condition>(<expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>yield_path</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name><name>single_source_ctx</name><operator>-&gt;</operator><name>yield_path</name></name> <operator>=</operator> <call><name>SI_Path</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Path_Free</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>yield_path_weight</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name><name>single_source_ctx</name><operator>-&gt;</operator><name>yield_path_weight</name></name> <operator>=</operator> <call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>yield_path_cost</name></name></expr>)</condition><block type="pseudo"><block_content>   <expr_stmt><expr><operator>*</operator><name><name>single_source_ctx</name><operator>-&gt;</operator><name>yield_path_cost</name></name>   <operator>=</operator> <call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>cost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name><name>single_source_ctx</name><operator>-&gt;</operator><name>output</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ProcedureResult</name></type> <name>Proc_SSpathsFree</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SingleSourceCtx</name> <modifier>*</modifier></type><name>single_source_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SingleSourceCtx_Free</name><argument_list>(<argument><expr><name>single_source_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>Proc_SSpathCtx</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privateData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name> <modifier>*</modifier></type><name>outputs</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>ProcedureOutput</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"path"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_PATH</name> <operator>|</operator> <name>T_NULL</name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pathWeight"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_DOUBLE</name> <operator>|</operator> <name>T_NULL</name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>ProcedureOutput</name><operator>)</operator><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pathCost"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_DOUBLE</name> <operator>|</operator> <name>T_NULL</name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ProcCtxNew</name><argument_list>(<argument><expr><literal type="string">"algo.SSpaths"</literal></expr></argument>,
								   <argument><expr><literal type="number">1</literal></expr></argument>,
								   <argument><expr><name>outputs</name></expr></argument>,
								   <argument><expr><name>Proc_SSpathsStep</name></expr></argument>,
								   <argument><expr><name>Proc_SSpathsInvoke</name></expr></argument>,
								   <argument><expr><name>Proc_SSpathsFree</name></expr></argument>,
								   <argument><expr><name>privateData</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>
</unit>
