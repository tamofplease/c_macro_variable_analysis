<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/procedures/procedure.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./procedure.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"procedures.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/strutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>__procedures</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_procRegister</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procedure</name></decl></parameter>, <parameter><decl><type><name>ProcGenerator</name></type> <name>gen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>lowercase_proc_name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lowercase_proc_name_len</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>str_tolower</name><argument_list>(<argument><expr><name>procedure</name></expr></argument>, <argument><expr><name>lowercase_proc_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lowercase_proc_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>__procedures</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>lowercase_proc_name</name></expr></argument>,
		   <argument><expr><name>lowercase_proc_name_len</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Register procedures.</comment>
<function><type><name>void</name></type> <name>Proc_Register</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>__procedures</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"db.labels"</literal></expr></argument>, <argument><expr><name>Proc_LabelsCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"db.indexes"</literal></expr></argument>, <argument><expr><name>Proc_IndexesCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"db.propertyKeys"</literal></expr></argument>, <argument><expr><name>Proc_PropKeysCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"dbms.procedures"</literal></expr></argument>, <argument><expr><name>Proc_ProceduresCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"db.relationshipTypes"</literal></expr></argument>, <argument><expr><name>Proc_RelationsCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Register graph algorithms.</comment>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"algo.BFS"</literal></expr></argument>, <argument><expr><name>Proc_BFS_Ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"algo.pageRank"</literal></expr></argument>, <argument><expr><name>Proc_PagerankCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"algo.SPpaths"</literal></expr></argument>, <argument><expr><name>Proc_SPpathCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"algo.SSpaths"</literal></expr></argument>, <argument><expr><name>Proc_SSpathCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Register FullText Search generator.</comment>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"db.idx.fulltext.drop"</literal></expr></argument>, <argument><expr><name>Proc_FulltextDropIdxGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"db.idx.fulltext.queryNodes"</literal></expr></argument>, <argument><expr><name>Proc_FulltextQueryNodeGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_procRegister</name><argument_list>(<argument><expr><literal type="string">"db.idx.fulltext.createNodeIndex"</literal></expr></argument>, <argument><expr><name>Proc_FulltextCreateNodeIdxGen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ProcCtxNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
						 <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>argc</name></decl></parameter>,
						 <parameter><decl><type><name>ProcedureOutput</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
						 <parameter><decl><type><name>ProcStep</name></type> <name>fStep</name></decl></parameter>,
						 <parameter><decl><type><name>ProcInvoke</name></type> <name>fInvoke</name></decl></parameter>,
						 <parameter><decl><type><name>ProcFree</name></type> <name>fFree</name></decl></parameter>,
						 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>privateData</name></decl></parameter>,
						 <parameter><decl><type><name>bool</name></type> <name>readOnly</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProcedureCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Step</name></name> <operator>=</operator> <name>fStep</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Free</name></name> <operator>=</operator> <name>fFree</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>Invoke</name></name> <operator>=</operator> <name>fInvoke</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>=</operator> <name>privateData</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>readOnly</name></name> <operator>=</operator> <name>readOnly</name></expr>;</expr_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>Proc_Get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proc_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>__procedures</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>proc_name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>proc_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>proc_name_lowercase</name> <index>[<expr><name>proc_name_len</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>str_tolower</name><argument_list>(<argument><expr><name>proc_name</name></expr></argument>, <argument><expr><name>proc_name_lowercase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ProcGenerator</name></type> <name>gen</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>__procedures</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>proc_name_lowercase</name></expr></argument>,
	  			<argument><expr><name>proc_name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>gen</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>gen</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Set procedure state to not initialized.</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PROCEDURE_NOT_INIT</name></expr>;</expr_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureResult</name></type> <name>Proc_Invoke</name><parameter_list>(<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Procedure is expected to be in the `PROCEDURE_NOT_INIT` state.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>PROCEDURE_NOT_INIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PROCEDURE_ERROR</name></expr>;</expr_stmt>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <name>PROCEDURE_VARIABLE_ARG_COUNT</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>argc</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><operator>(</operator><name>SIValue</name> <operator>*</operator><operator>)</operator><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>ProcedureResult</name></type> <name>res</name> <init>= <expr><call><name><name>proc</name><operator>-&gt;</operator><name>Invoke</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Set state to initialized.</comment>
	<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>PROCEDURE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PROCEDURE_INIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name> <modifier>*</modifier></type><name>Proc_Step</name><parameter_list>(<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Validate procedure state, can only consumed if state is initialized.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>PROCEDURE_INIT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name><name>proc</name><operator>-&gt;</operator><name>Step</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Set procedure state to depleted if NULL is returned.
	 * NOTE: we might have errored. */</comment>
	<if_stmt><if>if<condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>PROCEDURE_DEPLETED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>Procedure_Argc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>argc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>Procedure_OutputCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Procedure_GetOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>output_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output_idx</name> <operator>&lt;</operator> <call><name>Procedure_OutputCount</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>output_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Procedure_ContainsOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>output_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>output_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Procedure_GetName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Procedure_IsReadOnly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>readOnly</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Proc_Free</name><parameter_list>(<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>proc</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>Free</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
