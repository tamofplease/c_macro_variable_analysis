<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/procedures/proc_fulltext_query.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proc_fulltext_query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../index/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// fulltext createNodeIndex</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// CALL db.idx.fulltext.queryNodes(label, query)</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>Node</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSResultsIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_node</name></decl>;</decl_stmt>     <comment type="line">// yield node</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_score</name></decl>;</decl_stmt>    <comment type="line">// yield score</comment>
}</block></struct></type> <name>QueryNodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_process_yield</name>
<parameter_list>(
	<parameter><decl><type><name>QueryNodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_node</name></name>   <operator>=</operator>    <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_score</name></name>  <operator>=</operator>    <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"node"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_node</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"score"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_score</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>ProcedureResult</name></type> <name>Proc_FulltextQueryNodeInvoke</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><operator>(</operator><name>SIValue</name> <operator>*</operator><operator>)</operator><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_STRING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// see if there's a full-text index for given label</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>stringval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>stringval</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// get full-text index from schema</comment>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_FULLTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// TODO: this should cause an error to be emitted</comment>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryNodeContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>QueryNodeContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>g</name></name>       <operator>=</operator>  <name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>n</name></name>       <operator>=</operator>  <call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>idx</name></name>     <operator>=</operator>  <name>idx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name>  <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>SIValue</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_process_yield</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// execute query</comment>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <call><name>Index_Query</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// raise runtime exception if err != NULL</comment>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// RediSearch error message is allocated using `rm_strdup`</comment>
		<comment type="line">// QueryCtx is expecting to free `error` using `free`</comment>
		<comment type="line">// in which case we have no option but to clone error</comment>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"RediSearch: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// raise the exception, we expect an exception handler to be set</comment>
		<comment type="line">// as procedure invocation is done at runtime</comment>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name> <modifier>*</modifier></type><name>Proc_FulltextQueryNodeStep</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// no index was attached to this procedure</comment>

	<decl_stmt><decl><type><name>QueryNodeContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><operator>(</operator><name>QueryNodeContext</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pdata</name> <operator>||</operator> <operator>!</operator><name><name>pdata</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// try to get a result out of the iterator</comment>
	<comment type="line">// NULL is returned if iterator id depleted</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeID</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>NodeID</name> <operator>*</operator><operator>)</operator><call><name>RediSearch_ResultsIteratorNext</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// depleted</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>double</name></type> <name>score</name> <init>= <expr><call><name>RediSearch_ResultsIteratorGetScore</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get node</comment>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>yield_node</name></name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><operator>*</operator><name><name>pdata</name><operator>-&gt;</operator><name>yield_node</name></name>  <operator>=</operator> <call><name>SI_Node</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>yield_score</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name><name>pdata</name><operator>-&gt;</operator><name>yield_score</name></name> <operator>=</operator> <call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureResult</name></type> <name>Proc_FulltextQueryNodeFree</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Clean up.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>QueryNodeContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RediSearch_ResultsIteratorFree</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>Proc_FulltextQueryNodeGen</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privateData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name> <modifier>*</modifier></type><name>output</name>   <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>ProcedureOutput</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>out_node</name>  <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"node"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_NODE</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>out_score</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"score"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_DOUBLE</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ProcCtxNew</name><argument_list>(<argument><expr><literal type="string">"db.idx.fulltext.queryNodes"</literal></expr></argument>,
								   <argument><expr><literal type="number">2</literal></expr></argument>,
								   <argument><expr><name>output</name></expr></argument>,
								   <argument><expr><name>Proc_FulltextQueryNodeStep</name></expr></argument>,
								   <argument><expr><name>Proc_FulltextQueryNodeInvoke</name></expr></argument>,
								   <argument><expr><name>Proc_FulltextQueryNodeFree</name></expr></argument>,
								   <argument><expr><name>privateData</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

</unit>
