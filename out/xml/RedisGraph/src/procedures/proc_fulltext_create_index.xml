<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/procedures/proc_fulltext_create_index.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proc_fulltext_create_index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../index/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/datatypes.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// fulltext createNodeIndex</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// validate index configuration map</comment>
<comment type="line">// [required] label &lt;string&gt;</comment>
<comment type="line">// [optional] stopwords &lt;string[]&gt;</comment>
<comment type="line">// [optional] language &lt;string&gt;</comment>
<comment type="line">// configuration can't change if index exists </comment>
<function><type><specifier>static</specifier> <name>ProcedureResult</name></type> <name>_validateIndexConfigMap</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name></type> <name>config</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>sw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>lang</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>label</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>multi_config</name>    <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>label_exists</name>    <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"label"</literal></expr></argument>,     <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>lang_exists</name>     <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>,  <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>stopword_exists</name> <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"stopwords"</literal></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>label_exists</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Label is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>multi_config</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>label</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_FULLTEXT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Index already exists configuration can't be changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate stopwords</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>stopword_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_ARRAY</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>stopwords_count</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stopwords_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>stopword</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>sw</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>stopword</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Stopword must be a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Stopwords must be array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate language</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>lang_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Language must be string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>RediSearch_ValidateLanguage</name><argument_list>(<argument><expr><name><name>lang</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Language is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// validate field configuration map</comment>
<comment type="line">// [required] field &lt;string&gt;</comment>
<comment type="line">// [optional] weight &lt;number&gt;</comment>
<comment type="line">// [optional] phonetic &lt;string&gt;</comment>
<comment type="line">// [optional] nostem &lt;bool&gt;</comment>
<comment type="line">// configuration can't change if index exists </comment>
<function><type><specifier>static</specifier> <name>ProcedureResult</name></type> <name>_validateFieldConfigMap</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>config</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>weight</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>nostem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>phonetic</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>  <name>multi_config</name>     <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>field_exists</name>     <init>=  <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>,  <argument><expr><literal type="string">"field"</literal></expr></argument>,     <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>weight_exists</name>    <init>=  <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>,  <argument><expr><literal type="string">"weight"</literal></expr></argument>,    <argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>nostem_exists</name>    <init>=  <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>,  <argument><expr><literal type="string">"nostem"</literal></expr></argument>,    <argument><expr><name>nostem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>phonetic_exists</name>  <init>=  <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>config</name></expr></argument>,  <argument><expr><literal type="string">"phonetic"</literal></expr></argument>,  <argument><expr><name>phonetic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// field name is mandatory</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>field_exists</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Field is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_STRING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Field must be a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>weight_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_NUMERIC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Weight must be numeric"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>nostem_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>nostem</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_BOOL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Nostem must be bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>phonetic_exists</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>phonetic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Phonetic must be a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>multi_config</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// additional configuration is specified</comment>
		<comment type="line">// make sure field doesn't exists in index, as reconfiguration</comment>
		<comment type="line">// isn't supported</comment>
		<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>fieldID</name> <init>= <expr><call><name>GraphContext_GetAttributeID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>field</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>fieldID</name> <operator>!=</operator> <name>ATTRIBUTE_ID_NONE</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&amp;&amp;</operator>
				<call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fieldID</name></expr></argument>, <argument><expr><name>IDX_FULLTEXT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Index already exists configuration can't be changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// CALL db.idx.fulltext.createNodeIndex(label, fields...)</comment>
<comment type="line">// CALL db.idx.fulltext.createNodeIndex('book', 'title', 'authors')</comment>
<comment type="line">// CALL db.idx.fulltext.createNodeIndex({label:'L', stopwords:['The']}, 'v')</comment>
<comment type="line">// CALL db.idx.fulltext.createNodeIndex('L', {field:'v', weight:2.1})</comment>
<function><type><name>ProcedureResult</name></type> <name>Proc_FulltextCreateNodeIdxInvoke</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>arg_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><operator>(</operator><name>SIValue</name> <operator>*</operator><operator>)</operator><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>arg_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Minimum number of arguments is 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// label argument should be of type string or map</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>T_STRING</name> <operator>|</operator> <name>T_MAP</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Label argument can be string or map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_MAP</name> <operator>&amp;&amp;</operator>
			<call><name>_validateIndexConfigMap</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PROCEDURE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>label_config</name>  <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>label_config</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label_config</name><operator>.</operator><name>stringval</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>label_config</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_MAP</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>label_value</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>label_config</name></expr></argument>, <argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><name>label_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label_value</name><operator>.</operator><name>stringval</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// validation, fields arguments should be of type string or map</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arg_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>T_STRING</name> <operator>|</operator> <name>T_MAP</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Field argument must be string or map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_MAP</name> <operator>&amp;&amp;</operator>
			<call><name>_validateFieldConfigMap</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PROCEDURE_ERR</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>PROCEDURE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// validation passed, create full-text index</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>sw</name></decl>;</decl_stmt>    <comment type="line">// index stopwords</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>lang</name></decl>;</decl_stmt>  <comment type="line">// index language</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>res</name>               <init>= <expr><name>INDEX_FAIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name>            <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name>      <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>fields_count</name>     <init>= <expr><name>arg_count</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// skip label</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><name>args</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>      <comment type="line">// skip index name</comment>

	<comment type="line">// introduce fields to index</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>field</name>     <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type>  <name>weight</name>     <init>=  <expr><name>INDEX_FIELD_DEFAULT_WEIGHT</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>    <name>nostem</name>     <init>=  <expr><name>INDEX_FIELD_DEFAULT_NOSTEM</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>phonetic</name>  <init>=  <expr><name>INDEX_FIELD_DEFAULT_PHONETIC</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stringval</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>SIValue</name></type> <name>tmp</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>stringval</name></name></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"weight"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>weight</name> <operator>=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"nostem"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nostem</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>longval</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"phonetic"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>phonetic</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>stringval</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GraphContext_AddFullTextIndex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>field</name></expr></argument>,
				<argument><expr><name>weight</name></expr></argument>, <argument><expr><name>nostem</name></expr></argument>, <argument><expr><name>phonetic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>label_config</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_MAP</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>lang_exists</name>     <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>label_config</name></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>,  <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>stopword_exists</name> <init>= <expr><call><name>MAP_GET</name><argument_list>(<argument><expr><name>label_config</name></expr></argument>, <argument><expr><literal type="string">"stopwords"</literal></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>stopword_exists</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>stopwords_count</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>stopwords</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>stopwords_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stopwords_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>stopword</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>sw</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>stopwords</name></expr></argument>, <argument><expr><name><name>stopword</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>Index_SetStopwords</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>stopwords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>stopwords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>lang_exists</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_SetLanguage</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>lang</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// build index</comment>
	<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>INDEX_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_Construct</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name> <modifier>*</modifier></type><name>Proc_FulltextCreateNodeIdxStep</name><parameter_list>(<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureResult</name></type> <name>Proc_FulltextCreateNodeIdxFree</name><parameter_list>(<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>Proc_FulltextCreateNodeIdxGen</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privateData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>ProcedureOutput</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ProcCtxNew</name><argument_list>(<argument><expr><literal type="string">"db.idx.fulltext.createNodeIndex"</literal></expr></argument>,
								   <argument><expr><name>PROCEDURE_VARIABLE_ARG_COUNT</name></expr></argument>,
								   <argument><expr><name>output</name></expr></argument>,
								   <argument><expr><name>Proc_FulltextCreateNodeIdxStep</name></expr></argument>,
								   <argument><expr><name>Proc_FulltextCreateNodeIdxInvoke</name></expr></argument>,
								   <argument><expr><name>Proc_FulltextCreateNodeIdxFree</name></expr></argument>,
								   <argument><expr><name>privateData</name></expr></argument>,
								   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

</unit>
