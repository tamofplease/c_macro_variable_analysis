<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/procedures/proc_pagerank.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proc_pagerank.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algorithms/pagerank.h"</cpp:file></cpp:include>

<comment type="line">// CALL algo.pageRank(NULL, NULL)      YIELD node, score</comment>
<comment type="line">// CALL algo.pageRank('Page', NULL)    YIELD node, score</comment>
<comment type="line">// CALL algo.pageRank(NULL, 'LINKS')   YIELD node, score</comment>
<comment type="line">// CALL algo.pageRank('Page', 'LINKS') YIELD node, score</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>                          <comment type="line">// number of nodes to rank</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="line">// current node to return</comment>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>                       <comment type="line">// graph</comment>
	<decl_stmt><decl><type><name>Node</name></type> <name>node</name></decl>;</decl_stmt>                      <comment type="line">// node</comment>
	<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>             <comment type="line">// mapping between extracted matrix rows and node ids</comment>
	<decl_stmt><decl><type><name>LAGraph_PageRank</name> <modifier>*</modifier></type><name>ranking</name></decl>;</decl_stmt>      <comment type="line">// nodes ranking</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>                <comment type="line">// array with up to 2 entries [node, score]</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_node</name></decl>;</decl_stmt>            <comment type="line">// yield node</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>yield_score</name></decl>;</decl_stmt>           <comment type="line">// yield score</comment>
}</block></struct></type> <name>PagerankContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_process_yield</name>
<parameter_list>(
	<parameter><decl><type><name>PagerankContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"node"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_node</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"score"</literal></expr></argument>, <argument><expr><name><name>yield</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>yield_score</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>ProcedureResult</name></type> <name>Proc_PagerankInvoke</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// expecting 2 arguments</comment>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><operator>(</operator><name>SIValue</name> <operator>*</operator><operator>)</operator><name>args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// arg0 and arg1 can be either String or NULL</comment>
	<decl_stmt><decl><type><name>SIType</name></type> <name>arg0_t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type> <name>arg1_t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>arg0_t</name> <operator>&amp;</operator> <operator>(</operator><name>T_STRING</name> <operator>|</operator> <name>T_NULL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>arg1_t</name> <operator>&amp;</operator> <operator>(</operator><name>T_STRING</name> <operator>|</operator> <name>T_NULL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// read arguments</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    <comment type="line">// node filter</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="line">// edge filter</comment>
	<if_stmt><if>if<condition>(<expr><name>arg0_t</name> <operator>==</operator> <name>T_STRING</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>stringval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>arg1_t</name> <operator>==</operator> <name>T_STRING</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>relation</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>stringval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// pagerank config arguments</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>iters</name></decl>;</decl_stmt>               <comment type="line">// iterations performed</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>tol</name> <init>= <expr><literal type="number">1e-4</literal></expr></init></decl>;</decl_stmt> <comment type="line">// tolerance</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>itermax</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt> <comment type="line">// max iterations</comment>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="line">// node count</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl>;</decl_stmt>               <comment type="line">// number of entries in 'r'</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>;</decl_stmt>               <comment type="line">// relation matrix row count</comment>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>           <comment type="line">// label matrix</comment>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>           <comment type="line">// relation matrix</comment>
	<decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>     <comment type="line">// mapping, array for returning row indices of tuples</comment>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LAGraph_PageRank</name> <modifier>*</modifier></type><name>ranking</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// setup context</comment>
	<decl_stmt><decl><type><name>PagerankContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PagerankContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>ranking</name></name> <operator>=</operator> <name>ranking</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIValue</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_process_yield</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name> <operator>=</operator> <name>pdata</name></expr>;</expr_stmt>

	<comment type="line">// get label matrix</comment>
	<if_stmt><if>if<condition>(<expr><name>label</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// unknown label, quickly return</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_OK</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_export</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// get relation matrix</comment>
	<if_stmt><if>if<condition>(<expr><name>relation</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// unknown relation, quickly return</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PROCEDURE_OK</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_export</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// convert the values to true</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_apply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_ONE_BOOL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>GrB_DESC_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// relation isn't specified, 'r' is the adjacency matrix</comment>
		<expr_stmt><expr><call><name>RG_Matrix_export</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><call><name>Graph_GetAdjacencyMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="line">// if label is specified:</comment>
	<comment type="line">// filter 'r' to contain only rows and columns associated with</comment>
	<comment type="line">// nodes of type 'l'</comment>
	<if_stmt><if>if<condition>(<expr><name>label</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// create a NxN matrix, one row for each labeled entity</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>reduced</name></decl>;</decl_stmt> <comment type="line">// relation matrix reduced to only 'l' rows/cols</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reduced</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// discard rows of 'r' associated with nodes of a different type than 'l'</comment>
		<comment type="line">// this will also perform casting to boolean</comment>
		<expr_stmt><expr><name>mapping</name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// extract row indecies from 'l', coresponding to node IDs</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractTuples_BOOL</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extract</name><argument_list>(<argument><expr><name>reduced</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>mapping</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
								  <argument><expr><name>mapping</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>reduced</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// resize to remove unused rows</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>Graph_UncompactedNodeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GxB_Matrix_resize</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// invoke Pagerank only if 'r' contains entries</comment>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>nvals</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>Pagerank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ranking</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>itermax</name></expr></argument>, <argument><expr><name>tol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// clean up</comment>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>label</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// update context</comment>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>n</name></name>        <operator>=</operator>  <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>mapping</name></name>  <operator>=</operator>  <name>mapping</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>ranking</name></name>  <operator>=</operator>  <name>ranking</name></expr>;</expr_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name> <modifier>*</modifier></type><name>Proc_PagerankStep</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>PagerankContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><operator>(</operator><name>PagerankContext</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// depleted/no results</comment>
	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>pdata</name><operator>-&gt;</operator><name>n</name></name> <operator>||</operator> <name><name>pdata</name><operator>-&gt;</operator><name>ranking</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>LAGraph_PageRank</name></type> <name>rank</name> <init>= <expr><name><name>pdata</name><operator>-&gt;</operator><name>ranking</name><index>[<expr><name><name>pdata</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeID</name></type> <name>node_id</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pdata</name><operator>-&gt;</operator><name>mapping</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pdata</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name><name>rank</name><operator>.</operator><name>page</name></name></expr>]</index></name></expr> </then><else>: <expr><name><name>rank</name><operator>.</operator><name>page</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>yield_node</name></name></expr>)</condition><block type="pseudo"><block_content>   <expr_stmt><expr><operator>*</operator><name><name>pdata</name><operator>-&gt;</operator><name>yield_node</name></name>   <operator>=</operator>  <call><name>SI_Node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pdata</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>yield_score</name></name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><operator>*</operator><name><name>pdata</name><operator>-&gt;</operator><name>yield_score</name></name>  <operator>=</operator>  <call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>rank</name><operator>.</operator><name>pagerank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureResult</name></type> <name>Proc_PagerankFree</name>
<parameter_list>(
	<parameter><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// clean up</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>PagerankContext</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition><block type="pseudo"><block_content>   <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>pdata</name><operator>-&gt;</operator><name>ranking</name></name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>pdata</name><operator>-&gt;</operator><name>ranking</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>privateData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PROCEDURE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>Proc_PagerankCtx</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>privateData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name> <modifier>*</modifier></type><name>outputs</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>ProcedureOutput</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>output_node</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"node"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_NODE</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProcedureOutput</name></type> <name>output_score</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"score"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_DOUBLE</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>output_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ProcCtxNew</name><argument_list>(<argument><expr><literal type="string">"algo.pageRank"</literal></expr></argument>,
								   <argument><expr><literal type="number">2</literal></expr></argument>,
								   <argument><expr><name>outputs</name></expr></argument>,
								   <argument><expr><name>Proc_PagerankStep</name></expr></argument>,
								   <argument><expr><name>Proc_PagerankInvoke</name></expr></argument>,
								   <argument><expr><name>Proc_PagerankFree</name></expr></argument>,
								   <argument><expr><name>privateData</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

</unit>
