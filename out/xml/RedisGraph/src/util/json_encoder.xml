<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/json_encoder.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json_encoder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds/sds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/entities/node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/entities/edge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/datatypes.h"</cpp:file></cpp:include>

<comment type="line">// Forward declaration</comment>
<function_decl><type><name>sds</name></type> <name>_JsonEncoder_SIValue</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>sds</name></type> <name>_JsonEncoder_String</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>sdscatfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sds</name></type> <name>_JsonEncoder_Properties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>ge</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\"properties\": {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>GraphEntity_GetAttributes</name><argument_list>(<argument><expr><name>ge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>prop_count</name> <init>= <expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prop_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>AttributeSet_GetIdx</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>GraphContext_GetAttributeString</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\"%s\": "</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_SIValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>prop_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sds</name></type> <name>_JsonEncoder_Node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\"id\": %U"</literal></expr></argument>, <argument><expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", \"labels\": ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Retrieve node labels</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>schema</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><call><name>Schema_GetName</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>label_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"], "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Properties</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sds</name></type> <name>_JsonEncoder_Edge</name><parameter_list>(<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"\"id\": %U"</literal></expr></argument>, <argument><expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Retrieve reltype data.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>Graph_GetEdgeRelation</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>schema</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relationship</name> <init>= <expr><call><name>Schema_GetName</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>relationship</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", \"relationship\": \"%s\", "</literal></expr></argument>, <argument><expr><name>relationship</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Properties</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>e</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", \"start\": {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Retrieve source node data.</comment>
	<decl_stmt><decl><type><name>Node</name></type> <name>src</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>srcNodeID</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"}, \"end\": {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Retrieve dest node data.</comment>
	<decl_stmt><decl><type><name>Node</name></type> <name>dest</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>destNodeID</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sds</name></type> <name>_JsonEncoder_GraphEntity</name><parameter_list>(<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>ge</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GraphEntityType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>GETYPE_NODE</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{\"type\": \"node\", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Node</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Node</name> <operator>*</operator><operator>)</operator><name>ge</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>GETYPE_EDGE</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{\"type\": \"relationship\", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Edge</name><argument_list>(<argument><expr><operator>(</operator><name>Edge</name> <operator>*</operator><operator>)</operator><name>ge</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sds</name></type> <name>_JsonEncoder_Path</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// open path with "["</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>nodeCount</name> <init>= <expr><call><name>SIPath_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// write the next value</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_GraphEntity</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>.</operator><name>ptrval</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GETYPE_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>edge</name> <init>= <expr><call><name>SIPath_GetRelationship</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_GraphEntity</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name><name>edge</name><operator>.</operator><name>ptrval</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GETYPE_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="line">// Handle last node.</comment>
	<if_stmt><if>if<condition>(<expr><name>nodeCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>node</name> <init>= <expr><call><name>SIPath_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nodeCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_GraphEntity</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>.</operator><name>ptrval</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GETYPE_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// close array with "]"</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sds</name></type> <name>_JsonEncoder_Point</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// default crs == wgs-84 till we support other CRS formats </comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{\"crs\":\"wgs-84\",\"latitude\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>Point_lat</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">",\"longitude\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>Point_lon</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// height is not supported yet</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">",\"height\":null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sds</name></type> <name>_JsonEncoder_Array</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// open array with "["</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// write the next value</comment>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_SIValue</name><argument_list>(<argument><expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// if it is not the last element, add ", "</comment>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>arrayLen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// close array with "]"</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sds</name></type> <name>_JsonEncoder_Map</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// "{" marks the beginning of a map</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>key_count</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Pair</name></type> <name>p</name> <init>= <expr><name><name>map</name><operator>.</operator><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// write the next key/value pair</comment>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_String</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_SIValue</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// if this is not the last element, add ", "</comment>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>key_count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// "}" marks the end of a map</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sds</name></type> <name>_JsonEncoder_SIValue</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name><name>v</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>T_STRING</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_String</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_INT64</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%I"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>longval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_BOOL</name></expr>:</case>
		<if_stmt><if>if<condition>(<expr><name><name>v</name><operator>.</operator><name>longval</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<break>break;</break>
	<case>case <expr><name>T_DOUBLE</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%.15g"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>doubleval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_NODE</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_GraphEntity</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>ptrval</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GETYPE_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_EDGE</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_GraphEntity</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>ptrval</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>GETYPE_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_ARRAY</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Array</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_MAP</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Map</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_PATH</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Path</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_NULL</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_POINT</name></expr>:</case>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_Point</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>		
	<default>default:</default>
		<comment type="line">// unrecognized type</comment>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"JSON encoder encountered unrecognized type: %d\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>JsonEncoder_SIValue</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Create an empty sds string.</comment>
	<decl_stmt><decl><type><name>sds</name></type> <name>s</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Populate the sds string with encoded data.</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>_JsonEncoder_SIValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Duplicate the sds string into a standard C string.</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><call><name>rm_strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Free the sds string.</comment>
	<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

</unit>
