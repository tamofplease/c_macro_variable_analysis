<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/strutil.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rmalloc.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>str_tolower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lower</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lower_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>str_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">//Avoid overflow</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>lower_len</name> <operator>&gt;=</operator> <name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Update lower len</comment>
	<expr_stmt><expr><operator>*</operator><name>lower_len</name> <operator>=</operator> <name>str_len</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>str_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lower</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>lower</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>str_toupper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>upper</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>upper_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>str_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">//Avoid overflow</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>upper_len</name> <operator>&gt;=</operator> <name>str_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//Update lower len</comment>
	<expr_stmt><expr><operator>*</operator><name>upper_len</name> <operator>=</operator> <name>str_len</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>str_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>upper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>upper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Utility function to increase the size of a buffer.</comment>
<function><type><name>void</name></type> <name>str_ExtendBuffer</name><parameter_list>(
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>,           <comment type="line">// buffer to populate</comment>
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>bufferLen</name></decl></parameter>,    <comment type="line">// size of buffer</comment>
	<parameter><decl><type><name>size_t</name></type> <name>extensionLen</name></decl></parameter>   <comment type="line">// number of bytes to add</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>bufferLen</name> <operator>+=</operator> <name>extensionLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
