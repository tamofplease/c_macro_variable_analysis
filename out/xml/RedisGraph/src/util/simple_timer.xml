<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/simple_timer.c"><comment type="block">/* -------------------------------------------------------------------------- */</comment>
<comment type="block">/* GraphBLAS/Demo/simple_timer.c: a timer for performance measurements        */</comment>
<comment type="block">/* -------------------------------------------------------------------------- */</comment>

<comment type="block">/* SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017, All Rights Reserved.    */</comment>
<comment type="block">/* http://suitesparse.com   See GraphBLAS/Doc/License.txt for license.        */</comment>

<comment type="block">/* -------------------------------------------------------------------------- */</comment>

<comment type="block">/* simple_timer:  a portable timer for accurate performance measurements */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_timer.h"</cpp:file></cpp:include>

<comment type="block">/* -------------------------------------------------------------------------- */</comment>
<comment type="block">/* simple_tic: return the current wallclock time in high resolution           */</comment>
<comment type="block">/* -------------------------------------------------------------------------- */</comment>

<function><type><name>void</name></type> <name>simple_tic</name>         <comment type="block">/* returns current time in seconds and nanoseconds */</comment>
<parameter_list>(
    <parameter><decl><type><name>double</name></type> <name><name>tic</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>      <comment type="block">/* tic [0]: seconds, tic [1]: nanoseconds */</comment>
)</parameter_list>
<block>{<block_content>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>_OPENMP</name></expr></argument> )</argument_list></call></expr></cpp:if>

        <comment type="block">/* OpenMP is available; use the OpenMP timer function */</comment>
        <expr_stmt><expr><name><name>tic</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>tic</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>__linux__</name></expr></argument> )</argument_list></call></expr></cpp:elif>

        <comment type="block">/* Linux has a very low resolution clock() function, so use the high
           resolution clock_gettime instead.  May require -lrt */</comment>
        <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>t</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>clock_gettime</name> <argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>tic</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>t</name><operator>.</operator><name>tv_sec</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>tic</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>t</name><operator>.</operator><name>tv_nsec</name></name></expr> ;</expr_stmt>

    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

        <comment type="block">/* The ANSI C11 clock() function is used instead.  This gives the
           processor time, not the wallclock time, and it might have low
           resolution.  It returns the time since some unspecified fixed time
           in the past, as a clock_t integer.  The clock ticks per second are
           given by CLOCKS_PER_SEC.  In Mac OSX this is a very high resolution
           clock, and clock ( ) is faster than clock_get_time (...) ; */</comment>
        <decl_stmt><decl><type><name>clock_t</name></type> <name>t</name> <init>= <expr><call><name>clock</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>tic</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>t</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>CLOCKS_PER_SEC</name><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>tic</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<comment type="block">/* -------------------------------------------------------------------------- */</comment>
<comment type="block">/* simple_toc: return the time since the last simple_tic                      */</comment>
<comment type="block">/* -------------------------------------------------------------------------- */</comment>

<function><type><name>double</name></type> <name>simple_toc</name>           <comment type="block">/* returns time since last simple_tic */</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>tic</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>    <comment type="block">/* tic from last call to simple_tic */</comment>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name><name>toc</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>simple_tic</name> <argument_list>(<argument><expr><name>toc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><name><name>toc</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>tic</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">1e-9</literal> <operator>*</operator> <operator>(</operator><name><name>toc</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>tic</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
