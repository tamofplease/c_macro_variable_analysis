<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/thpool/thpool.c"><comment type="block">/* ********************************
 * Author:       Johan Hanssen Seferidis
 * License:	     MIT
 * Description:  Library providing a threading pool where you can add
 *               work. For usage, check the thpool.h file or README.md
 *
 */</comment> <comment type="block" format="doxygen">/** @file thpool.h */</comment> <comment type="block">/*
   *
   ********************************/</comment>

<comment type="line">//#define _POSIX_C_SOURCE 200809L</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/prctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thpool.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rmalloc.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>THPOOL_DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THPOOL_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THPOOL_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_PRINT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>THPOOL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>err</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, str)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>err</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>threads_keepalive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>threads_on_hold</name></decl>;</decl_stmt>

<comment type="block">/* ========================== STRUCTURES ============================ */</comment>

<comment type="block">/* Binary semaphore */</comment>
<typedef>typedef <type><struct>struct <name>bsem</name> <block>{
	<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
}</block></struct></type> <name>bsem</name>;</typedef>

<comment type="block">/* Job */</comment>
<typedef>typedef <type><struct>struct <name>job</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>            <comment type="block">/* pointer to previous job   */</comment>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>function</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* function pointer          */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>                   <comment type="block">/* function's argument       */</comment>
}</block></struct></type> <name>job</name>;</typedef>

<comment type="block">/* Job queue */</comment>
<typedef>typedef <type><struct>struct <name>jobqueue</name> <block>{
	<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>rwmutex</name></decl>;</decl_stmt> 		<comment type="block">/* used for queue r/w access */</comment>
	<decl_stmt><decl><type><name>job</name> <modifier>*</modifier></type><name>front</name></decl>;</decl_stmt>              		<comment type="block">/* pointer to front of queue */</comment>
	<decl_stmt><decl><type><name>job</name> <modifier>*</modifier></type><name>rear</name></decl>;</decl_stmt>               		<comment type="block">/* pointer to rear  of queue */</comment>
	<decl_stmt><decl><type><name>bsem</name> <modifier>*</modifier></type><name>has_jobs</name></decl>;</decl_stmt>          		<comment type="block">/* flag as binary semaphore  */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>                 		<comment type="block">/* number of jobs in queue   */</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>cap</name></decl>;</decl_stmt>                   <comment type="block">/* capacity of the queue     */</comment>
}</block></struct></type> <name>jobqueue</name>;</typedef>

<comment type="block">/* Thread */</comment>
<typedef>typedef <type><struct>struct <name>thread</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>                   <comment type="block">/* friendly id               */</comment>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>pthread</name></decl>;</decl_stmt>        <comment type="block">/* pointer to actual thread  */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>thpool_</name></name> <modifier>*</modifier></type><name>thpool_p</name></decl>;</decl_stmt> <comment type="block">/* access to thpool          */</comment>
}</block></struct></type> <name>thread</name>;</typedef>

<comment type="block">/* Threadpool */</comment>
<typedef>typedef <type><struct>struct <name>thpool_</name> <block>{
	<decl_stmt><decl><type><name>thread</name> <modifier>*</modifier><modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>                 <comment type="block">/* pointer to threads        */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>                 <comment type="block">/* name associated with pool */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>num_threads_alive</name></decl>;</decl_stmt>   <comment type="block">/* threads currently alive   */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>num_threads_working</name></decl>;</decl_stmt> <comment type="block">/* threads currently working */</comment>
	<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>thcount_lock</name></decl>;</decl_stmt>     <comment type="block">/* used for thread count etc */</comment>
	<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>threads_all_idle</name></decl>;</decl_stmt>  <comment type="block">/* signal to thpool_wait     */</comment>
	<decl_stmt><decl><type><name>jobqueue</name></type> <name>jobqueue</name></decl>;</decl_stmt>                <comment type="block">/* job queue                 */</comment>
}</block></struct></type> <name>thpool_</name>;</typedef>

<comment type="block">/* ========================== PROTOTYPES ============================ */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>thread</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>thread_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>thread_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread</name></name> <modifier>*</modifier></type><name>thread_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>thread_hold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>thread_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread</name></name> <modifier>*</modifier></type><name>thread_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jobqueue_init</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jobqueue_clear</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jobqueue_push</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>newjob_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jobqueue_pull</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jobqueue_destroy</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bsem_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsem</name></name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bsem_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsem</name></name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bsem_post</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsem</name></name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bsem_post_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsem</name></name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bsem_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsem</name></name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* ========================== THREADPOOL ============================ */</comment>

<comment type="block">/* Initialise thread pool */</comment>
<function><type><name><name>struct</name> <name>thpool_</name></name> <modifier>*</modifier></type><name>thpool_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_threads</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><name>threads_on_hold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>threads_keepalive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>num_threads</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>num_threads</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Make new thread pool */</comment>
	<decl_stmt><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>thpool_p</name> <operator>=</operator> <operator>(</operator>struct <name>thpool_</name><operator>*</operator><operator>)</operator><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>thpool_</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>thpool_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"thpool_init(): Could not allocate memory for thread pool\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"thpool_init(): missing thread pool name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_working</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Initialise the job queue */</comment>
	<if_stmt><if>if<condition>(<expr><call><name>jobqueue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"thpool_init(): Could not allocate memory for job queue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>thpool_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Make threads in pool */</comment>
	<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <operator>(</operator>struct <name>thread</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>rm_calloc</name><argument_list>(<argument><expr><name>num_threads</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>thread</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>thpool_p</name><operator>-&gt;</operator><name>threads</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"thpool_init(): Could not allocate memory for threads\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>jobqueue_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>thpool_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>threads_all_idle</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Thread init */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thread_init</name><argument_list>(<argument><expr><name>thpool_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>THPOOL_DEBUG</name></expr></cpp:if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"THPOOL_DEBUG: Created thread %d in pool \n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></for>

	<comment type="block">/* Wait for threads to initialize */</comment>
	<while>while<condition>(<expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name> <operator>!=</operator> <name>num_threads</name></expr>)</condition> <block>{<block_content>
	</block_content>}</block></while>

	<return>return <expr><name>thpool_p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add work to the thread pool */</comment>
<function><type><name>int</name></type> <name>thpool_add_work</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>function_p</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>job</name> <modifier>*</modifier></type><name>newjob</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>newjob</name> <operator>=</operator> <operator>(</operator>struct <name>job</name> <operator>*</operator><operator>)</operator><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>job</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>newjob</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"thpool_add_work(): Could not allocate memory for new job\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* add function and argument */</comment>
	<expr_stmt><expr><name><name>newjob</name><operator>-&gt;</operator><name>function</name></name> <operator>=</operator> <name>function_p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newjob</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg_p</name></expr>;</expr_stmt>

	<comment type="block">/* add job to queue */</comment>
	<expr_stmt><expr><call><name>jobqueue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name></name></expr></argument>, <argument><expr><name>newjob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wait until all jobs have finished */</comment>
<function><type><name>void</name></type> <name>thpool_wait</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name><operator>.</operator><name>len</name></name> <operator>||</operator> <name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_working</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>threads_all_idle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Destroy the threadpool */</comment>
<function><type><name>void</name></type> <name>thpool_destroy</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* No need to destory if it's NULL */</comment>
	<if_stmt><if>if<condition>(<expr><name>thpool_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>threads_total</name> <init>= <expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* End each thread 's infinite loop */</comment>
	<expr_stmt><expr><name>threads_keepalive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Give 0.1 second to kill idle threads */</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>TIMEOUT</name> <init>= <expr><literal type="number">0.1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>tpassed</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>tpassed</name> <operator>&lt;</operator> <name>TIMEOUT</name> <operator>&amp;&amp;</operator> <name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bsem_post_all</name><argument_list>(<argument><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name><operator>.</operator><name>has_jobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tpassed</name> <operator>=</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Poll remaining threads */</comment>
	<comment type="line">// do not wait forever for threads to complete their work</comment>
	<comment type="line">//while(thpool_p-&gt;num_threads_alive) {</comment>
	<comment type="line">//	bsem_post_all(thpool_p-&gt;jobqueue.has_jobs);</comment>
	<comment type="line">//	sleep(1);</comment>
	<comment type="line">//}</comment>

	<comment type="block">/* Job queue cleanup */</comment>
	<expr_stmt><expr><call><name>jobqueue_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Deallocs */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>threads_total</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>thread_destroy</name><argument_list>(<argument><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>thpool_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Pause all threads in threadpool */</comment>
<function><type><name>void</name></type> <name>thpool_pause</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>caller</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// do not pause caller</comment>
		<if_stmt><if>if<condition>(<expr><name><name>thpool_p</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>pthread</name> <operator>!=</operator> <name>caller</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pthread_kill</name><argument_list>(<argument><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>pthread</name></expr></argument>, <argument><expr><name>SIGUSR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Resume all threads in threadpool */</comment>
<function><type><name>void</name></type> <name>thpool_resume</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// resuming a single threadpool hasn't been</comment>
	<comment type="line">// implemented yet, meanwhile this supresses</comment>
	<comment type="line">// the warnings</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thpool_p</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>threads_on_hold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>thpool_num_threads_working</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_working</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>thpool_num_threads</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>thpool_get_thread_id</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>, <parameter><decl><type><name>pthread_t</name></type> <name>pthread</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>thread</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><name><name>thpool_p</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>pthread</name></name> <operator>==</operator> <name>pthread</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>thread</name><operator>-&gt;</operator><name>id</name></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Could not locate thread.</comment>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return true if thread pool internal queue is full with pending work</comment>
<function><type><name>bool</name></type> <name>thpool_queue_full</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thpool_p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// test if there's enough room in thread pool queue</comment>
	<return>return <expr><operator>(</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name><operator>.</operator><name>len</name></name> <operator>&gt;=</operator> <name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name><operator>.</operator><name>cap</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>thpool_set_jobqueue_cap</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>thpool_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name><operator>.</operator><name>cap</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ============================ THREAD ============================== */</comment>

<comment type="block">/* Initialize a thread in the thread pool
 *
 * @param thread        address to the pointer of the thread to be created
 * @param id            id to be given to the thread
 * @return 0 on success, -1 otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_init</name><parameter_list>(<parameter><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>thread</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>thread_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><operator>*</operator><name>thread_p</name> <operator>=</operator> <operator>(</operator>struct <name>thread</name> <operator>*</operator><operator>)</operator><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>thread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>thread_p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"thread_init(): Could not allocate memory for thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>thread_p</name><operator>)</operator><operator>-&gt;</operator><name>thpool_p</name></name> <operator>=</operator> <name>thpool_p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>thread_p</name><operator>)</operator><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>thread_p</name><operator>)</operator><operator>-&gt;</operator><name>pthread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>thread_do</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>thread_p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>thread_p</name><operator>)</operator><operator>-&gt;</operator><name>pthread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Sets the calling thread on hold */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_hold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>threads_on_hold</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>threads_on_hold</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* What each thread is doing
*
* In principle this is an endless loop. The only time this loop gets interuppted is once
* thpool_destroy() is invoked or the program exits.
*
* @param  thread        thread that will run this function
* @return nothing
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>thread_do</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread</name></name> <modifier>*</modifier></type><name>thread_p</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<comment type="block">/* Set thread name for profiling and debuging */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>thread_name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>thread_name</name></expr></argument>, <argument><expr><literal type="string">"thread-pool-%s-%d"</literal></expr></argument>, <argument><expr><name><name>thread_p</name><operator>-&gt;</operator><name>thpool_p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>thread_p</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Use prctl instead to prevent using _GNU_SOURCE flag and implicit declaration */</comment>
	<expr_stmt><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_NAME</name></expr></argument>, <argument><expr><name>thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>pthread_setname_np</name><argument_list>(<argument><expr><name>thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"thread_do(): pthread_setname_np is not supported on this system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Assure all threads have been created before starting serving */</comment>
	<decl_stmt><decl><type><name>thpool_</name><modifier>*</modifier></type> <name>thpool_p</name> <init>= <expr><name><name>thread_p</name><operator>-&gt;</operator><name>thpool_p</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Register signal handler */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>thread_hold</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"thread_do(): cannot handle SIGUSR1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Mark thread as alive (initialized) */</comment>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while<condition>(<expr><name>threads_keepalive</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>bsem_wait</name><argument_list>(<argument><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name><operator>.</operator><name>has_jobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>threads_keepalive</name></expr>)</condition> <block>{<block_content>

			<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_working</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Read job from queue and execute it */</comment>
			<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func_buff</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_buff</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>job</name> <modifier>*</modifier></type><name>job_p</name> <init>= <expr><call><name>jobqueue_pull</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>jobqueue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>job_p</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>func_buff</name> <operator>=</operator> <name><name>job_p</name><operator>-&gt;</operator><name>function</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg_buff</name> <operator>=</operator> <name><name>job_p</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>func_buff</name><argument_list>(<argument><expr><name>arg_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>job_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_working</name></name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_working</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>threads_all_idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>thpool_p</name><operator>-&gt;</operator><name>num_threads_alive</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thpool_p</name><operator>-&gt;</operator><name>thcount_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Frees a thread  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_destroy</name><parameter_list>(<parameter><decl><type><name>thread</name> <modifier>*</modifier></type><name>thread_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>thread_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ============================ JOB QUEUE =========================== */</comment>

<comment type="block">/* Initialize queue */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jobqueue_init</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>len</name></name>         <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>front</name></name>       <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rear</name></name>        <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>has_jobs</name></name> <operator>=</operator> <operator>(</operator>struct <name>bsem</name> <operator>*</operator><operator>)</operator><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bsem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>has_jobs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rwmutex</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bsem_init</name><argument_list>(<argument><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>has_jobs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt> <comment type="line">// unlimited queue size</comment>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Clear the queue */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jobqueue_clear</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<while>while<condition>(<expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><call><name>jobqueue_pull</name><argument_list>(<argument><expr><name>jobqueue_p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rear</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bsem_reset</name><argument_list>(<argument><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>has_jobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Add (allocated) job to queue */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jobqueue_push</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>newjob</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>newjob</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rwmutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch<condition>(<expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* no jobs in queue */</comment>
			<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <name>newjob</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rear</name></name> <operator>=</operator> <name>newjob</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default> <comment type="block">/* jobs in queue */</comment>
			<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rear</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newjob</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rear</name></name> <operator>=</operator> <name>newjob</name></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bsem_post</name><argument_list>(<argument><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>has_jobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rwmutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Get first job from queue(removes it from queue)
 *
 * Notice: Caller MUST hold a mutex
 */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>job</name></name> <modifier>*</modifier></type><name>jobqueue_pull</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rwmutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>job</name> <modifier>*</modifier></type><name>job_p</name> <init>= <expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>front</name></name></expr></init></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

	<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* if no jobs in queue */</comment>
		<break>break;</break>

	<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* if one job in queue */</comment>
		<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rear</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<break>break;</break>

	<default>default:</default> <comment type="block">/* if &gt;1 jobs in queue */</comment>
		<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>front</name></name> <operator>=</operator> <name><name>job_p</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
		<comment type="block">/* more than one job in queue -&gt; post it */</comment>
		<expr_stmt><expr><call><name>bsem_post</name><argument_list>(<argument><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>has_jobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jobqueue_p</name><operator>-&gt;</operator><name>rwmutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>job_p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free all queue resources back to the system */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jobqueue_destroy</name><parameter_list>(<parameter><decl><type><name>jobqueue</name> <modifier>*</modifier></type><name>jobqueue_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>jobqueue_clear</name><argument_list>(<argument><expr><name>jobqueue_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>jobqueue_p</name><operator>-&gt;</operator><name>has_jobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ======================== SYNCHRONISATION ========================= */</comment>

<comment type="block">/* Init semaphore to 1 or 0 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bsem_init</name><parameter_list>(<parameter><decl><type><name>bsem</name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="string">"bsem_init(): Binary semaphore can take only values 1 or 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>mutex</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>cond</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bsem_p</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Reset semaphore to 0 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bsem_reset</name><parameter_list>(<parameter><decl><type><name>bsem</name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>bsem_init</name><argument_list>(<argument><expr><name>bsem_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Post to at least one thread */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bsem_post</name><parameter_list>(<parameter><decl><type><name>bsem</name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bsem_p</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Post to all threads */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bsem_post_all</name><parameter_list>(<parameter><decl><type><name>bsem</name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bsem_p</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Wait on semaphore until semaphore has value 0 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bsem_wait</name><parameter_list>(<parameter><decl><type><name>bsem</name> <modifier>*</modifier></type><name>bsem_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name><name>bsem_p</name><operator>-&gt;</operator><name>v</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>bsem_p</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bsem_p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
