<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/thpool/pools.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../configuration/config.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Thread pools</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>threadpool</name></type> <name>_readers_thpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// readers</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>threadpool</name></type> <name>_writers_thpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// writers</comment>

<function><type><name>int</name></type> <name>ThreadPools_Init</name>
<parameter_list>(
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>      <name>config_read</name>     <init>=  <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>       <name>reader_count</name>    <init>=  <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>       <name>writer_count</name>    <init>=  <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type>  <name>max_queue_size</name>  <init>=  <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>config_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// get thread pool size and thread pool internal queue length from config</comment>
	<expr_stmt><expr><name>config_read</name> <operator>=</operator> <call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_THREAD_POOL_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reader_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>config_read</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>config_read</name> <operator>=</operator> <call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_MAX_QUEUED_QUERIES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_queue_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>config_read</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ThreadPools_CreatePools</name><argument_list>(<argument><expr><name>reader_count</name></expr></argument>, <argument><expr><name>writer_count</name></expr></argument>, <argument><expr><name>max_queue_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// set up thread pools  (readers and writers)</comment>
<comment type="line">// returns 1 if thread pools initialized, 0 otherwise</comment>
<function><type><name>int</name></type> <name>ThreadPools_CreatePools</name>
<parameter_list>(
	<parameter><decl><type><name>uint</name></type> <name>reader_count</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>writer_count</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>max_pending_work</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_readers_thpool</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_writers_thpool</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>_readers_thpool</name> <operator>=</operator> <call><name>thpool_init</name><argument_list>(<argument><expr><name>reader_count</name></expr></argument>, <argument><expr><literal type="string">"reader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>_readers_thpool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>_writers_thpool</name> <operator>=</operator> <call><name>thpool_init</name><argument_list>(<argument><expr><name>writer_count</name></expr></argument>, <argument><expr><literal type="string">"writer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>_writers_thpool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ThreadPools_SetMaxPendingWork</name><argument_list>(<argument><expr><name>max_pending_work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return number of threads in both the readers and writers pools</comment>
<function><type><name>uint</name></type> <name>ThreadPools_ThreadCount</name>
<parameter_list>(
	<parameter><decl><type><name>void</name></type></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_readers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_writers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>thpool_num_threads</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>thpool_num_threads</name><argument_list>(<argument><expr><name>_writers_thpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>ThreadPools_ReadersCount</name>
<parameter_list>(
	<parameter><decl><type><name>void</name></type></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_readers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>thpool_num_threads</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// retrieve current thread id</comment>
<comment type="line">// 0         redis-main</comment>
<comment type="line">// 1..N + 1  readers</comment>
<comment type="line">// N + 2..   writers</comment>
<function><type><name>int</name></type> <name>ThreadPools_GetThreadID</name>
<parameter_list>(
	<parameter><decl><type><name>void</name></type></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_readers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_writers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// thpool_get_thread_id returns -1 if pthread_self isn't in the thread pool</comment>
	<comment type="line">// most likely Redis main thread</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>thread_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>pthread</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>readers_count</name> <init>= <expr><call><name>thpool_num_threads</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// search in writers</comment>
	<expr_stmt><expr><name>thread_id</name> <operator>=</operator> <call><name>thpool_get_thread_id</name><argument_list>(<argument><expr><name>_writers_thpool</name></expr></argument>, <argument><expr><name>pthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// compensate for Redis main thread</comment>
	<if_stmt><if>if<condition>(<expr><name>thread_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>readers_count</name> <operator>+</operator> <name>thread_id</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// search in readers pool</comment>
	<expr_stmt><expr><name>thread_id</name> <operator>=</operator> <call><name>thpool_get_thread_id</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>, <argument><expr><name>pthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// compensate for Redis main thread</comment>
	<if_stmt><if>if<condition>(<expr><name>thread_id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>thread_id</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="line">// assuming Redis main thread</comment>
</block_content>}</block></function>

<comment type="line">// pause all thread pools</comment>
<function><type><name>void</name></type> <name>ThreadPools_Pause</name>
<parameter_list>(
	<parameter><decl><type><name>void</name></type></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_readers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_writers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>thpool_pause</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thpool_pause</name><argument_list>(<argument><expr><name>_writers_thpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ThreadPools_Resume</name>
<parameter_list>(
	<parameter><decl><type><name>void</name></type></decl></parameter>
)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_readers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_writers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>thpool_resume</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thpool_resume</name><argument_list>(<argument><expr><name>_writers_thpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// add task for reader thread</comment>
<function><type><name>int</name></type> <name>ThreadPools_AddWorkReader</name>
<parameter_list>(
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>function_p</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_p</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_readers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// make sure there's enough room in thread pool queue</comment>
	<if_stmt><if>if<condition>(<expr><call><name>thpool_queue_full</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>THPOOL_QUEUE_FULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>thpool_add_work</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>, <argument><expr><name>function_p</name></expr></argument>, <argument><expr><name>arg_p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// add task for writer thread</comment>
<function><type><name>int</name></type> <name>ThreadPools_AddWorkWriter</name>
<parameter_list>(
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>function_p</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_p</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_writers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// make sure there's enough room in thread pool queue</comment>
	<if_stmt><if>if<condition>(<expr><call><name>thpool_queue_full</name><argument_list>(<argument><expr><name>_writers_thpool</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>THPOOL_QUEUE_FULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>thpool_add_work</name><argument_list>(<argument><expr><name>_writers_thpool</name></expr></argument>, <argument><expr><name>function_p</name></expr></argument>, <argument><expr><name>arg_p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ThreadPools_SetMaxPendingWork</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>_readers_thpool</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>thpool_set_jobqueue_cap</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>_writers_thpool</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>thpool_set_jobqueue_cap</name><argument_list>(<argument><expr><name>_writers_thpool</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ThreadPools_Destroy</name>
<parameter_list>(
	<parameter><decl><type><name>void</name></type></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_readers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_writers_thpool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>thpool_destroy</name><argument_list>(<argument><expr><name>_readers_thpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thpool_destroy</name><argument_list>(<argument><expr><name>_writers_thpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
