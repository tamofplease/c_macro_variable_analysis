<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/cron.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cron.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt;= (b)) ? (a) : (b)</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Data structures</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<typedef>typedef <type><enum>enum <block>{
	<decl><name>TASK_PENDING</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>,  <comment type="line">// task is waiting for executing</comment>
	<decl><name>TASK_EXECUTING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,  <comment type="line">// task is being executed</comment>
	<decl><name>TASK_COMPLETED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,  <comment type="line">// task run to completion</comment>
	<decl><name>TASK_ABORT</name>     <init>= <expr><literal type="number">3</literal></expr></init></decl>   <comment type="line">// task is aborted</comment>
}</block></enum></type> <name>CRON_TASK_STATE</name>;</typedef>

<comment type="line">// CRON task</comment>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>due</name></decl>;</decl_stmt>    <comment type="line">// absolute time for when task should run</comment>
	<decl_stmt><decl><type><name>CronTaskCB</name></type> <name>cb</name></decl>;</decl_stmt>          <comment type="line">// callback to call when task is due</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pdata</name></decl>;</decl_stmt>            <comment type="line">// [optional] private data passed to callback</comment>
	<decl_stmt><decl><type><name>CRON_TASK_STATE</name></type> <name>state</name></decl>;</decl_stmt>  <comment type="line">// state in which task is at</comment>
}</block></struct></type> <name>CRON_TASK</name>;</typedef>

<comment type="line">// CRON object</comment>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>alive</name></decl>;</decl_stmt>                   <comment type="line">// indicates cron is active</comment>
	<decl_stmt><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>tasks</name></decl>;</decl_stmt>                <comment type="line">// min heap of cron tasks</comment>
	<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>        <comment type="line">// mutex control access to tasks</comment>
	<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>condv_mutex</name></decl>;</decl_stmt>  <comment type="line">// mutex control access to condv</comment>
	<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>condv</name></decl>;</decl_stmt>         <comment type="line">// conditional variable</comment>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>             <comment type="line">// thread running cron main loop</comment>
}</block></struct></type> <name>CRON</name>;</typedef>

<comment type="line">// single static CRON instance, initialized at CRON_Start</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>CRON</name> <modifier>*</modifier></type><name>cron</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="line">// compares two time objects</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_timespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>a</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>tv_nsec</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name><name>a</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>tv_sec</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// minimum heap sort function</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>CRON_JobCmp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>_a</name> <init>= <expr><operator>(</operator><name>CRON_TASK</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>_b</name> <init>= <expr><operator>(</operator><name>CRON_TASK</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>cmp_timespec</name><argument_list>(<argument><expr><name><name>_b</name><operator>-&gt;</operator><name>due</name></name></expr></argument>, <argument><expr><name><name>_a</name><operator>-&gt;</operator><name>due</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Utility functions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// compute now + ms</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>timespec</name></name></type> <name>due_in_ms</name><parameter_list>(<parameter><decl><type><name>uint</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>due</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>due</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>due</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name>ms</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>due</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <operator>(</operator><name>ms</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

	<return>return <expr><name>due</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CRON_WakeUp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Set conditional variable to wake up CRON thread</comment>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// determines if task is due</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>CRON_TaskDue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CRON_TASK</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>now</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>cmp_timespec</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>due</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CRON_TASK</name> <modifier>*</modifier></type><name>CRON_Peek</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>Heap_peek</name><argument_list>(<argument><expr><name><name>cron</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CRON_RemoveTask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CRON_TASK</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>Heap_remove_item</name><argument_list>(<argument><expr><name><name>cron</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CRON_InsertTask</name><parameter_list>(<parameter><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Heap_offer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CRON_WakeUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CRON_PerformTask</name><parameter_list>(<parameter><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>t</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>pdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// try to advance task state from current_state to next_state</comment>
<comment type="line">// operation will fails if task's state differs from current_state</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>CRON_TaskAdvanceState</name>
<parameter_list>(
	<parameter><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
	<parameter><decl><type><name>CRON_TASK_STATE</name></type> <name>current_state</name></decl></parameter>,
	<parameter><decl><type><name>CRON_TASK_STATE</name></type> <name>next_state</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// valid arguments:</comment>
	<comment type="line">// 1. next state follows current state</comment>
	<comment type="line">// 2. current state is pending and next state is abort</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>current_state</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>next_state</name><operator>)</operator> <operator>||</operator>
		   <operator>(</operator><name>current_state</name> <operator>==</operator> <name>TASK_PENDING</name> <operator>&amp;&amp;</operator> <name>next_state</name> <operator>==</operator> <name>TASK_ABORT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// excange task's state to 'next_state' if task's state = current_state</comment>
	<return>return <expr><call><name>__atomic_compare_exchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_state</name></expr></argument>,
			<argument><expr><name>false</name></expr></argument>, <argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>, <argument><expr><name>__ATOMIC_RELAXED</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CRON_FreeTask</name><parameter_list>(<parameter><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_tasks</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>task</name> <operator>=</operator> <call><name>Heap_poll</name><argument_list>(<argument><expr><name><name>cron</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CRON_FreeTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// CRON main loop</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Cron_Run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<while>while<condition>(<expr><name><name>cron</name><operator>-&gt;</operator><name>alive</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// execute due tasks</comment>
		<decl_stmt><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><operator>(</operator><name>task</name> <operator>=</operator> <call><name>CRON_Peek</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CRON_TaskDue</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>CRON_TASK_STATE</name></type> <name>state</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
			<comment type="line">// task state should be either pending or aborted</comment>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>state</name> <operator>==</operator> <name>TASK_ABORT</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>TASK_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// advance from pending to executing</comment>
			<if_stmt><if>if<condition>(<expr><call><name>CRON_TaskAdvanceState</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>TASK_PENDING</name></expr></argument>, <argument><expr><name>TASK_EXECUTING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CRON_PerformTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// set state to completed</comment>
				<comment type="line">// frees any threads waiting on task to complete</comment>
				<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TASK_COMPLETED</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>CRON_RemoveTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CRON_FreeTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>

		<comment type="line">// sleep</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timeout</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>task</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>task</name><operator>-&gt;</operator><name>due</name></name></expr> </then><else>: <expr><call><name>due_in_ms</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv_mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// User facing API</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>Cron_Start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cron</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cron</name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CRON</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cron</name><operator>-&gt;</operator><name>alive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cron</name><operator>-&gt;</operator><name>tasks</name></name> <operator>=</operator> <call><name>Heap_new</name><argument_list>(<argument><expr><name>CRON_JobCmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Cron_Run</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Cron_Stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cron</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Stop cron main loop</comment>
	<expr_stmt><expr><name><name>cron</name><operator>-&gt;</operator><name>alive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CRON_WakeUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Wait for thread to terminate</comment>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>cron</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>clear_tasks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Heap_free</name><argument_list>(<argument><expr><name><name>cron</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cron</name><operator>-&gt;</operator><name>condv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>cron</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cron</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>CronTaskHandle</name></type> <name>Cron_AddTask</name><parameter_list>(<parameter><decl><type><name>uint</name></type> <name>when</name></decl></parameter>, <parameter><decl><type><name>CronTaskCB</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cron</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cb</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CRON_TASK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>cb</name></name>     <operator>=</operator>  <name>cb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>pdata</name></name>  <operator>=</operator>  <name>pdata</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>due</name></name>    <operator>=</operator>  <call><name>due_in_ms</name><argument_list>(<argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name>  <operator>=</operator>  <name>TASK_PENDING</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CRON_InsertTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>task</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Cron_AbortTask</name><parameter_list>(<parameter><decl><type><name>CronTaskHandle</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cron</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>CRON_TASK</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><operator>(</operator><name>CRON_TASK</name> <operator>*</operator><operator>)</operator><name>t</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// try remove the task</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CRON_RemoveTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	
	<comment type="line">// try marking task as aborted</comment>
	<if_stmt><if>if<condition>(<expr><call><name>CRON_TaskAdvanceState</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>TASK_PENDING</name></expr></argument>, <argument><expr><name>TASK_ABORT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CRON_FreeTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
