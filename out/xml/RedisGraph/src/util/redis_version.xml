<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/redis_version.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redis_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../redismodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<comment type="line">//</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>Redis_Version</name></type> <name>_redis_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Calculates the semantic version.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint</name></type> <name>_SemanticVersion</name><parameter_list>(<parameter><decl><type><name>uint</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>patch</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>major</name> <operator>*</operator> <literal type="number">10000</literal> <operator>+</operator> <name>minor</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>patch</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Redis_Version</name></type> <name>RG_GetRedisVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
	<comment type="line">// Singleton.</comment>
	<if_stmt><if>if<condition>(<expr><name>_initialized</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_redis_version</name></expr>;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>RedisModule_GetThreadSafeContext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Check if there is an implementation for redis module api for redis 6 and up, by checking the existence pf a Redis 6 API function pointer.</comment>
	<if_stmt><if>if<condition>(<expr><name>RedisModule_GetServerInfo</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Retrive the server info.</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_version</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RedisModuleServerInfoData</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>RedisModule_GetServerInfo</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Server"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>server_version</name> <operator>=</operator> <call><name>RedisModule_ServerInfoGetFieldC</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"redis_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>server_version</name></expr></argument>, <argument><expr><literal type="string">"%u.%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_redis_version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_redis_version</name><operator>.</operator><name>minor</name></name></expr></argument>,
			   <argument><expr><operator>&amp;</operator><name><name>_redis_version</name><operator>.</operator><name>patch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_FreeServerInfo</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>RedisModuleCallReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>RedisModule_Call</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replyStr</name> <init>= <expr><call><name>RedisModule_CallReplyStringPtr</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>replyStr</name></expr></argument>, <argument><expr><literal type="string">"# Server\nredis_version:%u.%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_redis_version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>_redis_version</name><operator>.</operator><name>minor</name></name></expr></argument>,
			   <argument><expr><operator>&amp;</operator><name><name>_redis_version</name><operator>.</operator><name>patch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_FreeCallReply</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>RedisModule_FreeThreadSafeContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><name>_redis_version</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>Redis_Version_GreaterOrEqual</name><parameter_list>(<parameter><decl><type><name>uint</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>patch</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>_initialized</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RG_GetRedisVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>_SemanticVersion</name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator>
		   <call><name>_SemanticVersion</name><argument_list>(<argument><expr><name><name>_redis_version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>_redis_version</name><operator>.</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>_redis_version</name><operator>.</operator><name>patch</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
