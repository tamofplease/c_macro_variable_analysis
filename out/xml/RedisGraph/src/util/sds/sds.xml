<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/sds/sds.c"><comment type="line">// clang-format off</comment>

<comment type="block">/* SDSLib 2.0 -- A C dynamic strings library
 *
 * Copyright (c) 2006-2015, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * Copyright (c) 2015, Oran Agra
 * Copyright (c) 2015, Redis Labs, Inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdsalloc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SDS_NOINIT</name> <init>= <expr><literal type="string">"SDS_NOINIT"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sdsHdrSize</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch<condition>(<expr><name>type</name><operator>&amp;</operator><name>SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SDS_TYPE_5</name></expr>:</case>
            <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr5</name></expr></argument>)</argument_list></sizeof></expr>;</return>
        <case>case <expr><name>SDS_TYPE_8</name></expr>:</case>
            <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr8</name></expr></argument>)</argument_list></sizeof></expr>;</return>
        <case>case <expr><name>SDS_TYPE_16</name></expr>:</case>
            <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr16</name></expr></argument>)</argument_list></sizeof></expr>;</return>
        <case>case <expr><name>SDS_TYPE_32</name></expr>:</case>
            <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr32</name></expr></argument>)</argument_list></sizeof></expr>;</return>
        <case>case <expr><name>SDS_TYPE_64</name></expr>:</case>
            <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sdshdr64</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name></type> <name>sdsReqType</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>string_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>string_size</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>SDS_TYPE_5</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>string_size</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>SDS_TYPE_8</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>string_size</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>SDS_TYPE_16</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LONG_MAX</name> <operator>==</operator> <name>LLONG_MAX</name><operator>)</operator></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>string_size</name> <operator>&lt;</operator> <literal type="number">1ll</literal><operator>&lt;&lt;</operator><literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>SDS_TYPE_32</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>SDS_TYPE_64</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><name>SDS_TYPE_32</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Create a new sds string with the content specified by the 'init' pointer
 * and 'initlen'.
 * If NULL is used for 'init' the string is initialized with zero bytes.
 * If SDS_NOINIT is used, the buffer is left uninitialized;
 *
 * The string is always null-termined (all the sds strings are, always) so
 * even if you create an sds string with:
 *
 * mystring = sdsnewlen("abc",3);
 *
 * You can print the string with printf() as there is an implicit \0 at the
 * end of the string. However the string is binary safe and can contain
 * \0 characters in the middle, as the length is stored in the sds header. */</comment>
<function><type><name>sds</name></type> <name>sdsnewlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>init</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>initlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><call><name>sdsReqType</name><argument_list>(<argument><expr><name>initlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Empty strings are usually created in order to append. Use type 8
     * since type 5 is not good at this. */</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SDS_TYPE_5</name> <operator>&amp;&amp;</operator> <name>initlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>SDS_TYPE_8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hdrlen</name> <init>= <expr><call><name>sdsHdrSize</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt> <comment type="block">/* flags pointer. */</comment>

    <expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name>s_malloc</name><argument_list>(<argument><expr><name>hdrlen</name><operator>+</operator><name>initlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>init</name><operator>==</operator><name>SDS_NOINIT</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdrlen</name><operator>+</operator><name>initlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>sh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>sh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SDS_TYPE_5</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name> <operator>|</operator> <operator>(</operator><name>initlen</name> <operator>&lt;&lt;</operator> <name>SDS_TYPE_BITS</name><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SDS_TYPE_8</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SDS_TYPE_16</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SDS_TYPE_32</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SDS_TYPE_64</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>
    <if_stmt><if>if <condition>(<expr><name>initlen</name> <operator>&amp;&amp;</operator> <name>init</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>init</name></expr></argument>, <argument><expr><name>initlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>initlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create an empty (zero length) sds string. Even in this case the string
 * always has an implicit null term. */</comment>
<function><type><name>sds</name></type> <name>sdsempty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create a new sds string starting from a null terminated C string. */</comment>
<function><type><name>sds</name></type> <name>sdsnew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>initlen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>init</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>init</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>initlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Duplicate an sds string. */</comment>
<function><type><name>sds</name></type> <name>sdsdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free an sds string. No operation is performed if 's' is NULL. */</comment>
<function><type><name>void</name></type> <name>sdsfree</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>-</operator><call><name>sdsHdrSize</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Set the sds string length to the length as obtained with strlen(), so
 * considering as content only up to the first null term character.
 *
 * This function is useful when the sds string is hacked manually in some
 * way, like in the following example:
 *
 * s = sdsnew("foobar");
 * s[2] = '\0';
 * sdsupdatelen(s);
 * printf("%d\n", sdslen(s));
 *
 * The output will be "2", but if we comment out the call to sdsupdatelen()
 * the output will be "6" as the string was modified but the logical length
 * remains 6 bytes. */</comment>
<function><type><name>void</name></type> <name>sdsupdatelen</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>reallen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Modify an sds string in-place to make it empty (zero length).
 * However all the existing buffer is not discarded but set as free space
 * so that next append operations will not require allocations up to the
 * number of bytes previously available. */</comment>
<function><type><name>void</name></type> <name>sdsclear</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Enlarge the free space at the end of the sds string so that the caller
 * is sure that after calling this function can overwrite up to addlen
 * bytes after the end of the string, plus one more byte for nul term.
 *
 * Note: this does not change the *length* of the sds string as returned
 * by sdslen(), but only the free buffer space we have. */</comment>
<function><type><name>sds</name></type> <name>sdsMakeRoomFor</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>addlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sh</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newsh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>avail</name> <init>= <expr><call><name>sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>newlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>oldtype</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDS_TYPE_MASK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hdrlen</name></decl>;</decl_stmt>

    <comment type="block">/* Return ASAP if there is enough space left. */</comment>
    <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&gt;=</operator> <name>addlen</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>-</operator><call><name>sdsHdrSize</name><argument_list>(<argument><expr><name>oldtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>len</name><operator>+</operator><name>addlen</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&lt;</operator> <name>SDS_MAX_PREALLOC</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>newlen</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>newlen</name> <operator>+=</operator> <name>SDS_MAX_PREALLOC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>sdsReqType</name><argument_list>(<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Don't use type 5: the user is appending to the string and type 5 is
     * not able to remember empty space, so sdsMakeRoomFor() must be called
     * at every appending operation. */</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SDS_TYPE_5</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>SDS_TYPE_8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <call><name>sdsHdrSize</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>oldtype</name><operator>==</operator><name>type</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>newsh</name> <operator>=</operator> <call><name>s_realloc</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><name>hdrlen</name><operator>+</operator><name>newlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>newsh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* Since the header size changes, need to move the string forward,
         * and can't use realloc */</comment>
        <expr_stmt><expr><name>newsh</name> <operator>=</operator> <call><name>s_malloc</name><argument_list>(<argument><expr><name>hdrlen</name><operator>+</operator><name>newlen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>newsh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sdssetalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Reallocate the sds string so that it has no free space at the end. The
 * contained string remains not altered, but next concatenation operations
 * will require a reallocation.
 *
 * After the call, the passed sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call. */</comment>
<function><type><name>sds</name></type> <name>sdsRemoveFreeSpace</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sh</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newsh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>oldtype</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>SDS_TYPE_MASK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hdrlen</name></decl>, <decl><type ref="prev"/><name>oldhdrlen</name> <init>= <expr><call><name>sdsHdrSize</name><argument_list>(<argument><expr><name>oldtype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sh</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>-</operator><name>oldhdrlen</name></expr>;</expr_stmt>

    <comment type="block">/* Check what would be the minimum SDS header that is just good enough to
     * fit this string. */</comment>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>sdsReqType</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <call><name>sdsHdrSize</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the type is the same, or at least a large enough type is still
     * required, we just realloc(), letting the allocator to do the copy
     * only if really needed. Otherwise if the change is huge, we manually
     * reallocate the string to use the different header type. */</comment>
    <if_stmt><if>if <condition>(<expr><name>oldtype</name><operator>==</operator><name>type</name> <operator>||</operator> <name>type</name> <operator>&gt;</operator> <name>SDS_TYPE_8</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>newsh</name> <operator>=</operator> <call><name>s_realloc</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><name>oldhdrlen</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>newsh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>oldhdrlen</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>newsh</name> <operator>=</operator> <call><name>s_malloc</name><argument_list>(<argument><expr><name>hdrlen</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>newsh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>newsh</name><operator>+</operator><name>hdrlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sdssetalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the total size of the allocation of the specified sds string,
 * including:
 * 1) The sds header before the pointer.
 * 2) The string.
 * 3) The free buffer at the end if any.
 * 4) The implicit null term.
 */</comment>
<function><type><name>size_t</name></type> <name>sdsAllocSize</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name> <init>= <expr><call><name>sdsalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>sdsHdrSize</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><name>alloc</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the pointer of the actual SDS allocation (normally SDS strings
 * are referenced by the start of the string buffer). */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>sdsAllocPtr</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>s</name><operator>-</operator><call><name>sdsHdrSize</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Increment the sds length and decrements the left free space at the
 * end of the string according to 'incr'. Also set the null term
 * in the new end of the string.
 *
 * This function is used in order to fix the string length after the
 * user calls sdsMakeRoomFor(), writes something after the end of
 * the current string, and finally needs to set the new length.
 *
 * Note: it is possible to use a negative increment in order to
 * right-trim the string.
 *
 * Usage example:
 *
 * Using sdsIncrLen() and sdsMakeRoomFor() it is possible to mount the
 * following schema, to cat bytes coming from the kernel to the end of an
 * sds string without copying into an intermediate buffer:
 *
 * oldlen = sdslen(s);
 * s = sdsMakeRoomFor(s, BUFFER_SIZE);
 * nread = read(fd, s+oldlen, BUFFER_SIZE);
 * ... check for nread &lt;= 0 and handle it ...
 * sdsIncrLen(s, nread);
 */</comment>
<function><type><name>void</name></type> <name>sdsIncrLen</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>incr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name> <init>= <expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <switch>switch<condition>(<expr><name>flags</name><operator>&amp;</operator><name>SDS_TYPE_MASK</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SDS_TYPE_5</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>oldlen</name> <init>= <expr><call><name>SDS_TYPE_5_LEN</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>oldlen</name><operator>+</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>oldlen</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <name>SDS_TYPE_5</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>oldlen</name><operator>+</operator><name>incr</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>SDS_TYPE_BITS</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>oldlen</name><operator>+</operator><name>incr</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SDS_TYPE_8</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name><operator>-</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name>incr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>incr</name><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SDS_TYPE_16</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name><operator>-</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name>incr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>incr</name><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SDS_TYPE_32</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name><operator>-</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>incr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>incr</name><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SDS_TYPE_64</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SDS_HDR_VAR</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>incr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>alloc</name></name><operator>-</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>incr</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>incr</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>-</operator><name>incr</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>incr</name><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* Just to avoid compilation warnings. */</comment>
    </block_content>}</block></switch>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Grow the sds to have the specified length. Bytes that were not part of
 * the original length of the sds will be set to zero.
 *
 * if the specified length is smaller than the current length, no operation
 * is performed. */</comment>
<function><type><name>sds</name></type> <name>sdsgrowzero</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>curlen</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><name>curlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Make sure added region doesn't contain garbage */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>curlen</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>len</name><operator>-</operator><name>curlen</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* also set trailing \0 byte */</comment>
    <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Append the specified binary-safe string pointed by 't' of 'len' bytes to the
 * end of the specified sds string 's'.
 *
 * After the call, the passed sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call. */</comment>
<function><type><name>sds</name></type> <name>sdscatlen</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>curlen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>curlen</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>curlen</name><operator>+</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>curlen</name><operator>+</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Append the specified null termianted C string to the sds string 's'.
 *
 * After the call, the passed sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call. */</comment>
<function><type><name>sds</name></type> <name>sdscat</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Append the specified sds 't' to the existing sds 's'.
 *
 * After the call, the modified sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call. */</comment>
<function><type><name>sds</name></type> <name>sdscatsds</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sds</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Destructively modify the sds string 's' to hold the specified binary
 * safe string pointed by 't' of length 'len' bytes. */</comment>
<function><type><name>sds</name></type> <name>sdscpylen</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sdsalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like sdscpylen() but 't' must be a null-termined string so that the length
 * of the string is obtained with strlen(). */</comment>
<function><type><name>sds</name></type> <name>sdscpy</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sdscpylen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Helper for sdscatlonglong() doing the actual number -&gt; string
 * conversion. 's' must point to a string with room for at least
 * SDS_LLSTR_SIZE bytes.
 *
 * The function returns the length of the null-terminated string
 * representation stored at 's'. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDS_LLSTR_SIZE</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>sdsll2str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>aux</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

    <comment type="block">/* Generate the string representation, this method produces
     * an reversed string. */</comment>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>value</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal><operator>+</operator><operator>(</operator><name>v</name><operator>%</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block> while<condition>(<expr><name>v</name></expr>)</condition>;</do>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Compute length and add null term. */</comment>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <name>p</name><operator>-</operator><name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="block">/* Reverse the string. */</comment>
    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>s</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>aux</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Identical sdsll2str(), but for unsigned long long type. */</comment>
<function><type><name>int</name></type> <name>sdsull2str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>aux</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

    <comment type="block">/* Generate the string representation, this method produces
     * an reversed string. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal><operator>+</operator><operator>(</operator><name>v</name><operator>%</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block> while<condition>(<expr><name>v</name></expr>)</condition>;</do>

    <comment type="block">/* Compute length and add null term. */</comment>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <name>p</name><operator>-</operator><name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="block">/* Reverse the string. */</comment>
    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>s</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>aux</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create an sds string from a long long value. It is much faster than:
 *
 * sdscatprintf(sdsempty(),"%lld\n", value);
 */</comment>
<function><type><name>sds</name></type> <name>sdsfromlonglong</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>SDS_LLSTR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>sdsll2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>sdsnewlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like sdscatprintf() but gets va_list instead of being variadic. */</comment>
<function><type><name>sds</name></type> <name>sdscatvprintf</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>cpy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>staticbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>staticbuf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* We try to start using a static buffer for speed.
     * If not possible we revert to heap allocation. */</comment>
    <if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>staticbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>s_malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>buflen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>staticbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Try with buffers two times bigger every time we fail to
     * fit the string in the current buffer size. */</comment>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cpy</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>buflen</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>staticbuf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>buflen</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>s_malloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></while>

    <comment type="block">/* Finally concat the obtained string to the SDS string and return it. */</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>staticbuf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Append to the sds string 's' a string obtained using printf-alike format
 * specifier.
 *
 * After the call, the modified sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call.
 *
 * Example:
 *
 * s = sdsnew("Sum is: ");
 * s = sdscatprintf(s,"%d+%d = %d",a,b,a+b).
 *
 * Often you need to create a string from scratch with the printf-alike
 * format. When this is the need, just use sdsempty() as the target string:
 *
 * s = sdscatprintf(sdsempty(), "... your format ...", args);
 */</comment>
<function><type><name>sds</name></type> <name>sdscatprintf</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sdscatvprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function is similar to sdscatprintf, but much faster as it does
 * not rely on sprintf() family functions implemented by the libc that
 * are often very slow. Moreover directly handling the sds string as
 * new data is concatenated provides a performance improvement.
 *
 * However this function only handles an incompatible subset of printf-alike
 * format specifiers:
 *
 * %s - C String
 * %S - SDS string
 * %i - signed int
 * %I - 64 bit signed integer (long long, int64_t)
 * %u - unsigned int
 * %U - 64 bit unsigned integer (unsigned long long, uint64_t)
 * %% - Verbatim "%" character.
 */</comment>
<function><type><name>sds</name></type> <name>sdscatfmt</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>initlen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>    <comment type="block">/* Next format specifier byte to process. */</comment>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>initlen</name></expr>;</expr_stmt> <comment type="block">/* Position of the next byte to write to dest str. */</comment>
    <while>while<condition>(<expr><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>unum</name></decl>;</decl_stmt>

        <comment type="block">/* Make sure there is always space for at least 1 char. */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <switch>switch<condition>(<expr><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'%'</literal></expr>:</case>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>f</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
            <switch>switch<condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'s'</literal></expr>:</case>
            <case>case <expr><literal type="char">'S'</literal></expr>:</case>
                <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>next</name> <operator>==</operator> <literal type="char">'s'</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>str</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'i'</literal></expr>:</case>
            <case>case <expr><literal type="char">'I'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>num</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>ap</argument>,<argument>long long</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>SDS_LLSTR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>sdsll2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><literal type="char">'u'</literal></expr>:</case>
            <case>case <expr><literal type="char">'U'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>unum</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>ap</argument>,<argument>unsigned int</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>unum</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>ap</argument>,<argument>unsigned long long</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>SDS_LLSTR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>sdsull2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>unum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>sdsavail</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
                </block_content>}</block>
                <break>break;</break>
            <default>default:</default> <comment type="block">/* Handle %% and generally %&lt;unknown&gt;. */</comment>
                <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>f</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsinclen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Add null-term */</comment>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Remove the part of the string from left and from right composed just of
 * contiguous characters found in 'cset', that is a null terminted C string.
 *
 * After the call, the modified sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call.
 *
 * Example:
 *
 * s = sdsnew("AA...AA.a.aa.aHelloWorld     :::");
 * s = sdstrim(s,"Aa. :");
 * printf("%s\n", s);
 *
 * Output will be just "Hello World".
 */</comment>
<function><type><name>sds</name></type> <name>sdstrim</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cset</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>end</name> <operator>=</operator> <name>s</name><operator>+</operator><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>sp</name> <operator>&lt;=</operator> <name>end</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cset</name></expr></argument>, <argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <while>while<condition>(<expr><name>ep</name> <operator>&gt;</operator> <name>sp</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cset</name></expr></argument>, <argument><expr><operator>*</operator><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ep</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sp</name> <operator>&gt;</operator> <name>ep</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>ep</name><operator>-</operator><name>sp</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Turn the string into a smaller (or equal) string containing only the
 * substring specified by the 'start' and 'end' indexes.
 *
 * start and end can be negative, where -1 means the last character of the
 * string, -2 the penultimate character, and so forth.
 *
 * The interval is inclusive, so the start and end characters will be part
 * of the resulting string.
 *
 * The string is modified in-place.
 *
 * Example:
 *
 * s = sdsnew("Hello World");
 * sdsrange(s,1,-1); =&gt; "ello World"
 */</comment>
<function><type><name>void</name></type> <name>sdsrange</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>start</name> <operator>=</operator> <name>len</name><operator>+</operator><name>start</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>len</name><operator>+</operator><name>end</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>newlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>start</name> <operator>&gt;</operator> <name>end</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>end</name><operator>-</operator><name>start</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>newlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>start</name> <operator>&gt;</operator> <name>end</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>end</name><operator>-</operator><name>start</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&amp;&amp;</operator> <name>newlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><name>start</name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>newlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdssetlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Apply tolower() to every character of the sds string 's'. */</comment>
<function><type><name>void</name></type> <name>sdstolower</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* Apply toupper() to every character of the sds string 's'. */</comment>
<function><type><name>void</name></type> <name>sdstoupper</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* Compare two sds strings s1 and s2 with memcmp().
 *
 * Return value:
 *
 *     positive if s1 &gt; s2.
 *     negative if s1 &lt; s2.
 *     0 if s1 and s2 are exactly the same binary string.
 *
 * If two strings share exactly the same prefix, but one of the two has
 * additional characters, the longer string is considered to be greater than
 * the smaller one. */</comment>
<function><type><name>int</name></type> <name>sdscmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>sds</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sds</name></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>, <decl><type ref="prev"/><name>minlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>l1</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>sdslen</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>minlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>l1</name> <operator>&lt;</operator> <name>l2</name><operator>)</operator></expr> ?</condition><then> <expr><name>l1</name></expr> </then><else>: <expr><name>l2</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>,<argument><expr><name>minlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><name>l1</name><operator>&gt;</operator><name>l2</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><operator>(</operator><ternary><condition><expr><name>l1</name><operator>&lt;</operator><name>l2</name></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Split 's' with separator in 'sep'. An array
 * of sds strings is returned. *count will be set
 * by reference to the number of tokens returned.
 *
 * On out of memory, zero length string, zero length
 * separator, NULL is returned.
 *
 * Note that 'sep' is able to split a string using
 * a multi-character separator. For example
 * sdssplit("foo_-_bar","_-_"); will return two
 * elements "foo" and "bar".
 *
 * This version of the function is binary-safe but
 * requires length arguments. sdssplit() is just the
 * same function but for zero-terminated strings.
 */</comment>
<function><type><name>sds</name> <modifier>*</modifier></type><name>sdssplitlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seplen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>elements</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slots</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>tokens</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>seplen</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>s_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>len</name><operator>-</operator><operator>(</operator><name>seplen</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="block">/* make sure there is room for the next element and the final one */</comment>
        <if_stmt><if>if <condition>(<expr><name>slots</name> <operator>&lt;</operator> <name>elements</name><operator>+</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sds</name> <modifier>*</modifier></type><name>newtokens</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>slots</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>newtokens</name> <operator>=</operator> <call><name>s_realloc</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sds</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>newtokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>tokens</name> <operator>=</operator> <name>newtokens</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* search the separator */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>seplen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>s</name><operator>+</operator><name>j</name><operator>)</operator> <operator>==</operator> <name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>j</name></expr></argument>,<argument><expr><name>sep</name></expr></argument>,<argument><expr><name>seplen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>tokens</name><index>[<expr><name>elements</name></expr>]</index></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>start</name></expr></argument>,<argument><expr><name>j</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>elements</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>elements</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name>j</name><operator>+</operator><name>seplen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name><operator>+</operator><name>seplen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* skip the separator */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Add the final element. We are sure there is room in the tokens array. */</comment>
    <expr_stmt><expr><name><name>tokens</name><index>[<expr><name>elements</name></expr>]</index></name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>start</name></expr></argument>,<argument><expr><name>len</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>elements</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>elements</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>elements</name></expr>;</expr_stmt>
    <return>return <expr><name>tokens</name></expr>;</return>

<label><name>cleanup</name>:</label>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elements</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* Free the result returned by sdssplitlen(), or do nothing if 'tokens' is NULL. */</comment>
<function><type><name>void</name></type> <name>sdsfreesplitres</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tokens</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <while>while<condition>(<expr><name>count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Append to the sds string "s" an escaped string representation where
 * all the non-printable characters (tested with isprint()) are turned into
 * escapes in the form "\n\r\a...." or "\x&lt;hex-number&gt;".
 *
 * After the call, the modified sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call. */</comment>
<function><type><name>sds</name></type> <name>sdscatrepr</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\""</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
        <switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
        <case>case <expr><literal type="char">'"'</literal></expr>:</case>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\%c"</literal></expr></argument>,<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\n"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\r"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\t"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'\a'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\a"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'\b'</literal></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\b"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\\x%02x"</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><call><name>sdscatlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"\""</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Helper function for sdssplitargs() that returns non zero if 'c'
 * is a valid hex digit. */</comment>
<function><type><name>int</name></type> <name>is_hex_digit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator>
           <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Helper function for sdssplitargs() that converts a hex digit into an
 * integer from 0 to 15 */</comment>
<function><type><name>int</name></type> <name>hex_digit_to_int</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'0'</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
    <case>case <expr><literal type="char">'1'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
    <case>case <expr><literal type="char">'2'</literal></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>
    <case>case <expr><literal type="char">'3'</literal></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>
    <case>case <expr><literal type="char">'4'</literal></expr>:</case> <return>return <expr><literal type="number">4</literal></expr>;</return>
    <case>case <expr><literal type="char">'5'</literal></expr>:</case> <return>return <expr><literal type="number">5</literal></expr>;</return>
    <case>case <expr><literal type="char">'6'</literal></expr>:</case> <return>return <expr><literal type="number">6</literal></expr>;</return>
    <case>case <expr><literal type="char">'7'</literal></expr>:</case> <return>return <expr><literal type="number">7</literal></expr>;</return>
    <case>case <expr><literal type="char">'8'</literal></expr>:</case> <return>return <expr><literal type="number">8</literal></expr>;</return>
    <case>case <expr><literal type="char">'9'</literal></expr>:</case> <return>return <expr><literal type="number">9</literal></expr>;</return>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case> <return>return <expr><literal type="number">10</literal></expr>;</return>
    <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <return>return <expr><literal type="number">11</literal></expr>;</return>
    <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <return>return <expr><literal type="number">12</literal></expr>;</return>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <return>return <expr><literal type="number">13</literal></expr>;</return>
    <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case> <return>return <expr><literal type="number">14</literal></expr>;</return>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case> <return>return <expr><literal type="number">15</literal></expr>;</return>
    <default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Split a line into arguments, where every argument can be in the
 * following programming-language REPL-alike form:
 *
 * foo bar "newline are supported\n" and "\xff\x00otherstuff"
 *
 * The number of arguments is stored into *argc, and an array
 * of sds is returned.
 *
 * The caller should free the resulting array of sds strings with
 * sdsfreesplitres().
 *
 * Note that sdscatrepr() is able to convert back a string into
 * a quoted string in the same format sdssplitargs() is able to parse.
 *
 * The function returns the allocated tokens on success, even when the
 * input string is empty, or NULL if the input contains unbalanced
 * quotes or closed quotes followed by non space characters
 * as in: "foo"bar or "foo'
 */</comment>
<function><type><name>sds</name> <modifier>*</modifier></type><name>sdssplitargs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vector</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* skip blanks */</comment>
        <while>while<condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* get a token */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>inq</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* set to 1 if we are in "quotes" */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>insq</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* set to 1 if we are in 'single quotes' */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>done</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sdsempty</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <while>while<condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>inq</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator>
                                             <call><name>is_hex_digit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                                             <call><name>is_hex_digit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>byte</name></decl>;</decl_stmt>

                        <expr_stmt><expr><name>byte</name> <operator>=</operator> <operator>(</operator><call><name>hex_digit_to_int</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">16</literal><operator>)</operator><operator>+</operator>
                                <call><name>hex_digit_to_int</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>byte</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

                        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
                        <switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt> <break>break;</break>
                        <default>default:</default> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt> <break>break;</break>
                        </block_content>}</block></switch>
                        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
                        <comment type="block">/* closing quote must be followed by a space or
                         * nothing at all. */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>done</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
                        <comment type="block">/* unterminated quotes */</comment>
                        <goto>goto <name>err</name>;</goto>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>insq</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><literal type="string">"'"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
                        <comment type="block">/* closing quote must be followed by a space or
                         * nothing at all. */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>done</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
                        <comment type="block">/* unterminated quotes */</comment>
                        <goto>goto <name>err</name>;</goto>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <switch>switch<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="char">' '</literal></expr>:</case>
                    <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'\0'</literal></expr>:</case>
                        <expr_stmt><expr><name>done</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'"'</literal></expr>:</case>
                        <expr_stmt><expr><name>inq</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'\''</literal></expr>:</case>
                        <expr_stmt><expr><name>insq</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>current</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></while>
            <comment type="block">/* add the token to the vector */</comment>
            <expr_stmt><expr><name>vector</name> <operator>=</operator> <call><name>s_realloc</name><argument_list>(<argument><expr><name>vector</name></expr></argument>,<argument><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vector</name><index>[<expr><operator>*</operator><name>argc</name></expr>]</index></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Even on empty input string return something not NULL. */</comment>
            <if_stmt><if>if <condition>(<expr><name>vector</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vector</name> <operator>=</operator> <call><name>s_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>vector</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

<label><name>err</name>:</label>
    <while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>argc</name><operator>)</operator><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><operator>*</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><name>vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Modify the string substituting all the occurrences of the set of
 * characters specified in the 'from' string to the corresponding character
 * in the 'to' array.
 *
 * For instance: sdsmapchars(mystring, "ho", "01", 2)
 * will have the effect of turning the string "hello" into "0ell1".
 *
 * The function returns the sds string pointer, that is always the same
 * as the input pointer since no resize is needed. */</comment>
<function><type><name>sds</name></type> <name>sdsmapchars</name><parameter_list>(<parameter><decl><type><name>sds</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>setlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>setlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Join an array of C strings using the specified separator (also a C string).
 * Returns the result as an sds string. */</comment>
<function><type><name>sds</name></type> <name>sdsjoin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>join</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>join</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>argc</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>join</name></expr></argument>,<argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>join</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Like sdsjoin, but joins an array of SDS strings. */</comment>
<function><type><name>sds</name></type> <name>sdsjoinsds</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seplen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sds</name></type> <name>join</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>sdscatsds</name><argument_list>(<argument><expr><name>join</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>argc</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>join</name> <operator>=</operator> <call><name>sdscatlen</name><argument_list>(<argument><expr><name>join</name></expr></argument>,<argument><expr><name>sep</name></expr></argument>,<argument><expr><name>seplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>join</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wrappers to the allocators used by SDS. Note that SDS will actually
 * just use the macros defined into sdsalloc.h in order to avoid to pay
 * the overhead of function calls. Here we define these wrappers only for
 * the programs SDS is linked to, if they want to touch the SDS internals
 * even if they use a different allocator. */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>sds_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>s_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>sds_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>s_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>sds_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>s_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SDS_TEST_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"testhelp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"limits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(x)</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>sdsTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>
        <decl_stmt><decl><type><name>sds</name></type> <name>x</name> <init>= <expr><call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"Create a string and obtain the length"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">3</literal> &amp;&amp; memcmp(x,<literal type="string">"foo\0"</literal>,<literal type="number">4</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"Create a string with specified length"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">2</literal> &amp;&amp; memcmp(x,<literal type="string">"fo\0"</literal>,<literal type="number">3</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdscat</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"Strings concatenation"</literal></expr></argument>,
            <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"fobar\0"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdscpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscpy() against an originally longer string"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">1</literal> &amp;&amp; memcmp(x,<literal type="string">"a\0"</literal>,<literal type="number">2</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdscpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscpy() against an originally shorter string"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">33</literal> &amp;&amp;
            memcmp(x,<literal type="string">"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0"</literal>,<literal type="number">33</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscatprintf() seems working in the base case"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">3</literal> &amp;&amp; memcmp(x,<literal type="string">"123\0"</literal>,<literal type="number">4</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">"Hello %s World %I,%I--"</literal></expr></argument>, <argument><expr><literal type="string">"Hi!"</literal></expr></argument>, <argument><expr><name>LLONG_MIN</name></expr></argument>,<argument><expr><name>LLONG_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscatfmt() seems working in the base case"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">60</literal> &amp;&amp;
            memcmp(x,<literal type="string">"--Hello Hi! World -9223372036854775808,"</literal>
                     <literal type="string">"9223372036854775807--"</literal>,<literal type="number">60</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdscatfmt</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">"%u,%U--"</literal></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><name>ULLONG_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscatfmt() seems working with unsigned numbers"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">35</literal> &amp;&amp;
            memcmp(x,<literal type="string">"--4294967295,18446744073709551615--"</literal>,<literal type="number">35</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" x "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdstrim</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">" x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdstrim() works when all chars match"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">" x "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdstrim</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdstrim() works when a single char remains"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">1</literal> &amp;&amp; x[<literal type="number">0</literal>] == <literal type="char">'x'</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"xxciaoyyy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdstrim</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="string">"xy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdstrim() correctly trims characters"</literal></argument>,
            <argument>sdslen(x) == <literal type="number">4</literal> &amp;&amp; memcmp(x,<literal type="string">"ciao\0"</literal>,<literal type="number">5</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdsrange(...,1,1)"</literal></argument>,
            <argument>sdslen(y) == <literal type="number">1</literal> &amp;&amp; memcmp(y,<literal type="string">"i\0"</literal>,<literal type="number">2</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdsrange(...,1,-1)"</literal></argument>,
            <argument>sdslen(y) == <literal type="number">3</literal> &amp;&amp; memcmp(y,<literal type="string">"iao\0"</literal>,<literal type="number">4</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdsrange(...,-2,-1)"</literal></argument>,
            <argument>sdslen(y) == <literal type="number">2</literal> &amp;&amp; memcmp(y,<literal type="string">"ao\0"</literal>,<literal type="number">3</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdsrange(...,2,1)"</literal></argument>,
            <argument>sdslen(y) == <literal type="number">0</literal> &amp;&amp; memcmp(y,<literal type="string">"\0"</literal>,<literal type="number">1</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdsrange(...,1,100)"</literal></argument>,
            <argument>sdslen(y) == <literal type="number">3</literal> &amp;&amp; memcmp(y,<literal type="string">"iao\0"</literal>,<literal type="number">4</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsdup</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsrange</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdsrange(...,100,100)"</literal></argument>,
            <argument>sdslen(y) == <literal type="number">0</literal> &amp;&amp; memcmp(y,<literal type="string">"\0"</literal>,<literal type="number">1</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"foa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscmp(foo,foa)"</literal></argument>, <argument>sdscmp(x,y) &gt; <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscmp(bar,bar)"</literal></argument>, <argument>sdscmp(x,y) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"aar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscmp(bar,bar)"</literal></argument>, <argument>sdscmp(x,y) &lt; <literal type="number">0</literal></argument>)</argument_list></macro>

        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnewlen</name><argument_list>(<argument><expr><literal type="string">"\a\n\0foo\r"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sdscatrepr</name><argument_list>(<argument><expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>test_cond</name><argument_list>(<argument><literal type="string">"sdscatrepr(...data...)"</literal></argument>,
            <argument>memcmp(y,<literal type="string">"\"\\a\\n\\x00foo\\r\""</literal>,<literal type="number">15</literal>) == <literal type="number">0</literal></argument>)</argument_list></macro>

        <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oldfree</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsnew</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"sdsnew() free/len buffers"</literal></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Run the test a few times in order to hit the first two
             * SDS header types. */</comment>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>oldlen</name> <init>= <expr><call><name>sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sdsMakeRoomFor</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>x</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><name>SDS_TYPE_MASK</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"sdsMakeRoomFor() len"</literal></expr></argument>, <argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>oldlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>SDS_TYPE_5</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"sdsMakeRoomFor() free"</literal></expr></argument>, <argument><expr><call><name>sdsavail</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>oldfree</name> <operator>=</operator> <call><name>sdsavail</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <name>x</name><operator>+</operator><name>oldlen</name></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal><operator>+</operator><name>j</name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>sdsIncrLen</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"sdsMakeRoomFor() content"</literal></expr></argument>,
                <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"0ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>test_cond</name><argument_list>(<argument><expr><literal type="string">"sdsMakeRoomFor() final length"</literal></expr></argument>,<argument><expr><call><name>sdslen</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
    <macro><name>test_report</name><argument_list>()</argument_list></macro>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDS_TEST_MAIN</name></cpp:ifdef>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sdsTest</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
