<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/range/numeric_range.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"numeric_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_shared.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function><type><name>NumericRange</name> <modifier>*</modifier></type><name>NumericRange_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NumericRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NumericRange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <operator>-</operator><name>INFINITY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>include_max</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<return>return <expr><name>range</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>NumericRange_IsValid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NumericRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>range</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name> <operator>&amp;&amp;</operator> <name><name>range</name><operator>-&gt;</operator><name>include_max</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// X &gt;= y AND X &lt;= z</comment>
		<return>return <expr><operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>&lt;=</operator> <name><name>range</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// X &gt;= y AND X &lt; z</comment>
		<comment type="line">// X &gt; y AND X &lt;= z</comment>
		<comment type="line">// X &gt; y AND X &lt; z</comment>
		<return>return <expr><operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>NumericRange_ContainsValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NumericRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>range</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Make sure v is &lt;= max.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>include_max</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>v</name> <operator>&gt;</operator> <name><name>range</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>v</name> <operator>&gt;=</operator> <name><name>range</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Make sure v &gt;= min.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>v</name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>v</name> <operator>&lt;=</operator> <name><name>range</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>NumericRange_TightenRange</name><parameter_list>(<parameter><decl><type><name>NumericRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>range</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<switch>switch<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>OP_LT</name></expr>:</case>    <comment type="line">// &lt;</comment>
		<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>&gt;=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>include_max</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>OP_LE</name></expr>:</case>    <comment type="line">// &lt;=</comment>
		<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>&gt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>include_max</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>OP_GT</name></expr>:</case>    <comment type="line">// &gt;</comment>
		<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>&lt;=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>OP_GE</name></expr>:</case>    <comment type="line">// &gt;=</comment>
		<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>OP_EQUAL</name></expr>:</case>  <comment type="line">// =</comment>
		<comment type="line">// Make sure v is within range.</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NumericRange_ContainsValue</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>include_max</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"operation not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<comment type="line">// See if range is still valid.</comment>
	<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <call><name>NumericRange_IsValid</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>NumericRange_ToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NumericRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>range</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <operator>-</operator><name>INFINITY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"-inf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>==</operator> <operator>-</operator><name>INFINITY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"inf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>include_max</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>NumericRange_Free</name><parameter_list>(<parameter><decl><type><name>NumericRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>range</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
