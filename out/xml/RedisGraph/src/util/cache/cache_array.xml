<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/cache/cache_array.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>

<function><type><name>CacheEntry</name> <modifier>*</modifier></type><name>CacheArray_FindMinLRU</name><parameter_list>(<parameter><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>cache_arr</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cache_arr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>min_LRU_entry</name> <init>= <expr><name>cache_arr</name></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cap</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>current_entry</name> <init>= <expr><name>cache_arr</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>current_entry</name><operator>-&gt;</operator><name>LRU</name></name> <operator>&lt;</operator> <name><name>min_LRU_entry</name><operator>-&gt;</operator><name>LRU</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>min_LRU_entry</name> <operator>=</operator> <name>current_entry</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>min_LRU_entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CacheEntry</name> <modifier>*</modifier></type><name>CacheArray_PopulateEntry</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>counter</name></decl></parameter>, <parameter><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
  									<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name>   <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>LRU</name></name>   <operator>=</operator> <name>counter</name></expr>;</expr_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CacheArray_CleanEntry</name><parameter_list>(<parameter><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>CacheEntryFreeFunc</name></type> <name>free_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>free_entry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free_entry</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>LRU</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
