<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/cache/cache.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>CacheEntry</name> <modifier>*</modifier></type><name>_CacheEvictLRU</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>CacheArray_FindMinLRU</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Remove evicted element from the rax.</comment>
	<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>lookup</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name>  <name>char</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
	  <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CacheArray_CleanEntry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>free_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_Cache_SetValue</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
  		<parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* in case that another working thread had already inserted the item to the
	 * cache, no need to re-insert it */</comment>
	<decl_stmt><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>lookup</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// key is not in cache! test to see if cache is full?</comment>
	<if_stmt><if>if<condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>cache</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* the cache is full, evict the least-recently-used element
		 * and reuse its space for the new element */</comment>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>_CacheEvictLRU</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// the array has space left in it, use the next available entry</comment>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>arr</name></name> <operator>+</operator> <name><name>cache</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// populate the entry</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><call><name>rm_strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CacheArray_PopulateEntry</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="line">// Add the new entry to the rax.</comment>
	<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>lookup</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Cache</name> <modifier>*</modifier></type><name>Cache_New</name><parameter_list>(<parameter><decl><type><name>uint</name></type> <name>cap</name></decl></parameter>, <parameter><decl><type><name>CacheEntryFreeFunc</name></type> <name>freeFunc</name></decl></parameter>, <parameter><decl><type><name>CacheEntryCopyFunc</name></type> <name>copyFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>copyFunc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name>     <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cap</name></name>       <operator>=</operator> <name>cap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>lookup</name></name>    <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>       <comment type="line">// Instantiate key entry mapping.</comment>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>counter</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>             <comment type="line">// Initialize counter to zero.</comment>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>copy_item</name></name> <operator>=</operator> <name>copyFunc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>free_item</name></name> <operator>=</operator> <name>freeFunc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <call><name>rm_calloc</name><argument_list>(<argument><expr><name>cap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CacheEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Array of cached values.</comment>

	<comment type="line">// Initialize the read-write lock to protect access to the cache.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>_cache_rwlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Cache_GetValue</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>_cache_rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>lookup</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>entry</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* element is now the most recently used; update its LRU
	 * note that multiple threads can be here simultaneously */</comment>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>LRU</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>counter</name></name></expr>;</expr_stmt>

	<comment type="line">// return a copy of element</comment>
	<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name><name>cache</name><operator>-&gt;</operator><name>copy_item</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>_cache_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Cache_SetValue</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Acquire WRITE lock</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>_cache_rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Insert the value to the cache.</comment>
	<expr_stmt><expr><call><name>_Cache_SetValue</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>_cache_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Cache_SetGetValue</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value_to_return</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// acquire WRITE lock</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>_cache_rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// return true if value was added, false if value already in cache</comment>
	<if_stmt><if>if<condition>(<expr><call><name>_Cache_SetValue</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// return a copy of original value</comment>
		<expr_stmt><expr><name>value_to_return</name> <operator>=</operator> <call><name><name>cache</name><operator>-&gt;</operator><name>copy_item</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>_cache_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>value_to_return</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Cache_Free</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cache</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// free cache entries</comment>
	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>CacheEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>arr</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>free_item</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>lookup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>_cache_rwlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
