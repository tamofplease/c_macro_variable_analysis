<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/rmalloc.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>REDIS_MODULE_TARGET</name></cpp:ifdef> <comment type="block">/* Set this when compiling your code as a module */</comment>

<comment type="line">// amount of memory allocated for currently executed query thread_local counter</comment>
<comment type="line">// it is possible to get into a situation where 'n_alloced' is negative</comment>
<comment type="line">// this is because we're wrongly assuming that the number of bytes requested for</comment>
<comment type="line">// an allocation is the actual number of bytes allocated</comment>
<comment type="line">// it is likely that the allocator allocated more space then required</comment>
<comment type="line">// in which case when the allocation is freed we will deduct</comment>
<comment type="line">// actual allocated size from 'n_alloced' which can lead to negative values if</comment>
<comment type="line">// bytes requested &lt; bytes allocated</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int64_t</name></type> <name>n_alloced</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>mem_capacity</name></decl>;</decl_stmt>  <comment type="line">// maximum memory consumption for thread</comment>
 
<comment type="line">// function pointers which hold the original address of RedisModule_Alloc*</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>RedisModule_Free_Orig</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>RedisModule_Alloc_Orig</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>RedisModule_Strdup_Orig</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>RedisModule_Realloc_Orig</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>RedisModule_Calloc_Orig</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>rm_reset_n_alloced</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>n_alloced</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// removes n_bytes from thread memory consumption</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_nmalloc_decrement</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>n_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>n_alloced</name> <operator>-=</operator> <name>n_bytes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// adds nbytes to thread memory consumption</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_nmalloc_increment</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>n_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>n_alloced</name> <operator>+=</operator> <name>n_bytes</name></expr>;</expr_stmt>
	<comment type="line">// check if capacity exceeded</comment>
	<if_stmt><if>if<condition>(<expr><name>n_alloced</name> <operator>&gt;</operator> <name>mem_capacity</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// set n_alloced to MIN to avoid further out of memory exceptions</comment>
		<comment type="line">// TODO: consider switching to double -inf</comment>
		<expr_stmt><expr><name>n_alloced</name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
		
		<comment type="line">// throw exception cause memory limit exceeded</comment>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Query's mem consumption exceeded capacity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>rm_alloc_with_capacity</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>RedisModule_Alloc_Orig</name><argument_list>(<argument><expr><name>n_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_nmalloc_increment</name><argument_list>(<argument><expr><name>n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>rm_realloc_with_capacity</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// remove bytes of original allocation</comment>
	<expr_stmt><expr><call><name>_nmalloc_decrement</name><argument_list>(<argument><expr><call><name>RedisModule_MallocSize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// track new allocation size</comment>
	<expr_stmt><expr><call><name>_nmalloc_increment</name><argument_list>(<argument><expr><name>n_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>RedisModule_Realloc_Orig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n_bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>rm_calloc_with_capacity</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n_elem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>RedisModule_Calloc_Orig</name><argument_list>(<argument><expr><name>n_elem</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_nmalloc_increment</name><argument_list>(<argument><expr><name>n_elem</name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>rm_strdup_with_capacity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str_copy</name> <init>= <expr><call><name>RedisModule_Strdup_Orig</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// use 'RedisModule_MallocSize' instead of strlen as it should be faster</comment>
	<comment type="line">// in determining allocation size</comment>
	<expr_stmt><expr><call><name>_nmalloc_increment</name><argument_list>(<argument><expr><call><name>RedisModule_MallocSize</name><argument_list>(<argument><expr><name>str_copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>str_copy</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rm_free_with_capacity</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_nmalloc_decrement</name><argument_list>(<argument><expr><call><name>RedisModule_MallocSize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_Free_Orig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rm_set_mem_capacity</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_capped</name> <init>= <expr><operator>(</operator><name>mem_capacity</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="line">// current allocator applies memory cap</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>should_cap</name> <init>= <expr><operator>(</operator><name>cap</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="line">// should we use a memory capped allocator</comment>
	
	<comment type="line">// The local enforced capacity should be set</comment>
	<comment type="line">// before resetting function pointers</comment>
	<comment type="line">// for instance if we're switching to capped allocator</comment>
	<comment type="line">// we want the memory cap to be set</comment>
	<expr_stmt><expr><name>mem_capacity</name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt> 
	<if_stmt><if>if<condition>(<expr><name>should_cap</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_capped</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// store the function pointer original values and change them</comment>
		<comment type="line">// to the capped version</comment>
		<expr_stmt><expr><name>RedisModule_Free_Orig</name>     <operator>=</operator>  <name>RedisModule_Free</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Alloc_Orig</name>    <operator>=</operator>  <name>RedisModule_Alloc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Calloc_Orig</name>   <operator>=</operator>  <name>RedisModule_Calloc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Strdup_Orig</name>   <operator>=</operator>  <name>RedisModule_Strdup</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Realloc_Orig</name>  <operator>=</operator>  <name>RedisModule_Realloc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Free</name>          <operator>=</operator>  <name>rm_free_with_capacity</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Alloc</name>         <operator>=</operator>  <name>rm_alloc_with_capacity</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Calloc</name>        <operator>=</operator>  <name>rm_calloc_with_capacity</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Strdup</name>        <operator>=</operator>  <name>rm_strdup_with_capacity</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Realloc</name>       <operator>=</operator>  <name>rm_realloc_with_capacity</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name>should_cap</name> <operator>&amp;&amp;</operator> <name>is_capped</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// restore all function pointers to their original values</comment>
		<expr_stmt><expr><name>RedisModule_Free</name>     <operator>=</operator>  <name>RedisModule_Free_Orig</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Alloc</name>    <operator>=</operator>  <name>RedisModule_Alloc_Orig</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Calloc</name>   <operator>=</operator>  <name>RedisModule_Calloc_Orig</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Strdup</name>   <operator>=</operator>  <name>RedisModule_Strdup_Orig</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>RedisModule_Realloc</name>  <operator>=</operator>  <name>RedisModule_Realloc_Orig</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type> <name>rm_reset_n_alloced</name><parameter_list>()</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rm_set_mem_capacity</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// REDIS_MODULE_TARGET</comment>

<comment type="block">/* Redefine the allocator functions to use the malloc family.
 * Only to be used when running module code from a non-Redis
 * context, such as unit tests. */</comment>
<function><type><name>void</name></type> <name>Alloc_Reset</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>RedisModule_Alloc</name> <operator>=</operator> <name>malloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>RedisModule_Realloc</name> <operator>=</operator> <name>realloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>RedisModule_Calloc</name> <operator>=</operator> <name>calloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>RedisModule_Free</name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>RedisModule_Strdup</name> <operator>=</operator> <name>strdup</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
