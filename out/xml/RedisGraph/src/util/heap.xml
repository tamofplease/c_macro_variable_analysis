<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/heap.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"heap.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CAPACITY</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<struct>struct <name>heap_s</name>
<block>{
    <comment type="block">/* size of array */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <comment type="block">/* items within heap */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**  user data */</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>heap_cmp</name></type> <name>cmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name><name>array</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>size_t</name></type> <name>Heap_sizeof</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>heap_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__child_left</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>idx</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__child_right</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>idx</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__parent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>idx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Heap_init</name>
<parameter_list>(
	<parameter><decl><type><name>heap_t</name><modifier>*</modifier></type> <name>h</name></decl></parameter>,
	<parameter><decl><type><name>heap_cmp</name></type> <name>cmp</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cmp</name></name> <operator>=</operator> <name>cmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>udata</name></name> <operator>=</operator> <name>udata</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>heap_t</name> <modifier>*</modifier></type><name>Heap_new</name>
<parameter_list>(
	<parameter><decl><type><name>heap_cmp</name></type> <name>cmp</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><call><name>Heap_sizeof</name><argument_list>(<argument><expr><name>DEFAULT_CAPACITY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>Heap_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>udata</name></expr></argument>, <argument><expr><name>DEFAULT_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Heap_free</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @return a new heap on success; NULL otherwise */</comment>
<function><type><specifier>static</specifier> <name>heap_t</name><modifier>*</modifier></type> <name>__ensurecapacity</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>h</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>Heap_sizeof</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__swap</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__pushup</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// 0 is the root node</comment>
    <while>while <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>idx</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>parent</name> <init>= <expr><call><name>__parent</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// we are smaller than the parent</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>h</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>udata</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>__swap</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__pushdown</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>childl</name></decl>, <decl><type ref="prev"/><name>childr</name></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>childl</name> <operator>=</operator> <call><name>__child_left</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>childr</name> <operator>=</operator> <call><name>__child_right</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>childr</name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* can't pushdown any further */</comment>
            <if_stmt><if>if <condition>(<expr><name>childl</name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>child</name> <operator>=</operator> <name>childl</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// find biggest child</comment>
        <if type="elseif">else if <condition>(<expr><call><name><name>h</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>childl</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>childr</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>udata</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>child</name> <operator>=</operator> <name>childr</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>child</name> <operator>=</operator> <name>childl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// idx is smaller than child</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>h</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>child</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>udata</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>__swap</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
            <comment type="block">/* bigger than the biggest child, we stop, we win */</comment>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return;</return></block_content></block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__Heap_offerx</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

    <comment type="block">/* ensure heap properties */</comment>
    <expr_stmt><expr><call><name>__pushup</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Heap_offerx</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>__Heap_offerx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Heap_offer</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>h</name> <operator>=</operator> <call><name>__ensurecapacity</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>__Heap_offerx</name><argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Heap_poll</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>Heap_count</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>__pushdown</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Heap_peek</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>Heap_count</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Heap_clear</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @return item's index on the heap's array; otherwise -1 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__item_get_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name><name>h</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>udata</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>idx</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>Heap_remove_item</name><parameter_list>(<parameter><decl><type><name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>__item_get_idx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* swap the item we found with the last item on the heap */</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret_item</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* ensure heap property */</comment>
    <expr_stmt><expr><call><name>__pushup</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret_item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Heap_contains_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>__item_get_idx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Heap_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>h</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Heap_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>heap_t</name> <modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>h</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*--------------------------------------------------------------79-characters-*/</comment>
</unit>
