<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/object_pool/object_pool.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="line">// Computes the number of blocks required to accommodate n items.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_COUNT_TO_BLOCK_COUNT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>ceil((double)n / POOL_BLOCK_CAP)</cpp:value></cpp:define>

<comment type="line">// Computes block index from item index.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_INDEX_TO_BLOCK_INDEX</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(idx / POOL_BLOCK_CAP)</cpp:value></cpp:define>

<comment type="line">// Computes item position within a block.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_POSITION_WITHIN_BLOCK</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(idx % POOL_BLOCK_CAP)</cpp:value></cpp:define>

<comment type="line">// Retrieves block in which item with index resides.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ITEM_BLOCK</name><parameter_list>(<parameter><type><name>pool</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>pool-&gt;blocks[ITEM_INDEX_TO_BLOCK_INDEX(idx)]</cpp:value></cpp:define>

<comment type="block">/* Each allocated item has an ID header that is equivalent to its index in the ObjectPool.
 * This ID is held in the bytes immediately preceding the item in the Block, and is only used internally. */</comment>
<typedef>typedef <type><name>uint64_t</name></type> <name>ObjectID</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>sizeof(ObjectID)</cpp:value></cpp:define>

<comment type="block">/* Given an item, retrieve its ID.
 * As this is a direct memory access, it can be used as either a getter or a setter.
 * ITEM_ID(x) = 5 will assign 5 to the item x, while
 * ObjectID num = ITEM_ID(x) will write x's ID to the variable num. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_ID</name><parameter_list>(<parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*((ObjectID*)((item) - sizeof(ObjectID)))</cpp:value></cpp:define>

<comment type="line">// Given an item header, retrieve the item data.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_FROM_HEADER</name><parameter_list>(<parameter><type><name>header</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((header) + sizeof(ObjectID))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ObjectPool_AddBlocks</name><parameter_list>(<parameter><decl><type><name>ObjectPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>blockCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pool</name> <operator>&amp;&amp;</operator> <name>blockCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>prevBlockCount</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>blockCount</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>+=</operator> <name>blockCount</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>blocks</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Block</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pool</name><operator>-&gt;</operator><name>blockCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Block</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pool</name><operator>-&gt;</operator><name>blockCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>prevBlockCount</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>blockCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Block_New</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>itemSize</name></name></expr></argument>, <argument><expr><name>POOL_BLOCK_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>itemCap</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>*</operator> <name>POOL_BLOCK_CAP</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Clear a deleted item and recycle it to the caller.</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>_ObjectPool_ReuseItem</name><parameter_list>(<parameter><decl><type><name>ObjectPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ObjectID</name></type> <name>idx</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>itemCount</name></name><operator>++</operator></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>GET_ITEM_BLOCK</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>pos</name> <init>= <expr><call><name>ITEM_POSITION_WITHIN_BLOCK</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Retrieve a pointer to the item's header.</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>item_header</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>pos</name> <operator>*</operator> <name><name>block</name><operator>-&gt;</operator><name>itemSize</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>ITEM_FROM_HEADER</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ITEM_ID</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// The item ID should not change on reuse.</comment>

	<comment type="line">// Zero-set the item being returned.</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>itemSize</name></name> <operator>-</operator> <name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ObjectPool</name> <modifier>*</modifier></type><name>ObjectPool_New</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>itemCap</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>itemSize</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ObjectPool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ObjectPool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>itemCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>itemSize</name></name> <operator>=</operator> <name>itemSize</name> <operator>+</operator> <name>HEADER_SIZE</name></expr>;</expr_stmt> <comment type="line">// Add extra space to accommodate the item's header.</comment>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>deletedIdx</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>destructor</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_ObjectPool_AddBlocks</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>ITEM_COUNT_TO_BLOCK_COUNT</name><argument_list>(<argument><expr><name>itemCap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pool</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ObjectPool_NewItem</name><parameter_list>(<parameter><decl><type><name>ObjectPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Reuse a deleted item if one is available.</comment>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_ObjectPool_ReuseItem</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Make sure we have room for a new item.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>itemCount</name></name> <operator>&gt;=</operator> <name><name>pool</name><operator>-&gt;</operator><name>itemCap</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Double the capacity of the pool.</comment>
		<expr_stmt><expr><call><name>_ObjectPool_AddBlocks</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>ITEM_COUNT_TO_BLOCK_COUNT</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>itemCap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Get the index of the new allocation.</comment>
	<decl_stmt><decl><type><name>ObjectID</name></type> <name>idx</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>itemCount</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>itemCount</name></name><operator>++</operator></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>GET_ITEM_BLOCK</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>pos</name> <init>= <expr><call><name>ITEM_POSITION_WITHIN_BLOCK</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Retrieve a pointer to the item's header.</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>item_header</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>pos</name> <operator>*</operator> <name><name>block</name><operator>-&gt;</operator><name>itemSize</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>ITEM_FROM_HEADER</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ITEM_ID</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>idx</name></expr>;</expr_stmt> <comment type="line">// Set the item ID.</comment>

	<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ObjectPool_DeleteItem</name><parameter_list>(<parameter><decl><type><name>ObjectPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Get item ID.</comment>
	<decl_stmt><decl><type><name>ObjectID</name></type> <name>idx</name> <init>= <expr><call><name>ITEM_ID</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Call item destructor.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>destructor</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>destructor</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Add ID to deleted list.</comment>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>itemCount</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ObjectPool_Free</name><parameter_list>(<parameter><decl><type><name>ObjectPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>blockCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Block_Free</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
