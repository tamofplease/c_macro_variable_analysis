<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/datablock/datablock.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datablock_iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<comment type="line">// computes the number of blocks required to accommodate n items.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_COUNT_TO_BLOCK_COUNT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>cap</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ceil((double)n / cap)</cpp:value></cpp:define>

<comment type="line">// computes block index from item index.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_INDEX_TO_BLOCK_INDEX</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>cap</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>(idx / cap)</cpp:value></cpp:define>

<comment type="line">// computes item position within a block.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITEM_POSITION_WITHIN_BLOCK</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>cap</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>(idx % cap)</cpp:value></cpp:define>

<comment type="line">// retrieves block in which item with index resides.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ITEM_BLOCK</name><parameter_list>(<parameter><type><name>dataBlock</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>dataBlock-&gt;blocks[ITEM_INDEX_TO_BLOCK_INDEX(idx, dataBlock-&gt;blockCap)]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_DataBlock_AddBlocks</name>
<parameter_list>(
	<parameter><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>blockCount</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>blockCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>prevBlockCount</name> <init>= <expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>+=</operator> <name>blockCount</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Block</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Block</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>prevBlockCount</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Block_New</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemSize</name></name></expr></argument>, <argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCap</name></name> <operator>=</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>*</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Checks to see if idx is within global array bounds</comment>
<comment type="line">// array bounds are between 0 and itemCount + #deleted indices</comment>
<comment type="line">// e.g. [3, 7, 2, D, 1, D, 5] where itemCount = 5 and #deleted indices is 2</comment>
<comment type="line">// and so it is valid to query the array with idx 6.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_DataBlock_IndexOutOfBounds</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name>idx</name> <operator>&gt;=</operator> <operator>(</operator><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name> <operator>+</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>DataBlockItemHeader</name> <modifier>*</modifier></type><name>DataBlock_GetItemHeader</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>GET_ITEM_BLOCK</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>ITEM_POSITION_WITHIN_BLOCK</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>DataBlockItemHeader</name> <operator>*</operator><operator>)</operator><name><name>block</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>idx</name> <operator>*</operator> <name><name>block</name><operator>-&gt;</operator><name>itemSize</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// DataBlock API implementation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>DataBlock</name> <modifier>*</modifier></type><name>DataBlock_New</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>blockCap</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>itemCap</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>itemSize</name></decl></parameter>,
	<parameter><decl><type><name>fpDestructor</name></type> <name>fp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name></name>      <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemSize</name></name>    <operator>=</operator>  <name>itemSize</name> <operator>+</operator> <name>ITEM_HEADER_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name>   <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name>  <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name>    <operator>=</operator>  <name>blockCap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name>  <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>destructor</name></name>  <operator>=</operator>  <name>fp</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_DataBlock_AddBlocks</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>,
			<argument><expr><call><name>ITEM_COUNT_TO_BLOCK_COUNT</name><argument_list>(<argument><expr><name>itemCap</name></expr></argument>, <argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dataBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>DataBlock_ItemCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>DataBlock_Scan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dataBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>startBlock</name> <init>= <expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Deleted items are skipped, we're about to perform</comment>
	<comment type="line">// array_len(dataBlock-&gt;deletedIdx) skips during out scan.</comment>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>endPos</name> <init>= <expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name> <operator>+</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>DataBlockIterator_New</name><argument_list>(<argument><expr><name>startBlock</name></expr></argument>, <argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>DataBlock_FullScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dataBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>startBlock</name> <init>= <expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int64_t</name></type> <name>endPos</name> <init>= <expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name> <operator>*</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>DataBlockIterator_New</name><argument_list>(<argument><expr><name>startBlock</name></expr></argument>, <argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr></argument>, <argument><expr><name>endPos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Make sure datablock can accommodate at least k items.</comment>
<function><type><name>void</name></type> <name>DataBlock_Accommodate</name><parameter_list>(<parameter><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Compute number of free slots.</comment>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>freeSlotsCount</name> <init>= <expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCap</name></name> <operator>-</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>additionalItems</name> <init>= <expr><name>k</name> <operator>-</operator> <name>freeSlotsCount</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>additionalItems</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int64_t</name></type> <name>additionalBlocks</name> <init>=
			<expr><call><name>ITEM_COUNT_TO_BLOCK_COUNT</name><argument_list>(<argument><expr><name>additionalItems</name></expr></argument>, <argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_DataBlock_AddBlocks</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>additionalBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DataBlock_Ensure</name><parameter_list>(<parameter><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dataBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// datablock[idx] exists</comment>
	<if_stmt><if>if<condition>(<expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCap</name></name> <operator>&gt;</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// make sure datablock cap &gt; 'idx'</comment>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>additionalItems</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>idx</name><operator>)</operator> <operator>-</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>itemCap</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>additionalBlocks</name> <init>=
		<expr><call><name>ITEM_COUNT_TO_BLOCK_COUNT</name><argument_list>(<argument><expr><name>additionalItems</name></expr></argument>, <argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blockCap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_DataBlock_AddBlocks</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>additionalBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCap</name></name> <operator>&gt;</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>DataBlock_GetItem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dataBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// return NULL if idx is out of bounds</comment>
	<if_stmt><if>if<condition>(<expr><call><name>_DataBlock_IndexOutOfBounds</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>DataBlockItemHeader</name> <modifier>*</modifier></type><name>item_header</name> <init>= <expr><call><name>DataBlock_GetItemHeader</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Incase item is marked as deleted, return NULL.</comment>
	<if_stmt><if>if<condition>(<expr><call><name>IS_ITEM_DELETED</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>ITEM_DATA</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>DataBlock_AllocateItem</name><parameter_list>(<parameter><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// make sure we've got room for items</comment>
	<if_stmt><if>if<condition>(<expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name> <operator>&gt;=</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>itemCap</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// allocate an additional block</comment>
		<expr_stmt><expr><call><name>_DataBlock_AddBlocks</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCap</name></name> <operator>&gt;</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// get index into which to store item,</comment>
	<comment type="line">// prefer reusing free indicies</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>pos</name> <init>= <expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>array_pop</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>DataBlockItemHeader</name> <modifier>*</modifier></type><name>item_header</name> <init>= <expr><call><name>DataBlock_GetItemHeader</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>MARK_HEADER_AS_NOT_DELETED</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ITEM_DATA</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DataBlock_DeleteItem</name><parameter_list>(<parameter><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dataBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>_DataBlock_IndexOutOfBounds</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Return if item already deleted.</comment>
	<decl_stmt><decl><type><name>DataBlockItemHeader</name> <modifier>*</modifier></type><name>item_header</name> <init>= <expr><call><name>DataBlock_GetItemHeader</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>IS_ITEM_DELETED</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Call item destructor.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>dataBlock</name><operator>-&gt;</operator><name>destructor</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>ITEM_DATA</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dataBlock</name><operator>-&gt;</operator><name>destructor</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MARK_HEADER_AS_DELETED</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>DataBlock_DeletedItemsCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>DataBlock_ItemIsDeleted</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>DataBlockItemHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>GET_ITEM_HEADER</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>IS_ITEM_DELETED</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Out of order functionality</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name> <modifier>*</modifier></type><name>DataBlock_AllocateItemOutOfOrder</name>
<parameter_list>(
	<parameter><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Check if idx&lt;=data block's current capacity. If needed, allocate additional blocks.</comment>
	<expr_stmt><expr><call><name>DataBlock_Ensure</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>DataBlockItemHeader</name> <modifier>*</modifier></type><name>item_header</name> <init>= <expr><call><name>DataBlock_GetItemHeader</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>MARK_HEADER_AS_NOT_DELETED</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>itemCount</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><call><name>ITEM_DATA</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DataBlock_MarkAsDeletedOutOfOrder</name>
<parameter_list>(
	<parameter><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Check if idx&lt;=data block's current capacity. If needed, allocate additional blocks.</comment>
	<expr_stmt><expr><call><name>DataBlock_Ensure</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>DataBlockItemHeader</name> <modifier>*</modifier></type><name>item_header</name> <init>= <expr><call><name>DataBlock_GetItemHeader</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Delete</comment>
	<expr_stmt><expr><call><name>MARK_HEADER_AS_DELETED</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DataBlock_Free</name><parameter_list>(<parameter><decl><type><name>DataBlock</name> <modifier>*</modifier></type><name>dataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dataBlock</name><operator>-&gt;</operator><name>blockCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Block_Free</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>dataBlock</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>dataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
