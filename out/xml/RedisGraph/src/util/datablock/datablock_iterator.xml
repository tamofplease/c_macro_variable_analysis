<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/datablock/datablock_iterator.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datablock_iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<function><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>DataBlockIterator_New</name>
<parameter_list>(
	<parameter><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>block_cap</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>end_pos</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DataBlockIterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_start_block</name></name>    <operator>=</operator>  <name>block</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_current_block</name></name>  <operator>=</operator>  <name>block</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_block_pos</name></name>      <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_block_cap</name></name>      <operator>=</operator>  <name>block_cap</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_current_pos</name></name>    <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_end_pos</name></name>        <operator>=</operator>  <name>end_pos</name></expr>;</expr_stmt>
	<return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>DataBlockIterator_Next</name>
<parameter_list>(
	<parameter><decl><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set default</comment>
	<decl_stmt><decl><type><name>void</name>                 <modifier>*</modifier></type><name>item</name>         <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DataBlockItemHeader</name>  <modifier>*</modifier></type><name>item_header</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// have we reached the end of our iterator?</comment>
	<while>while<condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>_current_pos</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>_end_pos</name></name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>_current_block</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// get item at current position</comment>
		<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>_current_block</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>item_header</name> <operator>=</operator> <operator>(</operator><name>DataBlockItemHeader</name> <operator>*</operator><operator>)</operator><name><name>block</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>_block_pos</name></name> <operator>*</operator> <name><name>block</name><operator>-&gt;</operator><name>itemSize</name></name><operator>)</operator></expr>;</expr_stmt>

		<comment type="line">// advance to next position</comment>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_block_pos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_current_pos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="line">// advance to next block if current block consumed</comment>
		<if_stmt><if>if<condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>_block_pos</name></name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>_block_cap</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_block_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_current_block</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>_current_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>IS_ITEM_DELETED</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>ITEM_DATA</name><argument_list>(<argument><expr><name>item_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>_current_pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DataBlockIterator_Reset</name>
<parameter_list>(
	<parameter><decl><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_block_pos</name></name>      <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_current_pos</name></name>    <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>_current_block</name></name>  <operator>=</operator>  <name><name>iter</name><operator>-&gt;</operator><name>_start_block</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DataBlockIterator_Free</name>
<parameter_list>(
	<parameter><decl><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
