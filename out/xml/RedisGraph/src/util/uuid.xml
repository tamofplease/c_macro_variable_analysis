<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/util/uuid.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uuid.h"</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type><name>UUID_New</name><parameter_list>()</parameter_list> <block>{<block_content>
	<comment type="block">/* Implementation is based on https://www.cryptosys.net/pki/uuid-rfc4122.html */</comment>

	<comment type="line">// Generate 16 random bytes.</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>r</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uuid</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><literal type="number">37</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><literal type="string">"%08x-%04x-%04x-%04x-%04x%08x"</literal></expr></argument>,
			<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>r</name><operator>)</operator></expr></argument>,
			<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>,
			<comment type="line">// Set the four most significant bits of the 7th byte to 0100'B, so the high nibble is "4".</comment>
			<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0b0000111111111111</literal><operator>)</operator> <operator>|</operator> <literal type="number">0b0100000000000000</literal></expr></argument>,
			<comment type="line">// Set the two most significant bits of the 9th byte to 10'B, so the high nibble will be one of "8", "9", "A", or "B" (see Note 1).</comment>
			<argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0b0011111111111111</literal><operator>)</operator> <operator>|</operator> <literal type="number">0b1000000000000000</literal></expr></argument>,
			<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator></expr></argument>,
			<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>uuid</name><index>[<expr><literal type="number">36</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>uuid</name></expr>;</return>
</block_content>}</block></function>
</unit>
