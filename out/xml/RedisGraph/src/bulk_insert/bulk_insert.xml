<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/bulk_insert/bulk_insert.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bulk_insert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../schema/schema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">// the first byte of each property in the binary stream</comment>
<comment type="line">// is used to indicate the type of the subsequent SIValue</comment>
<typedef>typedef <type><enum>enum <block>{
	<decl><name>BI_NULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>BI_BOOL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>BI_DOUBLE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
	<decl><name>BI_STRING</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
	<decl><name>BI_LONG</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
	<decl><name>BI_ARRAY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
}</block></enum></type> <name>TYPE</name>;</typedef>

<comment type="block">/* binary header format:
 * - entity name : null-terminated C string
 * - property count : 4-byte unsigned integer
 * [0..property_count] : null-terminated C string
 */</comment>

<comment type="line">// read the label strings from a header, update schemas, and retrieve the label IDs</comment>
<function><type><specifier>static</specifier> <name>int</name><modifier>*</modifier></type> <name>_BulkInsert_ReadHeaderLabels</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name><modifier>*</modifier></type> <name>gc</name></decl></parameter>,
	<parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>data_idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>        <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data</name>      <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data_idx</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// first sequence is entity label(s)</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>labels</name> <init>= <expr><name>data</name> <operator>+</operator> <operator>*</operator><name>data_idx</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>labels_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> <name>labels_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// array of all label IDs</comment>
    <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>label_ids</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// stack variable to contain a single label</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>label</name><index>[<expr><name>labels_len</name></expr>]</index></name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// look for a colon delimiting another label</comment>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>found</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>==</operator> <name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// only nodes can have multiple labels</comment>
			<comment type="line">// this entity file describes multiple labels, copy the current one</comment>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>found</name> <operator>-</operator> <name>labels</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>labels</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>label</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<comment type="line">// update the labels pointer for the next seek</comment>
			<expr_stmt><expr><name>labels</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// reached the last (or only) label; copy it</comment>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>labels</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// try to retrieve the label's schema</comment>
		<decl_stmt><decl><type><name>Schema</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// create the schema if it does not already exist</comment>
		<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_AddSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// store the label ID</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>label_ids</name></expr></argument>, <argument><expr><call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// break if we've exhausted all labels</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

    <return>return <expr><name>label_ids</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// read the property keys from a header</comment>
<function><type><specifier>static</specifier> <name>Attribute_ID</name><modifier>*</modifier></type> <name>_BulkInsert_ReadHeaderProperties</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name><modifier>*</modifier></type> <name>gc</name></decl></parameter>,
	<parameter><decl><type><name>SchemaType</name></type> <name>t</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>data_idx</name></decl></parameter>,
	<parameter><decl><type><name>uint</name><modifier>*</modifier></type> <name>prop_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>          <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data</name>        <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data_idx</name>    <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>prop_count</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// next 4 bytes are property count</comment>
    <expr_stmt><expr><operator>*</operator><name>prop_count</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><index>[<expr><operator>*</operator><name>data_idx</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>prop_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>Attribute_ID</name><modifier>*</modifier></type> <name>prop_indices</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><operator>*</operator><name>prop_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Attribute_ID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the rest of the line is [char *prop_key] * prop_count</comment>
	<for>for <control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>prop_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>prop_key</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <operator>*</operator><name>data_idx</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prop_key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="line">// add properties to schemas</comment>
		<expr_stmt><expr><name><name>prop_indices</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>GraphContext_FindOrAddAttribute</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>prop_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

    <return>return <expr><name>prop_indices</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// read an SIValue from the data stream and update the index appropriately</comment>
<function><type><specifier>static</specifier> <name>SIValue</name></type> <name>_BulkInsert_ReadProperty</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>data_idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
    <comment type="line">// binary property format:</comment>
	<comment type="line">// - property type : 1-byte integer corresponding to TYPE enum</comment>
	<comment type="line">// - Nothing if type is NULL</comment>
	<comment type="line">// - 1-byte true/false if type is boolean</comment>
	<comment type="line">// - 8-byte double if type is double</comment>
	<comment type="line">// - 8-byte integer if type is integer</comment>
	<comment type="line">// - Null-terminated C string if type is string</comment>
	<comment type="line">// - 8-byte array length followed by N values if type is array</comment>

    <comment type="line">// possible property values</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TYPE</name></type> <name>t</name> <init>= <expr><name><name>data</name><index>[<expr><operator>*</operator><name>data_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>BI_NULL</name></expr>:</case>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>BI_BOOL</name></expr>:</case>
			<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>*</operator><name>data_idx</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>BI_DOUBLE</name></expr>:</case>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><index>[<expr><operator>*</operator><name>data_idx</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>BI_LONG</name></expr>:</case>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><index>[<expr><operator>*</operator><name>data_idx</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>SI_LongVal</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>BI_STRING</name></expr>:</case>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>data</name> <operator>+</operator> <operator>*</operator><name>data_idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<comment type="line">// The string itself will be cloned when added to the GraphEntity properties.</comment>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>BI_ARRAY</name></expr>:</case>
			<comment type="line">// The first 8 bytes of a received array will be the array length.</comment>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><index>[<expr><operator>*</operator><name>data_idx</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>data_idx</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>SIArray_New</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<comment type="line">// Convert every element and add to array.</comment>
				<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><call><name>_BulkInsert_ReadProperty</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

    <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_BulkInsert_ProcessNodeFile</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name><modifier>*</modifier></type> <name>gc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>
)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint</name></type> <name>prop_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>data_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// read the CSV file header labels and update all schemas</comment>
    <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>label_ids</name> <init>= <expr><call><name>_BulkInsert_ReadHeaderLabels</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>label_ids</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// read the CSV header properties and collect their indices</comment>
    <decl_stmt><decl><type><name>Attribute_ID</name><modifier>*</modifier></type> <name>prop_indices</name> <init>= <expr><call><name>_BulkInsert_ReadHeaderProperties</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
	<argument><expr><operator>&amp;</operator><name>data_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// sync each matrix once</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>Graph_GetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>label_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

    <comment type="line">// sync node-label matrix</comment>
    <expr_stmt><expr><call><name>Graph_GetNodeLabelMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// load nodes</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

	<while>while <condition>(<expr><name>data_idx</name> <operator>&lt;</operator> <name>data_len</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Node</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GraphEntity</name><modifier>*</modifier></type> <name>ge</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Graph_CreateNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>label_ids</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ge</name> <operator>=</operator> <operator>(</operator><name>GraphEntity</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr>;</expr_stmt>
		<comment type="line">// process entity attributes</comment>
		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prop_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>_BulkInsert_ReadProperty</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// skip invalid attribute values</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_VALID_PROPERTY_VALUE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>GraphEntity_AddProperty</name><argument_list>(<argument><expr><name>ge</name></expr></argument>, <argument><expr><name><name>prop_indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>

    <expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prop_indices</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>prop_indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>label_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>BULK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_BulkInsert_ProcessEdgeFile</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name><modifier>*</modifier></type> <name>gc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>
)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>relation_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type> <name>prop_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>data_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// read the CSV file header</comment>
    <comment type="line">// and commit all labels and properties it introduces</comment>
    <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>type_ids</name> <init>= <expr><call><name>_BulkInsert_ReadHeaderLabels</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type> <name>type_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>type_ids</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// edges can only have one type</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type_count</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>type_id</name> <init>= <expr><name><name>type_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Attribute_ID</name><modifier>*</modifier></type> <name>prop_indices</name> <init>= <expr><call><name>_BulkInsert_ReadHeaderProperties</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>,
	<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// sync matrix once</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>Graph_GetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>type_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Graph_GetAdjacencyMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// load edges</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

	<while>while <condition>(<expr><name>data_idx</name> <operator>&lt;</operator> <name>data_len</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name></type> <name>e</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GraphEntity</name><modifier>*</modifier></type> <name>ge</name></decl>;</decl_stmt>

		<comment type="line">// next 8 bytes are source ID</comment>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>src</name> <init>= <expr><operator>*</operator><operator>(</operator><name>NodeID</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><index>[<expr><name>data_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>data_idx</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NodeID</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<comment type="line">// next 8 bytes are destination ID</comment>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>dest</name> <init>= <expr><operator>*</operator><operator>(</operator><name>NodeID</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><index>[<expr><name>data_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>data_idx</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NodeID</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Graph_CreateEdge</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>type_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ge</name> <operator>=</operator> <operator>(</operator><name>GraphEntity</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr>;</expr_stmt>

		<comment type="line">// process entity attributes</comment>
		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prop_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>_BulkInsert_ReadProperty</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// skip invalid attribute values</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_VALID_PROPERTY_VALUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>GraphEntity_AddProperty</name><argument_list>(<argument><expr><name>ge</name></expr></argument>, <argument><expr><name><name>prop_indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>

    <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>type_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prop_indices</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>prop_indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>BULK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_BulkInsert_ProcessTokens</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name><modifier>*</modifier></type> <name>gc</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>token_count</name></decl></parameter>,
	<parameter><decl><type><name>RedisModuleString</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>,
	<parameter><decl><type><name>SchemaType</name></type> <name>type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>token_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
		<comment type="line">// retrieve a pointer to the next binary stream and record its length</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>SCHEMA_NODE</name><operator>)</operator></expr>
			?</condition><then> <expr><call><name>_BulkInsert_ProcessNodeFile</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>
			</then><else>: <expr><call><name>_BulkInsert_ProcessEdgeFile</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <name>BULK_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

    <return>return <expr><name>BULK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>BulkInsert</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name><modifier>*</modifier></type> <name>gc</name></decl></parameter>,
	<parameter><decl><type><name>RedisModuleString</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>node_count</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>edge_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>    <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name>   <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>argv</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Bulk insert format error, \
				failed to parse bulk insert sections."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>BULK_FAIL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// read the number of node tokens</comment>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>node_token_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>relation_token_count</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RedisModule_StringToLongLong</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_token_count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Error parsing number of node \
				descriptor tokens."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>BULK_FAIL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// read the number of relation tokens</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RedisModule_StringToLongLong</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>relation_token_count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Error parsing number of relation \
				descriptor tokens."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>BULK_FAIL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Graph</name><modifier>*</modifier></type> <name>g</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>BULK_OK</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// lock graph under write lock</comment>
	<comment type="line">// allocate space for new nodes and edges</comment>
	<comment type="line">// set graph sync policy to resize only</comment>
	<expr_stmt><expr><call><name>Graph_AcquireWriteLock</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Graph_AllocateNodes</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Graph_AllocateEdges</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>edge_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>node_token_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>argc</name> <operator>&gt;=</operator> <name>node_token_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// process all node files</comment>
		<if_stmt><if>if <condition>(<expr><call><name>_BulkInsert_ProcessTokens</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>node_token_count</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
					<argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call>
				<operator>!=</operator> <name>BULK_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>BULK_FAIL</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>node_token_count</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>node_token_count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>relation_token_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>argc</name> <operator>&gt;=</operator> <name>relation_token_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Process all relationship files</comment>
		<if_stmt><if>if <condition>(<expr><call><name>_BulkInsert_ProcessTokens</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>relation_token_count</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
					<argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call>
				<operator>!=</operator> <name>BULK_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>BULK_FAIL</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>relation_token_count</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>relation_token_count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
	<comment type="line">// reset graph sync policy</comment>
	<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>SYNC_POLICY_FLUSH_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Graph_ReleaseLock</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

</unit>
