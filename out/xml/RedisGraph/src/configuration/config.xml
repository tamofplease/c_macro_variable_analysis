<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/configuration/config.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/redis_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../deps/GraphBLAS/Include/GraphBLAS.h"</cpp:file></cpp:include>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">// Configuration parameters</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">// config param, the timeout for each query in milliseconds</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT</name></cpp:macro> <cpp:value>"TIMEOUT"</cpp:value></cpp:define>

<comment type="line">// default timeout for read and write queries</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT_DEFAULT</name></cpp:macro> <cpp:value>"TIMEOUT_DEFAULT"</cpp:value></cpp:define>

<comment type="line">// max timeout that can be enforced</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT_MAX</name></cpp:macro> <cpp:value>"TIMEOUT_MAX"</cpp:value></cpp:define>

<comment type="line">// config param, the size of each thread cache size, per graph</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_SIZE</name></cpp:macro> <cpp:value>"CACHE_SIZE"</cpp:value></cpp:define>

<comment type="line">// whether graphs should be deleted asynchronously</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_DELETE</name></cpp:macro> <cpp:value>"ASYNC_DELETE"</cpp:value></cpp:define>

<comment type="line">// config param, number of threads in thread pool</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_COUNT</name></cpp:macro> <cpp:value>"THREAD_COUNT"</cpp:value></cpp:define>

<comment type="line">// resultset size limit</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULTSET_SIZE</name></cpp:macro> <cpp:value>"RESULTSET_SIZE"</cpp:value></cpp:define>

<comment type="line">// config param, max number of OpenMP threads</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OMP_THREAD_COUNT</name></cpp:macro> <cpp:value>"OMP_THREAD_COUNT"</cpp:value></cpp:define>

<comment type="line">// config param, max number of entities in each virtual key</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKEY_MAX_ENTITY_COUNT</name></cpp:macro> <cpp:value>"VKEY_MAX_ENTITY_COUNT"</cpp:value></cpp:define>

<comment type="line">// config param, max number of queued queries</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_QUEUED_QUERIES</name></cpp:macro> <cpp:value>"MAX_QUEUED_QUERIES"</cpp:value></cpp:define>

<comment type="line">// Max mem(bytes) that query/thread can utilize at any given time</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUERY_MEM_CAPACITY</name></cpp:macro> <cpp:value>"QUERY_MEM_CAPACITY"</cpp:value></cpp:define>

<comment type="line">// number of pending changed befor RG_Matrix flushed</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELTA_MAX_PENDING_CHANGES</name></cpp:macro> <cpp:value>"DELTA_MAX_PENDING_CHANGES"</cpp:value></cpp:define>

<comment type="line">// size of node creation buffer</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_CREATION_BUFFER</name></cpp:macro> <cpp:value>"NODE_CREATION_BUFFER"</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Configuration defaults</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_SIZE_DEFAULT</name></cpp:macro>            <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUED_QUERIES_UNLIMITED</name></cpp:macro>      <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKEY_MAX_ENTITY_COUNT_DEFAULT</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<comment type="line">// configuration object</comment>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>timeout</name></decl>;</decl_stmt>                  <comment type="line">// The timeout for each query in milliseconds.</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>timeout_max</name></decl>;</decl_stmt>              <comment type="line">// max timeout that can be enforced</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>timeout_default</name></decl>;</decl_stmt>          <comment type="line">// default timeout for read and write queries</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>async_delete</name></decl>;</decl_stmt>                 <comment type="line">// If true, graph deletion is done asynchronously.</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>cache_size</name></decl>;</decl_stmt>               <comment type="line">// The cache size for each thread, per graph.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>thread_pool_size</name></decl>;</decl_stmt>             <comment type="line">// Thread count for thread pool.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>omp_thread_count</name></decl>;</decl_stmt>             <comment type="line">// Maximum number of OpenMP threads.</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>resultset_size</name></decl>;</decl_stmt>           <comment type="line">// resultset maximum size, UINT64_MAX unlimited</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>vkey_entity_count</name></decl>;</decl_stmt>        <comment type="line">// The limit of number of entities encoded at once for each RDB key.</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_queued_queries</name></decl>;</decl_stmt>       <comment type="line">// max number of queued queries</comment>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>query_mem_capacity</name></decl>;</decl_stmt>        <comment type="line">// Max mem(bytes) that query/thread can utilize at any given time</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>node_creation_buffer</name></decl>;</decl_stmt>     <comment type="line">// Number of extra node creations to buffer as margin in matrices</comment>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>delta_max_pending_changes</name></decl>;</decl_stmt> <comment type="line">// number of pending changed befor RG_Matrix flushed</comment>
	<decl_stmt><decl><type><name>Config_on_change</name></type> <name>cb</name></decl>;</decl_stmt>               <comment type="line">// callback function which being called when config param changed</comment>
}</block></struct></type> <name>RG_Config</name>;</typedef>

<decl_stmt><decl><type><name>RG_Config</name></type> <name>config</name></decl>;</decl_stmt> <comment type="line">// global module configuration</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// config value parsing</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// parse integer</comment>
<comment type="line">// return true if string represents an integer</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_Config_ParseInteger</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>integer_str</name></decl></parameter>,
	<parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>    <comment type="line">// To distinguish success/failure after call</comment>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>integer_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Return an error code if integer parsing fails.</comment>
	<return>return <expr><operator>(</operator><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>endptr</name> <operator>!=</operator> <name>integer_str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// parse positive integer</comment>
<comment type="line">// return true if string represents a positive integer &gt; 0</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_Config_ParsePositiveInteger</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>integer_str</name></decl></parameter>,
	<parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>_Config_ParseInteger</name><argument_list>(<argument><expr><name>integer_str</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Return an error code if integer parsing fails or value is not positive.</comment>
	<return>return <expr><operator>(</operator><name>res</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// parse non-negative integer</comment>
<comment type="line">// return true if string represents an integer &gt;= 0</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_Config_ParseNonNegativeInteger</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>integer_str</name></decl></parameter>,
	<parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>_Config_ParseInteger</name><argument_list>(<argument><expr><name>integer_str</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Return an error code if integer parsing fails or value is negative.</comment>
	<return>return <expr><operator>(</operator><name>res</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return true if 'str' is either "yes" or "no" otherwise returns false</comment>
<comment type="line">// sets 'value' to true if 'str' is "yes"</comment>
<comment type="line">// sets 'value to false if 'str' is "no"</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_Config_ParseYesNo</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//==============================================================================</comment>
<comment type="line">// Config access functions</comment>
<comment type="line">//==============================================================================</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// max queued queries</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_max_queued_queries_set</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>max_queued_queries</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>max_queued_queries</name></name> <operator>=</operator> <name>max_queued_queries</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint</name></type> <name>Config_max_queued_queries_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>max_queued_queries</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// timeout</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_timeout_set</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>timeout</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// check if new(TIMEOUT_DEFAULT or TIMEOUT_MAX) are used</comment>
<comment type="line">// log a deprecation message</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_Config_check_if_new_timeout_used</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>new_timeout_set</name>  <init>= <expr><name><name>config</name><operator>.</operator><name>timeout_default</name></name> <operator>!=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>new_timeout_set</name>      <operator>|=</operator> <name><name>config</name><operator>.</operator><name>timeout_max</name></name>     <operator>!=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>new_timeout_set</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"The TIMEOUT configuration parameter is deprecated. Please set TIMEOUT_MAX and TIMEOUT_DEFAULT instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Config_enforce_timeout_max</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>timeout_default</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>timeout_max</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>timeout_max</name> <operator>!=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name> <operator>&amp;&amp;</operator>
	   <name>timeout_default</name> <operator>&gt;</operator> <name>timeout_max</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"The TIMEOUT_DEFAULT(%lld) configuration parameter value is higher than TIMEOUT_MAX(%lld)."</literal></expr></argument>, <argument><expr><name>timeout_default</name></expr></argument>, <argument><expr><name>timeout_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>timeout_max</name></name>     <operator>=</operator> <name>timeout_max</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>timeout_default</name></name> <operator>=</operator> <name>timeout_default</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Config_timeout_default_set</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>timeout_default</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Config_enforce_timeout_max</name><argument_list>(<argument><expr><name>timeout_default</name></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>timeout_max</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Config_timeout_max_set</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>timeout_max</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Config_enforce_timeout_max</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>timeout_default</name></name></expr></argument>, <argument><expr><name>timeout_max</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint</name></type> <name>Config_timeout_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>timeout</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint</name></type> <name>Config_timeout_default_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>timeout_default</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint</name></type> <name>Config_timeout_max_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>timeout_max</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// thread count</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_thread_pool_size_set</name>
<parameter_list>(
	<parameter><decl><type><name>uint</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>thread_pool_size</name></name> <operator>=</operator> <name>nthreads</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint</name></type> <name>Config_thread_pool_size_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>thread_pool_size</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// OpenMP thread count</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_OMP_thread_count_set</name><parameter_list>(<parameter><decl><type><name>uint</name></type> <name>nthreads</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>omp_thread_count</name></name> <operator>=</operator> <name>nthreads</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint</name></type> <name>Config_OMP_thread_count_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>omp_thread_count</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// virtual key entity count</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_virtual_key_entity_count_set</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>entity_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>vkey_entity_count</name></name> <operator>=</operator> <name>entity_count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>Config_virtual_key_entity_count_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>vkey_entity_count</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// cache size</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_cache_size_set</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>cache_size</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>cache_size</name></name> <operator>=</operator> <name>cache_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>Config_cache_size_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>cache_size</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// async delete</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_async_delete_set</name>
<parameter_list>(
	<parameter><decl><type><name>bool</name></type> <name>async_delete</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>async_delete</name></name> <operator>=</operator> <name>async_delete</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Config_async_delete_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>async_delete</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// result-set max size</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_resultset_max_size_set</name>
<parameter_list>(
	<parameter><decl><type><name>int64_t</name></type> <name>max_size</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>max_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>config</name><operator>.</operator><name>resultset_size</name></name> <operator>=</operator> <name>RESULTSET_SIZE_UNLIMITED</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>config</name><operator>.</operator><name>resultset_size</name></name> <operator>=</operator> <name>max_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>Config_resultset_max_size_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>resultset_size</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// query mem capacity</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_query_mem_capacity_set</name>
<parameter_list>(
	<parameter><decl><type><name>int64_t</name></type> <name>capacity</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>capacity</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>query_mem_capacity</name></name> <operator>=</operator> <name>QUERY_MEM_CAPACITY_UNLIMITED</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>query_mem_capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>Config_query_mem_capacity_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>query_mem_capacity</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// delta max pending changes</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_delta_max_pending_changes_set</name>
<parameter_list>(
	<parameter><decl><type><name>int64_t</name></type> <name>capacity</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>capacity</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>delta_max_pending_changes</name></name> <operator>=</operator> <name>DELTA_MAX_PENDING_CHANGES_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>delta_max_pending_changes</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>Config_delta_max_pending_changes_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>delta_max_pending_changes</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// node creation buffer</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Config_node_creation_buffer_set</name>
<parameter_list>(
	<parameter><decl><type><name>uint64_t</name></type> <name>buf_size</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>node_creation_buffer</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>Config_node_creation_buffer_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>config</name><operator>.</operator><name>node_creation_buffer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Config_Contains_field</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_str</name></decl></parameter>,
	<parameter><decl><type><name>Config_Option_Field</name> <modifier>*</modifier></type><name>field</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field_str</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Config_Option_Field</name></type> <name>f</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>THREAD_COUNT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_THREAD_POOL_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>TIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_TIMEOUT</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>TIMEOUT_DEFAULT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_TIMEOUT_DEFAULT</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>TIMEOUT_MAX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_TIMEOUT_MAX</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>OMP_THREAD_COUNT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_OPENMP_NTHREAD</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>VKEY_MAX_ENTITY_COUNT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_VKEY_MAX_ENTITY_COUNT</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>CACHE_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_CACHE_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>RESULTSET_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_RESULTSET_MAX_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>MAX_QUEUED_QUERIES</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_MAX_QUEUED_QUERIES</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>QUERY_MEM_CAPACITY</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_QUERY_MEM_CAPACITY</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>DELTA_MAX_PENDING_CHANGES</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_DELTA_MAX_PENDING_CHANGES</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>NODE_CREATION_BUFFER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>Config_NODE_CREATION_BUFFER</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>field</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>field</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Config_Field_name</name>
<parameter_list>(
	<parameter><decl><type><name>Config_Option_Field</name></type> <name>field</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>Config_TIMEOUT</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>TIMEOUT</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_TIMEOUT_DEFAULT</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>TIMEOUT_DEFAULT</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_TIMEOUT_MAX</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>TIMEOUT_MAX</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_CACHE_SIZE</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>CACHE_SIZE</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_OPENMP_NTHREAD</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>OMP_THREAD_COUNT</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_THREAD_POOL_SIZE</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>THREAD_COUNT</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_RESULTSET_MAX_SIZE</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>RESULTSET_SIZE</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_VKEY_MAX_ENTITY_COUNT</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>VKEY_MAX_ENTITY_COUNT</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_ASYNC_DELETE</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>ASYNC_DELETE</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_MAX_QUEUED_QUERIES</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>MAX_QUEUED_QUERIES</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_QUERY_MEM_CAPACITY</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>QUERY_MEM_CAPACITY</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_DELTA_MAX_PENDING_CHANGES</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>DELTA_MAX_PENDING_CHANGES</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>Config_NODE_CREATION_BUFFER</name></expr>:</case>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <name>NODE_CREATION_BUFFER</name></expr>;</expr_stmt>
			<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// invalid option</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<default>default :</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"invalid option field"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// initialize every module-level configuration to its default value</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Config_SetToDefaults</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// the thread pool's default size is equal to the system's number of cores</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>CPUCount</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>thread_pool_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>CPUCount</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>CPUCount</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

	<comment type="line">// use the GraphBLAS-defined number of OpenMP threads by default</comment>
	<expr_stmt><expr><call><name>GxB_get</name><argument_list>(<argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>config</name><operator>.</operator><name>omp_thread_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// the default entity count of virtual keys</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>vkey_entity_count</name></name> <operator>=</operator> <name>VKEY_MAX_ENTITY_COUNT_DEFAULT</name></expr>;</expr_stmt>

	<comment type="line">// MEMCHECK compile flag;</comment>
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MEMCHECK</name></cpp:ifdef>
		<comment type="line">// disable async delete during memcheck</comment>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>async_delete</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="line">// always perform async delete when no checking for memory issues</comment>
		<expr_stmt><expr><name><name>config</name><operator>.</operator><name>async_delete</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>cache_size</name></name> <operator>=</operator> <name>CACHE_SIZE_DEFAULT</name></expr>;</expr_stmt>

	<comment type="line">// no limit on result-set size</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>resultset_size</name></name> <operator>=</operator> <name>RESULTSET_SIZE_UNLIMITED</name></expr>;</expr_stmt>

	<comment type="line">// no query timeout by default</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name></expr>;</expr_stmt>

	<comment type="line">// no max timeout by default</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>timeout_max</name></name> <operator>=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name></expr>;</expr_stmt>

	<comment type="line">// no query timeout by default</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>timeout_default</name></name> <operator>=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name></expr>;</expr_stmt>

	<comment type="line">// no limit on number of queued queries by default</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>max_queued_queries</name></name> <operator>=</operator> <name>QUEUED_QUERIES_UNLIMITED</name></expr>;</expr_stmt>

	<comment type="line">// no limit on query memory capacity</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>query_mem_capacity</name></name> <operator>=</operator> <name>QUERY_MEM_CAPACITY_UNLIMITED</name></expr>;</expr_stmt>

	<comment type="line">// number of pending changed befor RG_Matrix flushed</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>delta_max_pending_changes</name></name> <operator>=</operator> <name>DELTA_MAX_PENDING_CHANGES_DEFAULT</name></expr>;</expr_stmt>

	<comment type="line">// the amount of empty space to reserve for node creations in matrices</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>node_creation_buffer</name></name> <operator>=</operator> <name>NODE_CREATION_BUFFER_DEFAULT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Config_Init</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// make sure reconfiguration callback is already registered</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>cb</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// initialize the configuration to its default values</comment>
	<expr_stmt><expr><call><name>_Config_SetToDefaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// emit an error if we received an odd number of arguments,</comment>
		<comment type="line">// as this indicates an invalid configuration</comment>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>,
						<argument><expr><literal type="string">"RedisGraph received %d arguments, all configurations should be key-value pairs"</literal></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>old_timeout_specified</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>new_timeout_specified</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// each configuration is a key-value pair. (K, V)</comment>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// get field</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<decl_stmt><decl><type><name>Config_Option_Field</name></type> <name>field</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_str</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val_str</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// exit if configuration is not aware of field</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Config_Contains_field</name><argument_list>(<argument><expr><name>field_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>,
							<argument><expr><literal type="string">"Encountered unknown configuration field '%s'"</literal></expr></argument>, <argument><expr><name>field_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>field</name> <operator>==</operator> <name>Config_TIMEOUT_DEFAULT</name> <operator>||</operator> <name>field</name> <operator>==</operator> <name>Config_TIMEOUT_MAX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>new_timeout_specified</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>field</name> <operator>==</operator> <name>Config_TIMEOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>old_timeout_specified</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// exit if encountered an error when setting configuration</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Config_Option_set</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>error</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>,
							<argument><expr><literal type="string">"Failed setting field '%s' with error: %s"</literal></expr></argument>, <argument><expr><name>field_str</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>,
							<argument><expr><literal type="string">"Failed setting field '%s'"</literal></expr></argument>, <argument><expr><name>field_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			</block_content>}</block></else></if_stmt>
			<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>old_timeout_specified</name> <operator>&amp;&amp;</operator> <name>new_timeout_specified</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>,
						<argument><expr><literal type="string">"The TIMEOUT configuration parameter should be removed when specifying TIMEOUT_DEFAULT and/or TIMEOUT_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Config_Option_get</name>
<parameter_list>(
	<parameter><decl><type><name>Config_Option_Field</name></type> <name>field</name></decl></parameter>,
	<parameter><decl><type><modifier>...</modifier></type></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// get the option</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>Config_MAX_QUEUED_QUERIES</name></expr>:</case> <block>{<block_content>

			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>max_queued_queries</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>max_queued_queries</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>max_queued_queries</name><operator>)</operator> <operator>=</operator> <call><name>Config_max_queued_queries_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>
		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// timeout</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_TIMEOUT</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>timeout</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timeout</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>timeout</name><operator>)</operator> <operator>=</operator> <call><name>Config_timeout_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// timeout default</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_TIMEOUT_DEFAULT</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>timeout_default</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timeout_default</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>timeout_default</name><operator>)</operator> <operator>=</operator> <call><name>Config_timeout_default_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// timeout max</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_TIMEOUT_MAX</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>timeout_max</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timeout_max</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>timeout_max</name><operator>)</operator> <operator>=</operator> <call><name>Config_timeout_max_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// cache size</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_CACHE_SIZE</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>cache_size</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cache_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>cache_size</name><operator>)</operator> <operator>=</operator> <call><name>Config_cache_size_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// OpenMP thread count</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_OPENMP_NTHREAD</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint</name> <modifier>*</modifier></type><name>omp_nthreads</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>omp_nthreads</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>omp_nthreads</name><operator>)</operator> <operator>=</operator> <call><name>Config_OMP_thread_count_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// thread-pool size</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_THREAD_POOL_SIZE</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint</name> <modifier>*</modifier></type><name>pool_nthreads</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pool_nthreads</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pool_nthreads</name><operator>)</operator> <operator>=</operator> <call><name>Config_thread_pool_size_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// result-set size</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_RESULTSET_MAX_SIZE</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>resultset_max_size</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>resultset_max_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>resultset_max_size</name><operator>)</operator> <operator>=</operator> <call><name>Config_resultset_max_size_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// virtual key entity count</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_VKEY_MAX_ENTITY_COUNT</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>vkey_max_entity_count</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>vkey_max_entity_count</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>vkey_max_entity_count</name><operator>)</operator> <operator>=</operator> <call><name>Config_virtual_key_entity_count_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// async deleteion</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_ASYNC_DELETE</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>async_delete</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>async_delete</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>async_delete</name><operator>)</operator> <operator>=</operator> <call><name>Config_async_delete_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// query mem capacity</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_QUERY_MEM_CAPACITY</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>query_mem_capacity</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>query_mem_capacity</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>query_mem_capacity</name><operator>)</operator> <operator>=</operator> <call><name>Config_query_mem_capacity_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// number of pending changed befor RG_Matrix flushed</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_DELTA_MAX_PENDING_CHANGES</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>delta_max_pending_changes</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>delta_max_pending_changes</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>delta_max_pending_changes</name><operator>)</operator> <operator>=</operator> <call><name>Config_delta_max_pending_changes_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// size of buffer to maintain as margin in matrices</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_NODE_CREATION_BUFFER</name></expr>:</case> <block>{<block_content>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>node_creation_buffer</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>node_creation_buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>node_creation_buffer</name><operator>)</operator> <operator>=</operator> <call><name>Config_node_creation_buffer_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// invalid option</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<default>default :</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"invalid option field"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Config_Option_set</name>
<parameter_list>(
	<parameter><decl><type><name>Config_Option_Field</name></type> <name>field</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// set the option</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<switch>switch<condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// max queued queries</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_MAX_QUEUED_QUERIES</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>max_queued_queries</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParsePositiveInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_queued_queries</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>Config_max_queued_queries_set</name><argument_list>(<argument><expr><name>max_queued_queries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// timeout</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_TIMEOUT</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseNonNegativeInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_check_if_new_timeout_used</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"The TIMEOUT configuration parameter is deprecated. Please set TIMEOUT_MAX and TIMEOUT_DEFAULT instead"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>Config_timeout_set</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// timeout default</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_TIMEOUT_DEFAULT</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>timeout_default</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseNonNegativeInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_default</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Config_timeout_default_set</name><argument_list>(<argument><expr><name>timeout_default</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"TIMEOUT_DEFAULT configuration parameter cannot be set to a value higher than TIMEOUT_MAX"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// timeout max</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_TIMEOUT_MAX</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>timeout_max</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseNonNegativeInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_max</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Config_timeout_max_set</name><argument_list>(<argument><expr><name>timeout_max</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>err</name> <operator>=</operator> <literal type="string">"TIMEOUT_MAX configuration parameter cannot be set to a value lower than TIMEOUT_DEFAULT"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// cache size</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_CACHE_SIZE</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cache_size</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParsePositiveInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>Config_cache_size_set</name><argument_list>(<argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// OpenMP thread count</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_OPENMP_NTHREAD</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>omp_nthreads</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParsePositiveInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>omp_nthreads</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Config_OMP_thread_count_set</name><argument_list>(<argument><expr><name>omp_nthreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// thread-pool size</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_THREAD_POOL_SIZE</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>pool_nthreads</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParsePositiveInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pool_nthreads</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Config_thread_pool_size_set</name><argument_list>(<argument><expr><name>pool_nthreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// result-set size</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_RESULTSET_MAX_SIZE</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>resultset_max_size</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resultset_max_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Config_resultset_max_size_set</name><argument_list>(<argument><expr><name>resultset_max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// virtual key entity count</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_VKEY_MAX_ENTITY_COUNT</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>vkey_max_entity_count</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseNonNegativeInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vkey_max_entity_count</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Config_virtual_key_entity_count_set</name><argument_list>(<argument><expr><name>vkey_max_entity_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// async deleteion</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_ASYNC_DELETE</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>async_delete</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseYesNo</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>async_delete</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Config_async_delete_set</name><argument_list>(<argument><expr><name>async_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// query mem capacity</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_QUERY_MEM_CAPACITY</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>query_mem_capacity</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseNonNegativeInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_mem_capacity</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Config_query_mem_capacity_set</name><argument_list>(<argument><expr><name>query_mem_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// number of pending changed befor RG_Matrix flushed</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_DELTA_MAX_PENDING_CHANGES</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>delta_max_pending_changes</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseNonNegativeInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta_max_pending_changes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>Config_delta_max_pending_changes_set</name><argument_list>(<argument><expr><name>delta_max_pending_changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// size of buffer to maintain as margin in matrices</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<case>case <expr><name>Config_NODE_CREATION_BUFFER</name></expr>:</case> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>node_creation_buffer</name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_Config_ParseNonNegativeInteger</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_creation_buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<comment type="line">// node_creation_buffer should be at-least 128</comment>
			<expr_stmt><expr><name>node_creation_buffer</name> <operator>=</operator>
				<ternary><condition><expr><operator>(</operator><name>node_creation_buffer</name> <operator>&lt;</operator> <literal type="number">128</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">128</literal></expr></then><else>: <expr><name>node_creation_buffer</name></expr></else></ternary></expr>;</expr_stmt>

			<comment type="line">// retrieve the MSB of the value</comment>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>msb</name> <init>= <expr><operator>(</operator>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>node_creation_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>set_msb</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>msb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

			<comment type="line">// if the value is not a power of 2</comment>
			<comment type="line">// (if any bits other than the MSB are 1),</comment>
			<comment type="line">// raise it to the next power of 2</comment>
			<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>~</operator><name>set_msb</name> <operator>&amp;</operator> <name>node_creation_buffer</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>node_creation_buffer</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>msb</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>Config_node_creation_buffer_set</name><argument_list>(<argument><expr><name>node_creation_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// invalid option</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<default>default:</default>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>

	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>cb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>config</name><operator>.</operator><name>cb</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// dry run configuration change</comment>
<function><type><name>bool</name></type> <name>Config_Option_dryrun</name>
<parameter_list>(
	<parameter><decl><type><name>Config_Option_Field</name></type> <name>field</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// clone configuration</comment>
	<decl_stmt><decl><type><name>RG_Config</name></type> <name>config_clone</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// disable configuration notification</comment>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// NOTE: for a short period of time</comment>
	<comment type="line">// whoever might query the configuration WILL see this modification</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><call><name>Config_Option_set</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// restore original configuration</comment>
	<expr_stmt><expr><name>config</name> <operator>=</operator> <name>config_clone</name></expr>;</expr_stmt>

	<return>return <expr><name>valid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Config_Subscribe_Changes</name>
<parameter_list>(
	<parameter><decl><type><name>Config_on_change</name></type> <name>cb</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>config</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
