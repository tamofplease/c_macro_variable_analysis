<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/schema/schema.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"schema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>

<function><type><name>Schema</name> <modifier>*</modifier></type><name>Schema_New</name>
<parameter_list>(
	<parameter><decl><type><name>SchemaType</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Schema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name>           <operator>=</operator>  <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name>         <operator>=</operator>  <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name>        <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name>  <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name>         <operator>=</operator>  <call><name>rm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Schema_ID</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Schema_GetName</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Schema_GetID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Schema_HasIndices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>index</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>Schema_IndexCount</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Index</name> <modifier>*</modifier></type><name>Schema_GetIndex</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name> <modifier>*</modifier></type><name>attribute_id</name></decl></parameter>,
	<parameter><decl><type><name>IndexType</name></type> <name>type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>IDX_EXACT_MATCH</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// return NULL if the index does not exist, or an attribute was</comment>
		<comment type="line">// specified but does not reside on the index</comment>
		<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		   <operator>(</operator><name>attribute_id</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Index_ContainsAttribute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>*</operator><name>attribute_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator>  <name>IDX_FULLTEXT</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// return NULL if the index does not exist, or an attribute was</comment>
		<comment type="line">// specified but does not reside on the index</comment>
		<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		   <operator>(</operator><name>attribute_id</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Index_ContainsAttribute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr></argument>, <argument><expr><operator>*</operator><name>attribute_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>IDX_ANY</name> <operator>&amp;&amp;</operator> <name>attribute_id</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if an attribute was specified</comment>
		<comment type="line">// return the first index that contains it</comment>
		<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>&amp;&amp;</operator> <call><name>Index_ContainsAttribute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>*</operator><name>attribute_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name> <operator>&amp;&amp;</operator> <call><name>Index_ContainsAttribute</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr></argument>, <argument><expr><operator>*</operator><name>attribute_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>IDX_ANY</name> <operator>&amp;&amp;</operator> <name>attribute_id</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if no attribute was specified, return the first extant index</comment>
		<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Schema_AddIndex</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><name>IndexField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,
	<parameter><decl><type><name>IndexType</name></type> <name>type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>_idx</name> <init>= <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// index exists, make sure attribute isn't already indexed</comment>
	<if_stmt><if>if<condition>(<expr><name>_idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>Index_ContainsAttribute</name><argument_list>(<argument><expr><name>_idx</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>IndexField_Free</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>INDEX_FAIL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// index doesn't exist, create it</comment>
		<comment type="line">// determine index graph entity type</comment>
		<decl_stmt><decl><type><name>GraphEntityType</name></type> <name>entity_type</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCHEMA_NODE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>entity_type</name> <operator>=</operator> <name>GETYPE_NODE</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>entity_type</name> <operator>=</operator> <name>GETYPE_EDGE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>_idx</name> <operator>=</operator> <call><name>Index_New</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>entity_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>IDX_FULLTEXT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name> <operator>=</operator> <name>_idx</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>_idx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="line">// introduce edge src and dest node ids</comment>
		<comment type="line">// as additional index fields</comment>
		<if_stmt><if>if<condition>(<expr><name>entity_type</name> <operator>==</operator> <name>GETYPE_EDGE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Index_AddField</name><argument_list>(<argument><expr><name>_idx</name></expr></argument>, <argument><expr><call><name>INDEX_FIELD_DEFAULT</name><argument_list>(<argument><expr><name>_src_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Index_AddField</name><argument_list>(<argument><expr><name>_idx</name></expr></argument>, <argument><expr><call><name>INDEX_FIELD_DEFAULT</name><argument_list>(<argument><expr><name>_dest_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>Index_AddField</name><argument_list>(<argument><expr><name>_idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>_idx</name></expr>;</expr_stmt>
	<return>return <expr><name>INDEX_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_Schema_RemoveExactMatchIndex</name>
<parameter_list>(
	<parameter><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attribute_id</name> <init>= <expr><call><name>GraphContext_GetAttributeID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>attribute_id</name> <operator>==</operator> <name>ATTRIBUTE_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INDEX_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attribute_id</name></expr></argument>, <argument><expr><name>IDX_EXACT_MATCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INDEX_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Index_RemoveField</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// if index field count dropped to 0</comment>
	<comment type="line">// or it is edge index and it dropped to 2(_src_id, _dest_id)</comment>
	<comment type="line">// remove index from schema</comment>
	<if_stmt><if>if<condition>(<expr><call><name>Index_FieldsCount</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
	   <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SCHEMA_EDGE</name> <operator>&amp;&amp;</operator> <call><name>Index_FieldsCount</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Index_Free</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>INDEX_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_Schema_RemoveFullTextIndex</name>
<parameter_list>(
	<parameter><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>Schema_GetIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_FULLTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INDEX_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Index_Free</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>INDEX_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Schema_RemoveIndex</name>
<parameter_list>(
	<parameter><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,
	<parameter><decl><type><name>IndexType</name></type> <name>type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>IDX_FULLTEXT</name></expr>:</case>
			<return>return <expr><call><name>_Schema_RemoveFullTextIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>IDX_EXACT_MATCH</name></expr>:</case>
			<return>return <expr><call><name>_Schema_RemoveExactMatchIndex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>INDEX_FAIL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// index node under all schema indices</comment>
<function><type><name>void</name></type> <name>Schema_AddNodeToIndices</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_IndexNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_IndexNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// index edge under all schema indices</comment>
<function><type><name>void</name></type> <name>Schema_AddEdgeToIndices</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_IndexEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_IndexEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// remove node from schema indicies</comment>
<function><type><name>void</name></type> <name>Schema_RemoveNodeFromIndices</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_RemoveNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_RemoveNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// remove edge from schema indicies</comment>
<function><type><name>void</name></type> <name>Schema_RemoveEdgeFromIndices</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_RemoveEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_RemoveEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Schema_Free</name>
<parameter_list>(
	<parameter><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Free indicies.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_Free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_Free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
