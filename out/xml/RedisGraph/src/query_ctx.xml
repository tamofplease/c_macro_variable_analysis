<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/query_ctx.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/simple_timer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arithmetic/arithmetic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"serializers/graphcontext_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"undo_log/undo_log.h"</cpp:file></cpp:include>

<comment type="line">// GraphContext type as it is registered at Redis.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>RedisModuleType</name> <modifier>*</modifier></type><name>GraphContextRedisModuleType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_key_t</name></type> <name>_tlsQueryCtxKey</name></decl>;</decl_stmt>  <comment type="line">// Thread local storage query context key.</comment>

<comment type="line">// retrieve or instantiate new QueryCtx</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>QueryCtx</name> <modifier>*</modifier></type><name>_QueryCtx_GetCreateCtx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>_tlsQueryCtxKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Set a new thread-local QueryCtx if one has not been created.</comment>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name> <operator>=</operator> <call><name>UndoLog_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>_tlsQueryCtxKey</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// retrieve QueryCtx, return NULL if one does not exist</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>QueryCtx</name> <modifier>*</modifier></type><name>_QueryCtx_GetCtx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>_tlsQueryCtxKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* rax callback routine for freeing computed parameter values. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_ParameterFreeCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param_val</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name>param_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>QueryCtx_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_tlsQueryCtxKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>QueryCtx</name> <modifier>*</modifier></type><name>QueryCtx_GetQueryCtx</name><parameter_list>()</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>QueryCtx_SetTLS</name><parameter_list>(<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>query_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>_tlsQueryCtxKey</name></expr></argument>, <argument><expr><name>query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>QueryCtx_RemoveFromTLS</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>_tlsQueryCtxKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_BeginTimer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Attempt to retrieve the QueryCtx.</comment>
	<expr_stmt><expr><call><name>simple_tic</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Start the execution timer.</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_SetGlobalExecutionCtx</name><parameter_list>(<parameter><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>cmd_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name> <operator>=</operator> <call><name>CommandCtx_GetGraphContext</name><argument_list>(<argument><expr><name>cmd_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>query</name></name> <operator>=</operator> <call><name>CommandCtx_GetQuery</name><argument_list>(<argument><expr><name>cmd_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>bc</name></name> <operator>=</operator> <call><name>CommandCtx_GetBlockingClient</name><argument_list>(<argument><expr><name>cmd_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>redis_ctx</name></name> <operator>=</operator> <call><name>CommandCtx_GetRedisCtx</name><argument_list>(<argument><expr><name>cmd_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>command_name</name></name> <operator>=</operator> <call><name>CommandCtx_GetCommandName</name><argument_list>(<argument><expr><name>cmd_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_SetAST</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>ast</name></name> <operator>=</operator> <name>ast</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_SetGraphCtx</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name> <operator>=</operator> <name>gc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_SetResultSet</name><parameter_list>(<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>result_set</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>result_set</name></name> <operator>=</operator> <name>result_set</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_SetParams</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>params</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AST</name> <modifier>*</modifier></type><name>QueryCtx_GetAST</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>ast</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>rax</name> <modifier>*</modifier></type><name>QueryCtx_GetParams</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>params</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GraphContext</name> <modifier>*</modifier></type><name>QueryCtx_GetGraphCtx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Graph</name> <modifier>*</modifier></type><name>QueryCtx_GetGraph</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>QueryCtx_GetRedisModuleCtx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>redis_ctx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ResultSet</name> <modifier>*</modifier></type><name>QueryCtx_GetResultSet</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>result_set</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ResultSetStatistics</name> <modifier>*</modifier></type><name>QueryCtx_GetResultSetStatistics</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ResultSetStatistics</name>  <modifier>*</modifier></type><name>stats</name>       <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResultSet</name>            <modifier>*</modifier></type><name>result_set</name>  <init>=  <expr><call><name>QueryCtx_GetResultSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>result_set</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>stats</name> <operator>=</operator> <operator>&amp;</operator><name><name>result_set</name><operator>-&gt;</operator><name>stats</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>stats</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_PrintQuery</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_QueryCtx_ThreadSafeContextLock</name><parameter_list>(<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>bc</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ThreadSafeContextLock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>redis_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_QueryCtx_ThreadSafeContextUnlock</name><parameter_list>(<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>bc</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RedisModule_ThreadSafeContextUnlock</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>redis_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>QueryCtx_LockForCommit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCreateCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>locked_for_commit</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="line">// Lock GIL.</comment>
	<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>redis_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>redis_ctx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>graphID</name> <init>= <expr><call><name>RedisModule_CreateString</name><argument_list>(<argument><expr><name>redis_ctx</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>,
														  <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_QueryCtx_ThreadSafeContextLock</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Open key and verify.</comment>
	<decl_stmt><decl><type><name>RedisModuleKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>RedisModule_OpenKey</name><argument_list>(<argument><expr><name>redis_ctx</name></expr></argument>, <argument><expr><name>graphID</name></expr></argument>, <argument><expr><name>REDISMODULE_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_FreeString</name><argument_list>(<argument><expr><name>redis_ctx</name></expr></argument>, <argument><expr><name>graphID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_KeyType</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_KEYTYPE_EMPTY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Encountered an empty key when opened key %s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>clean_up</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_ModuleTypeGetType</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GraphContextRedisModuleType</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Encountered a non-graph value type when opened key %s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>clean_up</name>;</goto>

	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>gc</name> <operator>!=</operator> <call><name>RedisModule_ModuleTypeGetValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Encountered different graph value when opened key %s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>clean_up</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<comment type="line">// Acquire graph write lock.</comment>
	<expr_stmt><expr><call><name>Graph_AcquireWriteLock</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>locked_for_commit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>

<label><name>clean_up</name>:</label>
	<comment type="line">// Free key handle.</comment>
	<expr_stmt><expr><call><name>RedisModule_CloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Unlock GIL.</comment>
	<expr_stmt><expr><call><name>_QueryCtx_ThreadSafeContextUnlock</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// If there is a break point for runtime exception, raise it, otherwise return false.</comment>
	<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_QueryCtx_UnlockCommit</name><parameter_list>(<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>locked_for_commit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<comment type="line">// release graph R/W lock</comment>
	<expr_stmt><expr><call><name>Graph_ReleaseLock</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// close Key</comment>
	<expr_stmt><expr><call><name>RedisModule_CloseKey</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// unlock GIL</comment>
	<expr_stmt><expr><call><name>_QueryCtx_ThreadSafeContextUnlock</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// replicate command</comment>
<function><type><name>void</name></type> <name>QueryCtx_Replicate</name>
<parameter_list>(
	<parameter><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GraphContext</name>   <modifier>*</modifier></type><name>gc</name>        <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>gc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>redis_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>redis_ctx</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// replicate</comment>
	<expr_stmt><expr><call><name>RedisModule_Replicate</name><argument_list>(<argument><expr><name>redis_ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_exec_ctx</name><operator>.</operator><name>command_name</name></name></expr></argument>,
			<argument><expr><literal type="string">"cc!"</literal></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_UnlockCommit</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// already unlocked?</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>locked_for_commit</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>_QueryCtx_UnlockCommit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>QueryCtx_GetExecutionTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>simple_toc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal_exec_ctx</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>QueryCtx_Free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>_QueryCtx_GetCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>UndoLog_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>undo_log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>params</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>_ParameterFreeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>params</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// NULL-set the context for reuse the next time this thread receives a query</comment>
	<expr_stmt><expr><call><name>QueryCtx_RemoveFromTLS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
