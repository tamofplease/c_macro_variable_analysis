<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/module.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redismodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/cron.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"redisearch_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arithmetic/funcs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/thpool/pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/redis_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"configuration/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ast/cypher_whitelist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"procedures/procedure.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"module_event_handlers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"serializers/graphmeta_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"configuration/reconf_handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"serializers/graphcontext_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arithmetic/arithmetic_expression.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Minimal supported Redis version</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_REDIS_VERION_MAJOR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_REDIS_VERION_MINOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_REDIS_VERION_PATCH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Module-level global variables</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>graphs_in_keyspace</name></decl>;</decl_stmt>  <comment type="line">// Global array tracking all extant GraphContexts.</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>process_is_child</name></decl>;</decl_stmt>              <comment type="line">// Flag indicating whether the running process is a child.</comment>

<decl_stmt><decl><type><specifier>extern</specifier> <name>CommandCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>command_ctxs</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_RegisterDataTypes</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>GraphContextType_Register</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failed to register GraphContext type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>GraphMetaType_Register</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failed to register GraphMeta type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_PrepareModuleGlobals</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>graphs_in_keyspace</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>GraphContext</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>process_is_child</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GraphBLAS_Init</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// GraphBLAS should use Redis allocator</comment>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>res</name> <init>= <expr><call><name>GxB_init</name><argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>, <argument><expr><name>RedisModule_Alloc</name></expr></argument>,
			<argument><expr><name>RedisModule_Calloc</name></expr></argument>, <argument><expr><name>RedisModule_Realloc</name></expr></argument>, <argument><expr><name>RedisModule_Free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"Encountered error initializing GraphBLAS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// all matrices in CSR format</comment>
	<expr_stmt><expr><call><name>GxB_set</name><argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>RedisModule_OnLoad</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph"</literal></expr></argument>, <argument><expr><name>REDISGRAPH_MODULE_VERSION</name></expr></argument>,
						<argument><expr><name>REDISMODULE_APIVER_1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// initialize GraphBLAS</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>GraphBLAS_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>REDISMODULE_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// validate minimum redis-server version</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Redis_Version_GreaterOrEqual</name><argument_list>(<argument><expr><name>MIN_REDIS_VERION_MAJOR</name></expr></argument>,
									 <argument><expr><name>MIN_REDIS_VERION_MINOR</name></expr></argument>, <argument><expr><name>MIN_REDIS_VERION_PATCH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"RedisGraph requires redis-server version %d.%d.%d and up"</literal></expr></argument>,
						<argument><expr><name>MIN_REDIS_VERION_MAJOR</name></expr></argument>, <argument><expr><name>MIN_REDIS_VERION_MINOR</name></expr></argument>, <argument><expr><name>MIN_REDIS_VERION_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RediSearch_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>REDISEARCH_INIT_LIBRARY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_OK</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"Starting up RedisGraph version %d.%d.%d."</literal></expr></argument>,
					<argument><expr><name>REDISGRAPH_VERSION_MAJOR</name></expr></argument>, <argument><expr><name>REDISGRAPH_VERSION_MINOR</name></expr></argument>, <argument><expr><name>REDISGRAPH_VERSION_PATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Proc_Register</name><argument_list>()</argument_list></call></expr>;</expr_stmt>         <comment type="line">// Register procedures.</comment>
	<expr_stmt><expr><call><name>AR_RegisterFuncs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <comment type="line">// Register arithmetic functions.</comment>
	<expr_stmt><expr><call><name>Cron_Start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>            <comment type="line">// Start CRON</comment>
	<comment type="line">// Set up global lock and variables scoped to the entire module.</comment>
	<expr_stmt><expr><call><name>_PrepareModuleGlobals</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set up the module's configurable variables,</comment>
	<comment type="line">// using user-defined values where provided</comment>
	<comment type="line">// register for config updates</comment>
	<expr_stmt><expr><call><name>Config_Subscribe_Changes</name><argument_list>(<argument><expr><name>reconf_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>Config_Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>RegisterEventHandlers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CypherWhitelist_Build</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Build whitelist of supported Cypher elements.</comment>

	<comment type="line">// Create thread local storage keys for query and error contexts.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>QueryCtx_Init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>    <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ErrorCtx_Init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>    <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ThreadPools_Init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"Thread pool created, using %d threads."</literal></expr></argument>,
			<argument><expr><call><name>ThreadPools_ReadersCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ompThreadCount</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_OPENMP_NTHREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ompThreadCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>GxB_set</name><argument_list>(<argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><name>ompThreadCount</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"Failed to set OpenMP thread count to %d"</literal></expr></argument>, <argument><expr><name>ompThreadCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"Maximum number of OpenMP threads set to %d"</literal></expr></argument>, <argument><expr><name>ompThreadCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// initialize array of command contexts</comment>
	<expr_stmt><expr><name>command_ctxs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><call><name>ThreadPools_ThreadCount</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommandCtx</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>_RegisterDataTypes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REDISMODULE_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.QUERY"</literal></expr></argument>, <argument><expr><name>CommandDispatch</name></expr></argument>, <argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.RO_QUERY"</literal></expr></argument>, <argument><expr><name>CommandDispatch</name></expr></argument>, <argument><expr><literal type="string">"readonly"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.DELETE"</literal></expr></argument>, <argument><expr><name>Graph_Delete</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.EXPLAIN"</literal></expr></argument>, <argument><expr><name>CommandDispatch</name></expr></argument>, <argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.PROFILE"</literal></expr></argument>, <argument><expr><name>CommandDispatch</name></expr></argument>, <argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.BULK"</literal></expr></argument>, <argument><expr><name>Graph_BulkInsert</name></expr></argument>, <argument><expr><literal type="string">"write deny-oom"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.SLOWLOG"</literal></expr></argument>, <argument><expr><name>Graph_Slowlog</name></expr></argument>, <argument><expr><literal type="string">"readonly"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.CONFIG"</literal></expr></argument>, <argument><expr><name>Graph_Config</name></expr></argument>, <argument><expr><literal type="string">"readonly"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
								 <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.LIST"</literal></expr></argument>, <argument><expr><name>Graph_List</name></expr></argument>, <argument><expr><literal type="string">"readonly"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
								 <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>RedisModule_CreateCommand</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graph.DEBUG"</literal></expr></argument>, <argument><expr><name>Graph_Debug</name></expr></argument>, <argument><expr><literal type="string">"readonly"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
								 <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>setupCrashHandlers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

</unit>
