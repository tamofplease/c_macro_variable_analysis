<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/slow_log/slow_log.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./slow_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/thpool/pools.h"</cpp:file></cpp:include>

<comment type="line">// redis prints doubles with up to 17 digits of precision, which captures</comment>
<comment type="line">// the inaccuracy of many floating-point numbers (such as 0.1)</comment>
<comment type="line">// By using the %g format and a precision of 5 significant digits, we avoid many</comment>
<comment type="line">// awkward representations like RETURN 0.1 emitting "0.10000000000000001",</comment>
<comment type="line">// though we're still subject to many of the typical issues with floating-point error</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_ReplyWithRoundedDouble</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// get length required to print number</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%.5g"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%.5g"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// output string-formatted number</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithStringBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SlowLogItem</name> <modifier>*</modifier></type><name>_SlowLogItem_New</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
	<parameter><decl><type><name>double</name></type> <name>latency</name></decl></parameter>,
	<parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SlowLogItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>time</name></name>    <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>cmd</name></name>     <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>query</name></name>   <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <name>latency</name></expr>;</expr_stmt>

	<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_SlowLog_Item_Free</name>
<parameter_list>(
	<parameter><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Compares two heap record nodes.</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_slowlog_elem_compare</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>B</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>udata</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>SlowLogItem</name> <operator>*</operator><operator>)</operator><name>A</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>SlowLogItem</name> <operator>*</operator><operator>)</operator><name>B</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>latency</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>latency</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>_compute_key</name>
<parameter_list>(
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>asprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_SlowLogItem_ToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>_compute_key</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_SlowLog_RemoveItemFromLookup</name>
<parameter_list>(
	<parameter><decl><type><name>SlowLog</name> <modifier>*</modifier></type><name>slowlog</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>t_id</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name><index>[<expr><name>t_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><call><name>_SlowLogItem_ToString</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>removed</name> <init>= <expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>removed</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_SlowLog_Contains</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>SlowLog</name> <modifier>*</modifier></type><name>slowlog</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>t_id</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>,
	<parameter><decl><type><name>SlowLogItem</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>_compute_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name><index>[<expr><name>t_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <operator>(</operator><name>SlowLogItem</name> <operator>*</operator><operator>)</operator><call><name>raxFind</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>item</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>*</operator><name>item</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SlowLog</name> <modifier>*</modifier></type><name>SlowLog_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SlowLog</name> <modifier>*</modifier></type><name>slowlog</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SlowLog</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Redis main thread + writer threads + reader threads.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>thread_count</name> <init>= <expr><call><name>ThreadPools_ThreadCount</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>slowlog</name><operator>-&gt;</operator><name>count</name></name>    <operator>=</operator> <name>thread_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name>    <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_mutex_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name></name>   <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rax</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slowlog</name><operator>-&gt;</operator><name>min_heap</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>heap_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slowlog</name><operator>-&gt;</operator><name>min_heap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Heap_new</name><argument_list>(<argument><expr><name>_slowlog_elem_compare</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>slowlog</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SlowLog_Add</name>
<parameter_list>(
	<parameter><decl><type><name>SlowLog</name> <modifier>*</modifier></type><name>slowlog</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
	<parameter><decl><type><name>double</name></type> <name>latency</name></decl></parameter>,
	<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>latency</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cmd</name>     <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>query</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>slowlog</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>existing_item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t_id</name> <init>= <expr><call><name>ThreadPools_GetThreadID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name><index>[<expr><name>t_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>min_heap</name><index>[<expr><name>t_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name> <operator>+</operator> <name>t_id</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// initialise time</comment>
	<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>t</name><operator>)</operator></expr> ?</condition><then> <expr><name>_time</name> <operator>=</operator> <operator>*</operator><name>t</name></expr> </then><else>: <expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_time</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// failed to lock, skip logging</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<block>{<block_content>
		<comment type="line">// in critical section</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>exists</name> <init>= <expr><call><name>_SlowLog_Contains</name><argument_list>(<argument><expr><name>slowlog</name></expr></argument>, <argument><expr><name>t_id</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>existing_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>exists</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// a similar item already exists</comment>
			<comment type="line">// see if we need to update its latency</comment>
			<if_stmt><if>if<condition>(<expr><name><name>existing_item</name><operator>-&gt;</operator><name>latency</name></name> <operator>&lt;</operator> <name>latency</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>existing_item</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>_time</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>existing_item</name><operator>-&gt;</operator><name>latency</name></name> <operator>=</operator> <name>latency</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// similar item does not exist in the log</comment>
		<comment type="line">// check if there's enough room to store item</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>introduce_item</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>Heap_count</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLOW_LOG_SIZE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>introduce_item</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// not enough room, see if item should be tracked</comment>
			<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><call><name>Heap_peek</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>top</name><operator>-&gt;</operator><name>latency</name></name> <operator>&lt;</operator> <name>latency</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>Heap_poll</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>_SlowLog_RemoveItemFromLookup</name><argument_list>(<argument><expr><name>slowlog</name></expr></argument>, <argument><expr><name>t_id</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>_SlowLog_Item_Free</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>introduce_item</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>introduce_item</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>_SlowLogItem_New</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>latency</name></expr></argument>, <argument><expr><name>_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Heap_offer</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>min_heap</name></name> <operator>+</operator> <name>t_id</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>   <comment type="line">// end of critical section</comment>
<label><name>cleanup</name>:</label>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// clear all entries from slowlog</comment>
<function><type><name>void</name></type> <name>SlowLog_Clear</name>
<parameter_list>(
	<parameter><decl><type><name>SlowLog</name> <modifier>*</modifier></type><name>slowlog</name></decl></parameter>  <comment type="line">// slowlog to clear</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>slowlog</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>t_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t_id</name> <operator>&lt;</operator> <name><name>slowlog</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>t_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>raxIterator</name></type> <name>iter</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name><index>[<expr><name>t_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>min_heap</name><index>[<expr><name>t_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// enter critical section</comment>
		<if_stmt><if>if<condition>(<expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name> <operator>+</operator> <name>t_id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// failed to lock, skip logging</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// free sloglog items</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_SlowLog_Item_Free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="line">// clear lookup and heap</comment>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name><index>[<expr><name>t_id</name></expr>]</index></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Heap_clear</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// end of critical section</comment>
		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name> <operator>+</operator> <name>t_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SlowLog_Replay</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>SlowLog</name> <modifier>*</modifier></type><name>slowlog</name></decl></parameter>,
	<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>my_t_id</name> <init>= <expr><call><name>ThreadPools_GetThreadID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SlowLog</name> <modifier>*</modifier></type><name>aggregated_slowlog</name> <init>= <expr><call><name>SlowLog_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>t_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t_id</name> <operator>&lt;</operator> <name><name>slowlog</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>t_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// don't lock ourselves</comment>
		<if_stmt><if>if<condition>(<expr><name>my_t_id</name> <operator>!=</operator> <name>t_id</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name> <operator>+</operator> <name>t_id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="line">// failed to lock, skip aggregating this thread slowlog entries</comment>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<block>{<block_content>
			<comment type="line">// critical section</comment>
			<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name><index>[<expr><name>t_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>raxIterator</name></type> <name>iter</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>SlowLog_Add</name><argument_list>(<argument><expr><name>aggregated_slowlog</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>query</name></name></expr></argument>,
							<argument><expr><name><name>item</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// end of critical section</comment>
		</block_content>}</block>
		<if_stmt><if>if<condition>(<expr><name>my_t_id</name> <operator>!=</operator> <name>t_id</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name> <operator>+</operator> <name>t_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name><name>aggregated_slowlog</name><operator>-&gt;</operator><name>min_heap</name><index>[<expr><name>my_t_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>Heap_count</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while<condition>(<expr><call><name>Heap_count</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>Heap_poll</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithDouble</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithStringBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithStringBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_ReplyWithRoundedDouble</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>latency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SlowLog_Free</name><argument_list>(<argument><expr><name>aggregated_slowlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SlowLog_Free</name><parameter_list>(<parameter><decl><type><name>SlowLog</name> <modifier>*</modifier></type><name>slowlog</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slowlog</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>lookup</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>heap_t</name> <modifier>*</modifier></type><name>heap</name> <init>= <expr><name><name>slowlog</name><operator>-&gt;</operator><name>min_heap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>raxIterator</name></type> <name>iter</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>SlowLogItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_SlowLog_Item_Free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Heap_free</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>locks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>lookup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>slowlog</name><operator>-&gt;</operator><name>min_heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>slowlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
