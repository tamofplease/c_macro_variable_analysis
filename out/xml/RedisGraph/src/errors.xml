<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/errors.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../deps/libcypher-parser/lib/src/operators.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pthread_key_t</name></type> <name>_tlsErrorCtx</name></decl>;</decl_stmt> <comment type="line">// Error-handling context held in thread-local storage.</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Error context initialization</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>bool</name></type> <name>ErrorCtx_Init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_tlsErrorCtx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ErrorCtx</name> <modifier>*</modifier></type><name>ErrorCtx_Get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ErrorCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>_tlsErrorCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>_tlsErrorCtx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ErrorCtx_Clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ErrorCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ErrorCtx_Get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>breakpoint</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>breakpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>breakpoint</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Error setting and emitting</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ErrorCtx_SetError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ErrorCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ErrorCtx_Get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// An error is already set - free it</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name>err_fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ErrorCtx_SetError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Set the new error</comment>
	<decl_stmt><decl><type><name>va_list</name></type> <name>valist</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>valist</name></expr></argument>, <argument><expr><name>err_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_ErrorCtx_SetError</name><argument_list>(<argument><expr><name>err_fmt</name></expr></argument>, <argument><expr><name>valist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>valist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* An error was encountered during evaluation, and has already been set in the ErrorCtx.
 * If an exception handler has been set, exit this routine and return to
 * the point on the stack where the handler was instantiated. */</comment>
<function><type><name>void</name></type> <name>ErrorCtx_RaiseRuntimeException</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ErrorCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ErrorCtx_Get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set error if specified</comment>
	<if_stmt><if>if<condition>(<expr><name>err_fmt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>va_list</name></type> <name>valist</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>valist</name></expr></argument>, <argument><expr><name>err_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_ErrorCtx_SetError</name><argument_list>(<argument><expr><name>err_fmt</name></expr></argument>, <argument><expr><name>valist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>valist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>jmp_buf</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>breakpoint</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// If the exception handler hasn't been set, this function returns to the caller,</comment>
	<comment type="line">// which will manage its own freeing and error reporting.</comment>
	<if_stmt><if>if<condition>(<expr><name>env</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><operator>*</operator><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Reply to caller with error</comment>
<function><type><name>void</name></type> <name>ErrorCtx_EmitException</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ErrorCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ErrorCtx_Get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>rm_ctx</name> <init>= <expr><call><name>QueryCtx_GetRedisModuleCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>rm_ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// clear error context once error emitted</comment>
	<expr_stmt><expr><call><name>ErrorCtx_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Returns true if error is set</comment>
<function><type><specifier>inline</specifier> <name>bool</name></type> <name>ErrorCtx_EncounteredError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ErrorCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>ErrorCtx_Get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Specific error scenarios</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>Error_InvalidFilterPlacement</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>entitiesRax</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>entitiesRax</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Something is wrong - could not find a matching op where all references are solved.</comment>
	<decl_stmt><decl><type><name>raxIterator</name></type> <name>it</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>entitiesRax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Retrieve the first key in the rax.</comment>
	<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Build invalid entity string on the stack to add null terminator.</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>invalid_entity</name><index>[<expr><name><name>it</name><operator>.</operator><name>key_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>invalid_entity</name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>invalid_entity</name><index>[<expr><name><name>it</name><operator>.</operator><name>key_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// Emit compile-time error.</comment>
	<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Unable to resolve filtered alias '%s'"</literal></expr></argument>, <argument><expr><name>invalid_entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>entitiesRax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Error_SITypeMismatch</name><parameter_list>(<parameter><decl><type><name>SIValue</name></type> <name>received</name></decl></parameter>, <parameter><decl><type><name>SIType</name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>bufferLen</name> <init>= <expr><name>MULTIPLE_TYPE_STRING_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>bufferLen</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SIType_ToMultipleTypeString</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Type mismatch: expected %s but was %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
					  <argument><expr><call><name>SIType_ToString</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>received</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Error_UnsupportedASTNodeType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_str</name> <init>= <expr><call><name>cypher_astnode_typestr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"RedisGraph does not currently support %s"</literal></expr></argument>, <argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Error_UnsupportedASTOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"RedisGraph does not currently support %s"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>Error_InvalidPropertyValue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Property values can only be of primitive types or arrays of primitive types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Error_DivisionByZero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Division by zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
