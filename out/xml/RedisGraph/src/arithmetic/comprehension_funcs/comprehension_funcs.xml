<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/comprehension_funcs/comprehension_funcs.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"comprehension_funcs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../func_desc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../datatypes/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../execution_plan/record.h"</cpp:file></cpp:include>

<comment type="line">// Routine for freeing a comprehension function's private data.</comment>
<function><type><name>void</name></type> <name>ListComprehension_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>ctx_ptr</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// If this comprehension has a filter tree, free it.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="line">// If this comprehension has an eval routine, free it.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>eval_exp</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eval_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name><operator>-&gt;</operator><name>mapping</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Record_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Routine for cloning a comprehension function's private data.</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>ListComprehension_Clone</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>orig</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>orig</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Allocate space for the clone.</comment>
	<decl_stmt><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx_clone</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ListComprehensionCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Clone the variadic node.</comment>
	<expr_stmt><expr><name><name>ctx_clone</name><operator>-&gt;</operator><name>variable_str</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>variable_str</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx_clone</name><operator>-&gt;</operator><name>variable_idx</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>variable_idx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx_clone</name><operator>-&gt;</operator><name>local_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// Clone the predicate filter tree, if present.</comment>
	<expr_stmt><expr><name><name>ctx_clone</name><operator>-&gt;</operator><name>ft</name></name> <operator>=</operator> <call><name>FilterTree_Clone</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Clone the eval routine, if present.</comment>
	<expr_stmt><expr><name><name>ctx_clone</name><operator>-&gt;</operator><name>eval_exp</name></name> <operator>=</operator> <call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eval_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ctx_clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_PopulateComprehensionCtx</name><parameter_list>(<parameter><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>outer_record</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>local_record_map</name> <init>= <expr><call><name>raxClone</name><argument_list>(<argument><expr><name><name>outer_record</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>intptr_t</name></type> <name>id</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name>local_record_map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>local_record_map</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>variable_str</name></name></expr></argument>,
						  <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_str</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name> <operator>=</operator> <call><name>Record_New</name><argument_list>(<argument><expr><name>local_record_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// This could just be assigned to 'id', but for safety we'll use a Record lookup.</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_idx</name></name> <operator>=</operator> <call><name>Record_GetEntryIdx</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_idx</name></name> <operator>!=</operator> <name>INVALID_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>SIValue</name></type> <name>AR_ANY</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<comment type="line">// ANY comprehensions are invoked with three children:</comment>
	<comment type="line">// The list to iterate over.</comment>
	<comment type="line">// The current Record.</comment>
	<comment type="line">// The function context.</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>list</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>outer_record</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ptrval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>private_data</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// On the first invocation, build the local Record.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_PopulateComprehensionCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>outer_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Populate the local Record with the contents of the outer Record.</comment>
	<expr_stmt><expr><call><name>Record_Clone</name><argument_list>(<argument><expr><name>outer_record</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Retrieve the current element.</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>current_elem</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Add the current element to the record at its allocated position.</comment>
		<expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_idx</name></name></expr></argument>, <argument><expr><name>current_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// If any element in an ANY function passes the predicate, return true.</comment>
		<if_stmt><if>if<condition>(<expr><call><name>FilterTree_applyFilters</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// No element passed, return false.</comment>
	<return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>AR_ALL</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<comment type="line">// ALL comprehensions are invoked with three children:</comment>
	<comment type="line">// The list to iterate over.</comment>
	<comment type="line">// The current Record.</comment>
	<comment type="line">// The function context.</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>list</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>outer_record</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ptrval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>private_data</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// On the first invocation, build the local Record.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_PopulateComprehensionCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>outer_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Populate the local Record with the contents of the outer Record.</comment>
	<expr_stmt><expr><call><name>Record_Clone</name><argument_list>(<argument><expr><name>outer_record</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Retrieve the current element.</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>current_elem</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Add the current element to the record at its allocated position.</comment>
		<expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_idx</name></name></expr></argument>, <argument><expr><name>current_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// If any element in an ALL function does not pass the predicate, return false.</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FilterTree_applyFilters</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// All elements passed, return true.</comment>
	<return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>AR_SINGLE</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<comment type="line">// ALL comprehensions are invoked with three children:</comment>
	<comment type="line">// The list to iterate over.</comment>
	<comment type="line">// The current Record.</comment>
	<comment type="line">// The function context.</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>list</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>outer_record</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ptrval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>private_data</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// On the first invocation, build the local Record.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_PopulateComprehensionCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>outer_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Populate the local Record with the contents of the outer Record.</comment>
	<expr_stmt><expr><call><name>Record_Clone</name><argument_list>(<argument><expr><name>outer_record</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>single</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Retrieve the current element.</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>current_elem</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Add the current element to the record at its allocated position.</comment>
		<expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_idx</name></name></expr></argument>, <argument><expr><name>current_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// If more then 1 element in a SINGLE function pass the predicate, return false.</comment>
		<if_stmt><if>if<condition>(<expr><call><name>FilterTree_applyFilters</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>single</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>single</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// If only 1 element in a SINGLE function pass the predicate, return true, otherwise false.</comment>
	<return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>single</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>AR_NONE</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<comment type="line">// ALL comprehensions are invoked with three children:</comment>
	<comment type="line">// The list to iterate over.</comment>
	<comment type="line">// The current Record.</comment>
	<comment type="line">// The function context.</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>list</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>outer_record</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ptrval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>private_data</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// On the first invocation, build the local Record.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_PopulateComprehensionCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>outer_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Populate the local Record with the contents of the outer Record.</comment>
	<expr_stmt><expr><call><name>Record_Clone</name><argument_list>(<argument><expr><name>outer_record</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Retrieve the current element.</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>current_elem</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Add the current element to the record at its allocated position.</comment>
		<expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_idx</name></name></expr></argument>, <argument><expr><name>current_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// If any element in an NONE function pass the predicate, return false.</comment>
		<if_stmt><if>if<condition>(<expr><call><name>FilterTree_applyFilters</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FILTER_PASS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// No elements passed, return true.</comment>
	<return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>SIValue</name></type> <name>AR_LIST_COMPREHENSION</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* List comprehensions are invoked with three children:
	 * The list to iterate over.
	 * The current Record.
	 * The function context. */</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>list</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>outer_record</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ptrval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListComprehensionCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>private_data</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// On the first invocation, build the local Record.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_PopulateComprehensionCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>outer_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>local_record</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Populate the local Record with the contents of the outer Record.</comment>
	<expr_stmt><expr><call><name>Record_Clone</name><argument_list>(<argument><expr><name>outer_record</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Instantiate the array to be returned.</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>retval</name> <init>= <expr><call><name>SI_Array</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Retrieve the current element.</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>current_elem</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Add the current element to the record at its allocated position.</comment>
		<expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>variable_idx</name></name></expr></argument>, <argument><expr><name>current_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// if the comprehension has a filter tree</comment>
		<comment type="line">// run the current element through it</comment>
		<comment type="line">// if it does not pass, skip this element</comment>
		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name> <operator>&amp;&amp;</operator> <call><name>FilterTree_applyFilters</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FILTER_PASS</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>eval_exp</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// compute the current element to append to the return list</comment>
			<decl_stmt><decl><type><name>SIValue</name></type> <name>newval</name> <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>eval_exp</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// if the comprehension has no eval routine</comment>
			<comment type="line">// add each element unmodified</comment>
			<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>, <argument><expr><name>current_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Register_ComprehensionFuncs</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIType</name> <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type> <name>ret_type</name> <init>= <expr><name>T_BOOL</name> <operator>|</operator> <name>T_NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func_desc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_ARRAY</name> <operator>|</operator> <name>T_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_FuncDescNew</name><argument_list>(<argument><expr><literal type="string">"any"</literal></expr></argument>, <argument><expr><name>AR_ANY</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_SetPrivateDataRoutines</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>, <argument><expr><name>ListComprehension_Free</name></expr></argument>, <argument><expr><name>ListComprehension_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_ARRAY</name> <operator>|</operator> <name>T_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_FuncDescNew</name><argument_list>(<argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><name>AR_ALL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_SetPrivateDataRoutines</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>, <argument><expr><name>ListComprehension_Free</name></expr></argument>, <argument><expr><name>ListComprehension_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_ARRAY</name> <operator>|</operator> <name>T_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_FuncDescNew</name><argument_list>(<argument><expr><literal type="string">"single"</literal></expr></argument>, <argument><expr><name>AR_SINGLE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_SetPrivateDataRoutines</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>, <argument><expr><name>ListComprehension_Free</name></expr></argument>, <argument><expr><name>ListComprehension_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_ARRAY</name> <operator>|</operator> <name>T_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_FuncDescNew</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><name>AR_NONE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_SetPrivateDataRoutines</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>, <argument><expr><name>ListComprehension_Free</name></expr></argument>, <argument><expr><name>ListComprehension_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_ARRAY</name> <operator>|</operator> <name>T_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <name>T_ARRAY</name> <operator>|</operator> <name>T_NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_FuncDescNew</name><argument_list>(<argument><expr><literal type="string">"list_comprehension"</literal></expr></argument>, <argument><expr><name>AR_LIST_COMPREHENSION</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_SetPrivateDataRoutines</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>, <argument><expr><name>ListComprehension_Free</name></expr></argument>, <argument><expr><name>ListComprehension_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
