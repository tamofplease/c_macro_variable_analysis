<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/point_funcs/point_funcs.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../func_desc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../datatypes/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EARTH_RADIUS</name></cpp:macro> <cpp:value>6378140.0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DegreeToRadians</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) * M_PI / 180.0)</cpp:value></cpp:define>

<function><type><name>SIValue</name></type> <name>AR_TOPOINT</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>map</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// expecting input to be a map</comment>
	<comment type="line">// point({latitude: 32.0705767, longitude: 34.8185946})</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>==</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>key_count</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>key_count</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"A point map should have 2 elements, latitude and longitude"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>latitude</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>longitude</name></decl>;</decl_stmt>

	<comment type="line">// make sure lat is present in map</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>MAP_GET</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"latitude"</literal></expr></argument>, <argument><expr><name>latitude</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"Did not find 'latitude' value in point map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// make sure lon is present in map</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>MAP_GET</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"longitude"</literal></expr></argument>, <argument><expr><name>longitude</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"Did not find 'longitude' value in point map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// validate lat, lon types</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>SI_NUMERIC</name> <operator>&amp;</operator> <call><name>SI_TYPE</name><argument_list>(<argument><expr><name>latitude</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SI_NUMERIC</name> <operator>&amp;</operator> <call><name>SI_TYPE</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"'latitude' and 'longitude' values in point map were not both valid numerics"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// validate latitude is in range [-90,90]</comment>
	<if_stmt><if>if<condition>(<expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>latitude</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">90</literal> <operator>||</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>latitude</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>-</operator><literal type="number">90</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"latitude should be within the -90 to 90 range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// validate longitude is in range [-180,180]</comment>
	<if_stmt><if>if<condition>(<expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">180</literal> <operator>||</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>-</operator><literal type="number">180</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"longitude should be within the -180 to 180 range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>SI_Point</name><argument_list>(<argument><expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>latitude</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>longitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>AR_DISTANCE</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// compute distance between two points</comment>
	<comment type="line">// a = sinÂ²(ÎÏ/2) + cos Ï1 â cos Ï2 â sinÂ²(ÎÎ»/2)</comment>
	<comment type="line">// c = 2 * atan2( âa, â(1âa) )</comment>
	<comment type="line">// d = R * c</comment>
	<comment type="line">// where Ï represent the latitudes, and Î» represent the longitudes</comment>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>p1</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>p2</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// check inputs</comment>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name> <operator>||</operator> <call><name>SI_TYPE</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>float</name></type> <name><name>lat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>DegreeToRadians</name><argument_list>(<argument><expr><name><name>p1</name><operator>.</operator><name>point</name><operator>.</operator><name>latitude</name></name></expr></argument>)</argument_list></call></expr>,
					 <macro><name>DegreeToRadians</name><argument_list>(<argument>p2.point.latitude</argument>)</argument_list></macro>
				   }</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>float</name></type> <name><name>lon</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>DegreeToRadians</name><argument_list>(<argument><expr><name><name>p1</name><operator>.</operator><name>point</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr>,
					 <macro><name>DegreeToRadians</name><argument_list>(<argument>p2.point.longitude</argument>)</argument_list></macro>
				   }</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>float</name></type> <name>dlat</name> <init>= <expr><name><name>lat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>lat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>dlon</name> <init>= <expr><name><name>lon</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>lon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// a = sinÂ²(ÎÏ/2) + cos Ï1 â cos Ï2 â sinÂ²(ÎÎ»/2)</comment>
	<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>dlat</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>lat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>lat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>dlon</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// c = 2 * atan2( âa, â(1âa) )</comment>
	<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name>atan2</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// d = R * c</comment>
	<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><name>EARTH_RADIUS</name> <operator>*</operator> <name>c</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Register_PointFuncs</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIType</name> <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type> <name>ret_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func_desc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <name>T_NULL</name> <operator>|</operator> <name>T_POINT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_FuncDescNew</name><argument_list>(<argument><expr><literal type="string">"point"</literal></expr></argument>, <argument><expr><name>AR_TOPOINT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <name>T_NULL</name> <operator>|</operator> <name>T_DOUBLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_FuncDescNew</name><argument_list>(<argument><expr><literal type="string">"distance"</literal></expr></argument>, <argument><expr><name>AR_DISTANCE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
