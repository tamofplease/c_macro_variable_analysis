<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/algebraic_expression_eval.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algebraic_expression.h"</cpp:file></cpp:include>

<comment type="line">// forward declarations</comment>
<function_decl><type><name>RG_Matrix</name></type> <name>_AlgebraicExpression_Eval</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>res</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>RG_Matrix</name></type> <name>_Eval_Mul</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>res</name></decl></parameter>
)</parameter_list>;</function_decl>

<function_decl><type><name>RG_Matrix</name></type> <name>_Eval_Add</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>res</name></decl></parameter>
)</parameter_list>;</function_decl>

<function><type><name>RG_Matrix</name></type> <name>_AlgebraicExpression_Eval</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>res</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// perform operation</comment>
	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_Eval_Mul</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_Eval_Add</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"transpose should have been applied prior to evaluation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression operation"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RG_Matrix</name></type> <name>AlgebraicExpression_Eval</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>res</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>_AlgebraicExpression_Eval</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
