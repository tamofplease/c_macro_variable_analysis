<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/algebraic_expression_optimization.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algebraic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../configuration/config.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_AlgebraicExpression_IsMultiplicationNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>AL_EXP_MUL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_AlgebraicExpression_IsAdditionNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>AL_EXP_ADD</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Collect all operands under given root by performing a left to right scan
 * adding each encountered operand to the `operands` array. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AlgebraicExpression_CollectOperands</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
												 <parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>operands</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>operands</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>bfree</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <comment type="line">// The caller is the new owner of this operand.</comment>
		<break>break;</break>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
			<comment type="line">// Transpose is considered as an operand.</comment>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>operands</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
		<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
			<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>_AlgebraicExpression_CollectOperands</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>operands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression operation type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>__AlgebraicExpression_MulOverAdd</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>_AlgebraicExpression_IsMultiplicationNode</name><argument_list>(<argument><expr><operator>*</operator><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>_AlgebraicExpression_IsAdditionNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>_AlgebraicExpression_IsAdditionNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// MATCH ()-[:A|B]-&gt;()-[:C|D]-&gt;()</comment>
			<comment type="line">// (A+B)*(C+D) =</comment>
			<comment type="line">// = (A*C)+(A*D)+(B*C)+(B*D)</comment>

			<decl_stmt><decl><type><name>uint</name></type> <name>left_op_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint</name></type> <name>right_op_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>left_ops</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>, <argument><expr><name>left_op_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>right_ops</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>, <argument><expr><name>right_op_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>left_op_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>left_ops</name></expr></argument>, <argument><expr><call><name>_AlgebraicExpression_OperationRemoveSource</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>right_op_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>right_ops</name></expr></argument>, <argument><expr><call><name>_AlgebraicExpression_OperationRemoveSource</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Multiply each left op by right op: (A*C), (A*D), (B*C), (B*D).</comment>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>multiplications</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>,
															  <argument><expr><name>left_op_count</name> <operator>*</operator> <name>right_op_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>left_op_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>l_op</name> <init>= <expr><name><name>left_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>right_op_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<comment type="line">// Clone op as it's being reused: A*C, A*D.</comment>
					<if_stmt><if>if<condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l_op</name> <operator>=</operator> <call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>l_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>r_op</name> <init>= <expr><name><name>right_ops</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<comment type="line">// Clone op as it's being reused B*C, B*D.</comment>
					<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r_op</name> <operator>=</operator> <call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>r_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>mul</name> <init>= <expr><call><name>_AlgebraicExpression_MultiplyToTheRight</name><argument_list>(<argument><expr><name>l_op</name></expr></argument>, <argument><expr><name>r_op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>multiplications</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>left_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>right_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Sum all multiplications: (A*C)+(A*D)+(B*C)+(B*D).</comment>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>add</name> <init>= <expr><name><name>multiplications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>left_op_count</name> <operator>*</operator> <name>right_op_count</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>_AlgebraicExpression_AddToTheRight</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name><name>multiplications</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>multiplications</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Free original root and overwrite it with new addition root.</comment>
			<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><operator>*</operator><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Update root.</comment>
			<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if>

		<if type="elseif">else if<condition>(<expr><operator>(</operator><call><name>_AlgebraicExpression_IsAdditionNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_AlgebraicExpression_IsAdditionNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
				<operator>(</operator><call><name>_AlgebraicExpression_IsAdditionNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_AlgebraicExpression_IsAdditionNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

			<comment type="line">// disconnect left and right children from root</comment>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>_AlgebraicExpression_OperationRemoveDest</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>_AlgebraicExpression_OperationRemoveDest</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><operator>*</operator><name>root</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>A</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>B</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>add</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_ADD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if<condition>(<expr><call><name>_AlgebraicExpression_IsAdditionNode</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// lefthand side is addition</comment>
				<comment type="line">// (A + B + C) * D = (A * D) + (B * D) + (C * D)</comment>
				<expr_stmt><expr><name>B</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>_AlgebraicExpression_OperationRemoveDest</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>mul</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="line">// righthand side is addition</comment>
				<comment type="line">// D * (A + B + C) = (D * A) + (D * B) + (D * C)</comment>
				<expr_stmt><expr><name>A</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>_AlgebraicExpression_OperationRemoveDest</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>mul</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<comment type="line">// Free original root and overwrite it with new addition root.</comment>
			<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><operator>*</operator><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Update root.</comment>
			<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// recurse</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><operator>*</operator><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>__AlgebraicExpression_MulOverAdd</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>root</name><operator>)</operator><operator>-&gt;</operator><name><name>operation</name><operator>.</operator><name>children</name></name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Distributive, multiplication over addition:</comment>
<comment type="line">// A * (B + C) = (A * B) + (A * C)</comment>
<comment type="line">//</comment>
<comment type="line">//           (*)</comment>
<comment type="line">//   (A)             (+)</comment>
<comment type="line">//            (B)          (C)</comment>
<comment type="line">//</comment>
<comment type="line">// Becomes</comment>
<comment type="line">//</comment>
<comment type="line">//               (+)</comment>
<comment type="line">//       (*)                (*)</comment>
<comment type="line">// (A)        (B)     (A)        (C)</comment>
<comment type="line">//</comment>
<comment type="line">// Whenever we encounter a multiplication operation</comment>
<comment type="line">// where one child is an addition operation and the other child</comment>
<comment type="line">// is a multiplication operation, we'll replace root multiplication</comment>
<comment type="line">// operation with an addition operation with two multiplication operations</comment>
<comment type="line">// one for each child of the original addition operation, as can be seen above.</comment>
<comment type="line">// we'll want to reuse the left handside of the multiplication.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AlgebraicExpression_MulOverAdd</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// As long as the tree changes keep modifying.</comment>
	<while>while<condition>(<expr><call><name>__AlgebraicExpression_MulOverAdd</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/* Collapse multiplication operation under a single multiplication op
 * exp = A * B * C
 * exp can be computed in two ways:
 * 1. (A * B) * C
 * 2. A * (B * C)
 * by flattening the expression both 1 and 2 are represented by the
 * same tree structure. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AlgebraicExpression_FlattenMultiplications</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
		<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
			<comment type="line">// Keep searching for a multiplication operation.</comment>
			<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>_AlgebraicExpression_FlattenMultiplications</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>

		<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
			<comment type="line">// Root has sub multiplication node(s).</comment>
			<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_OperationCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_OperandCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>flat_children</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>, <argument><expr><name>child_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>_AlgebraicExpression_CollectOperands</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flat_children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>_AlgebraicExpression_FreeOperation</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name> <operator>=</operator> <name>flat_children</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic operation type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	<default>default:</default>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Transpose pushdown</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Forward declaration.</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_Pushdown_TransposeExp</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Transpose addition.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Pushdown_TransposeAddition</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// T(A + B) = T(A) + T(B)</comment>
	<comment type="line">// Transpose children.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_Pushdown_TransposeExp</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="line">// Transpose multiplication.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Pushdown_TransposeMultiplication</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Swap children, Transpose(A * B) = Transpose(B) * Transpose(A)</comment>
	<expr_stmt><expr><call><name>array_reverse</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Transpose children.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_Pushdown_TransposeExp</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="line">// Transpose transpose.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Pushdown_TransposeTranspose</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// T(T(A)) = A</comment>
	<comment type="line">// Expecting just a single operand.</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>only_child</name> <init>= <expr><call><name>_AlgebraicExpression_OperationRemoveDest</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Replace Transpose operation with its child.</comment>
	<expr_stmt><expr><call><name>_AlgebraicExpression_InplaceRepurpose</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>only_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Transpose operation.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Pushdown_TransposeOperation</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
		<comment type="line">// T(A + B) = T(A) + T(B)</comment>
		<expr_stmt><expr><call><name>_Pushdown_TransposeAddition</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
		<expr_stmt><expr><call><name>_Pushdown_TransposeMultiplication</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
		<expr_stmt><expr><call><name>_Pushdown_TransposeTranspose</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression operation"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// Transpose operand.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Pushdown_TransposeOperand</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// No need to transpose a diagonal matrix.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// A -&gt; Transpose(A)</comment>
	<comment type="line">// We're going to repurpose exp, make a clone.</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name> <init>= <expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_InplaceRepurposeOperandToOperation</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>AL_EXP_TRANSPOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add original operand as a child of exp (which is now a transpose operation).
	 * Transpose(A) */</comment>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_Pushdown_TransposeExp</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<expr_stmt><expr><call><name>_Pushdown_TransposeOperation</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<expr_stmt><expr><call><name>_Pushdown_TransposeOperand</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Push down transpose operations to the point where they are applied to individual operands
 * once this optimization is applied there shouldn't be instances of transpose acting on
 * operation nodes such as multiplication and addition.
 *
 * Consider Exp = Transpose(A + B)
 *
 *           (transpose)
 *               (+)
 *         (A)          (B)
 *
 * PushDownTranspose will transform Exp to: Transpose(A) + Transpose(B)
 *
 *                (+)
 *    (transpose)     (transpose)
 *         (A)            (B)
 *
 * Another example, Exp = Transpose(A * B)
 *
 *           (transpose)
 *               (*)
 *         (A)          (B)
 *
 * Would become Transpose(B) * Transpose(A)
 *
 *                (*)
 *    (transpose)     (transpose)
 *         (B)            (A)
 * */</comment>
<function><type><name>void</name></type> <name>AlgebraicExpression_PushDownTranspose</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<break>break;</break>  <comment type="line">// Nothing to be done.</comment>

	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>    <comment type="line">// Fall through.</comment>
		<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>    <comment type="line">// Fall through.</comment>
		<case>case <expr><name>AL_EXP_POW</name></expr>:</case>    <comment type="line">// Fall through.</comment>
			<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>AlgebraicExpression_PushDownTranspose</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>

		<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
			<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* Transpose operation:
				 * Transpose(A + B) = Transpose(A) + Transpose(B)
				 * Transpose(A * B) = Transpose(B) * Transpose(A) */</comment>
				<expr_stmt><expr><call><name>_Pushdown_TransposeExp</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Replace Transpose root with transposed expression.
				 * Remove root only child. */</comment>
				<expr_stmt><expr><call><name>_AlgebraicExpression_OperationRemoveDest</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>_AlgebraicExpression_InplaceRepurpose</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* It is possible for `root` to contain a transpose subexpression
				 * push it further down. */</comment>
				<expr_stmt><expr><call><name>AlgebraicExpression_PushDownTranspose</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown operation"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<break>break;</break>  <comment type="line">// Break out of case AL_OPERATION.</comment>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// AlgebraicExpression optimizations</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<function><type><name>void</name></type> <name>AlgebraicExpression_Optimize</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AlgebraicExpression_PushDownTranspose</name><argument_list>(<argument><expr><operator>*</operator><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_AlgebraicExpression_MulOverAdd</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_AlgebraicExpression_FlattenMultiplications</name><argument_list>(<argument><expr><operator>*</operator><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Retrieve all operands now that they are guaranteed to be leaves.</comment>
	<expr_stmt><expr><call><name>_AlgebraicExpression_PopulateOperands</name><argument_list>(<argument><expr><operator>*</operator><name>exp</name></expr></argument>, <argument><expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
