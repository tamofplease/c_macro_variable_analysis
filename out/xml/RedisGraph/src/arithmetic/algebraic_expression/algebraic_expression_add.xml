<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/algebraic_expression_add.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algebraic_expression.h"</cpp:file></cpp:include>

<function><type><name>RG_Matrix</name></type> <name>_Eval_Add</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>res</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>;</decl_stmt>                   <comment type="line">// number of rows of operand</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl>;</decl_stmt>                   <comment type="line">// number of columns of operand</comment>

	<decl_stmt><decl><type><name>bool</name></type>        <name>res_in_use</name>  <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>  <comment type="line">//  can we use `res` for intermediate evaluation</comment>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>   <name>A</name>           <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>   <comment type="line">//  left operand</comment>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>   <name>B</name>           <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>   <comment type="line">//  right operand</comment>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>   <name>inter</name>       <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>   <comment type="line">//  intermediate matrix</comment>

	<comment type="line">// get left and right operands</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// if left operand is a matrix, simply get it</comment>
	<comment type="line">// otherwise evaluate left hand side using `res` to store LHS value</comment>
	<if_stmt><if>if<condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>AlgebraicExpression_Eval</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res_in_use</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// if right operand is a matrix, simply get it</comment>
	<comment type="line">// otherwise evaluate right hand side using `res`</comment>
	<comment type="line">// if free or create an additional matrix to store RHS value</comment>
	<if_stmt><if>if<condition>(<expr><name><name>right</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>res_in_use</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// `res` is in use, create an additional matrix</comment>
			<expr_stmt><expr><call><name>RG_Matrix_nrows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RG_Matrix_ncols</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inter</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>AlgebraicExpression_Eval</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// `res` is not used just yet, use it for RHS evaluation</comment>
			<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>AlgebraicExpression_Eval</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// perform addition</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_eWiseAdd</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>GxB_ANY_PAIR_BOOL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// expression has more than 2 operands, e.g. A+B+C...</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>CHILD_AT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>right</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// 'right' represents either + or * operation</comment>
			<if_stmt><if>if<condition>(<expr><name>inter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// can't use `res`, use an intermidate matrix</comment>
				<expr_stmt><expr><call><name>RG_Matrix_nrows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RG_Matrix_ncols</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inter</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_Eval</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>B</name> <operator>=</operator> <name>inter</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// perform addition</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_eWiseAdd</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>GxB_ANY_PAIR_BOOL</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>inter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RG_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

</unit>
