<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/utils.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../configuration/config.h"</cpp:file></cpp:include>

<comment type="line">// Performs inplace re-purposing of an operand into an operation</comment>
<function><type><name>void</name></type> <name>_InplaceRepurposeOperandToOperation</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
	<parameter><decl><type><name>AL_EXP_OP</name></type> <name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>operand</name> <operator>&amp;&amp;</operator> <name><name>operand</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operation</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// turn operand into an operation.</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AlgebraicExpression</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Don't free op internals!</comment>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Performs inplace re-purposing of an operation into an operand.</comment>
<function><type><name>void</name></type> <name>_AlgebraicExpression_InplaceRepurpose</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>replacement</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>&amp;&amp;</operator> <name>replacement</name> <operator>&amp;&amp;</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Free internals.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_AlgebraicExpression_FreeOperation</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_AlgebraicExpression_FreeOperand</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Replace.</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AlgebraicExpression</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Free the memory of the migrated replacement.</comment>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_AlgebraicExpression_OperationRemoveChild</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AL_OPERATION</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// no child nodes to remove</comment>
	<if_stmt><if>if<condition>(<expr><name>child_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// search for child in parent</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// child found, remove it</comment>
		<comment type="line">// shift-left following children</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>child_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// Removes the rightmost direct child node of root.</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_OperationRemoveDest</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>  <comment type="line">// Root from which to remove a child.</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AL_OPERATION</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// No child nodes to remove.</comment>
	<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Remove rightmost child.</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>child</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Removes the leftmost direct child node of root.</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_OperationRemoveSource</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>   <comment type="line">// Root from which to remove a child.</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AL_OPERATION</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// No child nodes to remove.</comment>
	<if_stmt><if>if<condition>(<expr><name>child_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Remove leftmost child.</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Shift left by 1.</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>child</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Multiplies `exp` to the left by `lhs`.
 * Returns new expression root.
 * `lhs` = (A + B)
 * `exp` = Transpose(C)
 * Returns (A + B) * Transpose(C) where `*` is the new root. */</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_MultiplyToTheLeft</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lhs</name> <operator>&amp;&amp;</operator> <name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>mul</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>mul</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Multiplies `exp` to the right by `rhs`.
 * Returns new expression root.
 * `exp` = Transpose(C)
 * `rhs` = (A + B)
 * Returns Transpose(C) * (A + B) where `*` is the new root. */</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_MultiplyToTheRight</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>&amp;&amp;</operator> <name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>mul</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>mul</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Adds `exp` to the left by `lhs`.
 * Returns new expression root.
 * `lhs` = (A * B)
 * `exp` = Transpose(C)
 * Returns (A * B) + Transpose(C) where `+` is the new root. */</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_AddToTheLeft</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lhs</name> <operator>&amp;&amp;</operator> <name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>add</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_ADD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>add</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Adds `exp` to the right by `rhs`.
 * Returns new expression root.
 * `exp` = Transpose(C)
 * `rhs` = (A * B)
 * Returns Transpose(C) + (A * B) where `+` is the new root. */</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_AddToTheRight</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>&amp;&amp;</operator> <name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>add</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_ADD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>add</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_AlgebraicExpression_FreeOperation</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>node</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_AlgebraicExpression_FreeOperand</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>node</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>bfree</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Locate operand at position `operand_idx` counting from left to right.</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>__AlgebraicExpression_GetOperand</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,    <comment type="line">// Root of expression.</comment>
	<parameter><decl><type><name>uint</name></type> <name>operand_idx</name></decl></parameter>,                   <comment type="line">// Operand position (LTR, zero based).</comment>
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>current_operand_idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// `operand_idx` must be within [0, AlgebraicExpression_OperandCount(root)).</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case  <expr><name>AL_OPERAND</name></expr>:</case>
		<if_stmt><if>if<condition>(<expr><name>operand_idx</name> <operator>==</operator> <operator>*</operator><name>current_operand_idx</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>AlgebraicExpression</name> <operator>*</operator><operator>)</operator><name>root</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>current_operand_idx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>__AlgebraicExpression_GetOperand</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>operand_idx</name></expr></argument>, <argument><expr><name>current_operand_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>operand</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>operand</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_GetOperand</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,    <comment type="line">// Root of expression.</comment>
	<parameter><decl><type><name>uint</name></type> <name>operand_idx</name></decl></parameter>                    <comment type="line">// Operand position (LTR, zero based).</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>current_operand_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>__AlgebraicExpression_GetOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>operand_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_operand_idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// populate an operand with a standard matrix</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AlgebraicExpression_PopulateOperand</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
												 <parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// do not update matrix if already set,</comment>
	<comment type="line">// as algebraic expression test depends on this behavior</comment>
	<comment type="line">// TODO: Redesign _AlgebraicExpression_FromString to remove this condition</comment>
	<if_stmt><if>if<condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Graph</name>       <modifier>*</modifier></type><name>g</name>      <init>=       <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Schema</name>      <modifier>*</modifier></type><name>s</name>      <init>=       <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>    <name>m</name>      <init>=       <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  <modifier>*</modifier></type><name>label</name>  <init>=       <expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// no label, use THE adjacency matrix</comment>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>GRAPH_NO_RELATION</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// diagonal operand refers to label matrix</comment>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// none diagonal matrix, use relationship matrix</comment>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// m is unset, use zero matrix</comment>
	<if_stmt><if>if<condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>Graph_GetZeroMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// set operand matrix</comment>
	<expr_stmt><expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// populate a transposed operand with a transposed relationship matrix</comment>
<comment type="line">// and swap the row/col domains</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AlgebraicExpression_PopulateTransposedOperand</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>,
														   <parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// swap the row and column domains of the operand</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name> <operator>=</operator> <name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

	<comment type="line">// diagonal matrices do not need to be transposed</comment>
	<if_stmt><if>if<condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// do not update matrix if already set</comment>
	<comment type="line">// as algebraic expression test depends on this behavior</comment>
	<comment type="line">// TODO: Redesign _AlgebraicExpression_FromString to remove this condition</comment>
	<if_stmt><if>if<condition>(<expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type> <name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>Graph_GetAdjacencyMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>Graph_GetZeroMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// TODO: this function is only used within AlgebraicExpression_Optimize, consider moving it.</comment>
<comment type="line">// fetch all operands, replacing transpose operations with transposed operands</comment>
<comment type="line">// if they are available</comment>
<function><type><name>void</name></type> <name>_AlgebraicExpression_PopulateOperands</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>AL_EXP_TRANSPOSE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>child_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="string">"Transpose operation had invalid number of children"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>_AlgebraicExpression_OperationRemoveDest</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// fetch the transposed matrix and update the operand</comment>
			<expr_stmt><expr><call><name>_AlgebraicExpression_PopulateTransposedOperand</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// replace this operation with the transposed operand</comment>
			<expr_stmt><expr><call><name>_AlgebraicExpression_InplaceRepurpose</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>_AlgebraicExpression_PopulateOperands</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<expr_stmt><expr><call><name>_AlgebraicExpression_PopulateOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_AlgebraicExpression_RemoveRedundentOperands</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// remove redundent label(s) matrices</comment>
	<comment type="line">// MATCH (a:A)-[]-&gt;(b:B)-[]-&gt;(c:C) RETURN a,b,c</comment>
	<comment type="line">// will result in 2 algebraic expressions:</comment>
	<comment type="line">// 1. A * ADJ * B</comment>
	<comment type="line">// 2. B * ADJ * C</comment>
	<comment type="line">// as node 'b' is shared between the two expressions</comment>
	<comment type="line">// its operand(s) can be discarded in the later expression</comment>
	<comment type="line">// as a general rule for every expression I where a former expression J</comment>
	<comment type="line">// I &gt; J resolves I's source we should remove I's source label operands</comment>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name>   <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exps</name> <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>exp_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>exp_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exp_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// in case source operand isn't a label matrix continue</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AlgebraicExpression_DiagonalOperand</name><argument_list>(
					<argument><expr><call><name>AlgebraicExpression_SrcOperand</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_alias</name> <init>= <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src_alias</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>src_node</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>src_alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src_node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// see if source is resolved by a previous expression</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>resolved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>prev_exp</name> <init>= <expr><name><name>exps</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_alias</name> <init>= <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>prev_exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>src_alias</name></expr></argument>, <argument><expr><name>dest_alias</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>resolved</name> <operator>=</operator> <operator>(</operator><call><name>AlgebraicExpression_DiagonalOperand</name><argument_list>(
			<argument><expr><call><name>AlgebraicExpression_DestOperand</name><argument_list>(<argument><expr><name>prev_exp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>resolved</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>resolved</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// remove source label matrices</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>redundent</name> <init>=
				<expr><call><name>AlgebraicExpression_RemoveSource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>redundent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_OperandCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// reduced to an empty expression</comment>
			<comment type="line">// delete expression from list</comment>
			<expr_stmt><expr><call><name>array_del</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>exp_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

</unit>
