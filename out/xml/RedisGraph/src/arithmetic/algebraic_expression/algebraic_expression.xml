<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/algebraic_expression.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algebraic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arithmetic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../algorithms/algorithms.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Static internal functions.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Locate the left most node in `exp`</comment>
<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_leftMostNode</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>left_most</name> <init>= <expr><name>exp</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>left_most</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name> <operator>&amp;&amp;</operator>
		  <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>left_most</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>left_most</name> <operator>=</operator> <call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>left_most</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>left_most</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Locate the right most node in `exp`</comment>
<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_rightMostNode</name><parameter_list>(<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>right_most</name> <init>= <expr><name>exp</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>right_most</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name> <operator>&amp;&amp;</operator>
			<call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>right_most</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>right_most</name> <operator>=</operator> <call><name>LAST_CHILD</name><argument_list>(<argument><expr><name>right_most</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>right_most</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_CloneOperation</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>clone</name> <init>=
		<expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>clone</name></expr></argument>,
				<argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_CloneOperand</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AlgebraicExpression</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AlgebraicExpression</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Remove leftmost child node from 'root' if 'src' is set to true</comment>
<comment type="line">// rightmost child node otherwise</comment>
<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_RemoveOperand</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <comment type="line">// Root from which to remove left most child.</comment>
	<parameter><decl><type><name>bool</name></type> <name>src</name></decl></parameter>                    <comment type="line">// Remove src operand if set, dest otherwise.</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>transpose</name>                   <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ret</name>         <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>parent</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>current</name>     <init>= <expr><operator>*</operator><name>root</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>replacement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>stack</name>      <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// search for operand</comment>
	<while>while<condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch<condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
			<expr_stmt><expr><name>transpose</name> <operator>=</operator> <operator>!</operator><name>transpose</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// transpose has only one child</comment>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
			<comment type="line">// Addition order of operands is not effected by transpose</comment>
			<if_stmt><if>if<condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>LAST_CHILD</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
			<comment type="line">// Multiplication order of operands depends on transpose</comment>
			<comment type="line">// | transpose     | src     | get dest |</comment>
			<comment type="line">// | transpose     | not src | get src  |</comment>
			<comment type="line">// | not transpose | src     | get src  |</comment>
			<comment type="line">// | not transpose | not src | get dest |</comment>
			<if_stmt><if>if<condition>(<expr><name>transpose</name> <operator>&amp;&amp;</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>LAST_CHILD</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if<condition>(<expr><name>transpose</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if<condition>(<expr><operator>!</operator><name>transpose</name> <operator>&amp;&amp;</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if<condition>(<expr><operator>!</operator><name>transpose</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>LAST_CHILD</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression operation"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// expression is just a single operand, set root to NULL</comment>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// propagate operand removal upwards</comment>
	<comment type="line">// when removing A from MUL(A,B) root should become B</comment>
	<comment type="line">// when removing A from T(T(A)) root should become NULL</comment>
	<comment type="line">// when removing A from ADD(MUL(T(A),B),C) root should become ADD(B,C)</comment>

	<while>while<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>array_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_AlgebraicExpression_OperationRemoveChild</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// do not free return value</comment>
		<if_stmt><if>if<condition>(<expr><name>current</name> <operator>!=</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>AL_EXP_OP</name></type> <name>op</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
		<comment type="block">/* binary operation with a single child, replace operation with child
		 * removing A from A+B should become B */</comment>
		<if_stmt><if>if<condition>(<expr><name>op</name> <operator>==</operator> <name>AL_EXP_ADD</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>AL_EXP_MUL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<comment type="line">// replace operation with only child</comment>
				<expr_stmt><expr><name>replacement</name> <operator>=</operator> <call><name>_AlgebraicExpression_OperationRemoveDest</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>_AlgebraicExpression_InplaceRepurpose</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="line">// stop here, no need to propagate further</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>current</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// handle last parent situation, e.g. removing A from T(T(T(A)))</comment>
	<if_stmt><if>if<condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// AlgebraicExpression Node creation functions.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Create a new AlgebraicExpression operation node</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>AlgebraicExpression_NewOperation</name>
<parameter_list>(
	<parameter><decl><type><name>AL_EXP_OP</name></type> <name>op</name></decl></parameter>    <comment type="line">// Operation to perform.</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AlgebraicExpression</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AL_OPERATION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Create a new AlgebraicExpression operand node</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>AlgebraicExpression_NewOperand</name>
<parameter_list>(
	<parameter><decl><type><name>RG_Matrix</name></type> <name>mat</name></decl></parameter>,      <comment type="line">// Matrix</comment>
	<parameter><decl><type><name>bool</name></type> <name>diagonal</name></decl></parameter>,      <comment type="line">// Is operand a diagonal matrix?</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,    <comment type="line">// Operand row domain (src node)</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,   <comment type="line">// Operand column domain (destination node)</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>,   <comment type="line">// Operand alias (edge)</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>   <comment type="line">// Label attached to matrix</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AlgebraicExpression</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name>                <operator>=</operator>  <name>AL_OPERAND</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name>         <operator>=</operator>  <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name>        <operator>=</operator>  <name>dest</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name>        <operator>=</operator>  <name>edge</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name>       <operator>=</operator>  <name>label</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>bfree</name></name>       <operator>=</operator>  <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name>    <operator>=</operator>  <name>diagonal</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name>      <operator>=</operator>  <name>mat</name></expr>;</expr_stmt>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Clone algebraic expression node</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>AlgebraicExpression_Clone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>  <comment type="line">// Expression to clone</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<return>return <expr><call><name>_AlgebraicExpression_CloneOperation</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</return>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<return>return <expr><call><name>_AlgebraicExpression_CloneOperand</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</return>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// AlgebraicExpression attributes.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns the first edge alias encountered.</comment>
<comment type="line">// if no edge alias is found NULL is returned</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>AlgebraicExpression_Edge</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>   <comment type="line">// Root of expression</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>edge</name> <operator>=</operator> <call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>edge</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>edge</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<return>return <expr><name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>AlgebraicExpression_Label</name>
<parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns the number of child nodes directly under root</comment>
<function><type><name>uint</name></type> <name>AlgebraicExpression_ChildCount</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>   <comment type="line">// Root of expression</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Empty expression.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// Returns the number of operands in expression</comment>
<function><type><name>uint</name></type> <name>AlgebraicExpression_OperandCount</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Empty expression</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>operand_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>operand_count</name> <operator>+=</operator> <call><name>AlgebraicExpression_OperandCount</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<expr_stmt><expr><name>operand_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>operand_count</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns the number of operations in expression</comment>
<function><type><name>uint</name></type> <name>AlgebraicExpression_OperationCount</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>AL_EXP_OP</name></type> <name>op_type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Empty expression.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>op_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name> <operator>&amp;</operator> <name>op_type</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>op_count</name> <operator>+=</operator> <call><name>AlgebraicExpression_OperationCount</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>op_count</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns true if entire expression is transposed</comment>
<function><type><name>bool</name></type> <name>AlgebraicExpression_Transposed</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>   <comment type="line">// Root of expression.</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Empty expression.</comment>
	<if_stmt><if>if<condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// handle directly nested transposes, e.g. T(T(T(X)))</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>transposed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name> <operator>&amp;&amp;</operator> <name><name>n</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>AL_EXP_TRANSPOSE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>transposed</name> <operator>=</operator> <operator>!</operator><name>transposed</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// TODO: handle cases such as T(A) + T(B).</comment>
	<return>return <expr><name>transposed</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns true if expression contains operation</comment>
<function><type><name>bool</name></type> <name>AlgebraicExpression_ContainsOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>AL_EXP_OP</name></type> <name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Empty expression.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>op</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_ContainsOp</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Checks to see if operand at position `operand_idx` is a diagonal matrix</comment>
<function><type><name>bool</name></type> <name>AlgebraicExpression_DiagonalOperand</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,    <comment type="line">// Root of expression.</comment>
	<parameter><decl><type><name>uint</name></type> <name>operand_idx</name></decl></parameter>                    <comment type="line">// Operand position (LTR, zero based).</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Empty expression.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>op</name> <init>=
		<expr><call><name>_AlgebraicExpression_GetOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>operand_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_AlgebraicExpression_LocateOperand</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,      <comment type="line">// Root to search</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>proot</name></decl></parameter>,     <comment type="line">// Root to search</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>operand</name></decl></parameter>,  <comment type="line">// [output] set to operand</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>parent</name></decl></parameter>,   <comment type="line">// [output] set to operand parent</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>row_domain</name></decl></parameter>,         <comment type="line">// operand row domain</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column_domain</name></decl></parameter>,      <comment type="line">// operand column domain</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>,               <comment type="line">// operand edge name</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>               <comment type="line">// operand label name</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>edge</name> <operator>&amp;&amp;</operator> <name>label</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// check row domain</comment>
		<if_stmt><if>if<condition>(<expr><name>row_domain</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>row_domain</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>row_domain</name> <operator>!=</operator> <name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// check column domain</comment>
		<if_stmt><if>if<condition>(<expr><name>column_domain</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>column_domain</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>column_domain</name> <operator>!=</operator> <name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// check edge</comment>
		<if_stmt><if>if<condition>(<expr><name>edge</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>edge</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>edge</name> <operator>!=</operator> <name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>label</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// check label</comment>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// found seeked operand</comment>
		<expr_stmt><expr><operator>*</operator><name>operand</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>parent</name> <operator>=</operator> <name>proot</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>_AlgebraicExpression_LocateOperand</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>,
						<argument><expr><name>row_domain</name></expr></argument>, <argument><expr><name>column_domain</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AlgebraicExpression_LocateOperand</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,       <comment type="line">// Root to search</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>operand</name></decl></parameter>,   <comment type="line">// [output] set to operand, NULL if missing</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>parent</name></decl></parameter>,    <comment type="line">// [output] set to operand parent</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>row_domain</name></decl></parameter>,          <comment type="line">// operand row domain</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column_domain</name></decl></parameter>,       <comment type="line">// operand column domain</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>,                <comment type="line">// operand edge name</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>                <comment type="line">// operand label name</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>operand</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>edge</name> <operator>&amp;&amp;</operator> <name>label</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>operand</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>parent</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>_AlgebraicExpression_LocateOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>,
			<argument><expr><name>row_domain</name></expr></argument>, <argument><expr><name>column_domain</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// AlgebraicExpression modification functions.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Adds child node to root children list.</comment>
<function><type><name>void</name></type> <name>AlgebraicExpression_AddChild</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,  <comment type="line">// Root to attach child to.</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name></decl></parameter>  <comment type="line">// Child node to attach.</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Remove leftmost child node from root.</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>AlgebraicExpression_RemoveSource</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>  <comment type="line">// Root from which to remove left most child.</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>src</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>_AlgebraicExpression_RemoveOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Remove right most child node from root.</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>AlgebraicExpression_RemoveDest</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>  <comment type="line">// Root from which to remove left most child.</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>src</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>_AlgebraicExpression_RemoveOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Multiply root to the left with op.</comment>
<comment type="line">// Updates root</comment>
<function><type><name>void</name></type> <name>AlgebraicExpression_MultiplyToTheLeft</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>m</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>&amp;&amp;</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><operator>*</operator><name>root</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Assuming new operand inherits (src, dest and edge) from
	 * from the current left most operand. */</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>left_most_operand</name> <init>= <expr><call><name>_leftMostNode</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>left_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr></argument>,
															  <argument><expr><name><name>left_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <call><name>_AlgebraicExpression_MultiplyToTheLeft</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Multiply root to the right with op.</comment>
<comment type="line">// Updates root</comment>
<function><type><name>void</name></type> <name>AlgebraicExpression_MultiplyToTheRight</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>m</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>&amp;&amp;</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><operator>*</operator><name>root</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Assuming new operand inherits (src, dest and edge) from
	 * from the current right most operand. */</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>right_most_operand</name> <init>= <expr><call><name>_rightMostNode</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>right_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr></argument>,
															  <argument><expr><name><name>right_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <call><name>_AlgebraicExpression_MultiplyToTheRight</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Add expression to the left by operand</comment>
<comment type="line">// A + (exp)</comment>
<function><type><name>void</name></type> <name>AlgebraicExpression_AddToTheLeft</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>m</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>&amp;&amp;</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><operator>*</operator><name>root</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Assuming new operand inherits (src, dest and edge) from
	 * from the current left most operand. */</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>left_most_operand</name> <init>= <expr><call><name>_leftMostNode</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
			<argument><expr><name><name>left_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>left_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr></argument>,
			<argument><expr><name><name>left_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <call><name>_AlgebraicExpression_AddToTheLeft</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Add expression to the right by operand</comment>
<comment type="line">// (exp) + A</comment>
<function><type><name>void</name></type> <name>AlgebraicExpression_AddToTheRight</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>m</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>&amp;&amp;</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><operator>*</operator><name>root</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Assuming new operand inherits (src, dest and edge) from
	 * from the current right most operand. */</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>right_most_operand</name> <init>= <expr><call><name>_rightMostNode</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>right_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr></argument>,
															  <argument><expr><name><name>right_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr></argument>, <argument><expr><name><name>right_most_operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <call><name>_AlgebraicExpression_AddToTheRight</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// AlgebraicExpression free</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Free algebraic expression.</comment>
<function><type><name>void</name></type> <name>AlgebraicExpression_Free</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>  <comment type="line">// Root node.</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<expr_stmt><expr><call><name>_AlgebraicExpression_FreeOperation</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<expr_stmt><expr><call><name>_AlgebraicExpression_FreeOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
