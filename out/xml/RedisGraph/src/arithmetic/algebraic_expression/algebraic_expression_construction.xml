<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/algebraic_expression_construction.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algebraic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../algorithms/algorithms.h"</cpp:file></cpp:include>

<comment type="line">// node with (income + outcome degree) &gt; 2</comment>
<comment type="line">// is considered a highly connected node</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_highly_connected_node</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name>    <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alias</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// look up node in qg</comment>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>QGNode_HighlyConnected</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_referred_entity</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alias</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>AST_AliasIsReferenced</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// if the edge is referenced or of a variable length</comment>
<comment type="line">// it should populate the AlgebraicExpression</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_should_populate_edge</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><call><name>_referred_entity</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>QGEdge_VariableLength</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// checks if given expression contains a variable length edge</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_AlgebraicExpression_ContainsVariableLengthEdge</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>_AlgebraicExpression_ContainsVariableLengthEdge</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<return>return <expr><name>false</name></expr>;</return>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name>QGEdge_VariableLength</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknow algebraic expression node type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RemovePathFromGraph</name>
<parameter_list>(
	<parameter><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>g</name>    <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>edge_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>QueryGraph_RemoveEdge</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>QGEdge_Free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>QGNode_EdgeCount</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>QueryGraph_RemoveNode</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>QGNode_Free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>src</name> <operator>!=</operator> <name>dest</name> <operator>&amp;&amp;</operator> <call><name>QGNode_EdgeCount</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>QueryGraph_RemoveNode</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>QGNode_Free</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_should_divide_expression</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>path</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><call><name>_should_populate_edge</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call>                    <operator>||</operator>  <comment type="line">// this edge is populated</comment>
			<call><name>_should_populate_edge</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>        <operator>||</operator>  <comment type="line">// the next edge is populated</comment>
			<call><name>_highly_connected_node</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call>  <operator>||</operator>  <comment type="line">// destination node in+out degree &gt; 2</comment>
			<call><name>_referred_entity</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>              <comment type="line">// destination node is referenced</comment>
</block_content>}</block></function>

<comment type="line">// variable length expression must contain only a single operand: the edge being</comment>
<comment type="line">// traversed, in cases such as (:labelA)-[e*]-&gt;(:labelB) both label A and B</comment>
<comment type="line">// are applied via a label matrix operand, this function migrates A and B from a</comment>
<comment type="line">// variable length expression to new expressions</comment>
<comment type="line">// or completely discards them when possible</comment>
<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>_AlgebraicExpression_IsolateVariableLenExps</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>expressions</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// return value is a new set of expressions</comment>
	<comment type="line">// where each variable length expression</comment>
	<comment type="line">// is guaranteed to have a single operand</comment>
	<comment type="line">// as such in the worst case the number of</comment>
	<comment type="line">// expressions doubles + 1</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>expCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>expressions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name><operator>*</operator></expr></argument>, <argument><expr><name>expCount</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// scan through each expression, locate expression which</comment>
	<comment type="line">// have a variable length edge in them</comment>
	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>expIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>expIdx</name> <operator>&lt;</operator> <name>expCount</name></expr>;</condition> <incr><expr><name>expIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>expressions</name><index>[<expr><name>expIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_AlgebraicExpression_ContainsVariableLengthEdge</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// handle source</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<comment type="line">// expression contains a variable length edge</comment>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>,
				<argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// a variable length expression with a labeled source node</comment>
		<comment type="line">// we only care about the source label matrix, when it comes to</comment>
		<comment type="line">// the first expression, as in the following expressions</comment>
		<comment type="line">// src is the destination of the previous expression</comment>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>QGNode_Labeled</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// remove src node matrix from expression</comment>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>AlgebraicExpression_RemoveSource</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>expIdx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// if the expression has a labeled destination,</comment>
		<comment type="line">// separate it into its own expression</comment>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// handle destination</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>,
				<argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>QGNode_Labeled</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// remove dest node matrix from expression</comment>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>AlgebraicExpression_RemoveDest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// remove destination if following expression isn't a</comment>
			<comment type="line">// variable length edge (src/dest sharing) otherwise introduce a new</comment>
			<comment type="line">// label expression</comment>
			<if_stmt><if>if<condition>(<expr><name>expIdx</name> <operator>&lt;</operator> <name>expCount</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
			   <operator>!</operator><call><name>_AlgebraicExpression_ContainsVariableLengthEdge</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name><name>expressions</name><index>[<expr><name>expIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>expressions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// break down path into sub paths</comment>
<comment type="line">// considering referenced intermidate nodes and edges</comment>
<function><type><specifier>static</specifier> <name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>_Intermediate_Paths</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pathLen</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// allocating maximum number of expression possible</comment>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>paths</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>QGEdge</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>pathLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>intermediate_path</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>QGEdge</name> <operator>*</operator></expr></argument>, <argument><expr><name>pathLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>intermediate_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// scan path left to right</comment>
	<comment type="line">// construct intermidate paths by "breaking" on referenced entities</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pathLen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>intermediate_path</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>_should_divide_expression</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// break! add current path to paths and create a new path</comment>
			<expr_stmt><expr><name>intermediate_path</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>QGEdge</name> <operator>*</operator></expr></argument>, <argument><expr><name>pathLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>intermediate_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// handle last hop</comment>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>pathLen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>intermediate_path</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>paths</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_OperandFromNode</name>
<parameter_list>(
	<parameter><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>diag</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>diag</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_AlgebraicExpression_ExpandNodeOperand</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier>  <name>char</name>  <modifier>*</modifier></type><name>l</name>      <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>char</name>  <modifier>*</modifier></type><name>alias</name>  <init>=  <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>label_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>QGNode_GetLabel</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>label_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// set label</comment>
		<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// two or more labels</comment>
		<expr_stmt><expr><call><name>_InplaceRepurposeOperandToOperation</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>QGNode_GetLabel</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
					<argument><expr><name>alias</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_AlgebraicExpression_ExpandNodeOperands</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_OPERAND</name></expr>:</case>
			<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>_AlgebraicExpression_ExpandNodeOperand</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>AL_OPERATION</name></expr>:</case>
			<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>_AlgebraicExpression_ExpandNodeOperands</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			</block_content>}</block></for>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_OperandFromEdge</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>transpose</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>reltype_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name>               <modifier>*</modifier></type><name>src_node</name>          <init>=  <expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name>               <modifier>*</modifier></type><name>dest_node</name>         <init>=  <expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name>  <modifier>*</modifier></type><name>add</name>               <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name>  <modifier>*</modifier></type><name>root</name>              <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name>  <modifier>*</modifier></type><name>src_filter</name>        <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>                 <name>var_len_traversal</name>  <init>=  <expr><call><name>QGEdge_VariableLength</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// use original `src` and `dest` for algebraic operands</comment>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>char</name>  <modifier>*</modifier></type><name>src</name>   <init>=  <expr><ternary><condition><expr><operator>(</operator><name>transpose</name><operator>)</operator></expr>               ?</condition><then>  <expr><name><name>dest_node</name><operator>-&gt;</operator><name>alias</name></name></expr>  </then><else>:  <expr><name><name>src_node</name><operator>-&gt;</operator><name>alias</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>char</name>  <modifier>*</modifier></type><name>dest</name>  <init>=  <expr><ternary><condition><expr><operator>(</operator><name>transpose</name><operator>)</operator></expr>               ?</condition><then>  <expr><name><name>src_node</name><operator>-&gt;</operator><name>alias</name></name></expr>   </then><else>:  <expr><name><name>dest_node</name><operator>-&gt;</operator><name>alias</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>char</name>  <modifier>*</modifier></type><name>edge</name>  <init>=  <expr><ternary><condition><expr><call><name>_should_populate_edge</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>  ?</condition><then>  <expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr>          </then><else>:  <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<comment type="line">// if src node has a label, multiply to the left by label matrix</comment>
	<if_stmt><if>if<condition>(<expr><call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>src_node</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>src_filter</name> <operator>=</operator> <call><name>_AlgebraicExpression_OperandFromNode</name><argument_list>(<argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// no hops: (a)-[:R*0]-&gt;(b)</comment>
	<comment type="line">// in this case we want to use the identity matrix</comment>
	<comment type="line">// f * I  = f </comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>var_len_traversal</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>minHops</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>IDENTITY_MATRIX</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
				<argument><expr><name>edge</name></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>reltype_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name>reltype_count</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="line">// no relationship types specified; use the adjacency matrix</comment>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// single relationship type</comment>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default> <comment type="line">// multiple edge type: -[:A|:B]-&gt;</comment>
			<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>reltype_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(
						<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>bidirectional</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// ()-[]-()</comment>
			<comment type="line">// Adj + Transpose(Adj)</comment>
			<comment type="line">//</comment>
			<comment type="line">// ()-[:R]-()</comment>
			<comment type="line">// R + Transpose(R)</comment>
			<comment type="line">//</comment>
			<comment type="line">// ()-[:R0|R1]-()</comment>
			<comment type="line">// (R0 + R1) + Transpose(R0 + R1)</comment>
			<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>op_transpose</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_TRANSPOSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>op_transpose</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>op_transpose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// expand fixed variable length edge</comment>
		<comment type="line">// -[A*2..2]-&gt;</comment>
		<comment type="line">// A*A</comment>
		<comment type="line">// -[A|B*2..2]-&gt;</comment>
		<comment type="line">// (A+B) * (A+B)</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>var_len_traversal</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>minHops</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>mul</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>e</name><operator>-&gt;</operator><name>minHops</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<comment type="line">// clone to avoid double free</comment>
				<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>mul</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// transpose entire expression</comment>
	<if_stmt><if>if<condition>(<expr><name>transpose</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>op_transpose</name> <init>= <expr><call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_TRANSPOSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>op_transpose</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>root</name> <operator>=</operator> <name>op_transpose</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// apply source filter by multiplying to the left</comment>
	<if_stmt><if>if<condition>(<expr><name>src_filter</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>_AlgebraicExpression_MultiplyToTheLeft</name><argument_list>(<argument><expr><name>src_filter</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* In case edges `a` and `b` share a node:
 * (a)-[E0]-&gt;(b)&lt;-[E1]-(c)
 * than the shared entity is returned
 * if edges are disjoint, NULL is returned. */</comment>
<function><type><specifier>static</specifier> <name>QGNode</name> <modifier>*</modifier></type><name>_SharedNode</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>b</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>dest</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>dest</name></name></expr>;</return></block_content></block></if></if_stmt>   <comment type="line">// (a)-[E0]-&gt;(b)-[E1]-&gt;(c)</comment>
	<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>src</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>dest</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>src</name></name></expr>;</return></block_content></block></if></if_stmt>    <comment type="line">// (a)&lt;-[E0]-(b)&lt;-[E1]-(c)</comment>
	<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>src</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>src</name></name></expr>;</return></block_content></block></if></if_stmt>     <comment type="line">// (a)&lt;-[E0]-(b)-[E1]-&gt;(c)</comment>
	<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>dest</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>dest</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>dest</name></name></expr>;</return></block_content></block></if></if_stmt>  <comment type="line">// (a)-[E0]-&gt;(b)&lt;-[E1]-(c)</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_reversePath</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>path_len</name></decl></parameter>,
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>transpositions</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* A reversed path should have its transpositions flipped
		 * transpose(transpose(A)) = A */</comment>
		<expr_stmt><expr><name><name>transpositions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name><name>transpositions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Transpose(A*B) = Transpose(B) * Transpose(A)
	 * (a)&lt;-[A]-(b)&lt;-[B]-(c)-[C]-&gt;(d)
	 * At * Bt * C
	 * Transpose(At * Bt * C) =
	 * = Ct * B * A
	 * (d)-[Ct]-&gt;(c)-[B]-&gt;(b)-[A]-&gt;(a) */</comment>

	<comment type="line">// Reverse the path array as well as the transposition array</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>opposite</name> <init>= <expr><name>path_len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>path</name><index>[<expr><name>opposite</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>path</name><index>[<expr><name>opposite</name></expr>]</index></name> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>transpose_tmp</name> <init>= <expr><name><name>transpositions</name><index>[<expr><name>opposite</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>transpositions</name><index>[<expr><name>opposite</name></expr>]</index></name> <operator>=</operator> <name><name>transpositions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>transpositions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>transpose_tmp</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_normalizePath</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>,          <comment type="line">// path to normalize</comment>
	<parameter><decl><type><name>uint</name></type> <name>path_len</name></decl></parameter>,          <comment type="line">// path length</comment>
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>transpositions</name></decl></parameter>    <comment type="line">// specifies which edges need to be transposed</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// initialize `transpositions` array</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>transpositions</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// a single leg path</comment>
	<if_stmt><if>if<condition>(<expr><name>path_len</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>transposeCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// for every edge except the last</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>follow</name> <init>= <expr><name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><call><name>_SharedNode</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>follow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// the edge should be transposed if its destination is not shared</comment>
		<comment type="line">// (dest)&lt;-[e]-(shared)-[follow]-&gt;()</comment>
		<comment type="line">// (dest)&lt;-[e]-(shared)&lt;-[follow]-()</comment>
		<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name> <operator>!=</operator> <name>shared</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>transpositions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>transposeCount</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// for the last edge, transpose if its source is not shared</comment>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>path</name><index>[<expr><name>path_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><call><name>_SharedNode</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><name>path_len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name> <operator>!=</operator> <name>shared</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>transposeCount</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>transpositions</name><index>[<expr><name>path_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// reverse entire path if the majority of edges must be transposed</comment>
	<if_stmt><if>if<condition>(<expr><name>transposeCount</name> <operator>&gt;</operator> <operator>(</operator><name>path_len</name> <operator>-</operator> <name>transposeCount</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_reversePath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>, <argument><expr><name>transpositions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// apply transpose</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>transpositions</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>QGEdge_Reverse</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_FromPath</name>
<parameter_list>(
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>,
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>transpositions</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>QGEdge</name>               <modifier>*</modifier></type><name>e</name>        <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name>  <modifier>*</modifier></type><name>root</name>     <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>                 <name>path_len</name>  <init>=  <expr><call><name>array_len</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// treating path as a chain</comment>
	<comment type="line">// we're aligning all edges to "point right"</comment>
	<comment type="line">// (A)-[E0]-&gt;(B)-[E0]-&gt;(C)-[E0]-&gt;(D).</comment>
	<comment type="line">// e.g.</comment>
	<comment type="line">// (A)-[E0]-&gt;(B)&lt;-[E1]-(C)-[E2]-&gt;(D)</comment>
	<comment type="line">// E1 will be transposed:</comment>
	<comment type="line">// (A)-[E0]-&gt;(B)-[E1']-&gt;(C)-[E2]-&gt;(D) */</comment>

	<comment type="line">// construct expression</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="line">// add edge matrix</comment>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>_AlgebraicExpression_OperandFromEdge</name><argument_list>(<argument><expr><name>e</name></expr></argument>,
				<argument><expr><name><name>transpositions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// connect via a multiplication node</comment>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>_AlgebraicExpression_MultiplyToTheRight</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>   <comment type="line">// end of path traversal</comment>

	<comment type="line">// if last node on path has a label, multiply by label matrix</comment>
	<if_stmt><if>if<condition>(<expr><call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>_AlgebraicExpression_MultiplyToTheRight</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
				<argument><expr><call><name>_AlgebraicExpression_OperandFromNode</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// AlgebraicExpression construction.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// construct algebraic expression form query graph</comment>
<function><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>AlgebraicExpression_FromQueryGraph</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>    <comment type="line">// Query-graph to process</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// construct algebraic expression(s) from query-graph</comment>
	<comment type="line">// trying to take advantage of long multiplications with as few</comment>
	<comment type="line">// transpose as possible we'll transform paths crossing the graph</comment>
	<comment type="line">// "diameter", these are guarantee to be the longest, although</comment>
	<comment type="line">// there might be situations in which these are not the most optimal paths</comment>
	<comment type="line">// to explore</comment>
	<comment type="line">//</comment>
	<comment type="line">// once a path been transformed it's removed from the query-graph</comment>
	<comment type="line">// and the process repeat itself</comment>

	<comment type="line">// a graph with no edges implies an empty algebraic expression</comment>
	<comment type="line">// the reasoning behind this decision is that the algebraic expression</comment>
	<comment type="line">// represents graph traversals, no edges means no traversals</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>edge_count</name> <init>= <expr><call><name>QueryGraph_EdgeCount</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>edge_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>QueryGraph_NodeCount</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>qg</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>_AlgebraicExpression_OperandFromNode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_AlgebraicExpression_ExpandNodeOperands</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>exps</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>acyclic</name> <init>= <expr><call><name>IsAcyclicGraph</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryGraph_Clone</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// as long as the query-graph isn't empty</comment>
	<while>while<condition>(<expr><call><name>QueryGraph_EdgeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// get leaf nodes at the deepest level</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>acyclic</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>LongestPathTree</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line">// graph is a tree</comment>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>LongestPathGraph</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>       <comment type="line">// graph contains cycles</comment>

		<comment type="line">// get a path of length level</comment>
		<comment type="line">// allow closing a cycle if the graph is not acyclic</comment>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>DFS</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>!</operator><name>acyclic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>path_len</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path_len</name> <operator>==</operator> <name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// TODO:</comment>
		<comment type="line">// in case path is a cycle, e.g. (b)-[]-&gt;(a)-[]-&gt;(b)</comment>
		<comment type="line">// make sure the first node on the path is referenced</comment>
		<comment type="line">// _should_divide_expression(path, 0) is true</comment>
		<comment type="line">// if this is not the case we will unnecessarily break</comment>
		<comment type="line">// the generated expression into 2 sub expressions</comment>
		<comment type="line">// while what we can do is simply rotate the cycle, (a)-[]-&gt;(b)-[]-&gt;(a)</comment>
		<comment type="line">// this is exactly the same only now we won't sub divide</comment>
		<comment type="line">// checking if path is a cycle done by testing the start and end node</comment>

		<comment type="line">// split path into sub paths</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>transpositions</name><index>[<expr><name>path_len</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_normalizePath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>, <argument><expr><name>transpositions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>paths</name> <init>= <expr><call><name>_Intermediate_Paths</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>sub_exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>uint</name></type> <name>path_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>edge_converted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<comment type="line">// construct expression</comment>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>_AlgebraicExpression_FromPath</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
					<argument><expr><name>transpositions</name> <operator>+</operator> <name>edge_converted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>edge_converted</name> <operator>+=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>sub_exps</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// remove exp[i] src label matrix (left most operand) as it's</comment>
			<comment type="line">// being used by exp[i-1] dest label matrix</comment>
			<comment type="line">// (:A)-[:X]-&gt;(:B)-[:Y]-&gt;(:C)</comment>
			<comment type="line">// exp0: A * X * B</comment>
			<comment type="line">// exp1: B * Y * C</comment>
			<comment type="line">// should become</comment>
			<comment type="line">// exp0: A * X * B</comment>
			<comment type="line">// exp1: Y * C</comment>
			<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>prev_exp</name> <init>= <expr><name><name>sub_exps</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<comment type="line">// make sure expression i follows previous expression</comment>
				<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>prev_exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>==</operator> <name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// exp[i] shares a label matrix with exp[i-1]</comment>
				<comment type="line">// remove redundancy</comment>
				<comment type="line">//if(QGNode_Labeled(src)) {</comment>
				<comment type="line">//	AlgebraicExpression *redundent = AlgebraicExpression_RemoveSource(&amp;exp);</comment>
				<comment type="line">//	AlgebraicExpression_Free(redundent);</comment>
				<comment type="line">//}</comment>
			</block_content>}</block></if></if_stmt>
			<comment type="line">// expression can not be empty</comment>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_OperandCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>sub_exps</name> <operator>=</operator> <call><name>_AlgebraicExpression_IsolateVariableLenExps</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>sub_exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>uint</name></type> <name>sub_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>sub_exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sub_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>sub_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_AlgebraicExpression_ExpandNodeOperands</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// add constructed expression to return value</comment>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// remove path from graph</comment>
		<expr_stmt><expr><call><name>_RemovePathFromGraph</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// clean up</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>sub_exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// if original graph contained a cycle</comment>
		<comment type="line">// see now after we've removed a path if this is still the case</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>acyclic</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>acyclic</name> <operator>=</operator> <call><name>IsAcyclicGraph</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>QueryGraph_Free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>exps</name></expr>;</return>
</block_content>}</block></function>

</unit>
