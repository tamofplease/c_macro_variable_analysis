<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/algebraic_expression_mul.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algebraic_expression.h"</cpp:file></cpp:include>

<function><type><name>RG_Matrix</name></type> <name>_Eval_Mul</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>RG_Matrix</name></type> <name>res</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate expression</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_OperationCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type>             <name>info</name></decl>    ;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>            <name>M</name></decl>       ;</decl_stmt>  <comment type="line">// current operand</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type>            <name>nvals</name></decl>   ;</decl_stmt>  <comment type="line">// NNZ in res</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name>  <modifier>*</modifier></type><name>c</name></decl>      ;</decl_stmt>  <comment type="line">// current child node</comment>

	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name>RG_Matrix</name></type>     <name>A</name>             <init>=  <expr><name>NULL</name></expr></init></decl>                                 ;</decl_stmt> 
	<decl_stmt><decl><type><name>bool</name></type>          <name>res_modified</name>  <init>=  <expr><name>false</name></expr></init></decl>                                ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Semiring</name></type>  <name>semiring</name>      <init>=  <expr><name>GxB_ANY_PAIR_BOOL</name></expr></init></decl>                    ;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>          <name>child_count</name>   <init>=  <expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>  ;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>CHILD_AT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

		<expr_stmt><expr><name>M</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name></expr> ;</expr_stmt>

		<comment type="line">// skip identity matrix, A*I = A</comment>
		<if_stmt><if>if<condition>(<expr><name>M</name> <operator>==</operator> <name>IDENTITY_MATRIX</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

		<comment type="line">// first time A is set</comment>
		<if_stmt><if>if<condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>A</name> <operator>=</operator> <name>M</name></expr> ;</expr_stmt>
			<continue>continue ;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// both A and M are valid matrices, perform multiplication</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_mxm</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><name>res_modified</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
		<comment type="line">// setup for next iteration</comment>
		<expr_stmt><expr><name>A</name> <operator>=</operator> <name>res</name></expr> ;</expr_stmt>

		<comment type="line">// exit early if 'res' is empty 0 * A = 0</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>res_modified</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// expecting at-least one operand not to be the identity matrix</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>IDENTITY_MATRIX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_copy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>res</name></expr> ;</return>
</block_content>}</block></function>

</unit>
