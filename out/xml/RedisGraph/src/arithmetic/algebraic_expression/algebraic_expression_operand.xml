<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/algebraic_expression_operand.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algebraic_expression.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_SrcOperand</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>transposed</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name> <operator>||</operator> <name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>transposed</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><operator>(</operator><name>AlgebraicExpression</name> <operator>*</operator><operator>)</operator><name>root</name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr>)</condition> <block>{<block_content>
		<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
				<comment type="line">// Src (A+B) = Src(A)</comment>
				<comment type="line">// Src (Transpose(A+B)) = Src (Transpose(A)+Transpose(B)) = Src (Transpose(A))</comment>
				<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
				<comment type="line">// Src (A*B) = Src(A)</comment>
				<comment type="line">// Src (Transpose(A*B)) = Src (Transpose(B)*Transpose(A)) = Src (Transpose(B))</comment>
				<expr_stmt><expr><name>exp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>LAST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
				<comment type="line">// Src (Transpose(Transpose(A))) = Src(A)</comment>
				<comment type="line">// negate transpose</comment>
				<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>!</operator><name>t</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression operation"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><operator>*</operator><name>transposed</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<return>return <expr><name>exp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>AlgebraicExpression_SrcOperand</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>   <comment type="line">// root of expression</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>transposed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>_AlgebraicExpression_SrcOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transposed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>AlgebraicExpression_DestOperand</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>   <comment type="line">// root of expression</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>transposed</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>_AlgebraicExpression_SrcOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transposed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns the source entity alias, row domain</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>AlgebraicExpression_Src</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>  <comment type="line">// root of expression</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>transposed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>_AlgebraicExpression_SrcOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transposed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>transposed</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr> </then><else>: <expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns the destination entity alias represented by the right-most operand</comment>
<comment type="line">// column domain</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>AlgebraicExpression_Dest</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name></decl></parameter>   <comment type="line">// root of expression</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Dest(exp) = Src(Transpose(exp))</comment>
	<comment type="line">// Gotta love it!</comment>

	<decl_stmt><decl><type><name>bool</name></type> <name>transposed</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>_AlgebraicExpression_SrcOperand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transposed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>transposed</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>dest</name></name></expr> </then><else>: <expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

</unit>
