<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/algebraic_expression/algebraic_expression_debug.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../algebraic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// AlgebraicExpression debugging utilities.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>keywords</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'+'</literal></expr>, <expr><literal type="char">'*'</literal></expr>, <expr><literal type="char">'('</literal></expr>, <expr><literal type="char">')'</literal></expr>, <expr><literal type="char">'T'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>_is_keyword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <name><name>keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>_AlgebraicExpression_FromString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>exp</name></decl></parameter>,   <comment type="line">// String representation of expression.</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>matrices</name></decl></parameter>       <comment type="line">// Map of matrices referred to in expression.</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type> <name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><operator>*</operator><name><name>exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><operator>*</operator><name>exp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

		<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'+'</literal></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <operator>*</operator><name>exp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// Advance.</comment>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>_AlgebraicExpression_FromString</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>matrices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'*'</literal></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <operator>*</operator><name>exp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// Advance.</comment>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperation</name><argument_list>(<argument><expr><name>AL_EXP_MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>_AlgebraicExpression_FromString</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>matrices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_AddChild</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'('</literal></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <operator>*</operator><name>exp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// Advance.</comment>
			<comment type="line">// Beginning of sub expression.</comment>
			<return>return <expr><call><name>_AlgebraicExpression_FromString</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>matrices</name></expr></argument>)</argument_list></call></expr>;</return>
			<break>break;</break>
		<case>case <expr><literal type="char">')'</literal></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <operator>*</operator><name>exp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// Advance.</comment>
			<comment type="line">// End of sub expression.</comment>
			<return>return <expr><name>root</name></expr>;</return>
			<break>break;</break>
		<case>case <expr><literal type="char">'T'</literal></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <operator>*</operator><name>exp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// Advance.</comment>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>_AlgebraicExpression_FromString</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>matrices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_Transpose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="line">// Operand, consume operand name.</comment>
			<expr_stmt><expr><name>operand</name> <operator>=</operator> <operator>*</operator><name>exp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_is_keyword</name><argument_list>(<argument><expr><name><name>operand</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

			<expr_stmt><expr><name>alias</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><operator>*</operator><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>alias</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <operator>*</operator><name>exp</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt> <comment type="line">// Advance.</comment>

			<expr_stmt><expr><name>m</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>matrices</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>RG_Matrix</name><operator>)</operator><call><name>raxFind</name><argument_list>(<argument><expr><name>matrices</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>m</name> <operator>!=</operator> <name>raxNotFound</name> <operator>&amp;&amp;</operator> <literal type="string">"Missing matrix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Clear</comment>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>AlgebraicExpression_FromString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,    <comment type="line">// String representation of expression.</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>matrices</name></decl></parameter>       <comment type="line">// Map of matrices referred to in expression.</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>_AlgebraicExpression_FromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><name>matrices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_Optimize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_AlgebraicExpression_PrintTree</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>ident</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>ident</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<expr_stmt><expr><name>child_count</name> <operator>=</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"+\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>_AlgebraicExpression_PrintTree</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ident</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>_AlgebraicExpression_PrintTree</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ident</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Transpose\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>_AlgebraicExpression_PrintTree</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ident</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alias</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>alias</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AlgebraicExpression_PrintTree</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>  <comment type="line">// Root node.</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_AlgebraicExpression_PrintTree</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AlgebraicExpression_Print</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>  <comment type="line">// Root node.</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Print add first operand.</comment>
			<expr_stmt><expr><call><name>AlgebraicExpression_Print</name><argument_list>(<argument><expr><call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Expecting at least 2 operands, concat using '+'.</comment>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AlgebraicExpression_Print</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
			<comment type="line">// Print add first operand.</comment>
			<expr_stmt><expr><call><name>AlgebraicExpression_Print</name><argument_list>(<argument><expr><call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Expecting at least 2 operands, concat using '*'.</comment>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" * "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AlgebraicExpression_Print</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
			<comment type="line">// Expecting a single child.</comment>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Transpose("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AlgebraicExpression_Print</name><argument_list>(<argument><expr><call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alias</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alias</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>alias</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_AlgebraicExpression_ToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <comment type="line">// Root node.</comment>
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>AL_OPERATION</name></expr>:</case>
		<switch>switch<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>AL_EXP_ADD</name></expr>:</case>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Print add first operand.</comment>
			<expr_stmt><expr><call><name>_AlgebraicExpression_ToString</name><argument_list>(<argument><expr><call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Expecting at least 2 operands, concat using '+'.</comment>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>_AlgebraicExpression_ToString</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_MUL</name></expr>:</case>
			<comment type="line">// Print add first operand.</comment>
			<expr_stmt><expr><call><name>_AlgebraicExpression_ToString</name><argument_list>(<argument><expr><call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Expecting at least 2 operands, concat using '*'.</comment>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" * "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>_AlgebraicExpression_ToString</name><argument_list>(<argument><expr><call><name>CHILD_AT</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		<case>case <expr><name>AL_EXP_TRANSPOSE</name></expr>:</case>
			<comment type="line">// Expecting a single child.</comment>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_ChildCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Transpose("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_AlgebraicExpression_ToString</name><argument_list>(<argument><expr><call><name>FIRST_CHILD</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
		<break>break;</break>
	<case>case <expr><name>AL_OPERAND</name></expr>:</case>
		<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alias</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>edge</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>alias</name> <operator>=</operator> <name><name>exp</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>src</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buff</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"Unknown algebraic expression node type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>AlgebraicExpression_ToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>  <comment type="line">// Root node.</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_AlgebraicExpression_ToString</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buff</name></expr>;</return>
</block_content>}</block></function>

</unit>
