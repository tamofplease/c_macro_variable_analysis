<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/aggregate_funcs/agg_std.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"agg_funcs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../func_desc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Standard deviation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>total</name></decl>;</decl_stmt>
}</block></struct></type> <name>_agg_StDevCtx</name>;</typedef>

<function><type><name>AggregateResult</name></type> <name>AGG_STDEV</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>private_data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>_agg_StDevCtx</name> <modifier>*</modifier></type><name>stdev_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// on the first invocation, initialize the context</comment>
	<if_stmt><if>if<condition>(<expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>values</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AGGREGATE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>double</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SIValue_ToDouble</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

	<return>return <expr><name>AGGREGATE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>StDevGenericFinalize</name><parameter_list>(<parameter><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_sampled</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>_agg_StDevCtx</name> <modifier>*</modifier></type><name>stdev_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>stdev_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>-</operator> <name>is_sampled</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Aggregate_SetResult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>double</name></type> <name>mean</name> <init>= <expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>/</operator> <name>count</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><operator>(</operator><name><name>stdev_ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>mean</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>stdev_ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>mean</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<comment type="line">// is_sampled will be equal to 1 in the Stdev case and 0 in the StdevP case</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>variance</name> <init>= <expr><name>sum</name> <operator>/</operator> <operator>(</operator><name>count</name> <operator>-</operator> <name>is_sampled</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>stdev</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>variance</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Aggregate_SetResult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name>stdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>StDevFinalize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>StDevGenericFinalize</name><argument_list>(<argument><expr><name>ctx_ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>StDevPFinalize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>StDevGenericFinalize</name><argument_list>(<argument><expr><name>ctx_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>StDev_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pdata</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>_agg_StDevCtx</name> <modifier>*</modifier></type><name>stdev_ctx</name> <init>= <expr><name>pdata</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>values</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>stdev_ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>STD_PrivateData</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AggregateCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>SI_DoubleVal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// STD default value is 0</comment>

	<comment type="line">// initialize private data</comment>
	<decl_stmt><decl><type><name>_agg_StDevCtx</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_agg_StDevCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <name>pdata</name></expr>;</expr_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Register_STD</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIType</name> <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type> <name>ret_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func_desc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_INT64</name> <operator>|</operator> <name>T_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <name>T_NULL</name> <operator>|</operator> <name>T_DOUBLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_AggFuncDescNew</name><argument_list>(<argument><expr><literal type="string">"stDev"</literal></expr></argument>, <argument><expr><name>AGG_STDEV</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>,
			<argument><expr><name>StDev_Free</name></expr></argument>, <argument><expr><name>StDevFinalize</name></expr></argument>, <argument><expr><name>STD_PrivateData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_INT64</name> <operator>|</operator> <name>T_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <name>T_NULL</name> <operator>|</operator> <name>T_DOUBLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_AggFuncDescNew</name><argument_list>(<argument><expr><literal type="string">"stDevP"</literal></expr></argument>, <argument><expr><name>AGG_STDEV</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>,
			<argument><expr><name>StDev_Free</name></expr></argument>, <argument><expr><name>StDevPFinalize</name></expr></argument>, <argument><expr><name>STD_PrivateData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
