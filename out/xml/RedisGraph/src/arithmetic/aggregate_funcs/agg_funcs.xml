<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/aggregate_funcs/agg_funcs.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"agg_funcs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">// create a new aggregation function descriptor</comment>
<function><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>AR_AggFuncDescNew</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,                   <comment type="line">// function name</comment>
	<parameter><decl><type><name>AR_Func</name></type> <name>func</name></decl></parameter>,                       <comment type="line">// pointer to function</comment>
	<parameter><decl><type><name>uint</name></type> <name>min_argc</name></decl></parameter>,                      <comment type="line">// minimum number of arguments</comment>
	<parameter><decl><type><name>uint</name></type> <name>max_argc</name></decl></parameter>,                      <comment type="line">// maximum number of arguments</comment>
	<parameter><decl><type><name>SIType</name> <modifier>*</modifier></type><name>types</name></decl></parameter>,                      <comment type="line">// acceptable types</comment>
	<parameter><decl><type><name>SIType</name></type> <name>ret_type</name></decl></parameter>,                    <comment type="line">// return type</comment>
	<parameter><decl><type><name>AR_Func_Free</name></type> <name>free</name></decl></parameter>,                  <comment type="line">// free aggregation callback</comment>
	<parameter><decl><type><name>AR_Func_Finalize</name></type> <name>finalize</name></decl></parameter>,          <comment type="line">// finalize aggregation callback</comment>
	<parameter><decl><type><name>AR_Func_PrivateData</name></type> <name>private_data</name></decl></parameter>    <comment type="line">// generate private data</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AR_FuncDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name>                    <operator>=</operator>  <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>func</name></name>                    <operator>=</operator>  <name>func</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>types</name></name>                   <operator>=</operator>  <name>types</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>ret_type</name></name>                <operator>=</operator>  <name>ret_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>min_argc</name></name>                <operator>=</operator>  <name>min_argc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>max_argc</name></name>                <operator>=</operator>  <name>max_argc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>internal</name></name>                <operator>=</operator>  <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>aggregate</name></name>               <operator>=</operator>  <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>reducible</name></name>               <operator>=</operator>  <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>free</name></name>          <operator>=</operator>  <name>free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>finalize</name></name>      <operator>=</operator>  <name>finalize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>private_data</name></name>  <operator>=</operator>  <name>private_data</name></expr>;</expr_stmt>

	<return>return <expr><name>desc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TODO: might be deprecated?</comment>
<comment type="line">// routine for cloning a generic aggregate function context</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>Aggregate_Clone</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>orig_ctx</name> <init>= <expr><name>orig</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx_clone</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AggregateCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx_clone</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>SI_CloneValue</name><argument_list>(<argument><expr><name><name>orig_ctx</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx_clone</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>ctx_clone</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// finalize the result of an aggregate function</comment>
<function><type><name>void</name></type> <name>Aggregate_SetResult</name>
<parameter_list>(
	<parameter><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>result</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Aggregate_Finalize</name>
<parameter_list>(
	<parameter><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func_desc</name></decl></parameter>,
	<parameter><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>func_desc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>func_desc</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>finalize</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>func_desc</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>finalize</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// get aggregated result</comment>
<function><type><name>SIValue</name></type> <name>Aggregate_GetResult</name>
<parameter_list>(
	<parameter><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>SI_TransferOwnership</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Aggregation function registration</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// forward declarations</comment>
<function_decl><type><name>void</name></type> <name>Register_AVG</name>        <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Register_SUM</name>        <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Register_MAX</name>        <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Register_MIN</name>        <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Register_STD</name>        <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Register_COUNT</name>      <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Register_COLLECT</name>    <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Register_PRECENTILE</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// register all aggregation functions</comment>
<function><type><name>void</name></type> <name>Register_AggFuncs</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>Register_AVG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Register_SUM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Register_MAX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Register_MIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Register_STD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Register_COUNT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Register_COLLECT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Register_PRECENTILE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// routine for freeing a generic aggregate function context</comment>
<function><type><name>void</name></type> <name>Aggregate_Free</name>
<parameter_list>(
	<parameter><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>agg_func</name></decl></parameter>,
	<parameter><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>agg_func</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>free</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>agg_func</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
