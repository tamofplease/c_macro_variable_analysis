<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/aggregate_funcs/agg_precentile.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"agg_funcs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../func_desc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>_cmp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>b</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>*</operator><name>a</name> <operator>-</operator> <operator>*</operator><name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Precentile</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>double</name></type> <name>percentile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
}</block></struct></type> <name>_agg_PercCtx</name>;</typedef>

<comment type="line">// this function is agnostic as to percentile method</comment>
<function><type><name>AggregateResult</name></type> <name>AGG_PERC</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>private_data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>_agg_PercCtx</name> <modifier>*</modifier></type><name>perc_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// on the first invocation, initialize the context</comment>
	<if_stmt><if>if<condition>(<expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// the second argument is the requested percentile, which we only</comment>
		<comment type="line">// need to apply on the first function invocation</comment>
		<expr_stmt><expr><call><name>SIValue_ToDouble</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>perc_ctx</name><operator>-&gt;</operator><name>percentile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>percentile</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>perc_ctx</name><operator>-&gt;</operator><name>percentile</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Invalid input - '%f' is not a valid argument, must be a number in the range 0.0 to 1.0"</literal></expr></argument>,
							  <argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>percentile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AGGREGATE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>double</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SIValue_ToDouble</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>AGGREGATE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PercDiscFinalize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>ctx_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>_agg_PercCtx</name> <modifier>*</modifier></type><name>perc_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>perc_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Aggregate_SetResult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// if perc_ctx-&gt;percentile == 0</comment>
		<comment type="line">// employing this formula would give an index of -1</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><ternary><condition><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>percentile</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>ceil</name><argument_list>(<argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>percentile</name></name> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>n</name> <init>= <expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Aggregate_SetResult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PercContFinalize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>ctx_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>_agg_PercCtx</name> <modifier>*</modifier></type><name>perc_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>perc_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Aggregate_SetResult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>percentile</name></name> <operator>==</operator> <literal type="number">1.0</literal> <operator>||</operator> <name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Aggregate_SetResult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>double</name></type> <name>int_val</name></decl>, <decl><type ref="prev"/><name>fraction_val</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>float_idx</name> <init>= <expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>percentile</name></name> <operator>*</operator> <operator>(</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<comment type="line">// Split the temp value into its integer and fractional values</comment>
		<expr_stmt><expr><name>fraction_val</name> <operator>=</operator> <call><name>modf</name><argument_list>(<argument><expr><name>float_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>int_val</name></expr></init></decl>;</decl_stmt> <comment type="line">// Casting the integral part of the value to an int for convenience</comment>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fraction_val</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// A valid index was requested, so we can directly return a value</comment>
			<expr_stmt><expr><call><name>Aggregate_SetResult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>double</name></type> <name>lhs</name></decl>, <decl><type ref="prev"/><name>rhs</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>lhs</name> <operator>=</operator> <name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>fraction_val</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>rhs</name> <operator>=</operator> <name><name>perc_ctx</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>fraction_val</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Aggregate_SetResult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name>lhs</name> <operator>+</operator> <name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Percentile_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pdata</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>_agg_PercCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>pdata</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>values</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>Precentile_PrivateData</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AggregateCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// precentile default value is NULL</comment>

	<comment type="line">// initialize private data</comment>
	<decl_stmt><decl><type><name>_agg_PercCtx</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_agg_PercCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>percentile</name></name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// invalid precentile value</comment>
	<expr_stmt><expr><name><name>pdata</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <name>pdata</name></expr>;</expr_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Register_PRECENTILE</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIType</name> <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type> <name>ret_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func_desc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_INT64</name> <operator>|</operator> <name>T_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_INT64</name> <operator>|</operator> <name>T_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <name>T_NULL</name> <operator>|</operator> <name>T_DOUBLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_AggFuncDescNew</name><argument_list>(<argument><expr><literal type="string">"percentileDisc"</literal></expr></argument>, <argument><expr><name>AGG_PERC</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>,
			<argument><expr><name>Percentile_Free</name></expr></argument>, <argument><expr><name>PercDiscFinalize</name></expr></argument>, <argument><expr><name>Precentile_PrivateData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_INT64</name> <operator>|</operator> <name>T_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_INT64</name> <operator>|</operator> <name>T_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <name>T_NULL</name> <operator>|</operator> <name>T_DOUBLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_AggFuncDescNew</name><argument_list>(<argument><expr><literal type="string">"percentileCont"</literal></expr></argument>, <argument><expr><name>AGG_PERC</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>,
			<argument><expr><name>Percentile_Free</name></expr></argument>, <argument><expr><name>PercContFinalize</name></expr></argument>, <argument><expr><name>Precentile_PrivateData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
