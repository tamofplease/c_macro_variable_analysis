<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/aggregate_funcs/agg_avg.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"agg_funcs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../func_desc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Avg</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// avarage context</comment>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>       <comment type="line">// number of elements summed</comment>
	<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>total</name></decl>;</decl_stmt>  <comment type="line">// sum of all elements</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>overflow</name></decl>;</decl_stmt>      <comment type="line">// track numeric overflow</comment>
}</block></struct></type> <name>AvgCtx</name>;</typedef>

<comment type="line">// return true if adding a and b will overflow</comment>
<comment type="line">// values have the same MSB, adding will enlarge the total</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABOUT_TO_OVERFLOW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(signbit((a)) == signbit((b)) &amp;&amp; \
	   (fabsl((a)) &gt; (DBL_MAX - fabsl((b)))))</cpp:value></cpp:define>

<comment type="line">// avarage "step" function expects 2 arguments:</comment>
<comment type="line">// 1. aggregation context</comment>
<comment type="line">// 2. value to aggregate</comment>
<function><type><name>AggregateResult</name></type> <name>AGG_AVG</name>
<parameter_list>(
	<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_data</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>val</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>private_data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AvgCtx</name> <modifier>*</modifier></type><name>avg_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// On the first invocation, initialize the context.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>avg_ctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AvgCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// check input</comment>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AGGREGATE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>v</name> <init>= <expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// increment count</comment>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// check for overflow</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// if we've already overflowed or adding the current value</comment>
	<comment type="line">// will cause us to overflow, use the incremental averaging algorithm</comment>
	<if_stmt><if>if<condition>(<expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>overflow</name></name> <operator>||</operator> <call><name>ABOUT_TO_OVERFLOW</name><argument_list>(<argument><expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// divide the total by the new count</comment>
		<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>total</name> <init>= <expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>/=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator> <name><name>avg_ctx</name><operator>-&gt;</operator><name>count</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// if this is not the first call using the incremental algorithm,</comment>
		<comment type="line">// multiply the total by the previous count</comment>
		<if_stmt><if>if<condition>(<expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>overflow</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>total</name> <operator>*=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><operator>(</operator><name><name>avg_ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="line">// add v/count to total</comment>
		<expr_stmt><expr><name>total</name> <operator>+=</operator> <operator>(</operator><name>v</name> <operator>/</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name><name>avg_ctx</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>overflow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// no overflow</comment>
		<expr_stmt><expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>AGGREGATE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// finalize aggregation</comment>
<function><type><name>void</name></type> <name>Avg_Finalize</name>
<parameter_list>(
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx_ptr</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx_ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>AggregateCtx</name><operator>*</operator><operator>)</operator><name>ctx_ptr</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>AvgCtx</name> <modifier>*</modifier></type><name>avg_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>avg_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>overflow</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// used incremental algorithm due to overflow, 'total' is the average</comment>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// used traditional algorithm, divide total by count</comment>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>SI_DoubleVal</name><argument_list>(<argument><expr><name><name>avg_ctx</name><operator>-&gt;</operator><name>total</name></name> <operator>/</operator> <name><name>avg_ctx</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>Avg_PrivateData</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AggregateCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AggregateCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// avg default value is NULL</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AvgCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Register_AVG</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIType</name> <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type> <name>ret_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func_desc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>SIType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>T_NULL</name> <operator>|</operator> <name>T_INT64</name> <operator>|</operator> <name>T_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <name>T_NULL</name> <operator>|</operator> <name>T_DOUBLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>func_desc</name> <operator>=</operator> <call><name>AR_AggFuncDescNew</name><argument_list>(<argument><expr><literal type="string">"avg"</literal></expr></argument>, <argument><expr><name>AGG_AVG</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>,
			<argument><expr><name>rm_free</name></expr></argument>, <argument><expr><name>Avg_Finalize</name></expr></argument>, <argument><expr><name>Avg_PrivateData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AR_RegFunc</name><argument_list>(<argument><expr><name>func_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
