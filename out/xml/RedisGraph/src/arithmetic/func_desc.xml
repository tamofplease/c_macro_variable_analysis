<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/arithmetic/func_desc.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"func_desc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/strutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../deps/rax/rax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aggregate_funcs/agg_funcs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="line">// Arithmetic function repository</comment>
<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>__aeRegisteredFuncs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>AR_FuncDescNew</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
	<parameter><decl><type><name>AR_Func</name></type> <name>func</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>min_argc</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>max_argc</name></decl></parameter>,
	<parameter><decl><type><name>SIType</name> <modifier>*</modifier></type><name>types</name></decl></parameter>,
	<parameter><decl><type><name>SIType</name></type> <name>ret_type</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>internal</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>reducible</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AR_FuncDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name>                    <operator>=</operator>  <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>func</name></name>                    <operator>=</operator>  <name>func</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>types</name></name>                   <operator>=</operator>  <name>types</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>ret_type</name></name>                <operator>=</operator>  <name>ret_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>min_argc</name></name>                <operator>=</operator>  <name>min_argc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>max_argc</name></name>                <operator>=</operator>  <name>max_argc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>internal</name></name>                <operator>=</operator>  <name>internal</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>aggregate</name></name>               <operator>=</operator>  <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>reducible</name></name>               <operator>=</operator>  <name>reducible</name></expr>;</expr_stmt>

	<return>return <expr><name>desc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// register an arithmetic function</comment>
<function><type><name>void</name></type> <name>AR_RegFunc</name>
<parameter_list>(
	<parameter><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>lower_func_name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>lower_func_name_len</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>str_tolower</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>lower_func_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lower_func_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>__aeRegisteredFuncs</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>lower_func_name</name></expr></argument>,
			<argument><expr><name>lower_func_name_len</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>AR_SetPrivateDataRoutines</name>
<parameter_list>(
	<parameter><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func_desc</name></decl></parameter>,
	<parameter><decl><type><name>AR_Func_Free</name></type> <name>free</name></decl></parameter>,
	<parameter><decl><type><name>AR_Func_Clone</name></type> <name>clone</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>func_desc</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>func_desc</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>clone</name></name> <operator>=</operator> <name>clone</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// get arithmetic function</comment>
<function><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>AR_GetFunc</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>include_internal</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>lower_func_name</name><index>[<expr><name>len</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>str_tolower</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>lower_func_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>__aeRegisteredFuncs</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>lower_func_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>f</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><operator>(</operator><name>AR_FuncDesc</name><operator>*</operator><operator>)</operator><name>f</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>internal</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>include_internal</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>func</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SIType</name></type> <name>AR_FuncDesc_RetType</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func</name></decl></parameter>	
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>func</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>func</name><operator>-&gt;</operator><name>ret_type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AR_FuncExists</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>lower_func_name</name><index>[<expr><name>len</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>str_tolower</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>lower_func_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>__aeRegisteredFuncs</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>lower_func_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>f</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><operator>(</operator><name>AR_FuncDesc</name><operator>*</operator><operator>)</operator><name>f</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>!</operator><name><name>func</name><operator>-&gt;</operator><name>internal</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AR_FuncIsAggregate</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>lower_func_name</name><index>[<expr><name>len</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>str_tolower</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>lower_func_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AR_FuncDesc</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>__aeRegisteredFuncs</name></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>lower_func_name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>f</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>aggregate</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
