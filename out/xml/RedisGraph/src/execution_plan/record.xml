<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/record.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"record.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">// migrate the entry at the given index in the source Record at the same index in the destination</comment>
<comment type="line">// the source retains access to but not ownership of the entry if it is a heap allocation</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_RecordPropagateEntry</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>dest</name></decl></parameter>,
	<parameter><decl><type><name>Record</name></type> <name>src</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Entry</name></type> <name>e</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
	<comment type="line">// if the entry is a scalar, make sure both Records don't believe they own the allocation</comment>
	<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REC_TYPE_SCALAR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_MakeVolatile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// this function is currently unused</comment>
<function><type><name>Record</name></type> <name>Record_New</name>
<parameter_list>(
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>mapping</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// determine record size</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>entries_count</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>rec_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_Record</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>rec_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>entries_count</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns the number of entries held by record</comment>
<function><type><name>uint</name></type> <name>Record_length</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Record_ContainsEntry</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <call><name>Record_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>REC_TYPE_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// retrieve the offset into the Record of the given alias</comment>
<function><type><name>uint</name></type> <name>Record_GetEntryIdx</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>&amp;&amp;</operator> <name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><name>idx</name> <operator>!=</operator> <name>raxNotFound</name></expr> ?</condition><then> <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>idx</name></expr> </then><else>: <expr><name>INVALID_INDEX</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Record_Clone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>Record</name></type> <name>clone</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>entry_count</name> <init>= <expr><call><name>Record_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>required_record_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>entry_count</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>required_record_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Foreach scalar entry in cloned record, make sure it is not freed.
	 * it is the original record owner responsibility to free the record
	 * and its internal scalar as a result.
	 *
	 * TODO: I wish we wouldn't have to perform this loop as it is a major performance hit
	 * with the introduction of a garbage collection this should be removed. */</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entry_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>Record_GetType</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REC_TYPE_SCALAR</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SIValue_MakeVolatile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clone</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Record_DeepClone</name>
<parameter_list>(
		<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
		<parameter><decl><type><name>Record</name></type> <name>clone</name></decl></parameter>
)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>entry_count</name> <init>= <expr><call><name>Record_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>required_record_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>entry_count</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>required_record_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Deep copy scalars</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entry_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>REC_TYPE_SCALAR</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name> <operator>=</operator> <call><name>SI_CloneValue</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Record_Merge</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>b</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>Record_length</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>RecordEntryType</name></type> <name>a_type</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RecordEntryType</name></type> <name>b_type</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>a_type</name> <operator>==</operator> <name>REC_TYPE_UNKNOWN</name> <operator>&amp;&amp;</operator> <name>b_type</name> <operator>!=</operator> <name>REC_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>_RecordPropagateEntry</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Record_TransferEntries</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
	<parameter><decl><type><name>Record</name></type> <name>from</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>Record_length</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>REC_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>_RecordPropagateEntry</name><argument_list>(<argument><expr><operator>*</operator><name>to</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>RecordEntryType</name></type> <name>Record_GetType</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Node</name> <modifier>*</modifier></type><name>Record_GetNode</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>REC_TYPE_NODE</name></expr>:</case>
			<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>n</name></name><operator>)</operator></expr>;</return>
		<case>case <expr><name>REC_TYPE_UNKNOWN</name></expr>:</case>
			<return>return <expr><name>NULL</name></expr>;</return>
		<case>case <expr><name>REC_TYPE_SCALAR</name></expr>:</case>
			<comment type="line">// Null scalar values are expected here; otherwise fall through.</comment>
			<if_stmt><if>if<condition>(<expr><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<default>default:</default>
			<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"encountered unexpected type in Record; expected Node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>Edge</name> <modifier>*</modifier></type><name>Record_GetEdge</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>REC_TYPE_EDGE</name></expr>:</case>
			<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>e</name></name><operator>)</operator></expr>;</return>
		<case>case <expr><name>REC_TYPE_UNKNOWN</name></expr>:</case>
			<return>return <expr><name>NULL</name></expr>;</return>
		<case>case <expr><name>REC_TYPE_SCALAR</name></expr>:</case>
			<comment type="line">// Null scalar values are expected here; otherwise fall through.</comment>
			<if_stmt><if>if<condition>(<expr><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<default>default:</default>
			<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"encountered unexpected type in Record; expected Edge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>SIValue</name></type> <name>Record_Get</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Entry</name></type> <name>e</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>REC_TYPE_NODE</name></expr>:</case>
			<return>return <expr><call><name>SI_Node</name><argument_list>(<argument><expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>REC_TYPE_EDGE</name></expr>:</case>
			<return>return <expr><call><name>SI_Edge</name><argument_list>(<argument><expr><call><name>Record_GetEdge</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>REC_TYPE_SCALAR</name></expr>:</case>
			<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr>;</return>
		<case>case <expr><name>REC_TYPE_UNKNOWN</name></expr>:</case>
			<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Record_Remove</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>REC_TYPE_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GraphEntity</name> <modifier>*</modifier></type><name>Record_GetGraphEntity</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Entry</name></type> <name>e</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>REC_TYPE_NODE</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>REC_TYPE_EDGE</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><call><name>Record_GetEdge</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"encountered unexpected type when trying to retrieve graph entity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Record_Add</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <call><name>Record_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>T_NODE</name></expr>:</case>
			<expr_stmt><expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>ptrval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_EDGE</name></expr>:</case>
			<expr_stmt><expr><call><name>Record_AddEdge</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>Edge</name> <operator>*</operator><operator>)</operator><name><name>v</name><operator>.</operator><name>ptrval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>SIValue</name> <modifier>*</modifier></type><name>Record_AddScalar</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>REC_TYPE_SCALAR</name></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Node</name> <modifier>*</modifier></type><name>Record_AddNode</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>,
	<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>REC_TYPE_NODE</name></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>n</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Edge</name> <modifier>*</modifier></type><name>Record_AddEdge</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>idx</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name></type> <name>edge</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>e</name></name> <operator>=</operator> <name>edge</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>REC_TYPE_EDGE</name></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>e</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Record_PersistScalars</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>Record_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>REC_TYPE_SCALAR</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SIValue_Persist</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>Record_ToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>buf_cap</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>rLen</name> <init>= <expr><call><name>Record_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name><name>values</name><index>[<expr><name>rLen</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>Record_GetType</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>REC_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Record_Get</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>size_t</name></type> <name>required_len</name> <init>= <expr><call><name>SIValue_StringJoinLen</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>rLen</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>buf_cap</name> <operator>&lt;</operator> <name>required_len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>required_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf_cap</name> <operator>=</operator> <name>required_len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>bytesWritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SIValue_StringJoin</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>rLen</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_cap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>bytesWritten</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>rax</name> <modifier>*</modifier></type><name>Record_GetMappings</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>mapping</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>Record_FreeEntry</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>REC_TYPE_SCALAR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>REC_TYPE_UNKNOWN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Record_FreeEntries</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>length</name> <init>= <expr><call><name>Record_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// free any allocations held by this Record</comment>
		<expr_stmt><expr><call><name>Record_FreeEntry</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// this function is currently unused</comment>
<function><type><name>void</name></type> <name>Record_Free</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>Record_FreeEntries</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
