<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_clone.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_clone.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>_ClonePlanInternals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>ExecutionPlan_NewEmptyExecutionPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>record_map</name></name> <operator>=</operator> <call><name>raxClone</name><argument_list>(<argument><expr><name><name>template</name><operator>-&gt;</operator><name>record_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>template</name><operator>-&gt;</operator><name>ast_segment</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>ast_segment</name></name> <operator>=</operator> <call><name>AST_ShallowCopy</name><argument_list>(<argument><expr><name><name>template</name><operator>-&gt;</operator><name>ast_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>template</name><operator>-&gt;</operator><name>query_graph</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>QueryGraph_ResolveUnknownRelIDs</name><argument_list>(<argument><expr><name><name>template</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>query_graph</name></name> <operator>=</operator> <call><name>QueryGraph_Clone</name><argument_list>(<argument><expr><name><name>template</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// TODO improve QueryGraph logic so that we do not need to store or clone connected_components.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>template</name><operator>-&gt;</operator><name>connected_components</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>connected_components</name></name></expr></argument>, <argument><expr><name><name>template</name><operator>-&gt;</operator><name>connected_components</name></name></expr></argument>, <argument><expr><name>QueryGraph_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>_CloneOpTree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>template_parent</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>template_current</name></decl></parameter>,
							<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>clone_parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan_segment</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>template_parent</name> <operator>||</operator> <operator>(</operator><name><name>template_current</name><operator>-&gt;</operator><name>plan</name></name> <operator>!=</operator> <name><name>template_parent</name><operator>-&gt;</operator><name>plan</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If this is the first operation or it was built using a different ExecutionPlan
		 * segment than its parent, clone the ExecutionPlan segment. */</comment>
		<expr_stmt><expr><name>plan_segment</name> <operator>=</operator> <call><name>_ClonePlanInternals</name><argument_list>(<argument><expr><name><name>template_current</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// This op was built as part of the same segment as its parent, don't change ExecutionPlans.</comment>
		<expr_stmt><expr><name>plan_segment</name> <operator>=</operator> <name><name>clone_parent</name><operator>-&gt;</operator><name>plan</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Temporarily set the thread-local AST to be the one referenced by this ExecutionPlan segment.</comment>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name><name>plan_segment</name><operator>-&gt;</operator><name>ast_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Clone the current operation.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>clone_current</name> <init>= <expr><call><name>OpBase_Clone</name><argument_list>(<argument><expr><name>plan_segment</name></expr></argument>, <argument><expr><name>template_current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>template_current</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Recursively visit and clone the op's children.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child_op</name> <init>= <expr><call><name>_CloneOpTree</name><argument_list>(<argument><expr><name>template_current</name></expr></argument>, <argument><expr><name><name>template_current</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>clone_current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>clone_current</name></expr></argument>, <argument><expr><name>child_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>clone_current</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>_ExecutionPlan_Clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>clone_root</name> <init>= <expr><call><name>_CloneOpTree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>template</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// The "master" execution plan is the one constructed with the root op.</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><operator>(</operator><name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>clone_root</name><operator>-&gt;</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// The root op is currently NULL; set it now.</comment>
	<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>clone_root</name></expr>;</expr_stmt>

	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function clones the input ExecutionPlan by recursively visiting its tree of ops.
 * When an op is encountered that was constructed as part of a different ExecutionPlan segment, that segment
 * and its internal members (FilterTree, record mapping, query graphs, and AST segment) are also cloned. */</comment>
<function><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>ExecutionPlan_Clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>template</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Store the original AST pointer.</comment>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>master_ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Verify that the execution plan template is not prepared yet.</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>template</name><operator>-&gt;</operator><name>prepared</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"Execution plan cloning should be only on templates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>_ExecutionPlan_Clone</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Restore the original AST pointer.</comment>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>master_ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

</unit>
