<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_build/build_match_op_tree.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_construct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../optimizations/optimizations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_build_filter_tree.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlan_ProcessQueryGraph</name>
<parameter_list>(
	<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// build the full FilterTree for this AST</comment>
	<comment type="line">// so that we can order traversals properly</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><call><name>AST_BuildFilterTree</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryGraph</name> <modifier>*</modifier><modifier>*</modifier></type><name>connectedComponents</name> <init>= <expr><call><name>QueryGraph_ConnectedComponents</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>connected_components</name></name> <operator>=</operator> <name>connectedComponents</name></expr>;</expr_stmt>
	<comment type="line">// if we have already constructed any ops</comment>
	<comment type="line">// the plan's record map contains all variables bound at this time</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>connectedComponentsCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>connectedComponents</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// if we have multiple graph components</comment>
	<comment type="line">// the root operation is a cartesian product</comment>
	<comment type="line">// each chain of traversals will be a child of this op</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>cartesianProduct</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>connectedComponentsCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cartesianProduct</name> <operator>=</operator> <call><name>NewCartesianProductOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>cartesianProduct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// keep track after all traversal operations along a pattern</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>connectedComponentsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name><name>connectedComponents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>edge_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="line">// the root of the traversal chain will be added to the ExecutionPlan</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>edge_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// if there are no edges in the component, we only need a node scan</comment>
			<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>cc</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
					<operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>AlgebraicExpression_FromQueryGraph</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>expCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Reorder exps, to the most performant arrangement of evaluation.</comment>
		<expr_stmt><expr><call><name>orderExpressions</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expCount</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Create the SCAN operation that will be the tail of the traversal chain.</comment>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name><name>exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>label_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae_src</name> <init>= <expr><call><name>AlgebraicExpression_RemoveSource</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_DiagonalOperand</name><argument_list>(<argument><expr><name>ae_src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><call><name>AlgebraicExpression_Label</name><argument_list>(<argument><expr><name>ae_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alias</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>label_id</name> <init>= <expr><name>GRAPH_UNKNOWN_LABEL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>label_id</name> <operator>=</operator> <call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">// resolve source node by performing label scan</comment>
			<decl_stmt><decl><type><name>NodeScanCtx</name></type> <name>ctx</name> <init>= <expr><call><name>NODE_CTX_NEW</name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>tail</name> <operator>=</operator> <call><name>NewNodeByLabelScanOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// first operand has been converted into a label scan op</comment>
			<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>ae_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>tail</name> <operator>=</operator> <call><name>NewAllNodeScanOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// free expression source</comment>
			<comment type="line">// in-case there are additional patterns to traverse</comment>
			<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(
						<argument><expr><call><name>AlgebraicExpression_RemoveSource</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// for each expression, build the appropriate traversal operation</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>expCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>exps</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<comment type="line">// Empty expression, already freed.</comment>
			<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_OperandCount</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

			<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>edge</name> <operator>=</operator>
					<call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if<condition>(<expr><name>edge</name> <operator>&amp;&amp;</operator> <call><name>QGEdge_VariableLength</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// edge is part of a shortest-path</comment>
				<comment type="line">// MATCH allShortestPaths((a)-[*..]-&gt;(b))</comment>
				<comment type="line">// validate both edge ends are bounded</comment>
				<if_stmt><if>if<condition>(<expr><call><name>QGEdge_IsShortestPath</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_alias</name>  <init>= <expr><call><name>QGNode_Alias</name><argument_list>(<argument><expr><call><name>QGEdge_Src</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_alias</name> <init>= <expr><call><name>QGNode_Alias</name><argument_list>(<argument><expr><call><name>QGEdge_Dest</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type> <name>src_bounded</name> <init>=
						<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src_alias</name></expr></argument>,
								<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src_alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type> <name>dest_bounded</name> <init>=
						<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>dest_alias</name></expr></argument>,
								<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dest_alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr></init></decl>;</decl_stmt>

					<comment type="line">// TODO: would be great if we can perform this validation</comment>
					<comment type="line">// at AST validation time</comment>
					<if_stmt><if>if<condition>(<expr><operator>!</operator><name>src_bounded</name> <operator>||</operator> <operator>!</operator><name>dest_bounded</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Source and destination must already be resolved to call allShortestPaths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>NewCondVarLenTraverseOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>NewCondTraverseOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<comment type="line">// Insert the new traversal op at the root of the chain.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// Free the expressions array, as its parts have been converted into operations</comment>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>cartesianProduct</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// We have multiple disjoint traversal chains.</comment>
			<comment type="line">// Add each chain as a child under the Cartesian Product.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>cartesianProduct</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// We've built the only necessary traversal chain, update the ExecutionPlan root.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_buildOptionalMatchOps</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arguments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>optional</name> <init>= <expr><call><name>NewOptionalOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// The root will be non-null unless the first clause is an OPTIONAL MATCH.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Collect the variables that are bound at this point.</comment>
		<expr_stmt><expr><name>bound_vars</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Rather than cloning the record map, collect the bound variables along with their</comment>
		<comment type="line">// parser-generated constant strings.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Collect the variable names from bound_vars to populate the Argument op we will build.</comment>
		<expr_stmt><expr><name>arguments</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>raxValues</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Build the new Match stream and add it to the Optional stream.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>match_stream</name> <init>= <expr><call><name>ExecutionPlan_BuildOpsFromPath</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>optional</name></expr></argument>, <argument><expr><name>match_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// The root will be non-null unless the first clause is an OPTIONAL MATCH.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Create an Apply operator and make it the new root.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>apply_op</name> <init>= <expr><call><name>NewApplyOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>apply_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Create an Optional op and add it as an Apply child as a right-hand stream.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>apply_op</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// If no root has been set (OPTIONAL was the first clause), set it to the Optional op.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>buildMatchOpTree</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>cypher_ast_match_is_optional</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_buildOptionalMatchOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>ast</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// only add at most one set of traversals per plan</comment>
	<comment type="line">// TODO Revisit and improve this logic</comment>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name> <operator>&amp;&amp;</operator> <call><name>ExecutionPlan_LocateOpMatchingType</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>SCAN_OPS</name></expr></argument>, <argument><expr><name>SCAN_OP_COUNT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Extract mandatory patterns</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>uint</name></type> <name>mandatory_match_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Number of mandatory patterns</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>match_clauses</name> <init>= <expr><call><name>AST_GetClauses</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_MATCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>match_clause_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>match_clauses</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name><name>patterns</name><index>[<expr><name>match_clause_count</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name><name>mandatory_matches</name><index>[<expr><name>match_clause_count</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>match_clause_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>match_clause</name> <init>= <expr><name><name>match_clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>cypher_ast_match_is_optional</name><argument_list>(<argument><expr><name>match_clause</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>mandatory_matches</name><index>[<expr><name>mandatory_match_count</name></expr>]</index></name> <operator>=</operator> <name>match_clause</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>patterns</name><index>[<expr><name>mandatory_match_count</name></expr>]</index></name> <operator>=</operator> <call><name>cypher_ast_match_get_pattern</name><argument_list>(<argument><expr><name>match_clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mandatory_match_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// collect the QueryGraph entities referenced in the clauses being converted</comment>
	<decl_stmt><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name> <init>= <expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>sub_qg</name> <init>= <expr><call><name>QueryGraph_ExtractPatterns</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>,
			<argument><expr><name>mandatory_match_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>_ExecutionPlan_ProcessQueryGraph</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>sub_qg</name></expr></argument>, <argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>ErrorCtx_EncounteredError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

	<comment type="line">// Build the FilterTree to model any WHERE predicates on these clauses and place ops appropriately.</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>sub_ft</name> <init>= <expr><call><name>AST_BuildFilterTreeFromClauses</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>mandatory_matches</name></expr></argument>,
														   <argument><expr><name>mandatory_match_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_PlaceFilterOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sub_ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Clean up</comment>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>QueryGraph_Free</name><argument_list>(<argument><expr><name>sub_qg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>match_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
