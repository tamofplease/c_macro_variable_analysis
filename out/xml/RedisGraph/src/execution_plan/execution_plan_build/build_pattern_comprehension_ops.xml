<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_build/build_pattern_comprehension_ops.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_construct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_build_filter_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_expression_construct.h"</cpp:file></cpp:include>

<comment type="line">// build pattern comprehension plan operations for example:</comment>
<comment type="line">// RETURN [p = (n)--&gt;() | p] AS ps</comment>
<comment type="line">// Results</comment>
<comment type="line">//     Project</comment>
<comment type="line">//         Optional</comment>
<comment type="line">//             Aggregate</comment>
<comment type="line">//                 Conditional Traverse | (n)-[anon_0]-&gt;(anon_1)</comment>
<comment type="line">//                     All Node Scan | (n)</comment>
<comment type="line">//</comment>
<comment type="line">// MATCH (n) RETURN [p = (n)--&gt;() | p] AS ps</comment>
<comment type="line">// Results</comment>
<comment type="line">//     Project</comment>
<comment type="line">//         Apply</comment>
<comment type="line">//             All Node Scan | (n)</comment>
<comment type="line">//             Optional</comment>
<comment type="line">//                 Aggregate</comment>
<comment type="line">//                     Conditional Traverse | (n)-[anon_1]-&gt;(anon_2)</comment>
<comment type="line">//                         Argument</comment>

<function><type><name>void</name></type> <name>buildPatternComprehensionOps</name>
<parameter_list>(
	<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// validations</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ast</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_PROJECT</name> <operator>||</operator> <name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_AGGREGATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// search for pattern comprehension AST nodes</comment>
	<comment type="line">// quickly return if none been found</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pcs</name> <init>=
		<expr><call><name>AST_GetTypedNodes</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_PATTERN_COMPREHENSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>pcs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>pcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// backup AST, restore at the end</comment>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>prev_ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>ast_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arguments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// get the bound variable to use when building the traversal ops</comment>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arguments</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>raxValues</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>match_stream</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>eval_node</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>predicate</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>pcs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>cypher_ast_pattern_comprehension_get_pattern</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// constuct sub execution-plan resolving path</comment>
		<expr_stmt><expr><name>match_stream</name> <operator>=</operator> <call><name>ExecutionPlan_BuildOpsFromPath</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// construct evaluation expression</comment>
		<comment type="line">// [(a)-[]-&gt;(z) | z.v] `z.v` is the evaluation expression</comment>
		<expr_stmt><expr><name>eval_node</name> <operator>=</operator> <call><name>cypher_ast_pattern_comprehension_get_eval</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>eval_exp</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>eval_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// collect evaluation results into an array using `collect`</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>collect_exp</name> <init>= <expr><call><name>AR_EXP_NewOpNode</name><argument_list>(<argument><expr><literal type="string">"collect"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>collect_exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>eval_exp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>collect_exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <call><name>AST_ToString</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// add collect expression to an AGGREGATION Operation</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>collect_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>aggregate</name> <init>= <expr><call><name>NewAggregateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>aggregate</name></expr></argument>, <argument><expr><name>match_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// handle filters attached to pattern</comment>
		<comment type="line">// [(a {v:1})-[]-&gt;(z) WHERE z.v = 2 | z.x]</comment>
		<expr_stmt><expr><name>predicate</name> <operator>=</operator> <call><name>cypher_ast_pattern_comprehension_get_predicate</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>predicate</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// build filter tree</comment>
			<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter_tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AST_ConvertFilters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FilterTree_Valid</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// Invalid filter tree structure, a compile-time error has been set.</comment>
				<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="line">// Apply De Morgan's laws</comment>
				<expr_stmt><expr><call><name>FilterTree_DeMorgan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">// place filters</comment>
				<expr_stmt><expr><call><name>ExecutionPlan_PlaceFilterOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>aggregate</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// in case the execution-plan had child operations we need to combine</comment>
		<comment type="line">// records coming out of our newly constucted aggregation with the rest</comment>
		<comment type="line">// of the execution-plan, use APPLY to do so</comment>
		<comment type="line">// otherwise (no children) RETURN [() | n.v] simply set `root`</comment>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>apply_op</name> <init>= <expr><call><name>NewApplyOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>apply_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>apply_op</name></expr></argument>, <argument><expr><name>aggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>aggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// restore AST</comment>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>prev_ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>arguments</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>pcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// build pattern path plan operations for example:</comment>
<comment type="line">// RETURN ()--&gt;() AS ps</comment>
<comment type="line">// Results</comment>
<comment type="line">//     Project</comment>
<comment type="line">//         Optional</comment>
<comment type="line">//             Aggregate</comment>
<comment type="line">//                 Conditional Traverse | (anon_0)-[anon_1]-&gt;(anon_2)</comment>
<comment type="line">//                     All Node Scan | (anon_0)</comment>
<comment type="line">//</comment>
<comment type="line">// MATCH (n) RETURN (n)--&gt;() AS ps</comment>
<comment type="line">// Results</comment>
<comment type="line">//     Project</comment>
<comment type="line">//         Apply</comment>
<comment type="line">//             All Node Scan | (n)</comment>
<comment type="line">//             Optional</comment>
<comment type="line">//                 Aggregate</comment>
<comment type="line">//                     Conditional Traverse | (n)-[anon_1]-&gt;(anon_2)</comment>
<comment type="line">//                         Argument</comment>

<function><type><name>void</name></type> <name>buildPatternPathOps</name>
<parameter_list>(
	<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// validations</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ast</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_PROJECT</name> <operator>||</operator> <name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_AGGREGATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// search for pattern comprehension AST nodes</comment>
	<comment type="line">// quickly return if none been found</comment>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>cypher_astnode_t</name>  <modifier>*</modifier><modifier>*</modifier></type><name>sps</name>  <init>=  <expr><call><name>AST_GetTypedNodes</name><argument_list>(<argument><expr><name>ast</name></expr></argument>,  <argument><expr><name>CYPHER_AST_SHORTEST_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>cypher_astnode_t</name>  <modifier>*</modifier><modifier>*</modifier></type><name>pps</name>  <init>=  <expr><call><name>AST_GetTypedNodes</name><argument_list>(<argument><expr><name>ast</name></expr></argument>,  <argument><expr><name>CYPHER_AST_PATTERN_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>cypher_astnode_t</name>  <modifier>*</modifier><modifier>*</modifier></type><name>pcs</name>  <init>=  <expr><call><name>AST_GetTypedNodes</name><argument_list>(<argument><expr><name>ast</name></expr></argument>,  <argument><expr><name>CYPHER_AST_PATTERN_COMPREHENSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type>  <name>count</name>      <init>=  <expr><call><name>array_len</name><argument_list>(<argument><expr><name>pps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>  <name>pcs_count</name>  <init>=  <expr><call><name>array_len</name><argument_list>(<argument><expr><name>pcs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>  <name>sps_count</name>  <init>=  <expr><call><name>array_len</name><argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// backup AST, restore at the end</comment>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>prev_ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>ast_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arguments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// get the bound variable to use when building the traversal ops</comment>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arguments</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>raxValues</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>match_stream</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>pps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		
		<comment type="line">// skip pattern paths declared within pattern comprehension</comment>
		<comment type="line">// as these are already handeled by `buildPatternComprehensionOps`</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>skip_path</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pcs_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>cypher_ast_pattern_comprehension_get_pattern</name><argument_list>(<argument><expr><name><name>pcs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>path</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>skip_path</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="line">// if this pattern path is nested within a pattern comprehension</comment>
		<comment type="line">// we already handled it `buildPatternComprehensionOps`</comment>
		<if_stmt><if>if<condition>(<expr><name>skip_path</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// skip pattern paths declared within shortest path</comment>
		<comment type="line">// as these were already handeled</comment>
		<for>for <control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sps_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>cypher_ast_shortest_path_get_path</name><argument_list>(<argument><expr><name><name>sps</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>path</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>skip_path</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="line">// if this pattern path is nexted within a shortest path</comment>
		<comment type="line">// we already handeled it</comment>
		<if_stmt><if>if<condition>(<expr><name>skip_path</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// construct sub execution-plan resolving path</comment>
		<expr_stmt><expr><name>match_stream</name> <operator>=</operator> <call><name>ExecutionPlan_BuildOpsFromPath</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// count number of elements in path</comment>
		<comment type="line">// construct a `topath` expression combining elements into a PATH object</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>path_len</name> <init>= <expr><call><name>cypher_ast_pattern_path_nelements</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>path_exp</name> <init>= <expr><call><name>AR_EXP_NewOpNode</name><argument_list>(<argument><expr><literal type="string">"topath"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>path_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>path_exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
			<call><name>AR_EXP_NewConstOperandNode</name><argument_list>(<argument><expr><call><name>SI_PtrVal</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>path_len</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>path_exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
				<call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><call><name>cypher_ast_pattern_path_get_element</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// we're require to return an ARRAY of paths, use `collect` to aggregate paths</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>collect_exp</name> <init>= <expr><call><name>AR_EXP_NewOpNode</name><argument_list>(<argument><expr><literal type="string">"collect"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>collect_exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>path_exp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>collect_exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <call><name>AST_ToString</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// constuct aggregation operation</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>collect_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>aggregate</name> <init>= <expr><call><name>NewAggregateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>aggregate</name></expr></argument>, <argument><expr><name>match_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// in case the execution-plan had child operations we need to combine</comment>
		<comment type="line">// records coming out of our newly constucted aggregation with the rest</comment>
		<comment type="line">// of the execution-plan, use APPLY to do so</comment>
		<comment type="line">// otherwise (no children) RETURN () simply set `root`</comment>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>apply_op</name> <init>= <expr><call><name>NewApplyOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>apply_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>apply_op</name></expr></argument>, <argument><expr><name>aggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>aggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// restore AST</comment>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>prev_ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>arguments</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>pcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
