<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_build/execution_plan_construct.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_construct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_build_filter_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_build_op_contexts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_expression_construct.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_PushDownPathFilters</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
										<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>path_filter_op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>relocate_to</name> <init>= <expr><name>path_filter_op</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Find the earliest filter op in the path filter op's chain of parents.</comment>
	<while>while<condition>(<expr><name><name>relocate_to</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>relocate_to</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>relocate_to</name> <operator>=</operator> <name><name>relocate_to</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/* If the filter op is part of a chain of filter ops, migrate it
	 * to be the topmost. This ensures that cheaper filters will be
	 * applied first. */</comment>
	<if_stmt><if>if<condition>(<expr><name>relocate_to</name> <operator>!=</operator> <name>path_filter_op</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>path_filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name>relocate_to</name></expr></argument>, <argument><expr><name>path_filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlan_PlaceApplyOps</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>filter_ops</name> <init>= <expr><call><name>ExecutionPlan_CollectOps</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>OPType_FILTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>filter_ops_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>filter_ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_ops_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name><name>filter_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>FilterTree_ContainsFunc</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>filterTree</name></name></expr></argument>, <argument><expr><literal type="string">"path_filter"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// If the path filter op has other filter ops above it,</comment>
			<comment type="line">// migrate it to be the topmost.</comment>
			<expr_stmt><expr><call><name>_PushDownPathFilters</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Convert the filter op to an Apply operation</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_ReduceFilterToApply</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filter_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_RePositionFilterOp</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>lower_bound</name></decl></parameter>,
									  <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>upper_bound</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// validate inputs</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* When placing filters, we should not recurse into certain operation's
	 * subtrees that would cause logical errors.
	 * The cases we currently need to be concerned with are:
	 * Merge - the results which should only be filtered after the entity
	 * is matched or created.
	 *
	 * Apply - which has an Optional child that should project results or NULL
	 * before being filtered.
	 *
	 * The family of SemiApply ops (including the Apply Multiplexers)
	 * does not require this restriction since they are always exclusively
	 * performing filtering. */</comment>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="line">// Operation after which filter will be located.</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter_tree</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>filter</name><operator>)</operator><operator>-&gt;</operator><name>filterTree</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// collect all filtered entities.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>references</name> <init>= <expr><call><name>FilterTree_CollectModified</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>references_count</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name>references</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>references_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Scan execution plan, locate the earliest position where all
		 * references been resolved. */</comment>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>ExecutionPlan_LocateReferencesExcludingOps</name><argument_list>(<argument><expr><name>lower_bound</name></expr></argument>, <argument><expr><name>upper_bound</name></expr></argument>, <argument><expr><name>FILTER_RECURSE_BLACKLIST</name></expr></argument>,
														<argument><expr><name>BLACKLIST_OP_COUNT</name></expr></argument>, <argument><expr><name>references</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>op</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// Failed to resolve all filter references.</comment>
			<expr_stmt><expr><call><name>Error_InvalidFilterPlacement</name><argument_list>(<argument><expr><name>references</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* The filter tree does not contain references, like:
		 * WHERE 1=1
		 * Place the op directly below the first projection if there is one,
		 * otherwise update the ExecutionPlan root. */</comment>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_PROJECT</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_AGGREGATE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if<condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_PROJECT</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_AGGREGATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// In case this is a pre-existing filter (this function is not called out from ExecutionPlan_PlaceFilterOps)</comment>
	<if_stmt><if>if<condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// If the located op is not the filter child, re position the filter.</comment>
		<if_stmt><if>if<condition>(<expr><name>op</name> <operator>!=</operator> <name><name>filter</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// No root was found, place filter at the root.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// This is a new filter.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Filter may have migrated a segment, update the filter segment
	 * and check if the segment root needs to be updated.
	 * The filter should be associated with the op's segment. */</comment>
	<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>plan</name></name></expr>;</expr_stmt>
	<comment type="line">// Re-set the segment root if needed.</comment>
	<if_stmt><if>if<condition>(<expr><name>op</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><operator>(</operator><name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>references</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_PlaceFilterOps</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>recurse_limit</name></decl></parameter>,
								  <parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Decompose the filter tree into an array of the smallest possible subtrees
	 * that do not violate the rules of AND/OR combinations. */</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>sub_trees</name> <init>= <expr><call><name>FilterTree_SubTrees</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* For each filter tree, find the earliest position in the op tree
	 * after which the filter tree can be applied. */</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>nfilters</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>sub_trees</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfilters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name><name>sub_trees</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><call><name>NewFilterOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_RePositionFilterOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>recurse_limit</name></expr></argument>, <argument><expr><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>sub_trees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Build ops in the Apply family to appropriately process path filters.</comment>
	<expr_stmt><expr><call><name>_ExecutionPlan_PlaceApplyOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_buildCreateOp</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
	<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AST_CreateContext</name></type> <name>create_ast_ctx</name> <init>=
		<expr><call><name>AST_PrepareCreateOp</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>=
		<expr><call><name>NewCreateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>create_ast_ctx</name><operator>.</operator><name>nodes_to_create</name></name></expr></argument>,
				<argument><expr><name><name>create_ast_ctx</name><operator>.</operator><name>edges_to_create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_buildUnwindOp</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AST_UnwindContext</name></type> <name>unwind_ast_ctx</name> <init>= <expr><call><name>AST_PrepareUnwindOp</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>NewUnwindOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>unwind_ast_ctx</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_buildUpdateOp</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
								  <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>update_exps</name> <init>= <expr><call><name>AST_PrepareUpdateOp</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>NewUpdateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>update_exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_buildDeleteOp</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// delete must operate on child data, prepare an error if there</comment>
		<comment type="line">// is no child op</comment>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Delete was constructed without a child operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>AST_PrepareDeleteOp</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>NewDeleteOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlanSegment_ConvertClause</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
	<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>t</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Because 't' is set using the offsetof() call</comment>
	<comment type="line">// it cannot be used in switch statements</comment>
	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_MATCH</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>buildMatchOpTree</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>ast</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_CALL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>buildCallOp</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_CREATE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_buildCreateOp</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>ast</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_UNWIND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_buildUnwindOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_MERGE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>buildMergeOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>ast</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_SET</name> <operator>||</operator> <name>t</name> <operator>==</operator> <name>CYPHER_AST_REMOVE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_buildUpdateOp</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_DELETE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_buildDeleteOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_RETURN</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Converting a RETURN clause can create multiple operations.</comment>
		<expr_stmt><expr><call><name>buildReturnOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_WITH</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Converting a WITH clause can create multiple operations.</comment>
		<expr_stmt><expr><call><name>buildWithOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"unhandeled clause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
