<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_build/reduce_to_apply.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_construct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_mock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../optimizations/optimizer.h"</cpp:file></cpp:include>

<comment type="block">/* Swap operation on operation children. If two valid indices, a and b, are given, this operation
 * swap the child in index a with the child in index b. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_OpBaseSwapChildren</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>a</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_CreateBoundBranch</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vars</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>NewArgumentOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* In case of Apply operations, we need to append, the new argument branch and
	 * set it as the first child. */</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>OP_IS_APPLY</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_OpBaseSwapChildren</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* Builds a semi apply operation out of path filter expression. */</comment>
<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>_ApplyOpFromPathExpression</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vars</name></decl></parameter>,
										  <parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>anti</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>AR_EXP_GetFuncName</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"not"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>anti</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>expression</name> <operator>=</operator> <name><name>expression</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Build new Semi Apply op.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op_semi_apply</name> <init>= <expr><call><name>NewSemiApplyOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>anti</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>expression</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>operand</name><operator>.</operator><name>constant</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Add a match branch as a Semi Apply op child.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>match_branch</name> <init>= <expr><call><name>ExecutionPlan_BuildOpsFromPath</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>op_semi_apply</name></expr></argument>, <argument><expr><name>match_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>op_semi_apply</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This method reduces a filter tree into an OpBase.
 * The method perfrom post-order traversal over the filter tree,
 * and checks if the current subtree rooted at the visited node
 * contains path filter or not, and either reduces the root 
 * or continue traversal and reduction.
 * The three possible operations could be:
 * 1. OpFilter - In the case the subtree originated from the root does not contains any path filters.
 * 2. OpSemiApply - In case of the current root is an expression which contains a path filter.
 * 3. ApplyMultiplexer - In case the current root is an operator (OR or AND) and at least one of its children
 * has been reduced to OpSemiApply or ApplyMultiplexer. */</comment>
<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>_ReduceFilterToOp</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vars</name></decl></parameter>,
								 <parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter_root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<comment type="line">// Case of an expression which contains path filter.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>filter_root</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_EXP</name> <operator>&amp;&amp;</operator> <call><name>FilterTree_ContainsFunc</name><argument_list>(<argument><expr><name>filter_root</name></expr></argument>, <argument><expr><literal type="string">"path_filter"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If an expression filter tree node contains "path_filter" function, it can be either as
		 * a single function, or a single child of a single "not" function. */</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>expression</name> <init>= <expr><name><name>filter_root</name><operator>-&gt;</operator><name>exp</name><operator>.</operator><name>exp</name></name></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>_ApplyOpFromPathExpression</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Case of an operator (Or or And) which its subtree contains path filter</comment>
	<if_stmt><if>if<condition>(<expr><name><name>filter_root</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_COND</name> <operator>&amp;&amp;</operator> <call><name>FilterTree_ContainsFunc</name><argument_list>(<argument><expr><name>filter_root</name></expr></argument>, <argument><expr><literal type="string">"path_filter"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// Create the relevant LHS branch and set a bounded branch for it.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>_ReduceFilterToOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name><name>filter_root</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>filter_root</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>_CreateBoundBranch</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Create the relevant RHS branch and set a bounded branch for it.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>_ReduceFilterToOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name><name>filter_root</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>filter_root</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>_CreateBoundBranch</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Check that at least one of the branches is not a filter.</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name> <operator>&amp;&amp;</operator> <name><name>lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Create multiplexer op and set the branches as its children.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>apply_multiplexer</name> <init>= <expr><call><name>NewApplyMultiplexerOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>filter_root</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>apply_multiplexer</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>apply_multiplexer</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>apply_multiplexer</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// In the case of a simple filter.</comment>
	<return>return <expr><call><name>NewFilterOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>filter_root</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Reduces a filter operation to a SemiApply/ApplyMultiplexer operation, according to the filter tree */</comment>
<function><type><name>void</name></type> <name>ExecutionPlan_ReduceFilterToApply</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Collect all variables that are bound at this position in the op tree.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Collect the variable names from bound_vars to populate the Argument ops we will build.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vars</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>raxValues</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>filter_plan</name> <init>= <expr><operator>(</operator><name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>filter</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Reduce.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>apply_op</name> <init>= <expr><call><name>_ReduceFilterToOp</name><argument_list>(<argument><expr><name>filter_plan</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filterTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Replace operations.</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>, <argument><expr><name>apply_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Bounded branch is now the last child (after ops replacement). Make it the first.</comment>
	<expr_stmt><expr><call><name>_OpBaseSwapChildren</name><argument_list>(<argument><expr><name>apply_op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>apply_op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name> <operator>==</operator> <name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>apply_op</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Free filter op.</comment>
	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
