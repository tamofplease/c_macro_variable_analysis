<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_build/execution_plan_modify.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_mock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_OpBase_AddChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Add child to parent</comment>
	<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpBase</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpBase</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

	<comment type="line">// Add parent to child</comment>
	<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Remove the operation old_child from its parent and replace it
 * with the new child without reordering elements. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlan_ParentReplaceChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>old_child</name></decl></parameter>,
											  <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>new_child</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* Scan the children array to find the op being replaced. */</comment>
		<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>old_child</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="block">/* Replace the original child with the new one. */</comment>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>new_child</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"failed to locate the operation to be replaced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Removes node b from a and update child parent lists
 * Assuming B is a child of A. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_OpBase_RemoveChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Remove child from parent.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>!=</operator> <name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Update child count.</comment>
	<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// Shift left children.</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rm_realloc</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpBase</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Remove parent from child.</comment>
	<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ExecutionPlan_AddOp</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>newOp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_OpBase_AddChild</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>newOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Introduce the new operation B between A and A's parent op.</comment>
<function><type><name>void</name></type> <name>ExecutionPlan_PushBelow</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// B belongs to A's plan.</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><operator>(</operator><name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <name>plan</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// A is the root operation.</comment>
		<expr_stmt><expr><call><name>_OpBase_AddChild</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Disconnect A from its parent and replace it with B. */</comment>
	<expr_stmt><expr><call><name>_ExecutionPlan_ParentReplaceChild</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add A as a child of B. */</comment>
	<expr_stmt><expr><call><name>_OpBase_AddChild</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_NewRoot</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>old_root</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>new_root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* The new root should have no parent, but may have children if we've constructed
	 * a chain of traversals/scans. */</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>old_root</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>new_root</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Find the deepest child of the new root operation.
	 * Currently, we can only follow the first child, since we don't call this function when
	 * introducing Cartesian Products (the only multiple-stream operation at this stage.)
	 * This may be inadequate later. */</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>tail</name> <init>= <expr><name>new_root</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tail</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name><name>tail</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>tail</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

	<comment type="line">// Append the old root to the tail of the new root's chain.</comment>
	<expr_stmt><expr><call><name>_OpBase_AddChild</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name>old_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>ExecutionPlan_UpdateRoot</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>new_root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ExecutionPlan_NewRoot</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>new_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>new_root</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_ReplaceOp</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Insert the new operation between the original and its parent.</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Delete the original operation.</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_RemoveOp</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Removing execution plan root.</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Assign child as new root.</comment>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<comment type="line">// Remove new root's parent pointer.</comment>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// In place replacement of the op first branch instead of op.</comment>
			<expr_stmt><expr><call><name>_ExecutionPlan_ParentReplaceChild</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Add each of op's children as a child of op's parent.</comment>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_OpBase_AddChild</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Remove op from its parent.</comment>
			<expr_stmt><expr><call><name>_OpBase_RemoveChild</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Clear op.</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_DetachOp</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Operation has no parent.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Remove op from its parent.</comment>
	<expr_stmt><expr><call><name>_OpBase_RemoveChild</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>ExecutionPlan_LocateOpResolvingAlias</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>modifies</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resolved_alias</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>modifies</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="block">/* NOTE - if this function is later used to modify the returned operation, we should return
		 * the deepest operation that modifies the alias rather than the shallowest, as done here. */</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>resolved_alias</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>root</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>ExecutionPlan_LocateOpResolvingAlias</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>op</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>ExecutionPlan_LocateOpMatchingType</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OPType</name> <modifier>*</modifier></type><name>types</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>type_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>type_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Return the current op if it matches any of the types we're searching for.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>root</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Recursively visit children.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>ExecutionPlan_LocateOpMatchingType</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>type_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>op</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>ExecutionPlan_LocateOp</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OPType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>OPType</name></type> <name><name>type_arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>type</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>ExecutionPlan_LocateOpMatchingType</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>type_arr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>ExecutionPlan_LocateReferencesExcludingOps</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
												   <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>recurse_limit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OPType</name> <modifier>*</modifier></type><name>blacklisted_ops</name></decl></parameter>,
												   <parameter><decl><type><name>int</name></type> <name>nblacklisted_ops</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>refs_to_resolve</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<decl_stmt><decl><type><name>int</name></type> <name>dependency_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>blacklisted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>resolving_op</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>all_refs_resolved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// check if this op is blacklisted</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblacklisted_ops</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blacklisted</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>blacklisted</name> <operator>=</operator> <operator>(</operator><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>blacklisted_ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// we're not allowed to inspect child operations of blacklisted ops</comment>
	<comment type="line">// also we're not allowed to venture further than 'recurse_limit'</comment>
	<if_stmt><if>if<condition>(<expr><name>blacklisted</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>root</name> <operator>!=</operator> <name>recurse_limit</name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>all_refs_resolved</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<comment type="line">// Visit each child and try to resolve references, storing a pointer to the child if successful.</comment>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>tmp_op</name> <init>= <expr><call><name>ExecutionPlan_LocateReferencesExcludingOps</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
																		<argument><expr><name>recurse_limit</name></expr></argument>, <argument><expr><name>blacklisted_ops</name></expr></argument>, <argument><expr><name>nblacklisted_ops</name></expr></argument>, <argument><expr><name>refs_to_resolve</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if<condition>(<expr><name>tmp_op</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dependency_count</name> <operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// Count how many children resolved references.</comment>
			<comment type="line">// If there is more than one child resolving an op, set the root as the resolver.</comment>
			<expr_stmt><expr><name>resolving_op</name> <operator>=</operator> <ternary><condition><expr><name>resolving_op</name></expr> ?</condition><then> <expr><name>root</name></expr> </then><else>: <expr><name>tmp_op</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name>all_refs_resolved</name> <operator>=</operator> <operator>(</operator><call><name>raxSize</name><argument_list>(<argument><expr><name>refs_to_resolve</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <comment type="line">// We're done when the rax is empty.</comment>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// If we've resolved all references, our work is done.</comment>
	<if_stmt><if>if<condition>(<expr><name>all_refs_resolved</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>resolving_op</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>modifies</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>blacklisted</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// If we've reached a blacklisted op, all variables in its subtree are</comment>
		<comment type="line">// considered to be modified by it, as we can't recurse farther.</comment>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>modifies</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>raxKeys</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>modifies</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>root</name><operator>-&gt;</operator><name>modifies</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Try to resolve references in the current operation.</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>refs_resolved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>modifies_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>modifies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>modifies_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>modifies</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Attempt to remove the current op's references, marking whether any removal was succesful.</comment>
		<expr_stmt><expr><name>refs_resolved</name> <operator>|=</operator> <call><name>raxRemove</name><argument_list>(<argument><expr><name>refs_to_resolve</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ref</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Free the modified array and its contents if it was generated to represent a blacklisted op.</comment>
	<if_stmt><if>if<condition>(<expr><name>blacklisted</name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>modifies_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>modifies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>modifies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>refs_resolved</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>resolving_op</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>resolving_op</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>ExecutionPlan_LocateReferences</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>recurse_limit</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>refs_to_resolve</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>ExecutionPlan_LocateReferencesExcludingOps</name><argument_list>(
			   <argument><expr><name>root</name></expr></argument>, <argument><expr><name>recurse_limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>refs_to_resolve</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_ExecutionPlan_LocateTaps</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>taps</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// op Argument isn't considered a tap</comment>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_ARGUMENT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>taps</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// recursively visit children</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>_ExecutionPlan_LocateTaps</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>taps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExecutionPlan_LocateTaps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>taps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>OpBase</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_ExecutionPlan_LocateTaps</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>taps</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlan_CollectOpsMatchingType</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OPType</name> <modifier>*</modifier></type><name>types</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type_count</name></decl></parameter>,
												  <parameter><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ops</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>type_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Check to see if the op's type matches any of the types we're searching for.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>ops</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Recursively visit children.</comment>
		<expr_stmt><expr><call><name>_ExecutionPlan_CollectOpsMatchingType</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>type_count</name></expr></argument>, <argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExecutionPlan_CollectOpsMatchingType</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OPType</name> <modifier>*</modifier></type><name>types</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>type_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>ops</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>OpBase</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_ExecutionPlan_CollectOpsMatchingType</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>type_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ops</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>ExecutionPlan_CollectOps</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OPType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>ops</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>OpBase</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>OPType</name></type> <name><name>type_arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>type</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_ExecutionPlan_CollectOpsMatchingType</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>type_arr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ops</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Collect all aliases that have been resolved by the given tree of operations.</comment>
<function><type><name>void</name></type> <name>ExecutionPlan_BoundVariables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>modifiers</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>modifiers</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>modifies_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>modifies_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modified</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>modified</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>modified</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Project and Aggregate operations demarcate variable scopes,
	 * collect their projections but do not recurse into their children.
	 * Note that future optimizations which operate across scopes will require different logic
	 * than this for application. */</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_PROJECT</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_AGGREGATE</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_BindPlanToOps</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<comment type="line">// If the temporary execution plan has added new QueryGraph entities,</comment>
	<comment type="line">// migrate them to the master plan's QueryGraph.</comment>
	<expr_stmt><expr><call><name>QueryGraph_MergeGraphs</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <name>plan</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ExecutionPlan_BindPlanToOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>ExecutionPlan_BuildOpsFromPath</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>bound_vars</name></decl></parameter>,
									   <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Initialize an ExecutionPlan that shares this plan's Record mapping.</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>match_stream_plan</name> <init>= <expr><call><name>ExecutionPlan_NewEmptyExecutionPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>match_stream_plan</name><operator>-&gt;</operator><name>record_map</name></name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name></expr>;</expr_stmt>

	<comment type="line">// If we have bound variables, build an Argument op that represents them.</comment>
	<if_stmt><if>if<condition>(<expr><name>bound_vars</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>match_stream_plan</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>NewArgumentOp</name><argument_list>(<argument><expr><name>match_stream_plan</name></expr></argument>,
															   <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Build a temporary AST holding a MATCH clause.</comment>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* The AST node we're building a mock MATCH clause for will be a path
	 * if we're converting a MERGE clause or WHERE filter, and we must build
	 * and later free a CYPHER_AST_PATTERN node to contain it.
	 * If instead we're converting an OPTIONAL MATCH, the node is itself a MATCH clause,
	 * and we will reuse its CYPHER_AST_PATTERN node rather than building a new one. */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>node_is_path</name> <init>= <expr><operator>(</operator><name>type</name> <operator>==</operator> <name>CYPHER_AST_PATTERN_PATH</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CYPHER_AST_NAMED_PATH</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>match_stream_ast</name> <init>= <expr><call><name>AST_MockMatchClause</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><operator>(</operator><name>cypher_astnode_t</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>, <argument><expr><name>node_is_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Build plan's query graph</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// Extract pattern from holistic query graph.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>match_clauses</name> <init>= <expr><call><name>AST_GetClauses</name><argument_list>(<argument><expr><name>match_stream_ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_MATCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name>match_clauses</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>cypher_ast_match_get_pattern</name><argument_list>(<argument><expr><name><name>match_clauses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>match_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>sub_qg</name> <init>= <expr><call><name>QueryGraph_ExtractPatterns</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pattern</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>match_stream_plan</name><operator>-&gt;</operator><name>query_graph</name></name> <operator>=</operator> <name>sub_qg</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_PopulateExecutionPlan</name><argument_list>(<argument><expr><name>match_stream_plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AST_MockFree</name><argument_list>(<argument><expr><name>match_stream_ast</name></expr></argument>, <argument><expr><name>node_is_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Reset the AST.</comment>

	<comment type="line">// Associate all new ops with the correct ExecutionPlan and QueryGraph.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>match_stream_root</name> <init>= <expr><name><name>match_stream_plan</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_BindPlanToOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>match_stream_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// NULL-set variables shared between the match_stream_plan and the overall plan.</comment>
	<expr_stmt><expr><name><name>match_stream_plan</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>match_stream_plan</name><operator>-&gt;</operator><name>record_map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="line">// Free the temporary plan.</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_Free</name><argument_list>(<argument><expr><name>match_stream_plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>match_stream_root</name></expr>;</return>
</block_content>}</block></function>

</unit>
