<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_build/build_projection_ops.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_construct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_build_op_contexts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_expression_construct.h"</cpp:file></cpp:include>

<comment type="line">// Handle ORDER entities</comment>
<function><type><specifier>static</specifier> <name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>_BuildOrderExpressions</name><parameter_list>(<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>projections</name></decl></parameter>,
										   <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>order_clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>cypher_ast_order_by_nitems</name><argument_list>(<argument><expr><name>order_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>order_exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cypher_ast_order_by_get_item</name><argument_list>(<argument><expr><name>order_clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_exp</name> <init>= <expr><call><name>cypher_ast_sort_item_get_expression</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <call><name>AST_ToString</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>order_exps</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>order_exps</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Handle projected entities</comment>
<comment type="line">// (This function is not static because it is relied upon by unit tests)</comment>
<function><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>_BuildProjectionExpressions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>expressions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>t</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_RETURN</name> <operator>||</operator> <name>t</name> <operator>==</operator> <name>CYPHER_AST_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_RETURN</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if we have a "RETURN *" at this point, it is because we raised </comment>
		<comment type="line">// an error in AST rewriting</comment>
		<if_stmt><if>if<condition>(<expr><call><name>cypher_ast_return_has_include_existing</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>cypher_ast_return_nprojections</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_ast_with_has_include_existing</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>cypher_ast_with_nprojections</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>expressions</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>rax</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_RETURN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>projection</name> <operator>=</operator> <call><name>cypher_ast_return_get_projection</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>projection</name> <operator>=</operator> <call><name>cypher_ast_with_get_projection</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// The AST expression can be an identifier, function call, or constant</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_exp</name> <init>=
			<expr><call><name>cypher_ast_projection_get_expression</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Find the resolved name of the entity - its alias,</comment>
		<comment type="line">// its identifier if referring to a full entity,</comment>
		<comment type="line">// the entity.prop combination ("a.val"),</comment>
		<comment type="line">// or the function call ("MAX(a.val)")</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>identifier</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>alias_node</name> <init>=
			<expr><call><name>cypher_ast_projection_get_alias</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>alias_node</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// The projection either has an alias (AS), is a function call,</comment>
			<comment type="line">// or is a property specification (e.name).</comment>
			<expr_stmt><expr><name>identifier</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>alias_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// This expression did not have an alias,</comment>
			<comment type="line">// so it must be an identifier</comment>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Retrieve "a" from "RETURN a" or "RETURN a AS e"</comment>
			<comment type="line">// (theoretically; the latter case is already handled)</comment>
			<expr_stmt><expr><name>identifier</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>rax</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>identifier</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// Construction an AR_ExpNode to represent this projected entity.</comment>
			<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <name>identifier</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>expressions</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Merge all order expressions into the projections array without duplicates,</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_combine_projection_arrays</name><parameter_list>(<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>exps_ptr</name></decl></parameter>, <parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>order_exps</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>projection_names</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>project_exps</name> <init>= <expr><operator>*</operator><name>exps_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>order_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>order_exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>project_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>project_exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Add all WITH/RETURN projection names to rax.</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>project_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>project_exps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>projection_names</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Merge non-duplicate order expressions into projection array.</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>order_exps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>new_name</name> <init>= <expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>projection_names</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// If it is a new projection, add a clone to the array.</comment>
		<if_stmt><if>if<condition>(<expr><name>new_name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>project_exps</name></expr></argument>, <argument><expr><call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name><name>order_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>projection_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>exps_ptr</name> <operator>=</operator> <name>project_exps</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Build an aggregate or project operation and any required modifying operations.</comment>
<comment type="line">// This logic applies for both WITH and RETURN projections.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_buildProjectionOps</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
									   <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<decl_stmt><decl><type><name>OpBase</name>                  <modifier>*</modifier></type><name>op</name>               <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name>                  <modifier>*</modifier></type><name>distinct_op</name>      <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>                    <name>distinct</name>          <init>=  <expr><name>false</name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>                    <name>aggregate</name>         <init>=  <expr><name>false</name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>                     <modifier>*</modifier></type><name>sort_directions</name>  <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name>              <modifier>*</modifier><modifier>*</modifier></type><name>order_exps</name>      <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name>              <modifier>*</modifier><modifier>*</modifier></type><name>projections</name>     <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name>  <modifier>*</modifier></type><name>skip_clause</name>      <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name>  <modifier>*</modifier></type><name>limit_clause</name>     <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name>  <modifier>*</modifier></type><name>order_clause</name>     <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>

	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>t</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_WITH</name> <operator>||</operator> <name>t</name> <operator>==</operator> <name>CYPHER_AST_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>aggregate</name> <operator>=</operator> <call><name>AST_ClauseContainsAggregation</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>projections</name> <operator>=</operator> <call><name>_BuildProjectionExpressions</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>CYPHER_AST_WITH</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>distinct</name>      <operator>=</operator>  <call><name>cypher_ast_with_is_distinct</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>skip_clause</name>   <operator>=</operator>  <call><name>cypher_ast_with_get_skip</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>limit_clause</name>  <operator>=</operator>  <call><name>cypher_ast_with_get_limit</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>order_clause</name>  <operator>=</operator>  <call><name>cypher_ast_with_get_order_by</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>distinct</name>      <operator>=</operator>  <call><name>cypher_ast_return_is_distinct</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>skip_clause</name>   <operator>=</operator>  <call><name>cypher_ast_return_get_skip</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>limit_clause</name>  <operator>=</operator>  <call><name>cypher_ast_return_get_limit</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>order_clause</name>  <operator>=</operator>  <call><name>cypher_ast_return_get_order_by</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>distinct</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Prepare the distinct op but do not add it to op tree.</comment>
		<comment type="line">// This is required so that it does not operate on order expressions.</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>n</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>projections</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Populate a stack array with the aliases to perform Distinct on</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>aliases</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>projections</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name>distinct_op</name> <operator>=</operator> <call><name>NewDistinctOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>aliases</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>order_clause</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AST_PrepareSortOp</name><argument_list>(<argument><expr><name>order_clause</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sort_directions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>order_exps</name> <operator>=</operator> <call><name>_BuildOrderExpressions</name><argument_list>(<argument><expr><name>projections</name></expr></argument>, <argument><expr><name>order_clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Merge order expressions into the projections array.</comment>
		<expr_stmt><expr><call><name>_combine_projection_arrays</name><argument_list>(<argument><expr><operator>&amp;</operator><name>projections</name></expr></argument>, <argument><expr><name>order_exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Our fundamental operation will be a projection or aggregation.</comment>
	<if_stmt><if>if<condition>(<expr><name>aggregate</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// An aggregate op's caching policy depends on whether its results will be sorted.</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>sorting_after_aggregation</name> <init>= <expr><operator>(</operator><name>order_exps</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>NewAggregateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>projections</name></expr></argument>, <argument><expr><name>sorting_after_aggregation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>NewProjectOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>projections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add modifier operations in order such that the final execution plan will follow the sequence:
	 * Limit -&gt; Skip -&gt; Sort -&gt; Distinct -&gt; Project/Aggregate */</comment>

	<if_stmt><if>if<condition>(<expr><name>distinct_op</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>distinct_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>sort_directions</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// The sort operation will obey a specified limit, but must account for skipped records</comment>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>NewSortOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>order_exps</name></expr></argument>, <argument><expr><name>sort_directions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>skip_clause</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>buildSkipOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>skip_clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>limit_clause</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>buildLimitOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>limit_clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// RETURN builds a subtree of projection ops with Results as the root.</comment>
<function><type><name>void</name></type> <name>buildReturnOps</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_buildProjectionOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// follow up with a Result operation</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>NewResultsOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// RETURN builds a subtree of projection ops.</comment>
<function><type><name>void</name></type> <name>buildWithOps</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_buildProjectionOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
