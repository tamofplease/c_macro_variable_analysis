<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_build/build_merge_op_tree.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_construct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_build_op_contexts.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_buildMergeCreateStream</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>AST_MergeContext</name> <modifier>*</modifier></type><name>merge_ctx</name></decl></parameter>,
									<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arguments</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* If we have bound variables, we must ensure that all of our created entities are unique. Consider:
	 * UNWIND [1, 1] AS x MERGE ({val: x})
	 * Exactly one node should be created in the UNWIND...MERGE query. */</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>merge_create</name> <init>= <expr><call><name>NewMergeCreateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>merge_ctx</name><operator>-&gt;</operator><name>nodes_to_merge</name></name></expr></argument>, <argument><expr><name><name>merge_ctx</name><operator>-&gt;</operator><name>edges_to_merge</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>merge_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Add MergeCreate op to stream.</comment>

	<comment type="line">// If we have bound variables, push an Argument tap beneath the Create op.</comment>
	<if_stmt><if>if<condition>(<expr><name>arguments</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>create_argument</name> <init>= <expr><call><name>NewArgumentOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>merge_create</name></expr></argument>, <argument><expr><name>create_argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Add Argument op to stream.</comment>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>buildMergeOp</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/*
	 * A MERGE clause provides a single path that must exist or be created.
	 * If we have built ops already, they will form the first stream into the Merge op.
	 * A clone of the Record produced by this stream will be passed into the other Merge streams
	 * so that they properly work with bound variables.
	 *
	 * As with paths in a MATCH query, build the appropriate traversal operations
	 * and add them as another stream into Merge.
	 *
	 * Finally, we'll add a last stream that creates the pattern if it did not get matched.
	 *
	 * Simple case (2 streams, no bound variables):
	 * MERGE (:A {val: 5})
	 *                           Merge
	 *                          /     \
	 *                     Filter    Create
	 *                      /
	 *                Label Scan
	 *
	 * Complex case:
	 * MATCH (a:A) MERGE (a)-[:E]-&gt;(:B)
	 *                                  Merge
	 *                           /        |        \
	 *                    LabelScan CondTraverse  Create
	 *                                    |          \
	 *                                Argument     Argument
	 */</comment>

	<comment type="line">// Collect the variables that are bound at this point, as MERGE shouldn't construct them.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arguments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>bound_vars</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Rather than cloning the record map, collect the bound variables along with their</comment>
		<comment type="line">// parser-generated constant strings.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Collect the variable names from bound_vars to populate the Argument ops we will build.</comment>
		<expr_stmt><expr><name>arguments</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>raxValues</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Convert all AST data required to populate our operations tree.</comment>
	<decl_stmt><decl><type><name>AST_MergeContext</name></type> <name>merge_ctx</name> <init>= <expr><call><name>AST_PrepareMergeOp</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Build the Match stream as a Merge child.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>cypher_ast_merge_get_pattern_path</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>match_stream</name> <init>= <expr><call><name>ExecutionPlan_BuildOpsFromPath</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Create a Merge operation. It will store no information at this time except for any graph updates</comment>
	<comment type="line">// it should make due to ON MATCH and ON CREATE SET directives in the query.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>merge_op</name> <init>= <expr><call><name>NewMergeOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>merge_ctx</name><operator>.</operator><name>on_match</name></name></expr></argument>, <argument><expr><name><name>merge_ctx</name><operator>.</operator><name>on_create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Set Merge op as new root and add previously-built ops, if any, as Merge's first stream.</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>merge_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>merge_op</name></expr></argument>, <argument><expr><name>match_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Add Match stream to Merge op.</comment>

	<comment type="line">// Build the Create stream as a Merge child.</comment>
	<expr_stmt><expr><call><name>_buildMergeCreateStream</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_ctx</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>bound_vars</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
