<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan_build/build_call_op.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../procedures/procedure.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_build_filter_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../execution_plan/execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../execution_plan/ops/op_procedure_call.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_expression_construct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../execution_plan/execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../execution_plan/execution_plan_build/execution_plan_construct.h"</cpp:file></cpp:include>

<comment type="block">/* Strings enclosed in the parentheses of a CALL clause represent the arguments to the procedure.
 * _BuildCallArguments creates a string array holding all of these arguments. */</comment>
<function><type><specifier>static</specifier> <name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>_BuildCallArguments</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>call_clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Handle argument entities</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>arg_count</name> <init>= <expr><call><name>cypher_ast_call_narguments</name><argument_list>(<argument><expr><name>call_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>arguments</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>arg_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arg_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>cypher_ast_call_get_argument</name><argument_list>(<argument><expr><name>call_clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>arguments</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>arguments</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* _BuildCallProjections creates an array of expression nodes to populate a Project operation with.
 * All Strings in the YIELD block of a CALL clause are represented, or the procedure-registered
 * outputs if the YIELD block is missing. */</comment>
<function><type><specifier>static</specifier> <name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>_BuildCallProjections</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>call_clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Handle yield entities</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>yield_count</name> <init>= <expr><call><name>cypher_ast_call_nprojections</name><argument_list>(<argument><expr><name>call_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>expressions</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>yield_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>yield_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><call><name>cypher_ast_call_get_projection</name><argument_list>(<argument><expr><name>call_clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_exp</name> <init>= <expr><call><name>cypher_ast_projection_get_expression</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Construction an AR_ExpNode to represent this entity.</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>identifier</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>alias_node</name> <init>= <expr><call><name>cypher_ast_projection_get_alias</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>alias_node</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// The projection either has an alias (AS), is a function call, or is a property specification (e.name).</comment>
			<expr_stmt><expr><name>identifier</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>alias_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// This expression did not have an alias, so it must be an identifier</comment>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Retrieve "a" from "RETURN a" or "RETURN a AS e" (theoretically; the latter case is already handled)</comment>
			<expr_stmt><expr><name>identifier</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <name>identifier</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// If the procedure call is missing its yield part, include procedure outputs.</comment>
	<if_stmt><if>if<condition>(<expr><name>yield_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proc_name</name> <init>= <expr><call><name>cypher_ast_proc_name_get_value</name><argument_list>(<argument><expr><call><name>cypher_ast_call_get_proc_name</name><argument_list>(<argument><expr><name>call_clause</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ProcedureCtx</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>Proc_Get</name><argument_list>(<argument><expr><name>proc_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>output_count</name> <init>= <expr><call><name>Procedure_OutputCount</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>output_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>Procedure_GetOutput</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_NewVariableOperandNode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>Proc_Free</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>expressions</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Convert a CALL clause into a procedure call operation.</comment>
<function><type><name>void</name></type> <name>buildCallOp</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>call_clause</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// A call clause has a procedure name,</comment>
	<comment type="line">// 0+ arguments (parenthesized expressions),</comment>
	<comment type="line">// and a projection if YIELD is included</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><call><name>cypher_ast_call_get_proc_name</name><argument_list>(<argument><expr><name>call_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proc_name</name> <init>= <expr><call><name>cypher_ast_proc_name_get_value</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>arguments</name> <init>= <expr><call><name>_BuildCallArguments</name><argument_list>(<argument><expr><name>call_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield_exps</name> <init>= <expr><call><name>_BuildCallProjections</name><argument_list>(<argument><expr><name>call_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// TODO only need strings</comment>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>NewProcCallOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>proc_name</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>, <argument><expr><name>yield_exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Build the FilterTree to model any WHERE predicates on this clause</comment>
	<comment type="line">// and place ops appropriately.</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>sub_ft</name> <init>= <expr><call><name>AST_BuildFilterTreeFromClauses</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>call_clause</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_PlaceFilterOps</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sub_ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
