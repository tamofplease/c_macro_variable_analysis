<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_node_by_index_scan.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_node_by_index_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shared/print_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../filter_tree/ft_to_rsq.h"</cpp:file></cpp:include>

<comment type="line">// forward declarations</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>IndexScanInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>IndexScanConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>IndexScanConsumeFromChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>IndexScanReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IndexScanFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IndexScanToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>IndexScan</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ScanToString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewIndexScanOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>NodeScanCtx</name></type> <name>n</name></decl></parameter>,
		<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// validate inputs</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>g</name>      <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>    <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IndexScan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name>                    <operator>=</operator>  <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>n</name></name>                    <operator>=</operator>  <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name>                  <operator>=</operator>  <name>idx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name>                 <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>filter</name></name>               <operator>=</operator>  <name>filter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name>         <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name>   <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rebuild_index_query</name></name>  <operator>=</operator>  <name>false</name></expr>;</expr_stmt>

	<comment type="line">// Set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_NODE_BY_INDEX_SCAN</name></expr></argument>, <argument><expr><literal type="string">"Node By Index Scan"</literal></expr></argument>, <argument><expr><name>IndexScanInit</name></expr></argument>, <argument><expr><name>IndexScanConsume</name></expr></argument>,
				<argument><expr><name>IndexScanReset</name></expr></argument>, <argument><expr><name>IndexScanToString</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IndexScanFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nodeRecIdx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>IndexScanInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>IndexScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>opBase</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// find out how many different entities are refered to </comment>
		<comment type="line">// within the filter tree, if number of entities equals 1</comment>
		<comment type="line">// (current node being scanned) there's no need to re-build the index</comment>
		<comment type="line">// query for every input record</comment>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>entities</name> <init>= <expr><call><name>FilterTree_CollectModified</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rebuild_index_query</name></name> <operator>=</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// this is us</comment>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>OpBase_UpdateConsume</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>, <argument><expr><name>IndexScanConsumeFromChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// resolve label ID now if it is still unknown</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name> <operator>==</operator> <name>GRAPH_UNKNOWN_LABEL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>schema</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>schema</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name> <operator>=</operator> <name><name>schema</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_UpdateRecord</name><parameter_list>(<parameter><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>EntityID</name></type> <name>node_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Populate the Record with the graph entity data.</comment>
	<decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>nodeRecIdx</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_PassUnresolvedFilters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IndexScan</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>unresolved_filters</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>unresolved_filters</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// no filters</comment>
	<return>return <expr><call><name>FilterTree_applyFilters</name><argument_list>(<argument><expr><name>unresolved_filters</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FILTER_PASS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>IndexScanConsumeFromChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>IndexScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>EntityID</name> <modifier>*</modifier></type><name>nodeId</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<label><name>pull_index</name>:</label>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// pull from index</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<while>while<condition>(<expr><operator>(</operator><name>nodeId</name> <operator>=</operator> <call><name>RediSearch_ResultsIteratorNext</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
				<operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// populate record with node</comment>
			<expr_stmt><expr><call><name>_UpdateRecord</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>, <argument><expr><operator>*</operator><name>nodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// apply unresolved filters</comment>
			<if_stmt><if>if<condition>(<expr><call><name>_PassUnresolvedFilters</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// clone the held Record, as it will be freed upstream</comment>
				<return>return <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// index depleted</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// free input record</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// pull from child</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// depleted</comment>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// reset index iterator</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>rebuild_index_query</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// free previous iterator</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RediSearch_ResultsIteratorFree</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// free previous unresolved filters</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// rebuild index query, probably relies on runtime values</comment>
		<comment type="line">// resolve runtime variables within filter</comment>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>FilterTree_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>FilterTree_ResolveVariables</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// make sure there's only one unresolve entity in filter</comment>
		<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RG_DEBUG</name></cpp:ifdef>
		<block>{<block_content>
			<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>entities</name> <init>= <expr><call><name>FilterTree_CollectModified</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="line">// convert filter into a RediSearch query</comment>
		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>rs_query_node</name> <init>= <expr><call><name>FilterTreeToQueryNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr></argument>,
				<argument><expr><name>filter</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// create iterator</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rs_query_node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <call><name>RediSearch_GetResultsIterator</name><argument_list>(<argument><expr><name>rs_query_node</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// build index query only once (first call)</comment>
		<comment type="line">// reset it if already initialized</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// first call to consume, create query and iterator</comment>
			<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>rs_query_node</name> <init>= <expr><call><name>FilterTreeToQueryNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rs_query_node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <call><name>RediSearch_GetResultsIterator</name><argument_list>(<argument><expr><name>rs_query_node</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// reset existing iterator</comment>
			<expr_stmt><expr><call><name>RediSearch_ResultsIteratorReset</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// repull from index</comment>
	<goto>goto <name>pull_index</name>;</goto>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>IndexScanConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>IndexScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// create iterator on first call</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>rs_query_node</name> <init>= <expr><call><name>FilterTreeToQueryNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr></argument>,
				<argument><expr><name><name>op</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <call><name>RediSearch_GetResultsIterator</name><argument_list>(<argument><expr><name>rs_query_node</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>EntityID</name> <modifier>*</modifier></type><name>nodeId</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// populate the Record with the actual node</comment>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>nodeId</name> <operator>=</operator> <call><name>RediSearch_ResultsIteratorNext</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// populate record with node</comment>
		<expr_stmt><expr><call><name>_UpdateRecord</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>*</operator><name>nodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// apply unresolved filters</comment>
		<if_stmt><if>if<condition>(<expr><call><name>_PassUnresolvedFilters</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>r</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>IndexScanReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>IndexScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RediSearch_ResultsIteratorFree</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IndexScanFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>IndexScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>IndexScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* As long as this Index iterator is alive the index is
	 * read locked, if this index scan operation is part of
	 * a query which will modified this index we'll be stuck in
	 * a dead lock, as we're unable to acquire index write lock. */</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RediSearch_ResultsIteratorFree</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>unresolved_filters</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
