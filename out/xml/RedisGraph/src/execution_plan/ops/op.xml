<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/simple_timer.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations */</comment>
<function_decl><type><name>Record</name></type> <name>ExecutionPlan_BorrowRecord</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExecutionPlan</name></name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>rax</name> <modifier>*</modifier></type><name>ExecutionPlan_GetMappings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ExecutionPlan</name></name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ExecutionPlan_ReturnRecord</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ExecutionPlan</name></name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>OpBase_Init</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>OPType</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
	<parameter><decl><type><name>fpInit</name></type> <name>init</name></decl></parameter>,
	<parameter><decl><type><name>fpConsume</name></type> <name>consume</name></decl></parameter>,
	<parameter><decl><type><name>fpReset</name></type> <name>reset</name></decl></parameter>,
	<parameter><decl><type><name>fpToString</name></type> <name>toString</name></decl></parameter>,
	<parameter><decl><type><name>fpClone</name></type> <name>clone</name></decl></parameter>,
	<parameter><decl><type><name>fpFree</name></type> <name>free</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>writer</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ExecutionPlan</name></name> <modifier>*</modifier></type><name>plan</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <name>plan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op_initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>writer</name></name> <operator>=</operator> <name>writer</name></expr>;</expr_stmt>

	<comment type="line">// function pointers</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>consume</name></name> <operator>=</operator> <name>consume</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>toString</name></name> <operator>=</operator> <name>toString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>clone</name></name> <operator>=</operator> <name>clone</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Record</name></type> <name>OpBase_Consume</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name><name>op</name><operator>-&gt;</operator><name>consume</name></name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>OpBase_Modifies</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// make sure alias has an entry associated with it</comment>
	<comment type="line">// within the record mapping</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><call><name>ExecutionPlan_GetMappings</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>id</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>raxSize</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>OpBase_AliasModifier</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modifier</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><call><name>ExecutionPlan_GetMappings</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>modifier</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>modifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>!=</operator> <name>raxNotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// make sure to not introduce the same modifier twice</comment>
	<if_stmt><if>if<condition>(<expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>OpBase_ChildrenAware</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>plan</name></name> <operator>==</operator> <name><name>child</name><operator>-&gt;</operator><name>plan</name></name> <operator>&amp;&amp;</operator> <name><name>child</name><operator>-&gt;</operator><name>modifies</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>modifies</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>modifies</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition> <block>{<block_content>
						<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><call><name>ExecutionPlan_GetMappings</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rec_idx</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>rec_idx</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<return>return <expr><name>true</name></expr>;</return>				
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>OpBase_ChildrenAware</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>OpBase_Aware</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><call><name>ExecutionPlan_GetMappings</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rec_idx</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>rec_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>rec_idx</name> <operator>!=</operator> <name>raxNotFound</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>OpBase_PropagateReset</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>reset</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>OpResult</name></type> <name>res</name> <init>= <expr><call><name><name>op</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>OP_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_PropagateReset</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_OpBase_StatsToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>,
					<argument><expr><literal type="string">" | Records produced: %d, Execution time: %f ms"</literal></expr></argument>,
					<argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileRecordCount</name></name></expr></argument>,
					<argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileExecTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>OpBase_ToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bytes_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>toString</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>op</name><operator>-&gt;</operator><name>toString</name></name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_OpBase_StatsToString</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>Record</name></type> <name>OpBase_Profile</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name><name>tic</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="line">// Start timer.</comment>
	<expr_stmt><expr><call><name>simple_tic</name><argument_list>(<argument><expr><name>tic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name><name>op</name><operator>-&gt;</operator><name>profile</name></name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Stop timer and accumulate.</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileExecTime</name></name> <operator>+=</operator> <call><name>simple_toc</name><argument_list>(<argument><expr><name>tic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileRecordCount</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>OpBase_IsWriter</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>writer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>OpBase_UpdateConsume</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>fpConsume</name></type> <name>consume</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// if Operation is profiled, update profiled function</comment>
	<comment type="line">// otherwise update consume function</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>consume</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>consume</name></name> <operator>=</operator> <name>consume</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Record</name></type> <name>OpBase_CreateRecord</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>ExecutionPlan_BorrowRecord</name><argument_list>(<argument><expr><operator>(</operator>struct <name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Record</name></type> <name>OpBase_CloneRecord</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Record</name></type> <name>clone</name> <init>= <expr><call><name>ExecutionPlan_BorrowRecord</name><argument_list>(<argument><expr><operator>(</operator>struct <name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Record_Clone</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Record</name></type> <name>OpBase_DeepCloneRecord</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Record</name></type> <name>clone</name> <init>= <expr><call><name>ExecutionPlan_BorrowRecord</name><argument_list>(<argument><expr><operator>(</operator>struct <name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Record_DeepClone</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>OPType</name></type> <name>OpBase_Type</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>OpBase_DeleteRecord</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ExecutionPlan_ReturnRecord</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>OpBase_Clone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ExecutionPlan</name></name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>clone</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>op</name><operator>-&gt;</operator><name>clone</name></name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>OpBase_Free</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// free internal operation</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>free</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>op</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>modifies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
