<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_conditional_traverse.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_conditional_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shared/print_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<comment type="line">// default number of records to accumulate before traversing</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATCH_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>CondTraverseInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>CondTraverseConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>CondTraverseReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>CondTraverseClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CondTraverseFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CondTraverseToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>TraversalToString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_populate_filter_matrix</name><parameter_list>(<parameter><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>FM</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// clear filter matrix</comment>
	<expr_stmt><expr><call><name>GrB_Matrix_clear</name><argument_list>(<argument><expr><name>FM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update filter matrix F, set row i at position srcId</comment>
	<comment type="line">// F[i, srcId] = true</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>srcId</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	
		<expr_stmt><expr><call><name>GrB_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name>FM</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>srcId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// evaluate algebraic expression:</comment>
<comment type="line">// prepends filter matrix as the left most operand</comment>
<comment type="line">// perform multiplications</comment>
<comment type="line">// set iterator over result matrix</comment>
<comment type="line">// removed filter matrix from original expression</comment>
<comment type="line">// clears filter matrix</comment>
<function><type><name>void</name></type> <name>_traverse</name><parameter_list>(<parameter><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// if op-&gt;F is null, this is the first time we are traversing</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// create both filter and result matrices</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>required_dim</name> <init>= <expr><call><name>Graph_RequiredMatrixDim</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name></expr></argument>, <argument><expr><name>required_dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name></expr></argument>, <argument><expr><name>required_dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// prepend filter matrix to algebraic expression as the leftmost operand</comment>
		<expr_stmt><expr><call><name>AlgebraicExpression_MultiplyToTheLeft</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// optimize the expression tree</comment>
		<expr_stmt><expr><call><name>AlgebraicExpression_Optimize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// populate filter matrix</comment>
	<expr_stmt><expr><call><name>_populate_filter_matrix</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// evaluate expression</comment>
	<expr_stmt><expr><call><name>AlgebraicExpression_Eval</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RG_MatrixTupleIter_attach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewCondTraverseOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpCondTraverse</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name>         <operator>=</operator> <name>ae</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>graph</name></name>      <operator>=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name> <operator>=</operator> <name>BATCH_SIZE</name></expr>;</expr_stmt>

	<comment type="line">// Set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_CONDITIONAL_TRAVERSE</name></expr></argument>,
			<argument><expr><literal type="string">"Conditional Traverse"</literal></expr></argument>, <argument><expr><name>CondTraverseInit</name></expr></argument>, <argument><expr><name>CondTraverseConsume</name></expr></argument>,
			<argument><expr><name>CondTraverseReset</name></expr></argument>, <argument><expr><name>CondTraverseToString</name></expr></argument>, <argument><expr><name>CondTraverseClone</name></expr></argument>,
			<argument><expr><name>CondTraverseFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>aware</name> <init>= <expr><call><name>OpBase_Aware</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>aware</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>edge</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// this operation will populate an edge in the Record</comment>
		<comment type="line">// prepare all necessary information for collecting matching edges</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>edge_idx</name> <init>= <expr><call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name> <operator>=</operator> <call><name>EdgeTraverseCtx_New</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>CondTraverseInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Create 'records' with this Init function as 'record_cap'</comment>
	<comment type="line">// might be set during optimization time (applyLimit)</comment>
	<comment type="line">// If cap greater than BATCH_SIZE is specified,</comment>
	<comment type="line">// use BATCH_SIZE as the value.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name> <operator>&gt;</operator> <name>BATCH_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name> <operator>=</operator> <name>BATCH_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <call><name>rm_calloc</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Each call to CondTraverseConsume emits a Record containing the
 * traversal's endpoints and, if required, an edge.
 * Returns NULL once all traversals have been performed. */</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>CondTraverseConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If we're required to update an edge and have one queued, we can return early.
	 * Otherwise, try to get a new pair of source and destination nodes. */</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name>         <operator>!=</operator> <name>NULL</name>  <operator>&amp;&amp;</operator>
	   <name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name>  <operator>!=</operator> <name>NULL</name>  <operator>&amp;&amp;</operator>
	   <call><name>EdgeTraverseCtx_SetEdge</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>NodeID</name></type> <name>src_id</name>  <init>= <expr><name>INVALID_ENTITY_ID</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeID</name></type> <name>dest_id</name> <init>= <expr><name>INVALID_ENTITY_ID</name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>RG_MatrixTupleIter_next_UINT64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Managed to get a tuple, break.</comment>
		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* Run out of tuples, try to get new data.
		 * Free old records. */</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<comment type="line">// Ask child operations for data.</comment>
		<for>for<control>(<init><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name></expr>;</condition> <incr><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>childRecord</name> <init>= <expr><call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// If the Record is NULL, the child has been depleted.</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name>childRecord</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>childRecord</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="block">/* The child Record may not contain the source node in scenarios like
				 * a failed OPTIONAL MATCH. In this case, delete the Record and try again. */</comment>
				<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name><operator>--</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Store received record.</comment>
			<expr_stmt><expr><call><name>Record_PersistScalars</name><argument_list>(<argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>]</index></name> <operator>=</operator> <name>childRecord</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// No data.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>_traverse</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Get node from current column. */</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>src_id</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="line">// Populate the destination node and add it to the Record.</comment>
	<decl_stmt><decl><type><name>Node</name></type> <name>destNode</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>dest_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name></expr></argument>, <argument><expr><name>destNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>srcNode</name> <init>= <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Collect all appropriate edges connecting the current pair of endpoints.</comment>
		<expr_stmt><expr><call><name>EdgeTraverseCtx_CollectEdges</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>, <argument><expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>srcNode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>destNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// We're guaranteed to have at least one edge.</comment>
		<expr_stmt><expr><call><name>EdgeTraverseCtx_SetEdge</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>CondTraverseReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Do not explicitly free op-&gt;r, as the same pointer is also held</comment>
	<comment type="line">// in the op-&gt;records array and as such will be freed there.</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EdgeTraverseCtx_Reset</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>RG_MatrixTupleIter_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RG_Matrix_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>CondTraverseClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CONDITIONAL_TRAVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>NewCondTraverseOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Frees CondTraverse */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CondTraverseFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>RG_MatrixTupleIter_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EdgeTraverseCtx_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
