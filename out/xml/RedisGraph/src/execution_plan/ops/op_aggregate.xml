<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_aggregate.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_aggregate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_sort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../grouping/group.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>AggregateConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>AggregateReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>AggregateClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AggregateFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Migrate each expression projected by this operation to either
 * the array of keys or the array of aggregate functions as appropriate. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_migrate_expressions</name><parameter_list>(<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>exp_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exp_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AR_EXP_ContainsAggregation</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name></name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name></name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>key_count</name></name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Clone all aggregate expression templates to associate with a new Group. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>_build_aggregate_exps</name><parameter_list>(<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>agg_exps</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>agg_exps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>agg_exps</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// build a new group key from the SIValue results of non-aggregate expressions</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>_build_group_key</name><parameter_list>(<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// TODO: might be expensive incase we're generating lots of groups</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>group_keys</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIValue</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>key</name> <init>= <expr><call><name>SI_TransferOwnership</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>group_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIValue_Persist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>group_keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>group_keys</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Group</name> <modifier>*</modifier></type><name>_CreateGroup</name><parameter_list>(<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// create a new group, clone group keys</comment>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>group_keys</name> <init>= <expr><call><name>_build_group_key</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get a fresh copy of aggregation functions</comment>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>agg_exps</name> <init>= <expr><call><name>_build_aggregate_exps</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// There's no need to keep a reference to record if we're not sorting groups</comment>
	<decl_stmt><decl><type><name>Record</name></type> <name>cache_record</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>should_cache_records</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>r</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>NewGroup</name><argument_list>(<argument><expr><name>group_keys</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr></argument>, <argument><expr><name>agg_exps</name></expr></argument>,
			<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr></argument>, <argument><expr><name>cache_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ComputeGroupKey</name><parameter_list>(<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// compute the hash code for list of SIValues</comment>
<function><type><specifier>static</specifier> <name>XXH64_hash_t</name></type> <name>_HashCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// initialize the hash state</comment>
	<decl_stmt><decl><type><name>XXH64_state_t</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XXH_errorcode</name></type> <name>res</name> <init>= <expr><call><name>XXH64_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>XXH_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update the hash state with the current value.</comment>
	<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_HashUpdate</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="line">// finalize the hash</comment>
	<return>return <expr><call><name>XXH64_digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// retrieves group under which given record belongs to,</comment>
<comment type="line">// creates group if one doesn't exists</comment>
<function><type><specifier>static</specifier> <name>Group</name> <modifier>*</modifier></type><name>_GetGroup</name><parameter_list>(<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>XXH64_hash_t</name></type> <name>hash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>free_key_exps</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// construct group key</comment>
	<expr_stmt><expr><call><name>_ComputeGroupKey</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// first group created</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>_CreateGroup</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>_HashCode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CacheGroupAdd</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// key expressions are owned by the new group and don't need to be freed</comment>
		<expr_stmt><expr><name>free_key_exps</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// evaluate non-aggregated fields, see if they match the last accessed group</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>reuseLastAccessedGroup</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>reuseLastAccessedGroup</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>reuseLastAccessedGroup</name> <operator>=</operator>
			<operator>(</operator><call><name>SIValue_Compare</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// see if we can reuse last accessed group</comment>
	<if_stmt><if>if<condition>(<expr><name>reuseLastAccessedGroup</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

	<comment type="line">// can't reuse last accessed group, lookup group by identifier key</comment>
	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>_HashCode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>CacheGroupGet</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Group does not exists, create it.</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>_CreateGroup</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CacheGroupAdd</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// key expressions are owned by the new group and don't need to be freed</comment>
		<expr_stmt><expr><name>free_key_exps</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
	<comment type="line">// free the keys that have been computed during this function</comment>
	<comment type="line">// if they have not been used to build a new group</comment>
	<if_stmt><if>if<condition>(<expr><name>free_key_exps</name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_aggregateRecord</name><parameter_list>(<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// get group</comment>
	<decl_stmt><decl><type><name>Group</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>_GetGroup</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>group</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// aggregate group exps</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>aggregationFunctions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AR_EXP_Aggregate</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// free record</comment>
	<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// returns a record populated with group data</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>_handoff</name>
<parameter_list>(
	<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Group</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CacheGroupIterNext</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// add all projected keys to the Record</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>rec_idx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Non-aggregated expression.</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>res</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Key values are shared with the Record, as they'll be freed with the group cache.</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SI_ShareValue</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Record_Add</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rec_idx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// compute the final value of all aggregate expressions and add to Record</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>rec_idx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>aggregationFunctions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>SIValue</name></type> <name>res</name> <init>= <expr><call><name>AR_EXP_FinalizeAggregations</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rec_idx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewAggregateOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>should_cache_records</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpAggregate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <call><name>CacheGroupNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>should_cache_records</name></name> <operator>=</operator> <name>should_cache_records</name></expr>;</expr_stmt>

	<comment type="line">// Migrate each expression to the keys array or the aggregations array as appropriate.</comment>
	<expr_stmt><expr><call><name>_migrate_expressions</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Allocate memory for group keys if we have any non-aggregate expressions.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SIValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_AGGREGATE</name></expr></argument>, <argument><expr><literal type="string">"Aggregate"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AggregateConsume</name></expr></argument>,
				<argument><expr><name>AggregateReset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AggregateClone</name></expr></argument>, <argument><expr><name>AggregateFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// The projected record will associate values with their resolved name</comment>
	<comment type="line">// to ensure that space is allocated for each entry.</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>uint</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name> <operator>+</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Store the index of each key expression.</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>record_idx</name> <init>= <expr><call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name></expr></argument>, <argument><expr><name>record_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Store the index of each aggregating expression.</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>record_idx</name> <init>= <expr><call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name></expr></argument>, <argument><expr><name>record_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>AggregateConsume</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpAggregate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>r</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// RETURN max (1)</comment>
		<comment type="line">// create a 'fake' record</comment>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_aggregateRecord</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// eager consumption!</comment>
		<while>while<condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_aggregateRecord</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// did we processed any records?</comment>
	<comment type="line">// does aggregation contains keys?</comment>
	<comment type="line">// e.g.</comment>
	<comment type="line">// MATCH (n:N) WHERE n.noneExisting = 2 RETURN count(n)</comment>
	<if_stmt><if>if<condition>(<expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// no data was processed and aggregation doesn't have a key</comment>
		<comment type="line">// in this case we want to return aggregation default value</comment>
		<comment type="line">// aggregate on an empty record</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// use child record</comment>
		<comment type="line">// this is required in case this aggregation is perford within the</comment>
		<comment type="line">// context of a WITH projection as we need the child's mapping for</comment>
		<comment type="line">// expression evaluation</comment>
		<comment type="line">// there's no harm in doing so when not in a WITH aggregation,</comment>
		<comment type="line">// as we'll be using the same mapping;</comment>
		<comment type="line">// this operation and it child are in the same scope</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// get group</comment>
		<decl_stmt><decl><type><name>Group</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>_GetGroup</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>group</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// free record</comment>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// create group iterator</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name> <operator>=</operator> <call><name>CacheGroupIter</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>AggregateReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpAggregate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>FreeGroupCache</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <call><name>CacheGroupNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CacheGroupIterator_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>AggregateClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_AGGREGATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpAggregate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>key_count</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>aggregate_count</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>aggregate_count</name> <operator>+</operator> <name>key_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>aggregate_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<return>return <expr><call><name>NewAggregateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>should_cache_records</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AggregateFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpAggregate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>op</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group_keys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CacheGroupIterator_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group_iter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>key_count</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>key_exps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>aggregate_count</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>aggregate_exps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FreeGroupCache</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
