<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/shared/traverse_functions.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traverse_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../query_ctx.h"</cpp:file></cpp:include>

<comment type="line">// collect edges between the source and destination nodes</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Traverse_CollectEdges</name>
<parameter_list>(
	<parameter><decl><type><name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>edge_ctx</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>src</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>dest</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>Graph_GetEdgesConnectingNodes</name><argument_list>(<argument><expr><name>g</name></expr></argument>,
									  <argument><expr><name>src</name></expr></argument>,
									  <argument><expr><name>dest</name></expr></argument>,
									  <argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRelationTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name><name>edge_ctx</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// collects traversed edge relations.</comment>
<comment type="line">// e.g. [e:R0|R1]</comment>
<comment type="line">// edge_ctx-&gt;edgeRelationTypes will hold both R0 and R1 IDs.</comment>
<comment type="line">// in the case where no relationship types are specified</comment>
<comment type="line">// edge_ctx-&gt;edgeRelationTypes will contain GRAPH_NO_RELATION</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_Traverse_SetRelationTypes</name>
<parameter_list>(
	<parameter><decl><type><name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>edge_ctx</name></decl></parameter>,
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>reltype_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>reltype_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>, <argument><expr><name>GRAPH_NO_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// determine the edge directions we need to collect</comment>
<function><type><specifier>static</specifier> <name>GRAPH_EDGE_DIR</name></type> <name>_Traverse_SetDirection</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// the default traversal direction is outgoing</comment>
	<decl_stmt><decl><type><name>GRAPH_EDGE_DIR</name></type> <name>dir</name> <init>= <expr><name>GRAPH_EDGE_DIR_OUTGOING</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// bidirectional traversals should match both incoming and outgoing edges</comment>
	<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>bidirectional</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GRAPH_EDGE_DIR_BOTH</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* if this operation traverses a transposed edge, the source and destination
	 * nodes will be swapped in the Record */</comment>

	<comment type="line">// push down transpose operations to individual operands</comment>
	<expr_stmt><expr><call><name>AlgebraicExpression_PushDownTranspose</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// locate operand representing the referenced edge</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>located</name> <init>= <expr><call><name>AlgebraicExpression_LocateOperand</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>operand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>,
			<argument><expr><name><name>e</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>located</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// if parent exists and it is a transpose operation, edge is reversed</comment>
	<if_stmt><if>if<condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>operation</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>AL_EXP_TRANSPOSE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>GRAPH_EDGE_DIR_INCOMING</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>dir</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>EdgeTraverseCtx_New</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name></decl></parameter>,
	<parameter><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ae</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>edge_ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EdgeTraverseCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edges</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Instantiate array to collect matching edges.</comment>
	<expr_stmt><expr><call><name>_Traverse_SetRelationTypes</name><argument_list>(<argument><expr><name>edge_ctx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Build the array of relation type IDs.</comment>
	<expr_stmt><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRecIdx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <call><name>_Traverse_SetDirection</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>edge_ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// populate the traverse context's edges array with all edges of the appropriate</comment>
<comment type="line">// direction connecting the source and destination nodes</comment>
<function><type><name>void</name></type> <name>EdgeTraverseCtx_CollectEdges</name>
<parameter_list>(
	<parameter><decl><type><name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>edge_ctx</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>src</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>dest</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>edge_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GRAPH_EDGE_DIR</name></type> <name>dir</name> <init>= <expr><ternary><condition><expr><name>src</name> <operator>==</operator> <name>dest</name></expr> ?</condition><then> <expr><name>GRAPH_EDGE_DIR_OUTGOING</name></expr> </then><else>: <expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>direction</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>GRAPH_EDGE_DIR_OUTGOING</name></expr>:</case>
			<expr_stmt><expr><call><name>_Traverse_CollectEdges</name><argument_list>(<argument><expr><name>edge_ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		<case>case <expr><name>GRAPH_EDGE_DIR_INCOMING</name></expr>:</case>
			<comment type="line">// If we're traversing incoming edges, swap the source and destination.</comment>
			<expr_stmt><expr><call><name>_Traverse_CollectEdges</name><argument_list>(<argument><expr><name>edge_ctx</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		<case>case <expr><name>GRAPH_EDGE_DIR_BOTH</name></expr>:</case>
			<comment type="line">// If we're traversing in both directions, collect edges in both directions.</comment>
			<expr_stmt><expr><call><name>_Traverse_CollectEdges</name><argument_list>(<argument><expr><name>edge_ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_Traverse_CollectEdges</name><argument_list>(<argument><expr><name>edge_ctx</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>EdgeTraverseCtx_SetEdge</name>
<parameter_list>(
	<parameter><decl><type><name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>edge_ctx</name></decl></parameter>,
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>edge_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// return false if all edges have been consumed</comment>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// pop an edge and add it to the Record</comment>
	<decl_stmt><decl><type><name>Edge</name></type> <name>e</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Record_AddEdge</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRecIdx</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>EdgeTraverseCtx_EdgeCount</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>edge_ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>edge_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>EdgeTraverseCtx_Reset</name>
<parameter_list>(
	<parameter><decl><type><name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>edge_ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>edge_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>EdgeTraverseCtx_Free</name>
<parameter_list>(
	<parameter><decl><type><name>EdgeTraverseCtx</name> <modifier>*</modifier></type><name>edge_ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>edge_ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>edge_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
