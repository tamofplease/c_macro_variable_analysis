<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/shared/print_functions.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"print_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../op_node_by_label_scan.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_NodeToString</name><parameter_list>(<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Print a representation of a node with an optional alias and optional label.</comment>
	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>alias</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>label</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// return the labels of the src of ae splitted by ':'</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>ae_labels_src</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>ae</name></decl></parameter>  <comment type="line">// AlgebraicExpression to extract labels from</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>sds</name></type> <name>labels</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name> <init>=
		<expr><operator>(</operator><name>AlgebraicExpression</name> <operator>*</operator><operator>)</operator> <call><name>AlgebraicExpression_SrcOperand</name><argument_list>(<argument><expr><operator>*</operator><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// as long as:</comment>
	<comment type="line">// 1. algebraic expression isn't empty</comment>
	<comment type="line">// 2. current operand is diagonal</comment>
	<while>while<condition>(<expr><operator>*</operator><name>ae</name>                            <operator>&amp;&amp;</operator>
		  <name><name>operand</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name> <operator>&amp;&amp;</operator>
		  <name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name></expr>)</condition> <block>{<block_content>

		<comment type="line">// remove source from expression</comment>
		<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>AlgebraicExpression_RemoveSource</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// update labels string</comment>
		<expr_stmt><expr><name>labels</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// free operand</comment>
		<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// advance to next source operand</comment>
		<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ae</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>operand</name> <operator>=</operator>
				<operator>(</operator><name>AlgebraicExpression</name> <operator>*</operator><operator>)</operator> <call><name>AlgebraicExpression_SrcOperand</name><argument_list>(<argument><expr><operator>*</operator><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>labels</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return the labels of the dest of ae splitted by ':'</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>ae_labels_dest</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>ae</name></decl></parameter>  <comment type="line">// AlgebraicExpression to extract labels from</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>sds</name></type> <name>labels</name> <init>= <expr><call><name>sdsempty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name> <init>=
		<expr><operator>(</operator><name>AlgebraicExpression</name> <operator>*</operator><operator>)</operator> <call><name>AlgebraicExpression_DestOperand</name><argument_list>(<argument><expr><operator>*</operator><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// as long as:</comment>
	<comment type="line">// 1. algebraic expression isn't empty</comment>
	<comment type="line">// 2. current operand is diagonal</comment>
	<while>while<condition>(<expr><operator>*</operator><name>ae</name>                         <operator>&amp;&amp;</operator>
		  <name><name>operand</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name> <operator>&amp;&amp;</operator>
		  <name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>diagonal</name></name></expr>)</condition> <block>{<block_content>

		<comment type="line">// remove destination from expression</comment>
		<expr_stmt><expr><name>operand</name> <operator>=</operator> <call><name>AlgebraicExpression_RemoveDest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// update labels string</comment>
		<expr_stmt><expr><name>labels</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name><name>operand</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// free operand</comment>
		<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// advance to next source operand</comment>
		<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ae</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>operand</name> <operator>=</operator>
				<operator>(</operator><name>AlgebraicExpression</name> <operator>*</operator><operator>)</operator> <call><name>AlgebraicExpression_DestOperand</name><argument_list>(<argument><expr><operator>*</operator><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>labels</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>TraversalToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ae</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s | "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// this edge should be printed right-to-left if the edge matrix is transposed</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name>       <init>= <expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_alias</name>  <init>= <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest_alias</name> <init>= <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>transpose</name>  <init>= <expr><operator>(</operator><name>edge</name> <operator>&amp;&amp;</operator> <call><name>AlgebraicExpression_Transposed</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>same_alias</name> <init>= <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>src_alias</name></expr></argument>, <argument><expr><name>dest_alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// print source labels</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(%s"</literal></expr></argument>, <argument><expr><name>src_alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src_labels</name> <init>= <expr><call><name>ae_labels_src</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>src_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>same_alias</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>src_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// print edge</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>edge</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>transpose</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>QGEdge_ToString</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>QGEdge_ToString</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// print dest labels</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>same_alias</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(%s"</literal></expr></argument>, <argument><expr><name>src_alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>src_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>src_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(%s"</literal></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest_labels</name> <init>= <expr><call><name>ae_labels_dest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>dest_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sdsfree</name><argument_list>(<argument><expr><name>dest_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// if clone is yet to be free'd, free it</comment>
	<if_stmt><if>if<condition>(<expr><name>clone</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ScanToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s | "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_NodeToString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
