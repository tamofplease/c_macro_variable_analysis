<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/shared/create_functions.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"create_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../ast/ast_shared.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../datatypes/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../graph/graph_hub.h"</cpp:file></cpp:include>

<comment type="line">// commit node blueprints</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_CommitNodesBlueprint</name>
<parameter_list>(
	<parameter><decl><type><name>PendingCreations</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// sync policy should be set to resize to capacity, no need to sync</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>Graph_GetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// create missing schemas</comment>
	<comment type="line">// this loop iterates over the CREATE pattern, e.g.</comment>
	<comment type="line">// CREATE (p:Person)</comment>
	<comment type="line">// as such we're not expecting a large number of iterations</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>blueprint_node_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>nodes_to_create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blueprint_node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier></type><name>node_ctx</name> <init>= <expr><name><name>pending</name><operator>-&gt;</operator><name>nodes_to_create</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>node_ctx</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name><name>node_ctx</name><operator>-&gt;</operator><name>labels</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>AddSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>labels_added</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>node_ctx</name><operator>-&gt;</operator><name>labelsId</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>node_labels</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

			<comment type="line">// sync matrix, make sure label matrix is of the right dimensions</comment>
			<expr_stmt><expr><call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<comment type="line">// sync matrix, make sure mapping matrix is of the right dimensions</comment>
		<if_stmt><if>if<condition>(<expr><name>label_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Graph_GetNodeLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// commit nodes</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_CommitNodes</name>
<parameter_list>(
	<parameter><decl><type><name>PendingCreations</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Node</name>          <modifier>*</modifier></type><name>n</name>          <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name>  <modifier>*</modifier></type><name>gc</name>         <init>=  <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name>         <modifier>*</modifier></type><name>g</name>          <init>=  <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>          <name>node_count</name>  <init>=  <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>created_nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// sync policy should be set to NOP, no need to sync/resize</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>Graph_GetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>created_nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>labels</name> <init>= <expr><name><name>pending</name><operator>-&gt;</operator><name>node_labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttributeSet</name></type> <name>attr</name> <init>= <expr><name><name>pending</name><operator>-&gt;</operator><name>node_attributes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// introduce node into graph</comment>
		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>properties_set</name></name> <operator>+=</operator> <call><name>CreateNode</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>labels</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>,
				<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// commit edge blueprints</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_CommitEdgesBlueprint</name>
<parameter_list>(
	<parameter><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>blueprints</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// sync policy should be set to resize to capacity, no need to sync</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>Graph_GetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// create missing schemas</comment>
	<comment type="line">// this loop iterates over the CREATE pattern, e.g.</comment>
	<comment type="line">// CREATE (p:Person)-[e:VISITED]-&gt;(q)</comment>
	<comment type="line">// As such we're not expecting a large number of iterations</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>blueprint_edge_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>blueprints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blueprint_edge_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>edge_ctx</name> <init>= <expr><name>blueprints</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relation</name> <init>= <expr><name><name>edge_ctx</name><operator>-&gt;</operator><name>relation</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>AddSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="line">// calling Graph_GetRelationMatrix will make sure relationship matrix</comment>
		<comment type="line">// is of the right dimensions</comment>
		<expr_stmt><expr><call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// call Graph_GetAdjacencyMatrix will make sure the adjacency matrix</comment>
	<comment type="line">// is of the right dimensions</comment>
	<expr_stmt><expr><call><name>Graph_GetAdjacencyMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// commit edges</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_CommitEdges</name>
<parameter_list>(
	<parameter><decl><type><name>PendingCreations</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Edge</name>          <modifier>*</modifier></type><name>e</name>          <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name>  <modifier>*</modifier></type><name>gc</name>         <init>=  <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name>         <modifier>*</modifier></type><name>g</name>          <init>=  <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>          <name>edge_count</name>  <init>=  <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>created_edges</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// sync policy should be set to NOP, no need to sync/resize</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>Graph_GetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>created_edges</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>srcNodeID</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>destNodeID</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttributeSet</name></type> <name>attr</name> <init>= <expr><name><name>pending</name><operator>-&gt;</operator><name>edge_attributes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// Nodes which already existed prior to this query would</comment>
		<comment type="line">// have their ID set under e-&gt;srcNodeID and e-&gt;destNodeID</comment>
		<comment type="line">// Nodes which are created as part of this query would be</comment>
		<comment type="line">// saved under edge src/dest pointer.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>srcNodeID</name></name> <operator>!=</operator> <name>INVALID_ENTITY_ID</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>srcNodeID</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>srcNodeID</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>srcNodeID</name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><call><name>Edge_GetSrcNode</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>destNodeID</name></name> <operator>!=</operator> <name>INVALID_ENTITY_ID</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>destNodeID</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>destNodeID</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>destNodeID</name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><call><name>Edge_GetDestNode</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>relationship</name></name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// all schemas have been created in the edge blueprint loop or earlier</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>relation_id</name> <init>= <expr><call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>properties_set</name></name> <operator>+=</operator> <call><name>CreateEdge</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>srcNodeID</name></expr></argument>,
				<argument><expr><name>destNodeID</name></expr></argument>, <argument><expr><name>relation_id</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// Initialize all variables for storing pending creations.</comment>
<function><type><name>void</name></type> <name>NewPendingCreationsContainer</name>
<parameter_list>(
	<parameter><decl><type><name>PendingCreations</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>,
	<parameter><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>,
	<parameter><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>edges</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>nodes_to_create</name></name> <operator>=</operator> <name>nodes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>edges_to_create</name></name> <operator>=</operator> <name>edges</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>node_labels</name></name>     <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>created_nodes</name></name>   <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Node</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>created_edges</name></name>   <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Edge</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>node_attributes</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>AttributeSet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>edge_attributes</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>AttributeSet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Lock the graph and commit all changes introduced by the operation.</comment>
<function><type><name>void</name></type> <name>CommitNewEntities</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>PendingCreations</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>node_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>created_nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>edge_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>created_edges</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pending</name><operator>-&gt;</operator><name>stats</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <call><name>QueryCtx_GetResultSetStatistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="line">// Lock everything.</comment>
	<expr_stmt><expr><call><name>QueryCtx_LockForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>node_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Graph_AllocateNodes</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set graph matrix sync policy to resize</comment>
		<comment type="line">// no need to perform sync</comment>
		<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_CommitNodesBlueprint</name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set graph matrix sync policy to NOP</comment>
		<comment type="line">// no need to perform sync/resize</comment>
		<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_CommitNodes</name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>edge_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Graph_AllocateEdges</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>edge_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set graph matrix sync policy to resize</comment>
		<comment type="line">// no need to perform sync</comment>
		<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_CommitEdgesBlueprint</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>edges_to_create</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set graph matrix sync policy to NOP</comment>
		<comment type="line">// no need to perform sync/resize</comment>
		<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_CommitEdges</name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// update statistics</comment>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>nodes_created</name></name>          <operator>+=</operator>  <name>node_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>relationships_created</name></name>  <operator>+=</operator>  <name>edge_count</name></expr>;</expr_stmt>

	<comment type="line">// restore matrix sync policy to default</comment>
	<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>SYNC_POLICY_FLUSH_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// resolve the properties specified in the query into constant values</comment>
<function><type><name>void</name></type> <name>ConvertPropertyMap</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name><modifier>*</modifier></type> <name>gc</name></decl></parameter>,
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>attributes</name></decl></parameter>,
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>PropertyMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>fail_on_null</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>property_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>property_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// note that AR_EXP_Evaluate may raise a run-time exception</comment>
		<comment type="line">// in which case the allocations in this function will leak</comment>
		<comment type="line">// for example, this occurs in the query:</comment>
		<comment type="line">// CREATE (a {val: 2}), (b {val: a.val})</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>val</name> <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_VALID_PROPERTY_VALUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="line">// this value is of an invalid type</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// if the value was a complex type, emit an exception</comment>
				<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Error_InvalidPropertyValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="line">// the value was NULL</comment>
			<comment type="line">// if this was prohibited in this context, raise an exception,</comment>
			<comment type="line">// otherwise skip this value</comment>
			<if_stmt><if>if<condition>(<expr><name>fail_on_null</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// emit an error and exit</comment>
				<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"Cannot merge node using null property value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// don't add null to attrribute set</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// emit an error and exit if we're trying to add</comment>
		<comment type="line">// an array containing an invalid type</comment>
		<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_ARRAY</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>SIType</name></type> <name>invalid_properties</name> <init>= <expr><operator>~</operator><name>SI_VALID_PROPERTY_VALUE</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>SIArray_ContainsType</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>invalid_properties</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// validation failed</comment>
				<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Error_InvalidPropertyValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// set the converted attribute</comment>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attribute_id</name> <init>= <expr><call><name>FindOrAddAttribute</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AttributeSet_Add</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>, <argument><expr><name>attribute_id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// free all data associated with a completed create operation</comment>
<function><type><name>void</name></type> <name>PendingCreationsFree</name>
<parameter_list>(
	<parameter><decl><type><name>PendingCreations</name> <modifier>*</modifier></type><name>pending</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>nodes_to_create</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>nodes_to_create_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>nodes_to_create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodes_to_create_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>NodeCreateCtx_Free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>nodes_to_create</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>nodes_to_create</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>nodes_to_create</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>edges_to_create</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>edges_to_create_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>edges_to_create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edges_to_create_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>PropertyMap_Free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>edges_to_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>edges_to_create</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>edges_to_create</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>node_labels</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>node_labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>node_labels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>created_nodes</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>created_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>created_nodes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>created_edges</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>created_edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>created_edges</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>node_attributes</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>node_attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>node_attributes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>edge_attributes</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>pending</name><operator>-&gt;</operator><name>edge_attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>edge_attributes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
