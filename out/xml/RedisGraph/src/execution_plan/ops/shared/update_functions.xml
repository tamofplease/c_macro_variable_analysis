<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/shared/update_functions.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"update_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../datatypes/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../datatypes/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../graph/graph_hub.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_PreparePendingUpdate</name>
<parameter_list>(
	<parameter><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>props</name></decl></parameter>,
	<parameter><decl><type><name>SIType</name></type> <name>accepted_properties</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>new_value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate value type</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// emit an error and exit if we're trying to add an invalid type</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>accepted_properties</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Error_InvalidPropertyValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// emit an error and exit if we're trying to add</comment>
	<comment type="line">// an array containing an invalid type</comment>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_ARRAY</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>SIType</name></type> <name>invalid_properties</name> <init>= <expr><operator>~</operator><name>SI_VALID_PROPERTY_VALUE</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>SIArray_ContainsType</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>, <argument><expr><name>invalid_properties</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// validation failed</comment>
			<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Error_InvalidPropertyValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>AttributeSet_Set_Allow_Null</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// commits delayed updates</comment>
<function><type><name>void</name></type> <name>CommitUpdates</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>ResultSetStatistics</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>,
	<parameter><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>updates</name></decl></parameter>,
	<parameter><decl><type><name>EntityType</name></type> <name>type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>      <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stats</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>updates</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name>    <operator>!=</operator> <name>ENTITY_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>update_count</name>       <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>updates</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>labels_added</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>labels_removed</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>properties_set</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>properties_removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// return early if no updates are enqueued</comment>
	<if_stmt><if>if<condition>(<expr><name>update_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>update_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>update</name> <init>= <expr><name>updates</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<comment type="line">// if entity has been deleted, perform no updates</comment>
		<if_stmt><if>if<condition>(<expr><call><name>GraphEntity_IsDeleted</name><argument_list>(<argument><expr><name><name>update</name><operator>-&gt;</operator><name>ge</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>_labels_added</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>_labels_removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>_props_set</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>_props_removed</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="line">// update the attributes on the graph entity</comment>
		<expr_stmt><expr><call><name>UpdateEntityProperties</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>ge</name></name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>ENTITY_NODE</name></expr> ?</condition><then> <expr><name>GETYPE_NODE</name></expr> </then><else>: <expr><name>GETYPE_EDGE</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>_props_set</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>_props_removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>ENTITY_NODE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>UpdateNodeLabels</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><name><name>update</name><operator>-&gt;</operator><name>ge</name></name></expr></argument>, <argument><expr><name><name>update</name><operator>-&gt;</operator><name>add_labels</name></name></expr></argument>,
				<argument><expr><name><name>update</name><operator>-&gt;</operator><name>remove_labels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_labels_added</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_labels_removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>labels_added</name>       <operator>+=</operator> <name>_labels_added</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>labels_removed</name>     <operator>+=</operator> <name>_labels_removed</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>properties_set</name>     <operator>+=</operator> <name>_props_set</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>properties_removed</name> <operator>+=</operator> <name>_props_removed</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>stats</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>labels_added</name></name>       <operator>+=</operator> <name>labels_added</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>labels_removed</name></name>     <operator>+=</operator> <name>labels_removed</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>properties_set</name></name>     <operator>+=</operator> <name>properties_set</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>properties_removed</name></name> <operator>+=</operator> <name>properties_removed</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>EvalEntityUpdates</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>node_updates</name></decl></parameter>,
	<parameter><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>edge_updates</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>allow_null</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate entity type</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// get the type of the entity to update</comment>
	<comment type="line">// if the expected entity was not found, make no updates but do not error</comment>
	<decl_stmt><decl><type><name>RecordEntryType</name></type> <name>t</name> <init>= <expr><call><name>Record_GetType</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>record_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>REC_TYPE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// make sure we're updating either a node or an edge</comment>
	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>!=</operator> <name>REC_TYPE_NODE</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>REC_TYPE_EDGE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(
			<argument><expr><literal type="string">"Update error: alias '%s' did not resolve to a graph entity"</literal></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// label(s) update can only be performed on nodes</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>t</name> <operator>!=</operator> <name>REC_TYPE_NODE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(
				<argument><expr><literal type="string">"Type mismatch: expected Node but was Relationship"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>updates</name> <init>= <expr><ternary><condition><expr><name>t</name> <operator>==</operator> <name>REC_TYPE_NODE</name></expr>
		?</condition><then> <expr><name>node_updates</name></expr>
		</then><else>: <expr><name>edge_updates</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>entity</name> <init>= <expr><call><name>Record_GetGraphEntity</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>record_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PendingUpdateCtx</name></type> <name>update</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>update</name><operator>.</operator><name>ge</name></name>            <operator>=</operator> <name>entity</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>update</name><operator>.</operator><name>attributes</name></name>    <operator>=</operator> <call><name>AttributeSet_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>update</name><operator>.</operator><name>add_labels</name></name>    <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>update</name><operator>.</operator><name>remove_labels</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name></expr>;</expr_stmt>

	<comment type="line">// if we're converting a SET clause, NULL is acceptable</comment>
	<comment type="line">// as it indicates a deletion</comment>
	<decl_stmt><decl><type><name>SIType</name></type> <name>accepted_properties</name> <init>= <expr><name>SI_VALID_PROPERTY_VALUE</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>allow_null</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>accepted_properties</name> <operator>|=</operator> <name>T_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>exp_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// enqueue update</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exp_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>PropertySetCtx</name> <modifier>*</modifier></type><name>property</name>  <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type>        <name>new_value</name>  <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>property</name><operator>-&gt;</operator><name>exp</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UPDATE_MODE</name></type>    <name>mode</name>       <init>= <expr><name><name>property</name><operator>-&gt;</operator><name>mode</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>     <modifier>*</modifier></type><name>attribute</name> <init>= <expr><name><name>property</name><operator>-&gt;</operator><name>attribute</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>attribute</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// a specific attribute is set, validate the value type</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>SI_VALID_PROPERTY_VALUE</name> <operator>|</operator> <name>T_NULL</name><operator>)</operator> <operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>.</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Error_InvalidPropertyValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name> <init>= <expr><call><name>FindOrAddAttribute</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_PreparePendingUpdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>.</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>accepted_properties</name></expr></argument>,
				<argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// the entire entity is being updated by map or other entity,</comment>
			<comment type="line">// validate value is not a property value</comment>
			<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_VALID_PROPERTY_VALUE</name> <operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>.</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Error_InvalidPropertyValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>mode</name> <operator>==</operator> <name>UPDATE_REPLACE</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>T_NODE</name> <operator>|</operator> <name>T_EDGE</name> <operator>|</operator> <name>T_MAP</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
					<comment type="line">// left-hand side is alias reference but right-hand side is a</comment>
					<comment type="line">// scalar, emit an error</comment>
					<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>.</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Error_InvalidPropertyValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="line">// if this update replaces all existing properties</comment>
				<comment type="line">// enqueue a clear update to do so</comment>
				<expr_stmt><expr><call><name>AttributeSet_Set_Allow_Null</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>.</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>ATTRIBUTE_ID_ALL</name></expr></argument>, <argument><expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_MAP</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// Map value can only be assigned as the entity property map or added to it</comment>
				<comment type="line">// MATCH n SET n.v = {k:v} is not allowed.</comment>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>property</name><operator>-&gt;</operator><name>attribute</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// value is of type map e.g. n.v = {a:1, b:2}</comment>
				<decl_stmt><decl><type><name>SIValue</name></type> <name>m</name> <init>= <expr><name>new_value</name></expr></init></decl>;</decl_stmt>
				<comment type="line">// iterate over all map elements to build updates</comment>
				<decl_stmt><decl><type><name>uint</name></type> <name>map_size</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>map_size</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<decl_stmt><decl><type><name>SIValue</name></type> <name>key</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>Map_GetIdx</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name> <init>= <expr><call><name>FindOrAddAttribute</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>_PreparePendingUpdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>.</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>accepted_properties</name></expr></argument>,
						<argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>T_NODE</name> <operator>|</operator> <name>T_EDGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<comment type="line">// Node or edge property maps can only be assigned as the entity property map or added to it</comment>
				<comment type="line">// MATCH n, M SET n.v = m is not allowed.</comment>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>property</name><operator>-&gt;</operator><name>attribute</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// value is a node or edge; perform attribute set reassignment</comment>
				<decl_stmt><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>ge</name> <init>= <expr><name><name>new_value</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
				<comment type="line">// // iterate over all entity properties to build updates</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>GraphEntity_GetAttributes</name><argument_list>(<argument><expr><name>ge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>AttributeSet_GetIdx</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>_PreparePendingUpdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>update</name><operator>.</operator><name>attributes</name></name></expr></argument>, <argument><expr><name>accepted_properties</name></expr></argument>,
						<argument><expr><name>attr_id</name></expr></argument>, <argument><expr><call><name>SI_CloneValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// enqueue the current update</comment>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>updates</name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
