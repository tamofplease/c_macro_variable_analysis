<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_cartesian_product.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_cartesian_product.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>CartesianProductInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>CartesianProductConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>CartesianProductReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>CartesianProductClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CartesianProductFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewCartesianProductOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CartesianProduct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CartesianProduct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// Set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_CARTESIAN_PRODUCT</name></expr></argument>, <argument><expr><literal type="string">"Cartesian Product"</literal></expr></argument>, <argument><expr><name>CartesianProductInit</name></expr></argument>,
				<argument><expr><name>CartesianProductConsume</name></expr></argument>, <argument><expr><name>CartesianProductReset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CartesianProductClone</name></expr></argument>, <argument><expr><name>CartesianProductFree</name></expr></argument>,
				<argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResetStreams</name><parameter_list>(<parameter><decl><type><name>CartesianProduct</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>streamIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Reset each child stream, Reset propagates upwards.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>streamIdx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_PropagateReset</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_PullFromStreams</name><parameter_list>(<parameter><decl><type><name>CartesianProduct</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Record</name></type> <name>childRecord</name> <init>= <expr><call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>childRecord</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Record_TransferEntries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Managed to get new data
			 * Reset streams [0-i] */</comment>
			<expr_stmt><expr><call><name>_ResetStreams</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Pull from resetted streams.</comment>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>childRecord</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>childRecord</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>Record_TransferEntries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<return>return <expr><literal type="number">0</literal></expr>;</return>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>
			<comment type="line">// Ready to continue.</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* If we're here, then we didn't manged to get new data.
	 * Last stream depleted. */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>CartesianProductInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CartesianProduct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CartesianProduct</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>CartesianProductConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CartesianProduct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CartesianProduct</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>childRecord</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>childRecord</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name>childRecord</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>Record_TransferEntries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return>return <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Pull from first stream.</comment>
	<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>childRecord</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>childRecord</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Managed to get data from first stream.</comment>
		<expr_stmt><expr><call><name>Record_TransferEntries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>childRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// Failed to get data from first stream,</comment>
		<comment type="line">// try pulling other streams for data.</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_PullFromStreams</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Pass down a clone of record.</comment>
	<return>return <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>CartesianProductReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CartesianProduct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CartesianProduct</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>CartesianProductClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CARTESIAN_PRODUCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>NewCartesianProductOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CartesianProductFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CartesianProduct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CartesianProduct</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
