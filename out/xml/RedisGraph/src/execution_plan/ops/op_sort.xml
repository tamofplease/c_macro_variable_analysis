<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_sort.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_sort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_project.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_aggregate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/qsort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<comment type="line">// forward declarations</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>SortInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>SortConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>SortReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>SortClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SortFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// function to compare two records on a subset of fields</comment>
<comment type="line">// return value similar to strcmp</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_record_cmp</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name></type> <name>a</name></decl></parameter>,
	<parameter><decl><type><name>Record</name></type> <name>b</name></decl></parameter>,
	<parameter><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>comparison_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>comparison_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>aVal</name> <init>= <expr><call><name>Record_Get</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>bVal</name> <init>= <expr><call><name>Record_Get</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rel</name> <init>= <expr><call><name>SIValue_Compare</name><argument_list>(<argument><expr><name>aVal</name></expr></argument>, <argument><expr><name>bVal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>rel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="line">// elements are equal; try next ORDER BY element</comment>
		<expr_stmt><expr><name>rel</name> <operator>*=</operator> <name><name>op</name><operator>-&gt;</operator><name>directions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <comment type="line">// flip value for descending order</comment>
		<return>return <expr><name>rel</name></expr>;</return>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_buffer_elem_cmp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Record</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Record</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
	<parameter><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>_record_cmp</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_accumulate</name>
<parameter_list>(
	<parameter><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>limit</name></name> <operator>==</operator> <name>UNLIMITED</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// not using a heap and there's room for record</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>Heap_count</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Heap_offer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// no room in the heap, see if we need to replace</comment>
		<comment type="line">// a heap stored record with the current record</comment>
		<if_stmt><if>if<condition>(<expr><call><name>_record_cmp</name><argument_list>(<argument><expr><call><name>Heap_peek</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>replaced</name> <init>= <expr><call><name>Heap_poll</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>replaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Heap_offer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Record</name></type> <name>_handoff</name><parameter_list>(<parameter><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>record_idx</name></name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>record_idx</name></name><operator>++</operator></expr>]</index></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewSortOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>directions</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpSort</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name>       <operator>=</operator> <name>exps</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>skip</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>limit</name></name>      <operator>=</operator> <name>UNLIMITED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name>     <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>directions</name></name> <operator>=</operator> <name>directions</name></expr>;</expr_stmt>

	<comment type="line">// set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_SORT</name></expr></argument>, <argument><expr><literal type="string">"Sort"</literal></expr></argument>, <argument><expr><name>SortInit</name></expr></argument>, <argument><expr><name>SortConsume</name></expr></argument>,
			<argument><expr><name>SortReset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SortClone</name></expr></argument>, <argument><expr><name>SortFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>comparison_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>uint</name></expr></argument>, <argument><expr><name>comparison_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>comparison_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>record_idx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>aware</name> <init>= <expr><call><name>OpBase_Aware</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>exps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>record_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name></expr></argument>, <argument><expr><name>record_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>SortInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpSort</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// if there is LIMIT value, l, set in the current clause,</comment>
	<comment type="line">// the operation must return the top l records with respect to</comment>
	<comment type="line">// the sorting criteria. In order to do so, it must collect the l records,</comment>
	<comment type="line">// but if there is a SKIP value, s, set, it must collect l+s records,</comment>
	<comment type="line">// sort them and return the top l</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>limit</name></name> <operator>!=</operator> <name>UNLIMITED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>limit</name></name> <operator>+=</operator> <name><name>op</name><operator>-&gt;</operator><name>skip</name></name></expr>;</expr_stmt>
		<comment type="line">// if a limit is specified, use heapsort to poll the top N</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <call><name>Heap_new</name><argument_list>(<argument><expr><operator>(</operator><name>heap_cmp</name><operator>)</operator><name>_record_cmp</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// if all records are being sorted, use quicksort</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>SortConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpSort</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// if we're here, we don't have any records to return</comment>
	<comment type="line">// try to get records</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>newData</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_accumulate</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newData</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>newData</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sort_r</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Record</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><operator>(</operator><name>heap_cmp</name><operator>)</operator><name>_buffer_elem_cmp</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// heap</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>records_count</name> <init>= <expr><call><name>Heap_count</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>array_newlen</name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><name>records_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>records_count</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Heap_poll</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// pass ordered records downward</comment>
	<return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// restart iterator</comment>
<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>SortReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpSort</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>recordCount</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>recordCount</name> <operator>=</operator> <call><name>Heap_count</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>recordCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>Record</name><operator>)</operator><call><name>Heap_poll</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>recordCount</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>record_idx</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>recordCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>SortClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_SORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpSort</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>directions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name>directions</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>directions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name></expr></argument>, <argument><expr><name>AR_EXP_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>NewSortOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><name>directions</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// frees sort</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SortFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpSort</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpSort</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>recordCount</name> <init>= <expr><call><name>Heap_count</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>recordCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>Record</name><operator>)</operator><call><name>Heap_poll</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>Heap_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>recordCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>record_idx</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>recordCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_offsets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>directions</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>directions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>directions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>exps_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exps_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
