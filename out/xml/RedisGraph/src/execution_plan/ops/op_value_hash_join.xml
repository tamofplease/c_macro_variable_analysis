<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_value_hash_join.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_value_hash_join.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/qsort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">// forward declarations</comment>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>ValueHashJoinConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>ValueHashJoinReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ValueHashJoinClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ValueHashJoinFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Determins order between two records by inspecting</comment>
<comment type="line">// element stored at postion idx</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>_record_cmp</name>
<parameter_list>(
	<parameter><decl><type><name>Record</name> <modifier>*</modifier></type><name>l</name></decl></parameter>,
	<parameter><decl><type><name>Record</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>_idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type>    <name>idx</name> <init>= <expr><operator>*</operator><name>_idx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>lv</name>  <init>= <expr><call><name>Record_Get</name><argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>rv</name>  <init>= <expr><call><name>Record_Get</name><argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>SIValue_Compare</name><argument_list>(<argument><expr><name>lv</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// performs binary search, returns the leftmost index of a match</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_binarySearchLeftmost</name>
<parameter_list>(
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>Record</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>array_len</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>join_key_idx</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>right</name> <init>= <expr><name>array_len</name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>left</name> <operator>&lt;</operator> <name>right</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>right</name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>Record_Get</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>join_key_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>SIValue_Compare</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>left</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>right</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="line">// make sure value was found</comment>
	<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>left</name> <operator>==</operator> <name>array_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>Record_Get</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><operator>*</operator><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>join_key_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// return false if the value wasn't found or evaluated to NULL</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>disjointOrNull</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><call><name>SIValue_Compare</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>disjointOrNull</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<name>disjointOrNull</name> <operator>!=</operator> <name>COMPARED_NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// performs binary search, returns the rightmost index of a match</comment>
<comment type="line">// assuming 'v' exists in 'array'</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_binarySearchRightmost</name>
<parameter_list>(
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>Record</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>array_len</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>join_key_idx</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>right</name> <init>= <expr><name>array_len</name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>left</name> <operator>&lt;</operator> <name>right</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>right</name> <operator>+</operator> <name>left</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>Record_Get</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>join_key_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>SIValue_Compare</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>right</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>left</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>right</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// retrive the next intersecting record</comment>
<comment type="line">// if such exists, otherwise returns NULL</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>_get_intersecting_record</name>
<parameter_list>(
	<parameter><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// no more intersecting records</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>intersect_idx</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	   <name><name>op</name><operator>-&gt;</operator><name>number_of_intersections</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>cr</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>intersect_idx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// update intersection trackers</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>intersect_idx</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>number_of_intersections</name></name><operator>--</operator></expr>;</expr_stmt>

	<return>return <expr><name>cr</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// look up first intersecting cached record CR position</comment>
<comment type="line">// returns false if no intersecting record is found</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_set_intersection_idx</name>
<parameter_list>(
	<parameter><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>intersect_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>number_of_intersections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>record_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>leftmost_idx</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>rightmost_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_binarySearchLeftmost</name><argument_list>(<argument><expr><operator>&amp;</operator><name>leftmost_idx</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>,
				<argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>join_value_rec_idx</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// value was found</comment>
	<comment type="line">// idx points to the first intersecting record</comment>
	<comment type="line">// update number_of_intersections to count how many</comment>
	<comment type="line">// records share the same value</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>intersect_idx</name></name> <operator>=</operator> <name>leftmost_idx</name></expr>;</expr_stmt>

	<comment type="line">// count how many records share the same node</comment>
	<comment type="line">// reduce search space by truncating left bound</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>_binarySearchRightmost</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rightmost_idx</name></expr></argument>,
			<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name> <operator>+</operator> <name>leftmost_idx</name></expr></argument>, <argument><expr><name>record_count</name> <operator>-</operator> <name>leftmost_idx</name></expr></argument>,
			<argument><expr><name><name>op</name><operator>-&gt;</operator><name>join_value_rec_idx</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// compensate index</comment>
	<expr_stmt><expr><name>rightmost_idx</name> <operator>+=</operator> <name>leftmost_idx</name></expr>;</expr_stmt>
	<comment type="line">// +1 consider rightmost_idx == leftmost_idx</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>number_of_intersections</name></name> <operator>=</operator> <name>rightmost_idx</name> <operator>-</operator> <name>leftmost_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>number_of_intersections</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// sorts cached records by joined value</comment>
<function><type><name>void</name></type> <name>_sort_cached_records</name>
<parameter_list>(
	<parameter><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>idx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>join_value_rec_idx</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sort_r</name><argument_list>(
			<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>,
			<argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Record</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>_record_cmp</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// caches all records coming from left branch</comment>
<function><type><name>void</name></type> <name>_cache_records</name>
<parameter_list>(
	<parameter><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>left_child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name><name>left_child</name><operator>-&gt;</operator><name>consume</name></name><argument_list>(<argument><expr><name>left_child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// as long as there's data coming in from left branch</comment>
	<do>do <block>{<block_content>
		<comment type="line">// evaluate joined expression</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>lhs_exp</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// if the joined value is NULL</comment>
		<comment type="line">// it cannot be compared to other values - skip this record</comment>
		<if_stmt><if>if<condition>(<expr><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// add joined value to record</comment>
		<expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>join_value_rec_idx</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// cache the record</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while<condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name><name>left_child</name><operator>-&gt;</operator><name>consume</name></name><argument_list>(<argument><expr><name>left_child</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>
</block_content>}</block></function>

<comment type="line">// string representation of operation</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ValueHashJoinToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>OpValueHashJoin</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exp_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"%s | "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// return early if we don't have arithmetic expressions to print</comment>
	<comment type="line">// this can occur when an upstream op like MERGE has</comment>
	<comment type="line">// already freed this operation with PropagateFree</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>lhs_exp</name></name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>rhs_exp</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>AR_EXP_ToString</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>lhs_exp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">" = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AR_EXP_ToString</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_exp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>buff</name> <operator>=</operator> <call><name>sdscatprintf</name><argument_list>(<argument><expr><operator>*</operator><name>buff</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>exp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// creates a new valueHashJoin operation</comment>
<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewValueHashJoin</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>lhs_exp</name></decl></parameter>,
	<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>rhs_exp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpValueHashJoin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name>                 <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>lhs_exp</name></name>                 <operator>=</operator> <name>lhs_exp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_exp</name></name>                 <operator>=</operator> <name>rhs_exp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>intersect_idx</name></name>           <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name>          <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>number_of_intersections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="line">// set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_VALUE_HASH_JOIN</name></expr></argument>, <argument><expr><literal type="string">"Value Hash Join"</literal></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ValueHashJoinConsume</name></expr></argument>, <argument><expr><name>ValueHashJoinReset</name></expr></argument>,
			<argument><expr><name>ValueHashJoinToString</name></expr></argument>, <argument><expr><name>ValueHashJoinClone</name></expr></argument>, <argument><expr><name>ValueHashJoinFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
			<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>join_value_rec_idx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><literal type="string">"pivot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Produce a record by joining</comment>
<comment type="line">// records coming from the left and right hand side</comment>
<comment type="line">// of this operation</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>ValueHashJoinConsume</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpValueHashJoin</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>right_child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// eager, pull from left branch until depleted</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_cache_records</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// sort cache on intersect node ID</comment>
		<expr_stmt><expr><call><name>_sort_cached_records</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// try to produce a record:</comment>
	<comment type="line">// given a right hand side record R,</comment>
	<comment type="line">// evaluate V = exp on R,</comment>
	<comment type="line">// see if there are any cached records</comment>
	<comment type="line">// which V evaluated to V:</comment>
	<comment type="line">// X in cached_records and X[idx] = V</comment>
	<comment type="line">// return merged record:</comment>
	<comment type="line">// X merged with R</comment>

	<decl_stmt><decl><type><name>Record</name></type> <name>l</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>number_of_intersections</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<while>while<condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call><name>_get_intersecting_record</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="line">// clone cached record before merging rhs</comment>
			<decl_stmt><decl><type><name>Record</name></type> <name>c</name> <init>= <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Record_Merge</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>c</name></expr>;</return>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// if we're here there are no more</comment>
	<comment type="line">// left hand side records which intersect with R</comment>
	<comment type="line">// discard R</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// try to get new right hand side record</comment>
	<comment type="line">// which intersect with a left hand side record</comment>
	<while>while<condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// pull from right branch</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name> <operator>=</operator> <call><name><name>right_child</name><operator>-&gt;</operator><name>consume</name></name><argument_list>(<argument><expr><name>right_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// get value on which we're intersecting</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_exp</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>found_intersection</name> <init>= <expr><call><name>_set_intersection_idx</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// no intersection, discard R</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found_intersection</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// found atleast one intersecting record</comment>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>_get_intersecting_record</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// clone cached record before merging rhs</comment>
		<decl_stmt><decl><type><name>Record</name></type> <name>c</name> <init>= <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Record_Merge</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>c</name></expr>;</return>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>ValueHashJoinReset</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpValueHashJoin</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>intersect_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>number_of_intersections</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="line">// clear cached records</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>record_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>record_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ValueHashJoinClone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_VALUE_HASH_JOIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpValueHashJoin</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>NewValueHashJoin</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>lhs_exp</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_exp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// frees ValueHashJoin</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ValueHashJoinFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpValueHashJoin</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpValueHashJoin</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// free cached records</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_rec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>record_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>record_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>cached_records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>lhs_exp</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>lhs_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>lhs_exp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>rhs_exp</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>rhs_exp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
