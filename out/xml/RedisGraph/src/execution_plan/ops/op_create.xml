<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_create.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>CreateConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>CreateClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CreateFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewCreateOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>edges</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpCreate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpCreate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NewPendingCreationsContainer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Prepare all creation variables.</comment>
	<comment type="line">// Set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_CREATE</name></expr></argument>, <argument><expr><literal type="string">"Create"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CreateConsume</name></expr></argument>,
				<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CreateClone</name></expr></argument>, <argument><expr><name>CreateFree</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>node_blueprint_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>edge_blueprint_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Construct the array of IDs this operation modifies</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_blueprint_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>nodes</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>node_idx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_blueprint_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>edges</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>edge_idx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>aware</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>aware</name> <operator>=</operator> <call><name>OpBase_Aware</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>src_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>aware</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>aware</name> <operator>=</operator> <call><name>OpBase_Aware</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>dest_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>aware</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Prepare to create all nodes for the current Record.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_CreateNodes</name><parameter_list>(<parameter><decl><type><name>OpCreate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>nodes_to_create_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nodes_to_create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodes_to_create_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// get specified node to create</comment>
		<decl_stmt><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nodes_to_create</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<comment type="line">// create a new node</comment>
		<decl_stmt><decl><type><name>Node</name></type> <name>newNode</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// add new node to Record and save a reference to it</comment>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node_ref</name> <init>= <expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nodes_to_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>node_idx</name></expr></argument>, <argument><expr><name>newNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// convert query-level properties</comment>
		<decl_stmt><decl><type><name>AttributeSet</name></type> <name>converted_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PropertyMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nodes_to_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>properties</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>map</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>converted_attr</name> <operator>=</operator> <call><name>AttributeSet_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ConvertPropertyMap</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>converted_attr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// save node for later insertion</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>created_nodes</name></name></expr></argument>, <argument><expr><name>node_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// save attributes to insert with node</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>node_attributes</name></name></expr></argument>, <argument><expr><name>converted_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// save labels to assigned to node</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>node_labels</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>labelsId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// Prepare to create all edges for the current Record.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_CreateEdges</name><parameter_list>(<parameter><decl><type><name>OpCreate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>edges_to_create_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>edges_to_create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edges_to_create_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// get specified edge to create</comment>
		<decl_stmt><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>edges_to_create</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<comment type="line">// retrieve source and dest nodes</comment>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>src_node</name> <init>= <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>src_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>dest_node</name> <init>= <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest_idx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// verify that the endpoints of the new edge resolved properly; fail otherwise</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>src_node</name> <operator>||</operator> <operator>!</operator><name>dest_node</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"Failed to create relationship; endpoint was not found."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// create the actual edge</comment>
		<decl_stmt><decl><type><name>Edge</name></type> <name>newEdge</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>newEdge</name><operator>.</operator><name>relationship</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>relation</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Edge_SetSrcNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newEdge</name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Edge_SetDestNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newEdge</name></expr></argument>, <argument><expr><name>dest_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge_ref</name> <init>= <expr><call><name>Record_AddEdge</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>edge_idx</name></name></expr></argument>, <argument><expr><name>newEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// convert query-level properties</comment>
		<decl_stmt><decl><type><name>PropertyMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>edges_to_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>properties</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttributeSet</name></type> <name>converted_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>map</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>converted_attr</name> <operator>=</operator> <call><name>AttributeSet_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ConvertPropertyMap</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>converted_attr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// save edge for later insertion</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>created_edges</name></name></expr></argument>, <argument><expr><name>edge_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// save attributes to insert with node</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>edge_attributes</name></name></expr></argument>, <argument><expr><name>converted_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// Return mode, emit a populated Record.</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>_handoff</name><parameter_list>(<parameter><decl><type><name>OpCreate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>array_pop</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>CreateConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpCreate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpCreate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name></decl>;</decl_stmt>

	<comment type="line">// Return mode, all data was consumed.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Consume mode.</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>childCount</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// No child operation to call.</comment>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Create entities. */</comment>
		<expr_stmt><expr><call><name>_CreateNodes</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_CreateEdges</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Save record for later use.</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// Pull data until child is depleted.</comment>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<while>while<condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Persist scalars from previous ops before storing the record,
			 * as those ops will be freed before the records are handed off. */</comment>
			<expr_stmt><expr><call><name>Record_PersistScalars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// create entities</comment>
			<expr_stmt><expr><call><name>_CreateNodes</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_CreateEdges</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// save record for later use</comment>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Done reading, we're not going to call consume any longer
	 * there might be operations e.g. index scan that need to free
	 * index R/W lock, as such free all execution plan operation up the chain. */</comment>
	<if_stmt><if>if<condition>(<expr><name>child</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_PropagateReset</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Create entities.</comment>
	<expr_stmt><expr><call><name>CommitNewEntities</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Return record.</comment>
	<return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>CreateClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpCreate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpCreate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>edges</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>nodes_to_create</name></name></expr></argument>, <argument><expr><name>NodeCreateCtx_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name>edges</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>pending</name><operator>.</operator><name>edges_to_create</name></name></expr></argument>, <argument><expr><name>EdgeCreateCtx_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>NewCreateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CreateFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpCreate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpCreate</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>rec_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rec_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PendingCreationsFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
