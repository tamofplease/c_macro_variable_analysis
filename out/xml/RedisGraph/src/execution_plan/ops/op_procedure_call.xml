<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_procedure_call.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_procedure_call.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>ProcCallConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>ProcCallReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ProcCallClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ProcCallFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>_yield</name><parameter_list>(<parameter><decl><type><name>OpProcCall</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>outputs</name> <init>= <expr><call><name>Proc_Step</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>outputs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>clone</name> <init>= <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_idx</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>proc_out_idx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc_out_idx</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>val</name> <init>= <expr><name><name>outputs</name><index>[<expr><name>proc_out_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Record_Add</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_evaluate_proc_args</name><parameter_list>(<parameter><decl><type><name>OpProcCall</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// evaluate arguments, free args from previous call</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>arg_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arg_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>arg_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>arg_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewProcCallOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proc_name</name></decl></parameter>,
	<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg_exps</name></decl></parameter>,
	<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield_exps</name></decl></parameter>
)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name>        <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>proc_name</name>   <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>arg_exps</name>    <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>yield_exps</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpProcCall</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpProcCall</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name>           <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name>        <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>SIValue</name></expr></argument>, <argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name>arg_exps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>arg_exps</name></name>    <operator>=</operator>  <name>arg_exps</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>arg_count</name></name>   <operator>=</operator>  <call><name>array_len</name><argument_list>(<argument><expr><name>arg_exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>proc_name</name></name>   <operator>=</operator>  <name>proc_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name></name>   <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>first_call</name></name>  <operator>=</operator>  <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>yield_exps</name></name>  <operator>=</operator>  <name>yield_exps</name></expr>;</expr_stmt>

	<comment type="line">// procedure must exist</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name> <operator>=</operator> <call><name>Proc_Get</name><argument_list>(<argument><expr><name>proc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>yield_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>yield_exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>yield_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OutputMap</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>yield_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set callbacks</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_PROC_CALL</name></expr></argument>, <argument><expr><literal type="string">"ProcedureCall"</literal></expr></argument>,
				<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ProcCallConsume</name></expr></argument>, <argument><expr><name>ProcCallReset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ProcCallClone</name></expr></argument>,
				<argument><expr><name>ProcCallFree</name></expr></argument>, <argument><expr><operator>!</operator><call><name>Procedure_IsReadOnly</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set modifiers</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>yield_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><name><name>yield_exps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>yield</name> <init>= <expr><name><name>yield_exps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>operand</name><operator>.</operator><name>variadic</name><operator>.</operator><name>entity_alias</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>yield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rec_idx</name> <init>= <expr><call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec_idx</name> <operator>=</operator> <name>rec_idx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc_out_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>ProcCallConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpProcCall</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpProcCall</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>yield_record</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><operator>(</operator><name>yield_record</name> <operator>=</operator> <call><name>_yield</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="line">// Free old record.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// "Static evaluation", return data for first call only!</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>first_call</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>first_call</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>_evaluate_proc_args</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// free previous invocation</comment>
		<comment type="line">// TODO: replace with Proc_Reset</comment>
		<expr_stmt><expr><call><name>Proc_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name> <operator>=</operator> <call><name>Proc_Get</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>proc_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// at the moment the only two procedures that can modify the graph are:</comment>
		<comment type="line">// proc_fulltext_create_index</comment>
		<comment type="line">// proc_fulltext_drop_index</comment>
		<comment type="line">// both perform the modification once invoked without returning any</comment>
		<comment type="line">// additional data (consume/step) function</comment>
		<comment type="line">// this is why acquiring the write lock as we do below works</comment>
		<comment type="line">// we will have to revisit this logic once new "write" procedures are</comment>
		<comment type="line">// introduced</comment>

		<comment type="line">// lock if procedure can modify the graph</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Procedure_IsReadOnly</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>QueryCtx_LockForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>ProcedureResult</name></type> <name>res</name> <init>= <expr><call><name>Proc_Invoke</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* TODO: should rise run-time exception?
		 * op-&gt;r will be freed in ProcCallFree. */</comment>
		<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>PROCEDURE_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>yield_record</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>ProcCallReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpProcCall</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpProcCall</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>first_call</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ProcCallClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_PROC_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpProcCall</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpProcCall</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>args_exp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>yield_exps</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name>args_exp</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>arg_exps</name></name></expr></argument>, <argument><expr><name>AR_EXP_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name>yield_exps</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>yield_exps</name></name></expr></argument>, <argument><expr><name>AR_EXP_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>NewProcCallOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>proc_name</name></name></expr></argument>, <argument><expr><name>args_exp</name></expr></argument>, <argument><expr><name>yield_exps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ProcCallFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpProcCall</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpProcCall</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Proc_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>procedure</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>yield_map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>arg_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arg_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>arg_exps</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>arg_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>arg_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>arg_exps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>arg_exps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>output</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>yield_exps</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>yield_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>yield_exps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>yield_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>yield_exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>yield_exps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>yield_exps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
