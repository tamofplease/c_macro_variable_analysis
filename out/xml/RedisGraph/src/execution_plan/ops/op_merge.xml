<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_merge.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_merge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_merge_create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../schema/schema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="line">// forward declarations</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>MergeInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>MergeConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>MergeClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MergeFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// ON MATCH / ON CREATE logic</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// apply a set of updates to the given records</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_UpdateProperties</name>
<parameter_list>(
	<parameter><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>node_pending_updates</name></decl></parameter>,
	<parameter><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>edge_pending_updates</name></decl></parameter>,
	<parameter><decl><type><name>ResultSetStatistics</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>,
	<parameter><decl><type><name>raxIterator</name></type> <name>updates</name></decl></parameter>,
	<parameter><decl><type><name>Record</name> <modifier>*</modifier></type><name>records</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>record_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>record_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>record_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="line">// for each record to update</comment>
		<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// evaluate update expressions</comment>
		<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>updates</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>updates</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>updates</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>EvalEntityUpdates</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>node_pending_updates</name></expr></argument>, <argument><expr><name>edge_pending_updates</name></expr></argument>,
					<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Merge logic</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Record</name></type> <name>_pullFromStream</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>branch</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_InitializeUpdates</name>
<parameter_list>(
	<parameter><decl><type><name>OpMerge</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>updates</name></decl></parameter>,
	<parameter><decl><type><name>raxIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// if we have ON MATCH / ON CREATE directives</comment>
	<comment type="line">// set the appropriate record IDs of entities to be updated</comment>
	<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>updates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// iterate over all expressions</comment>
	<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// set the record index for every entity modified by this operation</comment>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>record_idx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

</block_content>}</block></function>

<comment type="line">// free node and edge pending updates</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_free_pending_updates</name>
<parameter_list>(
	<parameter><decl><type><name>OpMerge</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>pending_updates_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pending_updates_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>pending_update</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>pending_updates_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pending_updates_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>pending_update</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewMergeOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>on_match</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>on_create</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// merge is an operator with two or three children</comment>
	<comment type="line">// they will be created outside of here</comment>
	<comment type="line">// as with other multi-stream operators</comment>
	<comment type="line">// (see CartesianProduct and ValueHashJoin)</comment>
	<decl_stmt><decl><type><name>OpMerge</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpMerge</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name>                <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name>             <operator>=</operator> <name>on_match</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name>            <operator>=</operator> <name>on_create</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	
	<comment type="line">// set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_MERGE</name></expr></argument>, <argument><expr><literal type="string">"Merge"</literal></expr></argument>, <argument><expr><name>MergeInit</name></expr></argument>, <argument><expr><name>MergeConsume</name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MergeClone</name></expr></argument>, <argument><expr><name>MergeFree</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_InitializeUpdates</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>on_match_it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_InitializeUpdates</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>on_create_it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// modification of ExecutionPlan_LocateOp that only follows LHS child</comment>
<comment type="line">// Otherwise, the assumptions of Merge_SetStreams fail in MERGE..MERGE queries</comment>
<comment type="line">// Match and Create streams are always guaranteed to not branch</comment>
<comment type="line">// (have any ops with multiple children)</comment>
<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>_LocateOp</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
	<parameter><decl><type><name>OPType</name></type> <name>type</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>root</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_LocateOp</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>MergeInit</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// merge has 2 children if it is the first clause, and 3 otherwise</comment>
	<comment type="line">// - if there are 3 children</comment>
	<comment type="line">//   the first should resolve the Merge pattern's bound variables</comment>
	<comment type="line">// - the next (first if there are 2 children, second otherwise)</comment>
	<comment type="line">//   should attempt to match the pattern</comment>
	<comment type="line">// - the last creates the pattern</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>opBase</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpMerge</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpMerge</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <call><name>QueryCtx_GetResultSetStatistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>opBase</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// if we only have 2 streams</comment>
		<comment type="line">// we simply need to determine which has a MergeCreate op</comment>
		<if_stmt><if>if<condition>(<expr><call><name>_LocateOp</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>OPType_MERGE_CREATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// if the Create op is in the first stream, swap the children</comment>
			<comment type="line">// otherwise, the order is already correct</comment>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>match_stream</name></name> <operator>=</operator> <name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name> <operator>=</operator> <name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><name>OP_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// handling the three-stream case</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opBase</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>child_has_merge</name> <init>= <expr><call><name>_LocateOp</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>OPType_MERGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* nither Match stream and Create stream have a Merge op
		 * the bound variable stream will have a Merge op in-case of a merge merge query
		 * MERGE (a:A) MERGE (b:B)
		 * In which case the first Merge has yet to order its streams! */</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name> <operator>&amp;&amp;</operator> <name>child_has_merge</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>child_has_argument</name> <init>= <expr><call><name>_LocateOp</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>OPType_ARGUMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// The bound variable stream is the only stream not populated by an Argument op.</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>child_has_argument</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// The Create stream is the only stream with a MergeCreate op and Argument op.</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name> <operator>&amp;&amp;</operator> <call><name>_LocateOp</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>OPType_MERGE_CREATE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>child_has_argument</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// The Match stream has an unknown set of operations, but is the only other stream</comment>
		<comment type="line">// populated by an Argument op.</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>match_stream</name></name> <operator>&amp;&amp;</operator> <name>child_has_argument</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>match_stream</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		   <name><name>op</name><operator>-&gt;</operator><name>match_stream</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		   <name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// migrate the children so that EXPLAIN calls print properly</comment>
	<expr_stmt><expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>match_stream</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name></expr>;</expr_stmt>

	<comment type="line">// find and store references to the:</comment>
	<comment type="line">// Argument taps for the Match and Create streams</comment>
	<comment type="line">// the Match stream is populated by an Argument tap</comment>
	<comment type="line">// store a reference to it</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>match_argument_tap</name></name> <operator>=</operator>
		<operator>(</operator><name>Argument</name> <operator>*</operator><operator>)</operator><call><name>ExecutionPlan_LocateOp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>match_stream</name></name></expr></argument>, <argument><expr><name>OPType_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// if the create stream is populated by an Argument tap, store a reference to it.</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>create_argument_tap</name></name> <operator>=</operator>
		<operator>(</operator><name>Argument</name> <operator>*</operator><operator>)</operator><call><name>ExecutionPlan_LocateOp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name></expr></argument>, <argument><expr><name>OPType_ARGUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set up an array to store records produced by the bound variable stream</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>_handoff</name>
<parameter_list>(
	<parameter><decl><type><name>OpMerge</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>array_pop</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>MergeConsume</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpMerge</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpMerge</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// handoff</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// return mode, all data was consumed</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// consume bound stream</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// if we have a bound variable stream</comment>
	<comment type="line">// pull from it and store records until depleted</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Record</name></type> <name>input_record</name></decl>;</decl_stmt>
		<while>while<condition>(<expr><operator>(</operator><name>input_record</name> <operator>=</operator> <call><name>_pullFromStream</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name></expr></argument>, <argument><expr><name>input_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// match pattern</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>uint</name></type> <name>match_count</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>reading_matches</name>     <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>must_create_records</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// match mode: attempt to resolve the pattern for every record from</comment>
	<comment type="line">// the bound variable stream, or once if we have no bound variables</comment>
	<while>while<condition>(<expr><name>reading_matches</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Record</name></type> <name>lhs_record</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// if we had bound variables but have depleted our input records,</comment>
			<comment type="line">// we're done pulling from the Match stream</comment>
			<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// pull a new input record</comment>
			<expr_stmt><expr><name>lhs_record</name> <operator>=</operator> <call><name>array_pop</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// propagate record to the top of the Match stream</comment>
			<comment type="line">// (must clone the Record, as it will be freed in the Match stream)</comment>
			<expr_stmt><expr><call><name>Argument_AddRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>match_argument_tap</name></name></expr></argument>, <argument><expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name>lhs_record</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// this loop only executes once if we don't have input records</comment>
			<comment type="line">// resolving bound variables</comment>
			<expr_stmt><expr><name>reading_matches</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<decl_stmt><decl><type><name>Record</name></type> <name>rhs_record</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_create_pattern</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		<comment type="line">// retrieve Records from the Match stream until it's depleted</comment>
		<while>while<condition>(<expr><operator>(</operator><name>rhs_record</name> <operator>=</operator> <call><name>_pullFromStream</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>match_stream</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="line">// pattern was successfully matched</comment>
			<expr_stmt><expr><name>should_create_pattern</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr></argument>, <argument><expr><name>rhs_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>match_count</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if<condition>(<expr><name>should_create_pattern</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// transfer the LHS record to the Create stream</comment>
			<comment type="line">// to build once we finish reading</comment>
			<comment type="line">// we don't need to clone the record</comment>
			<comment type="line">// as it won't be accessed again outside that stream</comment>
			<comment type="line">// but we must make sure its elements are access-safe</comment>
			<comment type="line">// as the input stream will be freed</comment>
			<comment type="line">// before entities are created</comment>
			<if_stmt><if>if<condition>(<expr><name>lhs_record</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>Record_PersistScalars</name><argument_list>(<argument><expr><name>lhs_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Argument_AddRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>create_argument_tap</name></name></expr></argument>, <argument><expr><name>lhs_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>lhs_record</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>_pullFromStream</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// don't expect returned records</comment>
			<expr_stmt><expr><name>must_create_records</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// free the LHS Record if we haven't transferred it to the Create stream</comment>
		<if_stmt><if>if<condition>(<expr><name>lhs_record</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>lhs_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// compute updates and create</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// explicitly free the read streams in case either holds an index read lock</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_PropagateReset</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>bound_variable_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>OpBase_PropagateReset</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>match_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>PendingUpdateCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>PendingUpdateCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// if we are setting properties with ON MATCH, compute all pending updates</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name> <operator>&amp;&amp;</operator> <name>match_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_UpdateProperties</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name></expr></argument>,
			<argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>on_match_it</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr></argument>, <argument><expr><name>match_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>must_create_records</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// commit all pending changes on the Create stream</comment>
		<comment type="line">// 'MergeCreate_Commit' acquire write lock!</comment>
		<comment type="line">// write lock is released further down</comment>
		<expr_stmt><expr><call><name>MergeCreate_Commit</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// we only need to pull the created records if we're returning results</comment>
		<comment type="line">// or performing updates on creation</comment>
		<comment type="line">// TODO: isn't op-&gt;stats always != NULL ?</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>on_create</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// pull all records from the Create stream</comment>
			<decl_stmt><decl><type><name>uint</name></type> <name>create_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Record</name></type> <name>created_record</name></decl>;</decl_stmt>
			<while>while<condition>(<expr><operator>(</operator><name>created_record</name> <operator>=</operator> <call><name>_pullFromStream</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>create_stream</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr></argument>, <argument><expr><name>created_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>create_count</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

			<comment type="line">// if we are setting properties with ON CREATE</comment>
			<comment type="line">// compute all pending updates</comment>
			<comment type="line">// TODO: note we're under lock at this point! is there a way</comment>
			<comment type="line">// to compute these changes before locking ?</comment>
			<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>_UpdateProperties</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>on_create_it</name></name></expr></argument>,
					<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name> <operator>+</operator> <name>match_count</name></expr></argument>, <argument><expr><name>create_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// update</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
	   <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// lock everything</comment>
		<expr_stmt><expr><call><name>QueryCtx_LockForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
			<expr_stmt><expr><call><name>CommitUpdates</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_pending_updates</name></name></expr></argument>, <argument><expr><name>ENTITY_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CommitUpdates</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_pending_updates</name></name></expr></argument>, <argument><expr><name>ENTITY_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// free updates</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><call><name>_free_pending_updates</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>MergeClone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_MERGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpMerge</name> <modifier>*</modifier></type><name>op</name>    <init>= <expr><operator>(</operator><name>OpMerge</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>on_match</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>on_create</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>on_match</name> <operator>=</operator> <call><name>raxCloneWithCallback</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>UpdateCtx_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>on_create</name> <operator>=</operator> <call><name>raxCloneWithCallback</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>UpdateCtx_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>NewMergeOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>on_match</name></expr></argument>, <argument><expr><name>on_create</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MergeFree</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpMerge</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpMerge</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>input_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>input_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>input_records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>output_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>output_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>output_records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>_free_pending_updates</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>UpdateCtx_Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>on_match</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>on_match_it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>UpdateCtx_Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>on_create</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>on_create_it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
