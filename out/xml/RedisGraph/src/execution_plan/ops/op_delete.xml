<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_delete.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./op_delete.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../graph/graph_hub.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datatypes/path/sipath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_expression.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="line">// forward declarations</comment>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>DeleteConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>DeleteInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>DeleteClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>DeleteReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeleteFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_entity_cmp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>b</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_DeleteEntities</name>
<parameter_list>(
	<parameter><decl><type><name>OpDelete</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>node_deleted</name>          <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>edge_deleted</name>          <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>node_count</name>            <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>edge_count</name>            <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// nothing to delete, quickly return</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>node_count</name> <operator>+</operator> <name>edge_count</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// removing duplicates</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// remove node duplicates</comment>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>nodes</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>distinct_nodes</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>Node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>is_entity_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>node_count</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
			  <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>nodes</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>nodes</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>nodes</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<comment type="line">// skip already deleted nodes</comment>
		<if_stmt><if>if<condition>(<expr><call><name>Graph_EntityIsDeleted</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>distinct_nodes</name></expr></argument>, <argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// mark node's edges for deletion</comment>
		<expr_stmt><expr><call><name>Graph_GetNodeEdges</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GRAPH_EDGE_DIR_BOTH</name></expr></argument>, <argument><expr><name>GRAPH_NO_RELATION</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>node_count</name> <operator>=</operator>  <call><name>array_len</name><argument_list>(<argument><expr><name>distinct_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>edge_count</name> <operator>=</operator>  <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// remove edge duplicates</comment>
	<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edges</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>distinct_edges</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>edges</name></expr></argument>, <argument><expr><name>edge_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Edge</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>is_entity_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>edge_count</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
			  <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>edges</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>edges</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>edges</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<comment type="line">// skip already deleted edges</comment>
		<if_stmt><if>if<condition>(<expr><call><name>Graph_EntityIsDeleted</name><argument_list>(<argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>distinct_edges</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>edge_count</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>distinct_edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// lock everything</comment>
	<expr_stmt><expr><call><name>QueryCtx_LockForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
		<comment type="line">// NOTE: delete edges before nodes</comment>
		<comment type="line">// required as a deleted node must be detached</comment>

		<comment type="line">// delete edges</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>edge_deleted</name> <operator>+=</operator> <call><name>DeleteEdge</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name>distinct_edges</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// delete nodes</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>node_deleted</name> <operator>+=</operator> <call><name>DeleteNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name>distinct_nodes</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// stats must be updated under lock due to for replication</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>nodes_deleted</name></name>         <operator>+=</operator> <name>node_deleted</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>relationships_deleted</name></name> <operator>+=</operator> <name>edge_deleted</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="line">// clean up</comment>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>distinct_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>distinct_edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewDeleteOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpDelete</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpDelete</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>gc</name></name> <operator>=</operator> <call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name> <operator>=</operator> <name>exps</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>exp_count</name></name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Node</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_DELETE</name></expr></argument>, <argument><expr><literal type="string">"Delete"</literal></expr></argument>, <argument><expr><name>DeleteInit</name></expr></argument>, <argument><expr><name>DeleteConsume</name></expr></argument>,
				<argument><expr><name>DeleteReset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DeleteClone</name></expr></argument>, <argument><expr><name>DeleteFree</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>DeleteInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpDelete</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpDelete</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <call><name>QueryCtx_GetResultSetStatistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>DeleteConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpDelete</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpDelete</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Expression should be evaluated to either a node or an edge
	 * which will be marked for deletion, if an expression is evaluated
	 * to a different value type e.g. Numeric a run-time expection is thrown. */</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>exp_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIType</name></type> <name>type</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Enqueue entities for deletion. */</comment>
		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>&amp;</operator> <name>T_NODE</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr></argument>, <argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// If evaluating the expression allocated any memory, free it.</comment>
			<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>&amp;</operator> <name>T_EDGE</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>Edge</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// If evaluating the expression allocated any memory, free it.</comment>
			<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>&amp;</operator> <name>T_PATH</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>.</operator><name>ptrval</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>nodeCount</name> <init>= <expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>edgeCount</name> <init>= <expr><call><name>Path_EdgeCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>Path_GetNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr></argument>, <argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edgeCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>Path_GetEdge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>T_NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Expression evaluated to a non-graph entity type
			 * clear pending deletions and raise an exception. */</comment>
			<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// If evaluating the expression allocated any memory, free it.</comment>
			<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// free the Record this operation acted on</comment>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ErrorCtx_RaiseRuntimeException</name><argument_list>(<argument><expr><literal type="string">"Delete type mismatch, expecting either Node or Relationship."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>DeleteClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpDelete</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpDelete</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name></expr></argument>, <argument><expr><name>AR_EXP_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>NewDeleteOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>DeleteReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpDelete</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpDelete</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>_DeleteEntities</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpDelete</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpDelete</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>_DeleteEntities</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_nodes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>deleted_edges</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>exp_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>exps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
