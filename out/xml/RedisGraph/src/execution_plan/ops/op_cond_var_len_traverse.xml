<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_cond_var_len_traverse.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_cond_var_len_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shared/print_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../algorithms/all_paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../algorithms/all_neighbors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>CondVarLenTraverseInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>CondVarLenTraverseReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>CondVarLenTraverseConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>CondVarLenTraverseOptimizedConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>CondVarLenTraverseClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CondVarLenTraverseFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_setupTraversedRelations</name><parameter_list>(<parameter><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>minHops</name></name> <operator>&lt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>maxHops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>minHops</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>minHops</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>maxHops</name></name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>maxHops</name></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>reltype_count</name> <init>= <expr><call><name>QGEdge_RelationCount</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>reltype_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>, <argument><expr><name>GRAPH_NO_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>reltype_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>reltype_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>rel_id</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>rel_id</name> <operator>!=</operator> <name>GRAPH_UNKNOWN_RELATION</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>, <argument><expr><name>rel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel_type</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>reltypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>rel_type</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationCount</name></name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// Set the traversal direction to match the traversed edge and AlgebraicExpression form.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_setTraverseDirection</name><parameter_list>(<parameter><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>bidirectional</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>traverseDir</name></name> <operator>=</operator> <name>GRAPH_EDGE_DIR_BOTH</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_Transposed</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// traverse in the opposite direction, (dest)-&gt;(src) incoming edges</comment>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>traverseDir</name></name> <operator>=</operator> <name>GRAPH_EDGE_DIR_INCOMING</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>traverseDir</name></name> <operator>=</operator> <name>GRAPH_EDGE_DIR_OUTGOING</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>CondVarLenTraverseToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// TODO: tmp, improve TraversalToString</comment>
	<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_Optimize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TraversalToString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CondVarLenTraverseOp_ExpandInto</name><parameter_list>(<parameter><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Expand into doesn't performs any modifications.</comment>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>modifies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>expandInto</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OPType_CONDITIONAL_VAR_LEN_TRAVERSE_EXPAND_INTO</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"Conditional Variable Length Traverse (Expand Into)"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>CondVarLenTraverseOp_SetFilter</name><parameter_list>(<parameter><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
										   <parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ft</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ft</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ft</name></name> <operator>=</operator> <name>ft</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewCondVarLenTraverseOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>g</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ae</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CondVarLenTraverse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name>                  <operator>=</operator>  <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name>                  <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name>                  <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name>                 <operator>=</operator>  <name>ae</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ft</name></name>                 <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>expandInto</name></name>         <operator>=</operator>  <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name>        <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>collect_paths</name></name>      <operator>=</operator>  <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name>    <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name>  <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_CONDITIONAL_VAR_LEN_TRAVERSE</name></expr></argument>,
				<argument><expr><literal type="string">"Conditional Variable Length Traverse"</literal></expr></argument>, <argument><expr><name>CondVarLenTraverseInit</name></expr></argument>,
				<argument><expr><name>CondVarLenTraverseConsume</name></expr></argument>, <argument><expr><name>CondVarLenTraverseReset</name></expr></argument>,
				<argument><expr><name>CondVarLenTraverseToString</name></expr></argument>, <argument><expr><name>CondVarLenTraverseClone</name></expr></argument>,
				<argument><expr><name>CondVarLenTraverseFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>aware</name> <init>= <expr><call><name>OpBase_Aware</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// populate edge value in record only if it is referenced</comment>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edgesIdx</name></name> <operator>=</operator> <ternary><condition><expr><call><name>AST_AliasIsReferenced</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>shortestPaths</name></name> <operator>=</operator> <call><name>QGEdge_IsShortestPath</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_setTraverseDirection</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>CondVarLenTraverseInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// check if variable length traversal doesn't require path construction</comment>
	<comment type="line">// in which case we only care for reachable destination nodes</comment>
	<comment type="line">// which is alot cheaper to compute</comment>
	<comment type="line">//</comment>
	<comment type="line">// consider:</comment>
	<comment type="line">// MATCH (a)-[:L*2..4]-&gt;(b) RETURN b</comment>
	<comment type="line">// we only care for destination nodes, the actual path is not of interest</comment>
	<comment type="line">//</comment>
	<comment type="line">// for this we require:</comment>
	<comment type="line">// 1. no filters to be applied to pattern</comment>
	<comment type="line">// 2. traversed edge isn't referenced</comment>
	<comment type="line">// 3. traversal of a single relationship: R, RT</comment>
	<comment type="line">// 4. traversal must be directed</comment>
	<comment type="line">//</comment>
	<comment type="line">// in which case we can use a faster consume function</comment>

	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>,
			<argument><expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>reltype_count</name> <init>= <expr><call><name>QGEdge_RelationCount</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>  <name>multi_edge</name>  <init>=  <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>  <name>transpose</name>   <init>=  <expr><name><name>op</name><operator>-&gt;</operator><name>traverseDir</name></name> <operator>!=</operator> <name>GRAPH_EDGE_DIR_OUTGOING</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>reltype_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>rel_id</name> <init>= <expr><call><name>QGEdge_RelationID</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>rel_id</name> <operator>!=</operator> <name>GRAPH_NO_RELATION</name> <operator>&amp;&amp;</operator> <name>rel_id</name> <operator>!=</operator> <name>GRAPH_UNKNOWN_RELATION</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>multi_edge</name> <operator>=</operator> <call><name>Graph_RelationshipContainsMultiEdge</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>rel_id</name></expr></argument>,
					<argument><expr><name>transpose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ft</name></name>          <operator>==</operator> <name>NULL</name>                <operator>&amp;&amp;</operator> <comment type="line">// no filter on path</comment>
	   <name><name>op</name><operator>-&gt;</operator><name>edgesIdx</name></name>    <operator>==</operator> <operator>-</operator><literal type="number">1</literal>                  <operator>&amp;&amp;</operator> <comment type="line">// edge isn't required</comment>
	   <name><name>op</name><operator>-&gt;</operator><name>expandInto</name></name>  <operator>==</operator> <name>false</name>               <operator>&amp;&amp;</operator> <comment type="line">// destination unknown</comment>
	   <name>reltype_count</name>   <operator>==</operator> <literal type="number">1</literal>                   <operator>&amp;&amp;</operator> <comment type="line">// single relationship</comment>
	   <name>multi_edge</name>      <operator>==</operator> <name>false</name>               <operator>&amp;&amp;</operator> <comment type="line">// no multi edge entries</comment>
	   <name><name>op</name><operator>-&gt;</operator><name>traverseDir</name></name> <operator>!=</operator> <name>GRAPH_EDGE_DIR_BOTH</name></expr>    <comment type="line">// directed</comment>
	  )</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AlgebraicExpression_Optimize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>collect_paths</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_UpdateConsume</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>, <argument><expr><name>CondVarLenTraverseOptimizedConsume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>CondVarLenTraverseOptimizedConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CondVarLenTraverse</name>  <modifier>*</modifier></type><name>op</name>     <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name>              <modifier>*</modifier></type><name>child</name>  <init>=  <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name></type>                <name>dest</name>    <init>=  <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>            <name>dest_id</name> <init>=  <expr><name>INVALID_ENTITY_ID</name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><operator>(</operator><name>dest_id</name> <operator>=</operator> <call><name>AllNeighborsCtx_NextNeighbor</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
		  <name>INVALID_ENTITY_ID</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Record</name></type> <name>childRecord</name> <init>= <expr><call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>childRecord</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>childRecord</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>srcNode</name> <init>= <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>srcNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// the child Record may not contain the source node</comment>
			<comment type="line">// in scenarios like a failed OPTIONAL MATCH</comment>
			<comment type="line">// in this case, delete the Record and try again</comment>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// create edge relation type array on first call to consume</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>_setupTraversedRelations</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// incase we don't have any relations to traverse</comment>
			<comment type="line">// and minimal traversal is at least one hop</comment>
			<comment type="line">// we can return quickly</comment>
			<comment type="line">// consider: MATCH (S)-[:L*]-&gt;(M) RETURN M</comment>
			<comment type="line">// where label L does not exists */</comment>
			<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationCount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>minHops</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ae</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>matrix</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name> <operator>=</operator> <call><name>AllNeighborsCtx_New</name><argument_list>(<argument><expr><name><name>srcNode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>,
					<argument><expr><name><name>op</name><operator>-&gt;</operator><name>minHops</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>maxHops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// in case ctx already allocated simply reset it</comment>
			<expr_stmt><expr><call><name>AllNeighborsCtx_Reset</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name></expr></argument>, <argument><expr><name><name>srcNode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>,
					<argument><expr><name><name>op</name><operator>-&gt;</operator><name>minHops</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>maxHops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="line">// could not produce destination node, return</comment>
	<if_stmt><if>if<condition>(<expr><name>dest_id</name> <operator>==</operator> <name>INVALID_ENTITY_ID</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>dest_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// populate output record</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// add destination node to record</comment>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>CondVarLenTraverseConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CondVarLenTraverse</name>  <modifier>*</modifier></type><name>op</name>     <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name>                <modifier>*</modifier></type><name>p</name>      <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name>              <modifier>*</modifier></type><name>child</name>  <init>=  <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>AllPathsCtx_NextPath</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Record</name></type> <name>childRecord</name> <init>= <expr><call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>childRecord</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>childRecord</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>srcNode</name> <init>= <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>srcNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* The child Record may not contain the source node in scenarios like
			 * a failed OPTIONAL MATCH. In this case, delete the Record and try again. */</comment>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Create edge relation type array on first call to consume.</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>_setupTraversedRelations</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Incase we don't have any relations to traverse and minimal traversal is at least one hop
			 * we can return quickly.
			 * Consider: MATCH (S)-[:L*]-&gt;(M) RETURN M
			 * where label L does not exists. */</comment>
			<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationCount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>minHops</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>destNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<comment type="line">// The destination node is known in advance if we're performing an ExpandInto.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>expandInto</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>destNode</name> <operator>=</operator> <call><name>Record_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>AllPathsCtx_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name> <operator>=</operator> <call><name>AllPathsCtx_New</name><argument_list>(<argument><expr><name>srcNode</name></expr></argument>, <argument><expr><name>destNode</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name></expr></argument>,
				<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationCount</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>traverseDir</name></name></expr></argument>,
				<argument><expr><name><name>op</name><operator>-&gt;</operator><name>minHops</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>maxHops</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgesIdx</name></name></expr></argument>,
				<argument><expr><name><name>op</name><operator>-&gt;</operator><name>shortestPaths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// populate output record</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// add destination node to record</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>expandInto</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name></expr></argument>, <argument><expr><call><name>Path_Head</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// add new path to record</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edgesIdx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Record_AddScalar</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgesIdx</name></name></expr></argument>, <argument><expr><call><name>SI_Path</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>CondVarLenTraverseReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>collect_paths</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>AllPathsCtx_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>AllNeighborsCtx_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>CondVarLenTraverseClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CONDITIONAL_VAR_LEN_TRAVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator> <name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op_clone</name> <init>= <expr><call><name>NewCondVarLenTraverseOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></argument>,
											   <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>op_clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CondVarLenTraverseFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>collect_paths</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>AllPathsCtx_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>allPathsCtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>AllNeighborsCtx_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>allNeighborsCtx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ft</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ft</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
