<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_expand_into.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_expand_into.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shared/print_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<comment type="line">// default number of records to accumulate before traversing</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATCH_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<comment type="line">// forward declarations</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>ExpandIntoInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>ExpandIntoConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>ExpandIntoReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ExpandIntoClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ExpandIntoFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// string representation of operation</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ExpandIntoToString</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>TraversalToString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>OpExpandInto</name> <operator>*</operator><operator>)</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// construct filter matrix F</comment>
<comment type="line">// F[i,j] = 1 if row the ith record ID(src) = j</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_populate_filter_matrix</name>
<parameter_list>(
	<parameter><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>FM</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// clear filter matrix</comment>
	<expr_stmt><expr><call><name>GrB_Matrix_clear</name><argument_list>(<argument><expr><name>FM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// update filter matrix F</comment>
		<comment type="line">// set row i at position srcId</comment>
		<comment type="line">// F[i, srcId] = true</comment>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>srcId</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>GrB_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name>FM</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>srcId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>GrB_Matrix_wait</name><argument_list>(<argument><expr><name>FM</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// evaluate algebraic expression:</comment>
<comment type="line">// appends filter matrix as the left most operand</comment>
<comment type="line">// perform multiplications</comment>
<comment type="line">// removed filter matrix from original expression</comment>
<comment type="line">// clears filter matrix</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_traverse</name>
<parameter_list>(
	<parameter><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// if op-&gt;F is null, this is the first time we are traversing</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// create both filter matrix F and result matrix M</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>required_dim</name> <init>= <expr><call><name>Graph_RequiredMatrixDim</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name></expr></argument>, <argument><expr><name>required_dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name></expr></argument>, <argument><expr><name>required_dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// prepend the filter matrix to algebraic expression</comment>
		<comment type="line">// as the leftmost operand</comment>
		<expr_stmt><expr><call><name>AlgebraicExpression_MultiplyToTheLeft</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>AlgebraicExpression_Optimize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// populate filter matrix</comment>
	<expr_stmt><expr><call><name>_populate_filter_matrix</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// evaluate expression</comment>
	<expr_stmt><expr><call><name>AlgebraicExpression_Eval</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewExpandIntoOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpExpandInto</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name>               <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name>               <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name>               <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name>              <operator>=</operator>  <name>ae</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>graph</name></name>           <operator>=</operator>  <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name>         <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name>        <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name>      <operator>=</operator>  <name>BATCH_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name>    <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>single_operand</name></name>  <operator>=</operator>  <name>false</name></expr>;</expr_stmt>

	<comment type="line">// set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_EXPAND_INTO</name></expr></argument>, <argument><expr><literal type="string">"Expand Into"</literal></expr></argument>, <argument><expr><name>ExpandIntoInit</name></expr></argument>,
			<argument><expr><name>ExpandIntoConsume</name></expr></argument>, <argument><expr><name>ExpandIntoReset</name></expr></argument>, <argument><expr><name>ExpandIntoToString</name></expr></argument>,
			<argument><expr><name>ExpandIntoClone</name></expr></argument>, <argument><expr><name>ExpandIntoFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// make sure that all entities are represented in record</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>aware</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
	<expr_stmt><expr><name>aware</name> <operator>=</operator> <call><name>OpBase_Aware</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>aware</name> <operator>=</operator> <call><name>OpBase_Aware</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>edge</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// this operation will populate an edge in the record</comment>
		<comment type="line">// prepare all necessary information for collecting matching edges</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>edge_idx</name> <init>= <expr><call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name> <operator>=</operator> <call><name>EdgeTraverseCtx_New</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>edge_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>ExpandIntoInit</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpExpandInto</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// see if we can optimize by avoiding matrix multiplication</comment>
	<comment type="line">// if the algebraic expression passed in is just a single operand</comment>
	<comment type="line">// there's no need to compute F and perform F*X, we can simply inspect X</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ae</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AL_OPERAND</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if traversed expression is a single operand e.g. [R]</comment>
		<comment type="line">// check if specified operand R exists</comment>
		<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><call><name>AlgebraicExpression_Label</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// matrix isn't associated with a label, use the adjacency matrix</comment>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <call><name>Graph_GetAdjacencyMatrix</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// try to retrieve relationship matrix</comment>
			<comment type="line">// it is OK if the relationship doesn't exists, in this case</comment>
			<comment type="line">// we won't use this single operand optimization</comment>
			<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// stream records as they enter</comment>
				<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// if we've managed to set M, restrict record cap to 1</comment>
		<comment type="line">// and note the optimization</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name>      <operator>=</operator>  <literal type="number">1</literal></expr>;</expr_stmt>     <comment type="line">// record buffer size will be set to 1</comment>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>single_operand</name></name>  <operator>=</operator>  <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// create 'records' within this Init function as 'record_cap'</comment>
	<comment type="line">// might be set during optimization time (applyLimit)</comment>
	<comment type="line">// If cap greater than BATCH_SIZE is specified,</comment>
	<comment type="line">// use BATCH_SIZE as the value.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name> <operator>&gt;</operator> <name>BATCH_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name> <operator>=</operator> <name>BATCH_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <call><name>rm_calloc</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Record</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// emits a record returns NULL when depleted</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>_handoff</name>
<parameter_list>(
	<parameter><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name></decl>;</decl_stmt>

	<comment type="line">// if we're required to update an edge and have one queued</comment>
	<comment type="line">// we can return early</comment>
	<comment type="line">// otherwise, try to get a new pair of source and destination nodes</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<label><name>emit_edge</name>:</label>
		<if_stmt><if>if<condition>(<expr><call><name>EdgeTraverseCtx_SetEdge</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>EdgeTraverseCtx_EdgeCount</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="line">// processing last edge, no need to clone op-&gt;r</comment>
				<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<return>return <expr><name>r</name></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="line">// multiple edges, clone op-&gt;r</comment>
				<return>return <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// failed to produce edge, free record</comment>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// find a record where both record's source and destination</comment>
	<comment type="line">// nodes are connected M[i,j] is set</comment>
	<while>while<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>]</index></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>x</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>row</name></decl>;</decl_stmt>

		<comment type="line">// resolve row index</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>single_operand</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// row idx = src node ID</comment>
			<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>srcNode</name> <init>= <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>srcNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// row idx = record idx</comment>
			<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>destNode</name>  <init>=  <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>col</name>      <init>=  <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>destNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// TODO: in the case of multiple operands ()-[:A]-&gt;()-[:B]-&gt;()</comment>
		<comment type="line">// M is the result of F*A*B, in which case we can switch from</comment>
		<comment type="line">// M being a RG_Matrix to a GrB_Matrix, making the extract element</comment>
		<comment type="line">// operation a bit cheaper to compute</comment>
		<decl_stmt><decl><type><name>GrB_Info</name></type> <name>res</name>    <init>=  <expr><call><name>RG_Matrix_extractElement_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// src is not connected to dest, free the current record and continue</comment>
		<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// src is connected to dest</comment>
		<comment type="line">// update the edge if necessary</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>Node</name>      <modifier>*</modifier></type><name>srcNode</name>  <init>=  <expr><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>EntityID</name></type>  <name>row</name>       <init>=  <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>srcNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// collect all edges connecting the current pair of endpoints</comment>
			<expr_stmt><expr><call><name>EdgeTraverseCtx_CollectEdges</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>emit_edge</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>r</name></expr>;</return>
	</block_content>}</block></while>

	<comment type="line">// didn't manage to emit record</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ExpandIntoConsume next operation</comment>
<comment type="line">// returns OP_DEPLETED when no additional updates are available</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>ExpandIntoConsume</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpExpandInto</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// as long as we don't have a record to emit</comment>
	<while>while<condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if we're here, we didn't manage to emit a record</comment>
		<comment type="line">// clean up and try to get new data points</comment>

		<comment type="line">// validate depleted</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// get data</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<comment type="line">// ask child operation for at most 'record_cap' records</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_cap</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// did not manage to get new data, break</comment>
			<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

			<comment type="line">// check if both src and destination nodes are set</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>srcNodeIdx</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
			   <operator>!</operator><call><name>Record_GetNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>destNodeIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// the child Record may not contain eithe</comment>
				<comment type="line">// source or destination nodes in scenarios like a failed</comment>
				<comment type="line">// OPTIONAL MATCH in this case, delete the Record and try again</comment>
				<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// store received record</comment>
			<comment type="line">// TODO: not sure if necessary when we're streaming records</comment>
			<expr_stmt><expr><call><name>Record_PersistScalars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

		<comment type="line">// did not managed to produce data, depleted</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>single_operand</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_traverse</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>ExpandIntoReset</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpExpandInto</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>record_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EdgeTraverseCtx_Reset</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ExpandIntoClone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_EXPAND_INTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpExpandInto</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>NewExpandIntoOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Clone</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// frees ExpandInto</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ExpandIntoFree</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpExpandInto</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpExpandInto</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>F</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// M was allocated by us</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>single_operand</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RG_Matrix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>M</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ae</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EdgeTraverseCtx_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>record_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
