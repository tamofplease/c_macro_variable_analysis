<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_node_by_id_seek.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_node_by_id_seek.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shared/print_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>NodeByIdSeekInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByIdSeekConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByIdSeekConsumeFromChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>NodeByIdSeekReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>NodeByIdSeekClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>NodeByIdSeekFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>NodeByIdSeekToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ScanToString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>NodeByIdSeek</name> <operator>*</operator><operator>)</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>alias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Checks to see if operation index is within its bounds.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_outOfBounds</name><parameter_list>(<parameter><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Because currentId starts at minimum and only increases
	 * we only care about top bound. */</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>currentId</name></name> <operator>&gt;</operator> <name><name>op</name><operator>-&gt;</operator><name>maxId</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewNodeByIdSeekOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>, <parameter><decl><type><name>UnsignedRange</name> <modifier>*</modifier></type><name>id_range</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<decl_stmt><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NodeByIdSeek</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <name>alias</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>minId</name></name> <operator>=</operator> <ternary><condition><expr><name><name>id_range</name><operator>-&gt;</operator><name>include_min</name></name></expr> ?</condition><then> <expr><name><name>id_range</name><operator>-&gt;</operator><name>min</name></name></expr> </then><else>: <expr><name><name>id_range</name><operator>-&gt;</operator><name>min</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<comment type="block">/* The largest possible entity ID is the same as Graph_RequiredMatrixDim.
	 * This value will be set on Init, to allow operation clone be independent
	 * on the current graph size.*/</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>maxId</name></name> <operator>=</operator> <ternary><condition><expr><name><name>id_range</name><operator>-&gt;</operator><name>include_max</name></name></expr> ?</condition><then> <expr><name><name>id_range</name><operator>-&gt;</operator><name>max</name></name></expr> </then><else>: <expr><name><name>id_range</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>currentId</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>minId</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_NODE_BY_ID_SEEK</name></expr></argument>, <argument><expr><literal type="string">"NodeByIdSeek"</literal></expr></argument>, <argument><expr><name>NodeByIdSeekInit</name></expr></argument>,
				<argument><expr><name>NodeByIdSeekConsume</name></expr></argument>, <argument><expr><name>NodeByIdSeekReset</name></expr></argument>, <argument><expr><name>NodeByIdSeekToString</name></expr></argument>, <argument><expr><name>NodeByIdSeekClone</name></expr></argument>, <argument><expr><name>NodeByIdSeekFree</name></expr></argument>,
				<argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nodeRecIdx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>NodeByIdSeekInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_NODE_BY_ID_SEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByIdSeek</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// The largest possible entity ID is the number of nodes - deleted and real - in the DataBlock.</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>node_count</name> <init>= <expr><call><name>Graph_UncompactedNodeCount</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>maxId</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>node_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>maxId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>opBase</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_UpdateConsume</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>, <argument><expr><name>NodeByIdSeekConsumeFromChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Node</name></type> <name>_SeekNextNode</name><parameter_list>(<parameter><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* As long as we're within range bounds
	 * and we've yet to get a node. */</comment>
	<while>while<condition>(<expr><operator>!</operator><call><name>_outOfBounds</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>currentId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>currentId</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// Advance id for next consume call.</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>currentId</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByIdSeekConsumeFromChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByIdSeek</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>NodeByIdSeekReset</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name>_SeekNextNode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>n</name><operator>.</operator><name>attributes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <comment type="line">// Failed to retrieve a node.</comment>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Free old record.</comment>
		<comment type="line">// Pull a new record from child.</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// Child depleted.</comment>

		<comment type="line">// Reset iterator and evaluate again.</comment>
		<expr_stmt><expr><call><name>NodeByIdSeekReset</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>_SeekNextNode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>n</name><operator>.</operator><name>attributes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// Empty iterator; return immediately.</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Clone the held Record, as it will be freed upstream.</comment>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_DeepCloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Populate the Record with the actual node.</comment>
	<expr_stmt><expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>nodeRecIdx</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByIdSeekConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByIdSeek</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name>_SeekNextNode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>n</name><operator>.</operator><name>attributes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// Failed to retrieve a node.</comment>

	<comment type="line">// Create a new Record.</comment>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Populate the Record with the actual node.</comment>
	<expr_stmt><expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>nodeRecIdx</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>NodeByIdSeekReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByIdSeek</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>currentId</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>minId</name></name></expr>;</expr_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>NodeByIdSeekClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_NODE_BY_ID_SEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByIdSeek</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UnsignedRange</name></type> <name>range</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>range</name><operator>.</operator><name>min</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>minId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>maxId</name></name></expr>;</expr_stmt>
	<comment type="block">/* In order to clone the range set at the original op, the range must be inclusive so the clone will set the exact range as the original.
	 * During the call to NewNodeByIdSeekOp with the range, the following lines are executed:
	 * op-&gt;minId = id_range-&gt;include_min ? id_range-&gt;min : id_range-&gt;min + 1;
	 * op-&gt;maxId = id_range-&gt;include_max ? id_range-&gt;max : id_range-&gt;max - 1;
	 * Since the range object min equals to the origin minId, and so is the max equals to the origin maxId, and the range is inclusive
	 * the clone will set its values to be the same as in the origin. */</comment>
	<expr_stmt><expr><name><name>range</name><operator>.</operator><name>include_min</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range</name><operator>.</operator><name>include_max</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><call><name>NewNodeByIdSeekOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>NodeByIdSeekFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByIdSeek</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByIdSeek</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
