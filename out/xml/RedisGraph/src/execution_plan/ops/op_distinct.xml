<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_distinct.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_distinct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_project.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_aggregate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xxhash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>DistinctConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>DistinctClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DistinctFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// compute hash on distinct values</comment>
<comment type="line">// values that are required to be distinct are located at 'offset'</comment>
<comment type="line">// positions within the record</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>_compute_hash</name><parameter_list>(<parameter><decl><type><name>OpDistinct</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// initialize the hash state</comment>
	<decl_stmt><decl><type><name>XXH64_state_t</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XXH_errorcode</name></type> <name>res</name> <init>= <expr><call><name>XXH64_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>XXH_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>offset_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// retrieve the entry at 'idx' as an SIValue</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>idx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><call><name>Record_Get</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// update the hash state with the current value.</comment>
		<expr_stmt><expr><call><name>SIValue_HashUpdate</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// finalize the hash</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <specifier>const</specifier></type> <name>hash</name> <init>= <expr><call><name>XXH64_digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// compute record offset to distinct values</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_updateOffsets</name><parameter_list>(<parameter><decl><type><name>OpDistinct</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aliases</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>offsets</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>offset_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>offset</name> <init>= <expr><call><name>Record_GetEntryIdx</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>offset</name> <operator>!=</operator> <name>INVALID_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewDistinctOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>aliases</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>alias_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>aliases</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>alias_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpDistinct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpDistinct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>found</name></name>           <operator>=</operator>  <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mapping</name></name>         <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>aliases</name></name>         <operator>=</operator>  <call><name>rm_malloc</name><argument_list>(<argument><expr><name>alias_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offset_count</name></name>    <operator>=</operator>  <name>alias_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offsets</name></name>         <operator>=</operator>  <call><name>rm_calloc</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>offset_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Copy aliases into heap array managed by this op</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>, <argument><expr><name>aliases</name></expr></argument>, <argument><expr><name>alias_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_DISTINCT</name></expr></argument>, <argument><expr><literal type="string">"Distinct"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DistinctConsume</name></expr></argument>,
				<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DistinctClone</name></expr></argument>, <argument><expr><name>DistinctFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>DistinctConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpDistinct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpDistinct</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// update offsets if record mapping changed</comment>
		<comment type="line">// it is possible for the record's mapping to be changed throughtout</comment>
		<comment type="line">// the execution as this distinct operation might recieve records from</comment>
		<comment type="line">// different sub execution plans, such as in the case of UNION</comment>
		<comment type="line">// in which case the distinct values might be located at different offsets</comment>
		<comment type="line">// within the record and we should adjust accordingly</comment>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>record_mapping</name> <init>= <expr><call><name>Record_GetMappings</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>record_mapping</name> <operator>!=</operator> <name><name>op</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// record mapping changed, update offsets</comment>
			<expr_stmt><expr><call><name>_updateOffsets</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// update operation mapping to records mapping</comment>
			<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <name>record_mapping</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <specifier>const</specifier></type> <name>hash</name> <init>= <expr><call><name>_compute_hash</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>is_new</name> <init>= <expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>found</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>is_new</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>DistinctClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_DISTINCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpDistinct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpDistinct</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>NewDistinctOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>offset_count</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DistinctFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpDistinct</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpDistinct</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>found</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>found</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>aliases</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>aliases</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>offsets</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>offsets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
