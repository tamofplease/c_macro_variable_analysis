<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_node_by_label_scan.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_node_by_label_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shared/print_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>NodeByLabelScanInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByLabelScanConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByLabelScanConsumeFromChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByLabelScanNoOp</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>NodeByLabelScanReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>NodeByLabelScanClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>NodeByLabelScanFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>NodeByLabelScanToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>sds</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ScanToString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// update the label-id of a cached operation, as it may have not </comment>
<comment type="line">// been known when the plan was prepared.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_update_label_id</name><parameter_list>(<parameter><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name> <operator>!=</operator> <name>GRAPH_UNKNOWN_LABEL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name> <operator>=</operator> <call><name>Schema_GetID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewNodeByLabelScanOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>NodeScanCtx</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NodeByLabelScan</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<comment type="line">// Defaults to [0...UINT64_MAX].</comment>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name></name> <operator>=</operator> <call><name>UnsignedRange_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_update_label_id</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Set our Op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_NODE_BY_LABEL_SCAN</name></expr></argument>, <argument><expr><literal type="string">"Node By Label Scan"</literal></expr></argument>, <argument><expr><name>NodeByLabelScanInit</name></expr></argument>,
				<argument><expr><name>NodeByLabelScanConsume</name></expr></argument>, <argument><expr><name>NodeByLabelScanReset</name></expr></argument>, <argument><expr><name>NodeByLabelScanToString</name></expr></argument>, <argument><expr><name>NodeByLabelScanClone</name></expr></argument>,
				<argument><expr><name>NodeByLabelScanFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>nodeRecIdx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>NodeByLabelScanOp_SetIDRange</name><parameter_list>(<parameter><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>UnsignedRange</name> <modifier>*</modifier></type><name>id_range</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>UnsignedRange_Free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name></name> <operator>=</operator> <call><name>UnsignedRange_Clone</name><argument_list>(<argument><expr><name>id_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>OPType_NODE_BY_LABEL_AND_ID_SCAN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"Node By Label and ID Scan"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>_ConstructIterator</name><parameter_list>(<parameter><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeID</name></type> <name>minId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeID</name></type> <name>maxId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GraphContext</name>  <modifier>*</modifier></type><name>gc</name>  <init>=  <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>     <name>L</name>    <init>=  <expr><call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_Matrix_nrows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// make sure range is within matrix bounds</comment>
	<expr_stmt><expr><call><name>UnsignedRange_TightenRange</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name></name></expr></argument>, <argument><expr><name>OP_GE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnsignedRange_TightenRange</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name></name></expr></argument>, <argument><expr><name>OP_LT</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>UnsignedRange_IsValid</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>GrB_DIMENSION_MISMATCH</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>include_min</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minId</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>minId</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>min</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>include_max</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxId</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>maxId</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_MatrixTupleIter_AttachRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>minId</name></expr></argument>, <argument><expr><name>maxId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>NodeByLabelScanInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>OpBase_UpdateConsume</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>, <argument><expr><name>NodeByLabelScanConsume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Default consume function.</comment>

	<comment type="line">// Operation has children, consume from child.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>opBase</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_UpdateConsume</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>, <argument><expr><name>NodeByLabelScanConsumeFromChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>OP_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name> <operator>==</operator> <name>GRAPH_UNKNOWN_LABEL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Missing schema, use the NOP consume function.</comment>
		<expr_stmt><expr><call><name>OpBase_UpdateConsume</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>, <argument><expr><name>NodeByLabelScanNoOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>OP_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>	

	<comment type="line">// The iterator build may fail if the ID range does not match the matrix dimensions.</comment>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>iterator_built</name> <init>= <expr><call><name>_ConstructIterator</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>iterator_built</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Invalid range, use the NOP consume function.</comment>
		<expr_stmt><expr><call><name>OpBase_UpdateConsume</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>, <argument><expr><name>NodeByLabelScanNoOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>OP_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_UpdateRecord</name><parameter_list>(<parameter><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>node_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Populate the Record with the graph entity data.</comment>
	<decl_stmt><decl><type><name>Node</name></type> <name>n</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Record_AddNode</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>nodeRecIdx</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_ResetIterator</name><parameter_list>(<parameter><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// reset the range iterator</comment>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>minId</name> <init>= <expr><ternary><condition><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>include_min</name></name></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>min</name></name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>min</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>maxId</name> <init>= <expr><ternary><condition><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>include_max</name></name></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>max</name></name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
		<expr_stmt><expr><call><name>RG_MatrixTupleIter_iterate_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>minId</name></expr></argument>, <argument><expr><name>maxId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// invalid schema, our consume function is NOP</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>id_range</name></name> <operator>=</operator> <call><name>UnsignedRange_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>GrB_Info</name></type> <name>iterator_built</name> <init>= <expr><call><name>_ConstructIterator</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// if the iterator is invalid, our consume function is NOP</comment>
		<if_stmt><if>if<condition>(<expr><name>iterator_built</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByLabelScanConsumeFromChild</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Try to get new nodeID.</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nodeId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>RG_MatrixTupleIter_next_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodeId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>info</name> <operator>==</operator> <name>GxB_EXHAUSTED</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Try to get a record.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="line">// Got a record.</comment>
		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_NULL_POINTER</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>_update_label_id</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>_ConstructIterator</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Iterator depleted - reset.</comment>
			<expr_stmt><expr><call><name>_ResetIterator</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="line">// Try to get new NodeID.</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_MatrixTupleIter_next_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodeId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// We've got a record and NodeID.</comment>
	<comment type="line">// Clone the held Record, as it will be freed upstream.</comment>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_DeepCloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Populate the Record with the actual node.</comment>
	<expr_stmt><expr><call><name>_UpdateRecord</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>nodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByLabelScanConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nodeId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>RG_MatrixTupleIter_next_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodeId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GxB_EXHAUSTED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>OpBase_CreateRecord</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Populate the Record with the actual node.</comment>
	<expr_stmt><expr><call><name>_UpdateRecord</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>nodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function is invoked when the op has no children and no valid label is requested (either no label, or non existing label).
 * The op simply needs to return NULL */</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>NodeByLabelScanNoOp</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>NodeByLabelScanReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Free old record.</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>_ResetIterator</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>NodeByLabelScanClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_NODE_BY_LABEL_SCAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>NewNodeByLabelScanOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>NodeByLabelScanFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>nodeByLabelScan</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>op</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>RG_MatrixTupleIter_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>nodeByLabelScan</name><operator>-&gt;</operator><name>iter</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>nodeByLabelScan</name><operator>-&gt;</operator><name>child_record</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>nodeByLabelScan</name><operator>-&gt;</operator><name>child_record</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nodeByLabelScan</name><operator>-&gt;</operator><name>child_record</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>nodeByLabelScan</name><operator>-&gt;</operator><name>id_range</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>UnsignedRange_Free</name><argument_list>(<argument><expr><name><name>nodeByLabelScan</name><operator>-&gt;</operator><name>id_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nodeByLabelScan</name><operator>-&gt;</operator><name>id_range</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
