<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_update.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_update.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_expression.h"</cpp:file></cpp:include>

<comment type="block">/* Forward declarations. */</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>UpdateInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>UpdateConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>UpdateReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>UpdateClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>_handoff</name><parameter_list>(<parameter><decl><type><name>OpUpdate</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* TODO: poping a record out of op-&gt;records
	 * will reverse the order in which records
	 * are passed down the execution plan. */</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>&amp;&amp;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewUpdateOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>update_exps</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpUpdate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpUpdate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name>            <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name>       <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name>       <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>updates_committed</name></name>  <operator>=</operator>  <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>update_ctxs</name></name>        <operator>=</operator>  <name>update_exps</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>gc</name></name>                 <operator>=</operator>  <call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set our op operations</comment>
	<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_UPDATE</name></expr></argument>, <argument><expr><literal type="string">"Update"</literal></expr></argument>, <argument><expr><name>UpdateInit</name></expr></argument>, <argument><expr><name>UpdateConsume</name></expr></argument>,
				<argument><expr><name>UpdateReset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>UpdateClone</name></expr></argument>, <argument><expr><name>UpdateFree</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// iterate over all update expressions</comment>
	<comment type="line">// set the record index for every entity modified by this operation</comment>
	<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>it</name></name></expr></argument>, <argument><expr><name>update_exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>it</name></name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>it</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>record_idx</name></name> <operator>=</operator> <call><name>OpBase_Modifies</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>UpdateInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpUpdate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpUpdate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name>         <operator>=</operator>  <call><name>QueryCtx_GetResultSetStatistics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name>       <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name>  <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>PendingUpdateCtx</name></expr></argument>, <argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>update_ctxs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name>  <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>PendingUpdateCtx</name></expr></argument>, <argument><expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>update_ctxs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>UpdateConsume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpUpdate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpUpdate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name></decl>;</decl_stmt>

	<comment type="line">// updates already performed</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>updates_committed</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<while>while<condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Record_PersistScalars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// evaluate update expressions</comment>
		<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>it</name></name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>it</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>EvalEntityUpdates</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	
	<decl_stmt><decl><type><name>uint</name></type> <name>node_updates_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>edge_updates_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>node_updates_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>edge_updates_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// done reading; we're not going to call Consume any longer</comment>
		<comment type="line">// there might be operations like "Index Scan" that need to free the</comment>
		<comment type="line">// index R/W lock - as such, free all ExecutionPlan operations up the chain.</comment>
		<expr_stmt><expr><call><name>OpBase_PropagateReset</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// lock everything</comment>
		<expr_stmt><expr><call><name>QueryCtx_LockForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CommitUpdates</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr></argument>, <argument><expr><name>ENTITY_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CommitUpdates</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr></argument>, <argument><expr><name>ENTITY_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_updates_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>pending_update</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
		
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_updates_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>pending_update</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>updates_committed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><call><name>_handoff</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>UpdateClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpUpdate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpUpdate</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>update_ctxs</name> <init>= <expr><call><name>raxCloneWithCallback</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>update_ctxs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>UpdateCtx_Clone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>NewUpdateOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>update_ctxs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>UpdateReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpUpdate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpUpdate</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>node_updates_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_updates_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>pending_update</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>edge_updates_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_updates_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>pending_update</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>updates_committed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpUpdate</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpUpdate</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>node_updates_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_updates_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>pending_update</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>node_updates</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>edge_updates_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_updates_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PendingUpdateCtx</name> <modifier>*</modifier></type><name>pending_update</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>AttributeSet_Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_update</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>edge_updates</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// free each update context</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>update_ctxs</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>update_ctxs</name></name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>UpdateCtx_Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>update_ctxs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>records_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>records_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>records</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op</name><operator>-&gt;</operator><name>it</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
