<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/ops/op_apply_multiplexer.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"op_apply_multiplexer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="line">// Forward declerations.</comment>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>OpApplyMultiplexerInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>OrMultiplexer_Consume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Record</name></type> <name>AndMultiplexer_Consume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpResult</name></type> <name>OpApplyMultiplexerReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>OpApplyMultiplexerClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OpApplyMultiplexerFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>_pullFromBranchStream</name><parameter_list>(<parameter><decl><type><name>OpApplyMultiplexer</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>branch_index</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Propegate record to the top of the match stream.</comment>
	<expr_stmt><expr><call><name>Argument_AddRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>branch_arguments</name><index>[<expr><name>branch_index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>OpBase_Consume</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><name>branch_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>OpBase</name> <modifier>*</modifier></type><name>NewApplyMultiplexerOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>AST_Operator</name></type> <name>boolean_operator</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<decl_stmt><decl><type><name>OpApplyMultiplexer</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpApplyMultiplexer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>boolean_operator</name></name> <operator>=</operator> <name>boolean_operator</name></expr>;</expr_stmt>
	<comment type="line">// Set our Op operations</comment>
	<if_stmt><if>if<condition>(<expr><name>boolean_operator</name> <operator>==</operator> <name>OP_OR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_OR_APPLY_MULTIPLEXER</name></expr></argument>, <argument><expr><literal type="string">"OR Apply Multiplexer"</literal></expr></argument>,
					<argument><expr><name>OpApplyMultiplexerInit</name></expr></argument>, <argument><expr><name>OrMultiplexer_Consume</name></expr></argument>, <argument><expr><name>OpApplyMultiplexerReset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					<argument><expr><name>OpApplyMultiplexerClone</name></expr></argument>, <argument><expr><name>OpApplyMultiplexerFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>boolean_operator</name> <operator>==</operator> <name>OP_AND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_Init</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>op</name></expr></argument>, <argument><expr><name>OPType_AND_APPLY_MULTIPLEXER</name></expr></argument>, <argument><expr><literal type="string">"AND Apply Multiplexer"</literal></expr></argument>,
					<argument><expr><name>OpApplyMultiplexerInit</name></expr></argument>, <argument><expr><name>AndMultiplexer_Consume</name></expr></argument>, <argument><expr><name>OpApplyMultiplexerReset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					<argument><expr><name>OpApplyMultiplexerClone</name></expr></argument>, <argument><expr><name>OpApplyMultiplexerFree</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"apply multiplexer boolean operator should be AND or OR only"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator> <name>op</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Sorts the multiplexer children. Apply operations to the very end (rightmost),
 * filter operations to the beginning (leftmost).
 * The filter operations evaluted faster then the apply operations so we want to evaluate them first. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_OpApplyMultiplexer_SortChildren</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// The 0 child is the bounded branch of this operation, which consumes the record and is set on execution_plan_reduce_to_apply.c</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Push apply ops to the end.</comment>
		<if_stmt><if>if<condition>(<expr><call><name>OP_IS_APPLY</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// From current position to the end, search for filter op.</comment>
			<decl_stmt><decl><type><name>bool</name></type> <name>swapped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>candidate</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>candidate</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>candidate</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>swapped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<comment type="line">// No swap occurred, everything is sorted.</comment>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name>swapped</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* In this init function, the children 1..n are sorted such that branches which are filter ops will be placed at
 * the begining of the children array, and branches which are apply ops will be placed at the end of the children array,
 * since filters are easier to evalute. For each branch the init function will collect it argument op, for the injection of
 * the bounded branch record. */</comment>
<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>OpApplyMultiplexerInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Sort children.</comment>
	<expr_stmt><expr><call><name>_OpApplyMultiplexer_SortChildren</name><argument_list>(<argument><expr><name>opBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpApplyMultiplexer</name> <modifier>*</modifier></type><name>apply_multiplexer</name> <init>= <expr><operator>(</operator><name>OpApplyMultiplexer</name> <operator>*</operator><operator>)</operator> <name>opBase</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Set up bounded branch. The bounded branch is set as the first child during the operation building procedure at
	 * execution_plan_reduce_to_apply.c */</comment>
	<expr_stmt><expr><name><name>apply_multiplexer</name><operator>-&gt;</operator><name>bound_branch</name></name> <operator>=</operator> <name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>apply_multiplexer</name><operator>-&gt;</operator><name>bound_branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>childCount</name> <init>= <expr><name><name>opBase</name><operator>-&gt;</operator><name>childCount</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// For every child, find its argument op for record injection.</comment>
	<expr_stmt><expr><name><name>apply_multiplexer</name><operator>-&gt;</operator><name>branch_arguments</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>Argument</name> <operator>*</operator></expr></argument>, <argument><expr><name>childCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>childCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>opBase</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Argument</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>Argument</name> <operator>*</operator><operator>)</operator><call><name>ExecutionPlan_LocateOp</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>OPType_ARGUMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>apply_multiplexer</name><operator>-&gt;</operator><name>branch_arguments</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>OrMultiplexer_Consume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpApplyMultiplexer</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpApplyMultiplexer</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Try to get a record from bound stream.</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>bound_branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// Depleted.</comment>

		<comment type="line">// Try to get a record from some stream.</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>branch_record</name> <init>= <expr><call><name>_pullFromBranchStream</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>branch_record</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// Don't care about the branch record.</comment>
				<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>branch_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>   <comment type="line">// Null to avoid double free.</comment>
				<return>return <expr><name>r</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<comment type="line">// Did not managed to get a record from any branch, loop back and restart.</comment>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Record</name></type> <name>AndMultiplexer_Consume</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpApplyMultiplexer</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpApplyMultiplexer</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Try to get a record from bound stream.</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>bound_branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// Depleted.</comment>

		<comment type="line">// Try to get a record from some stream.</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Record</name></type> <name>branch_record</name> <init>= <expr><call><name>_pullFromBranchStream</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Don't care about the branch record.</comment>
			<if_stmt><if>if<condition>(<expr><name>branch_record</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name>branch_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else <block>{<block_content>
				<comment type="line">// Did not managed to get a record from some branch, loop back and restart.</comment>
				<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		<comment type="line">// All branches returned record =&gt; all filters are satisfied by the bounded record.</comment>
		<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>   <comment type="line">// Null to avoid double free.</comment>
		<return>return <expr><name>r</name></expr>;</return>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpResult</name></type> <name>OpApplyMultiplexerReset</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpApplyMultiplexer</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpApplyMultiplexer</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>OP_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>OpApplyMultiplexerClone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_OR_APPLY_MULTIPLEXER</name> <operator>||</operator> <name><name>opBase</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_AND_APPLY_MULTIPLEXER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpApplyMultiplexer</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpApplyMultiplexer</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>NewApplyMultiplexerOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>boolean_operator</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OpApplyMultiplexerFree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opBase</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpApplyMultiplexer</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>OpApplyMultiplexer</name> <operator>*</operator><operator>)</operator><name>opBase</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>branch_arguments</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>branch_arguments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>branch_arguments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>OpBase_DeleteRecord</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
