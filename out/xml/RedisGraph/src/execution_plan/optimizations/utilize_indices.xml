<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/utilize_indices.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_shared.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../datatypes/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../datatypes/point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_node_by_label_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_node_by_index_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_node_by_label_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_edge_by_index_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_conditional_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_conditional_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_op.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../filter_tree/filter_tree_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/algebraic_expression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/algebraic_expression/utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Filter normalization</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// modifies filter tree such that the left hand side performs</comment>
<comment type="line">// attribute lookup on 'filtered_entity'</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_normalize_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filtered_entity</name></decl></parameter>,
		<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter_tree</name> <init>= <expr><operator>*</operator><name>filter</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>swap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>entities</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// normalize, left hand side should be variadic, right hand side const</comment>
	<switch>switch<condition>(<expr><name><name>filter_tree</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>FT_N_PRED</name></expr>:</case>
		<expr_stmt><expr><name>entities</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>filter</name><operator>)</operator><operator>-&gt;</operator><name><name>pred</name><operator>.</operator><name>rhs</name></name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AR_EXP_CollectEntities</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>swap</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>filtered_entity</name></expr></argument>,
				<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>filter_tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>filter_tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name> <operator>=</operator> <name><name>filter_tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>lhs</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>filter_tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>lhs</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>filter_tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name> <operator>=</operator> <call><name>ArithmeticOp_ReverseOp</name><argument_list>(<argument><expr><name><name>filter_tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<break>break;</break>
	<case>case <expr><name>FT_N_COND</name></expr>:</case>
		<expr_stmt><expr><call><name>_normalize_filter</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter_tree</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_normalize_filter</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter_tree</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>FT_N_EXP</name></expr>:</case>
		<comment type="line">// NOP, expression already normalized</comment>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Validation functions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_validateInExpression</name><parameter_list>(<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>child_count</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>listValue</name> <init>= <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AR_EXP_ReduceToScalar</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>listValue</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_ARRAY</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>list_len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>listValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>list_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>listValue</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Ignore everything other than number, strings and booleans.</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>SI_NUMERIC</name> <operator>|</operator> <name>T_STRING</name> <operator>|</operator> <name>T_BOOL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return true if filter can be resolved by an index query</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_applicable_predicate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filtered_entity</name></decl></parameter>,
		<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>res</name>              <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name>  <modifier>*</modifier></type><name>exp</name>      <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name>  <modifier>*</modifier></type><name>lhs_exp</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name>  <modifier>*</modifier></type><name>rhs_exp</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>isInFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_validateInExpression</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>exp</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>isDistanceFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch<condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>t</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>FT_N_PRED</name></expr>:</case>
		<expr_stmt><expr><name>lhs_exp</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>lhs</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rhs_exp</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name></expr>;</expr_stmt>
		<comment type="line">// filter should be in the form of:</comment>
		<comment type="line">//</comment>
		<comment type="line">// attr_lookup OP exp</comment>
		<comment type="line">// or</comment>
		<comment type="line">// exp OP attr_lookup</comment>
		<comment type="line">//</comment>
		<comment type="line">// find out which part of the filter performs entity attribute access</comment>

		<comment type="line">// make sure filtered entity isn't mentioned on both ends of the filter</comment>
		<comment type="line">// n.v = n.x</comment>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>aliases</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>mentioned_on_lhs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>mentioned_on_rhs</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>AR_EXP_CollectEntities</name><argument_list>(<argument><expr><name>lhs_exp</name></expr></argument>, <argument><expr><name>aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mentioned_on_lhs</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>filtered_entity</name></expr></argument>,
				<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>filtered_entity</name></expr></argument>,
				<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>AR_EXP_CollectEntities</name><argument_list>(<argument><expr><name>rhs_exp</name></expr></argument>, <argument><expr><name>aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mentioned_on_rhs</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>filtered_entity</name></expr></argument>,
				<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>mentioned_on_lhs</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name>mentioned_on_rhs</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>AR_EXP_IsAttribute</name><argument_list>(<argument><expr><name>lhs_exp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>exp</name> <operator>=</operator> <name>rhs_exp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>      <comment type="line">// n.v = exp</comment>
		<comment type="line">// filter is not of the form n.v = exp or exp = n.v</comment>
		<if_stmt><if>if<condition>(<expr><name>exp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// determine whether 'exp' represents a scalar</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>scalar</name> <init>= <expr><call><name>AR_EXP_ReduceToScalar</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>scalar</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// validate constant type</comment>
			<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <operator>(</operator><name>SI_NUMERIC</name> <operator>|</operator> <name>T_STRING</name> <operator>|</operator> <name>T_BOOL</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// value type can only be determined at runtime!</comment>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<break>break;</break>
	<case>case <expr><name>FT_N_COND</name></expr>:</case>
		<comment type="line">// require both ends of the filter to be applicable</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><call><name>_applicable_predicate</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<call><name>_applicable_predicate</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// checks to see if given filter can be resolved by index</comment>
<function><type><name>bool</name></type> <name>_applicableFilter</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filtered_entity</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>filter</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>           <name>res</name>           <init>=  <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name>            <modifier>*</modifier></type><name>attr</name>         <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name>            <modifier>*</modifier></type><name>entities</name>     <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FT_FilterNode</name>  <modifier>*</modifier></type><name>filter_tree</name>  <init>=  <expr><operator>*</operator><name>filter</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// prepare it befor checking if applicable.</comment>
	<expr_stmt><expr><call><name>_normalize_filter</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// make sure the filter root is not a function, other then IN or distance</comment>
	<comment type="line">// make sure the "not equal, &lt;&gt;" operator isn't used</comment>
	<if_stmt><if>if<condition>(<expr><call><name>FilterTree_containsOp</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>, <argument><expr><name>OP_NEQUAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_applicable_predicate</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>, <argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>idx_fields_count</name> <init>= <expr><call><name>Index_FieldsCount</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>IndexField</name> <modifier>*</modifier></type><name>idx_fields</name> <init>= <expr><call><name>Index_GetFields</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// make sure all filtered attributes are indexed</comment>
	<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>FilterTree_CollectAttributes</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>filter_attribute_count</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<comment type="line">// No attributes to filter on</comment>
	<if_stmt><if>if<condition>(<expr><name>filter_attribute_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Filter refers to a greater number of attributes.</comment>
	<if_stmt><if>if<condition>(<expr><name>filter_attribute_count</name> <operator>&gt;</operator> <name>idx_fields_count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx_fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>IndexField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name>idx_fields</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>filter_attribute_count</name><operator>--</operator></expr>;</expr_stmt>
			<comment type="line">// All filtered attributes are indexed.</comment>
			<if_stmt><if>if<condition>(<expr><name>filter_attribute_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><name>filter_attribute_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
	<if_stmt><if>if<condition>(<expr><name>attr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns an array of filter operations which can be</comment>
<comment type="line">// reduced into a single index scan operation</comment>
<function><type><name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>_applicableFilters</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filtered_entity</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>filters</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>OpFilter</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// we want to find predicate filters that modify the active entity</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>current</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>_applicableFilter</name><argument_list>(<argument><expr><name>filtered_entity</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>filterTree</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// advance to the next operation</comment>
		<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>filters</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>_Concat_Filters</name><parameter_list>(<parameter><decl><type><name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>filter_ops</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>filter_ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>FilterTree_Clone</name><argument_list>(<argument><expr><name><name>filter_ops</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>filterTree</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// concat using AND nodes</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>FilterTree_CreateConditionFilter</name><argument_list>(<argument><expr><name>OP_AND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
			<argument><expr><call><name>FilterTree_Clone</name><argument_list>(<argument><expr><name><name>filter_ops</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>filterTree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
			<argument><expr><call><name>FilterTree_Clone</name><argument_list>(<argument><expr><name><name>filter_ops</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>filterTree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// new and root node</comment>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>and</name> <init>= <expr><call><name>FilterTree_CreateConditionFilter</name><argument_list>(<argument><expr><name>OP_AND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>(<argument><expr><name>and</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>root</name> <operator>=</operator> <name>and</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
				<argument><expr><call><name>FilterTree_Clone</name><argument_list>(<argument><expr><name><name>filter_ops</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>filterTree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// try to replace given Label Scan operation and a set of Filter operations with</comment>
<comment type="line">// a single Index Scan operation</comment>
<function><type><name>void</name></type> <name>reduce_scan_op</name>
<parameter_list>(
	<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
	<parameter><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// in the multi-label case, we want to pick the label which will allow us to</comment>
	<comment type="line">// both utilize an index and iterate over the fewest values</comment>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name>  <init>=  <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name>        <modifier>*</modifier></type><name>g</name>   <init>=  <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryGraph</name>   <modifier>*</modifier></type><name>qg</name>  <init>=  <expr><name><name>scan</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// find label with filtered indexed properties</comment>
	<comment type="line">// that has the minimum NNZ entries</comment>
	<decl_stmt><decl><type><name>int</name></type>         <name>min_label_id</name></decl>;</decl_stmt>                 <comment type="line">// tracks min label ID</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type>    <name>min_nnz</name>        <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>  <comment type="line">// tracks min entries</comment>
	<decl_stmt><decl><type><name>RSIndex</name>     <modifier>*</modifier></type><name>rs_idx</name>        <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>        <comment type="line">// the index to be applied</comment>
	<decl_stmt><decl><type><name>OpFilter</name>    <modifier>*</modifier><modifier>*</modifier></type><name>filters</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>        <comment type="line">// tracks indexed filters to apply</comment>
	<decl_stmt><decl><type><name>uint</name></type>        <name>filters_count</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="line">// number of matching filters</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  <modifier>*</modifier></type><name>min_label_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>        <comment type="line">// tracks min label name</comment>

	<comment type="line">// see if scanned node has multiple labels</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_alias</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>qn</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>node_alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qn</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>nnz</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>label_id</name> <init>= <expr><call><name>QGNode_GetLabelID</name><argument_list>(<argument><expr><name>qn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><call><name>QGNode_GetLabel</name><argument_list>(<argument><expr><name>qn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// unknown label</comment>
		<if_stmt><if>if<condition>(<expr><name>label_id</name> <operator>==</operator> <name>GRAPH_UNKNOWN_LABEL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>GraphContext_GetIndexByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_EXACT_MATCH</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// no index for current label</comment>
		<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// get all applicable filter for index</comment>
		<decl_stmt><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>cur_idx</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// TODO switch to reusable array</comment>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur_filters</name> <init>= <expr><call><name>_applicableFilters</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>scan</name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// TODO consider heuristic which combines max</comment>
		<comment type="line">// number / restrictiveness of applicable filters</comment>
		<comment type="line">// vs. the label's NNZ?</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>cur_filters_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>cur_filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>cur_filters_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// no filters</comment>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>cur_filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>nnz</name> <operator>=</operator> <call><name>Graph_LabeledNodeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>min_nnz</name> <operator>&gt;</operator> <name>nnz</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>rs_idx</name>         <operator>=</operator>  <name>cur_idx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>min_nnz</name>        <operator>=</operator>  <name>nnz</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>min_label_str</name>  <operator>=</operator>  <name>label</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>min_label_id</name>   <operator>=</operator>  <name>label_id</name></expr>;</expr_stmt>

			<comment type="line">// swap previously stored index and</comment>
			<comment type="line">// filters array (if any) with current filters</comment>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>filters</name> <operator>=</operator> <name>cur_filters</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>filters_count</name> <operator>=</operator> <name>cur_filters_count</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// no label possessed indexed and filtered attributes, return early</comment>
	<if_stmt><if>if<condition>(<expr><name>rs_idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

	<comment type="line">// did we found a better label to utilize? if so swap</comment>
	<if_stmt><if>if<condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name> <operator>!=</operator> <name>min_label_id</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// the scanned label does not match the one we will build an</comment>
		<comment type="line">// index scan over, update the traversal expression to</comment>
		<comment type="line">// remove the indexed label and insert the previously-scanned label</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// skip filters</comment>
		<while>while<condition>(<expr><call><name>OpBase_Type</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if<condition>(<expr><call><name>OpBase_Type</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPType_CONDITIONAL_TRAVERSE</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op_traverse</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name><operator>*</operator><operator>)</operator><name>parent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name> <init>= <expr><name><name>op_traverse</name><operator>-&gt;</operator><name>ae</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>

			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>row_domain</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column_domain</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>AlgebraicExpression_LocateOperand</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>operand</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					<argument><expr><name>row_domain</name></expr></argument>, <argument><expr><name>column_domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>min_label_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>replacement</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
					<argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>_AlgebraicExpression_InplaceRepurpose</name><argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>min_label_str</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name> <operator>=</operator> <name>min_label_id</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>_Concat_Filters</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>indexOp</name> <init>= <expr><call><name>NewIndexScanOp</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name></name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>rs_idx</name></expr></argument>,
			<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// replace the redundant scan op with the newly-constructed Index Scan</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>scan</name></expr></argument>, <argument><expr><name>indexOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// remove and free all redundant filter ops</comment>
	<comment type="line">// since this is a chain of single-child operations</comment>
	<comment type="line">// all operations are replaced in-place</comment>
	<comment type="line">// avoiding problems with stream-sensitive ops like SemiApply</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filters_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// try to replace given Conditional Traverse operation and a set of Filter operations with</comment>
<comment type="line">// a single Index Scan operation</comment>
<function><type><name>void</name></type> <name>reduce_cond_op</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// make sure there's an index for scanned label</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>edge</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>QGEdge_RelationCount</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><call><name>QGEdge_Relation</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>GraphContext_GetIndex</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IDX_EXACT_MATCH</name></expr></argument>, <argument><expr><name>SCHEMA_EDGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// get all applicable filter for index</comment>
	<decl_stmt><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>rs_idx</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>filters</name> <init>= <expr><call><name>_applicableFilters</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>cond</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// no filters, return</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>filters_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>filters_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>_Concat_Filters</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>indexOp</name> <init>= <expr><call><name>NewEdgeIndexScanOp</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name></name></expr></argument>, <argument><expr><name><name>cond</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>rs_idx</name></expr></argument>,
			<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// The OPType_ALL_NODE_SCAN operation is redundant</comment>
	<comment type="line">// because OPType_EDGE_BY_INDEX_SCAN will resolve source nodes</comment>
	<if_stmt><if>if<condition>(<expr><name><name>cond</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>OPType_ALL_NODE_SCAN</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>allNodeScan</name> <init>= <expr><name><name>cond</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// remove all node scan op</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>allNodeScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>allNodeScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other_alias</name>  <init>=  <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name>     <modifier>*</modifier></type><name>other_node</name>   <init>=  <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><name>other_alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>other_node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>other_label_count</name>   <init>=  <expr><call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>other_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>other_label_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// create func expression</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_name</name> <init>= <expr><literal type="string">"hasLabels"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>AR_EXP_NewOpNode</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// create node expression</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>node_exp</name> <init>= <expr><call><name>AR_EXP_NewVariableOperandNode</name><argument_list>(<argument><expr><name>other_alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// create labels expression</comment>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>labels</name> <init>= <expr><call><name>SI_Array</name><argument_list>(<argument><expr><name>other_label_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>other_label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>labels</name></expr></argument>, <argument><expr><call><name>SI_ConstStringVal</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>other_node</name><operator>-&gt;</operator><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>labels_exp</name> <init>= <expr><call><name>AR_EXP_NewConstOperandNode</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// set function arguments</comment>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>node_exp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>labels_exp</name></expr>;</expr_stmt>

		<comment type="line">// create filter operation</comment>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><call><name>FilterTree_CreateExpressionFilter</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>NewFilterOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// replace the redundant scan op with the newly-constructed filter op and add Index Scan as child</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>cond</name></expr></argument>, <argument><expr><name>indexOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name>indexOp</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// replace the redundant scan op with the newly-constructed Index Scan</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>cond</name></expr></argument>, <argument><expr><name>indexOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// remove and free all redundant filter ops</comment>
	<comment type="line">// since this is a chain of single-child operations</comment>
	<comment type="line">// all operations are replaced in-place</comment>
	<comment type="line">// avoiding problems with stream-sensitive ops like SemiApply</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filters_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>utilizeIndices</name>
<parameter_list>(
	<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// return immediately if the graph has no indices</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>GraphContext_HasIndices</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// collect all label scans</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>scanOps</name> <init>= <expr><call><name>ExecutionPlan_CollectOps</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
			<argument><expr><name>OPType_NODE_BY_LABEL_SCAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>scanOpCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>scanOps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>scanOpCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>scanOp</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name><name>scanOps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// make sure scan is followed by filter(s)</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>scanOp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// no filters to utilize</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// try to reduce label scan + filter(s) to a single IndexScan operation</comment>
		<expr_stmt><expr><call><name>reduce_scan_op</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>scanOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// collect all conditional traverse</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>condOps</name> <init>= <expr><call><name>ExecutionPlan_CollectOps</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
			<argument><expr><name>OPType_CONDITIONAL_TRAVERSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>condOpCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>condOps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>condOpCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>condOp</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name><name>condOps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// try to reduce conditional travers + filter(s) to a single IndexScan operation</comment>
		<expr_stmt><expr><call><name>reduce_cond_op</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>condOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// cleanup</comment>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>scanOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>condOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
