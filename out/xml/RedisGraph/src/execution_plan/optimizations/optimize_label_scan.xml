<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/optimize_label_scan.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_node_by_label_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_conditional_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/algebraic_expression/utils.h"</cpp:file></cpp:include>

<comment type="line">// this optimization scans through each label-scan operation</comment>
<comment type="line">// in case the node being scaned is associated with multiple labels</comment>
<comment type="line">// e.g. MATCH (n:A:B) RETURN n</comment>
<comment type="line">// we will prefer to scan through the label with the least amount of nodes</comment>
<comment type="line">// for the above example if NNZ(A) &lt; NNZ(B) we will want to iterate over A</comment>
<comment type="line">//</comment>
<comment type="line">// in-case this optimization changed the label scanned e.g. from A to B</comment>
<comment type="line">// it will have to patch the following conditional traversal removing B operand</comment>
<comment type="line">// and adding A back</comment>
<comment type="line">//</comment>
<comment type="line">// consider MATCH (n:A:B)-[:R]-&gt;(m) RETURN m</comment>
<comment type="line">// </comment>
<comment type="line">// Scan(A)</comment>
<comment type="line">// Traverse B*R</comment>
<comment type="line">//</comment>
<comment type="line">// if we switch from Scan(A) to Scan(B)</comment>
<comment type="line">// we will have to update the traversal pattern from B*R to A*R</comment>
<comment type="line">//</comment>
<comment type="line">// Scan(B)</comment>
<comment type="line">// Traverse A*R</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_optimizeLabelScan</name><parameter_list>(<parameter><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>scan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	

	<decl_stmt><decl><type><name>OpBase</name>      <modifier>*</modifier></type><name>op</name>  <init>=  <expr><operator>(</operator><name>OpBase</name><operator>*</operator><operator>)</operator><name>scan</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name>       <modifier>*</modifier></type><name>g</name>   <init>=  <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryGraph</name>  <modifier>*</modifier></type><name>qg</name>  <init>=  <expr><name><name>op</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// see if scanned node has multiple labels</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_alias</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>qn</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>node_alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qn</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// return if node has only one label</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label_count</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>label_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// node has multiple labels</comment>
	<comment type="line">// find label with minimum entities</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type>    <name>min_nnz</name>       <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt> <comment type="line">// tracks min entries</comment>
	<decl_stmt><decl><type><name>int</name></type>         <name>min_label_id</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="line">// tracks min label ID</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>min_label_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>       <comment type="line">// tracks min label name</comment>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>nnz</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>label_id</name> <init>= <expr><call><name>QGNode_GetLabelID</name><argument_list>(<argument><expr><name>qn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>nnz</name> <operator>=</operator> <call><name>Graph_LabeledNodeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>label_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>min_nnz</name> <operator>&gt;</operator> <name>nnz</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// update minimum</comment>
			<expr_stmt><expr><name>min_nnz</name>        <operator>=</operator>  <name>nnz</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>min_label_id</name>   <operator>=</operator>  <name>label_id</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>min_label_str</name>  <operator>=</operator>  <call><name>QGNode_GetLabel</name><argument_list>(<argument><expr><name>qn</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// scanned label has the minimum number of entries</comment>
	<comment type="line">// no switching required</comment>
	<if_stmt><if>if<condition>(<expr><name>min_label_id</name> <operator>==</operator> <name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// patch following traversal, skip filters</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><call><name>OpBase_Type</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>OpBase_Type</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OPType_CONDITIONAL_TRAVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>op_traverse</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name><operator>*</operator><operator>)</operator><name>parent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name> <init>= <expr><name><name>op_traverse</name><operator>-&gt;</operator><name>ae</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>row_domain</name>    <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column_domain</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// locate the operand corresponding to the about to be replaced label</comment>
	<comment type="line">// in the parent operation (conditional traverse)</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>AlgebraicExpression_LocateOperand</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>operand</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><name>row_domain</name></expr></argument>, <argument><expr><name>column_domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>min_label_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// create a replacement operand for the migrated label matrix</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>replacement</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// swap current label with minimum label</comment>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name>    <operator>=</operator> <name>min_label_str</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label_id</name></name> <operator>=</operator> <name>min_label_id</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_AlgebraicExpression_InplaceRepurpose</name><argument_list>(<argument><expr><name>operand</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>optimizeLabelScan</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// collect all label scan operations</comment>
	<decl_stmt><decl><type><name>OPType</name></type> <name>t</name> <init>= <expr><name>OPType_NODE_BY_LABEL_SCAN</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>label_scan_ops</name> <init>= <expr><call><name>ExecutionPlan_CollectOpsMatchingType</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>t</name></expr></argument> ,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// for each label scan operation try to optimize scanned label</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>op_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>label_scan_ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>op_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>label_scan</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name><operator>*</operator><operator>)</operator><name><name>label_scan_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_optimizeLabelScan</name><argument_list>(<argument><expr><name>label_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>label_scan_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
