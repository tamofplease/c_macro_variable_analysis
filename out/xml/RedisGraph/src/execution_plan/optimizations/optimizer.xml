<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/optimizer.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./optimizations.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>optimizePlan</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// tries to compact filter trees, and remove redundant filters</comment>
	<expr_stmt><expr><call><name>compactFilters</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// scan optimizations order:</comment>
	<comment type="line">// 1. remove redundant scans which checks for the same node</comment>
	<comment type="line">// 2. try to use the indices</comment>
	<comment type="line">//    given a label scan and an indexed property, apply index scan</comment>
	<comment type="line">// 3. given a filter which checks id condition, and full or label scan</comment>
	<comment type="line">//    reduce it to id scan or label with id scan</comment>
	<comment type="line">//    note: due to the scan optimization order</comment>
	<comment type="line">//          label scan will be replaced with index scan when possible</comment>
	<comment type="line">//          so the id filter remains</comment>

	<comment type="line">// remove redundant SCAN operations</comment>
	<expr_stmt><expr><call><name>reduceScans</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// when possible, replace label scan and filter ops with index scans</comment>
	<expr_stmt><expr><call><name>utilizeIndices</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// scan label with least entities</comment>
	<expr_stmt><expr><call><name>optimizeLabelScan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// try to reduce SCAN + FILTER to a node seek operation</comment>
	<expr_stmt><expr><call><name>seekByID</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// migrate filters on variable-length edges into the traversal operations</comment>
	<expr_stmt><expr><call><name>filterVariableLengthEdges</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// try to optimize cartesian product</comment>
	<expr_stmt><expr><call><name>reduceCartesianProductStreamCount</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// try to match disjoint entities by applying a join</comment>
	<expr_stmt><expr><call><name>applyJoin</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// try to reduce a number of filters into a single filter op</comment>
	<expr_stmt><expr><call><name>reduceFilters</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// reduce traversals where both src and dest nodes are already resolved</comment>
	<comment type="line">// into an expand into operation</comment>
	<expr_stmt><expr><call><name>reduceTraversal</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// try to reduce distinct if it follows aggregation</comment>
	<expr_stmt><expr><call><name>reduceDistinct</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// try to reduce execution plan incase it perform node or edge counting</comment>
	<expr_stmt><expr><call><name>reduceCount</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// let operations know about specified limit(s)</comment>
	<expr_stmt><expr><call><name>applyLimit</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// let operations know about specified skip(s)</comment>
	<expr_stmt><expr><call><name>applySkip</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
