<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/reduce_filters.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../filter_tree/filter_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ast/ast_build_filter_tree.h"</cpp:file></cpp:include>

<comment type="block">/* The reduce filters optimizer scans an execution plans for
 * consecutive filter operations, these can be reduced down into
 * a single filter operation by ANDing their filter trees
 * Reducing the overall number of operations is expected to produce
 * faster execution time. */</comment>

<function><type><name>void</name></type> <name>_reduceFilter</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>parent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>filterTree</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Filter operation is promised to have only one child. */</comment>
	<while>while<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_FILTER</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>childFilter</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>child</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Create a new root for the tree, merge trees using an AND. */</comment>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>FilterTree_CreateConditionFilter</name><argument_list>(<argument><expr><name>OP_AND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>childFilter</name><operator>-&gt;</operator><name>filterTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tree</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

		<comment type="line">// Proceed.</comment>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// Did we performed a reduction?</comment>
	<if_stmt><if>if<condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>filterTree</name></name> <operator>!=</operator> <name>tree</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filterTree</name></name> <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
		<comment type="line">// Remove intermidate filter ops.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>intermidateChild</name> <init>= <expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>intermidateChild</name> <operator>!=</operator> <name>op</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>intermidateChild</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
			<comment type="line">// Remove the filter tree pointer from the intermediate op, as it should not be freed</comment>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>intermidateChild</name><operator>)</operator><operator>-&gt;</operator><name>filterTree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>intermidateChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>intermidateChild</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* child is the first operation we encountered which is not of type filter.
		 * update child parent to reduced filter op
		 * update reduced filter op child. */</comment>
		<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_reduceFilters</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_reduceFilter</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>_reduceFilters</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reduceFilters</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_reduceFilters</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
