<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/apply_join.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_value_hash_join.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_cartesian_product.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_RESOLVED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<comment type="block">/* applyJoin will try to locate situations where two disjoint
 * streams can be joined on a key attribute, in which case the
 * runtime complaxity is reduced from O(n^2) to O(nlogn + 2n)
 * consider MATCH (a), (b) where a.v = b.v RETURN a,b
 * prior to this optimization a and b will be combined via a
 * cartesian product O(n^2) because a and b are related,
 * we require a.v = b.v, v acts as a join key in which case
 * replacing the cartesian product by a join operation will
 * 1. consume N additional memory
 * 2. reduce the overall runtime by a factor of magnitude. */</comment>

<comment type="line">// To be used as a possible output of _relate_exp_to_stream.</comment>

<comment type="block" format="doxygen">/**
 * @brief Given an expression node from a filter tree, returns the stream number
 *        that fully resolves the expression's references.
 * @param  *exp: Filter tree expression node.
 * @param  **stream_entities: Streams to search the expressions referenced entities.
 * @param  stream_count: Amount of stream to search in (Left-to-Right).
 * @retval Stream index if found. NOT_RESOLVED if non of the stream resolve the expression.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_relate_exp_to_stream</name><parameter_list>(<parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier><modifier>*</modifier></type><name>stream_entities</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Collect the referenced entities in the expression.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>entities</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AR_EXP_CollectEntities</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>stream_num</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>stream_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>stream_num</name> <operator>&lt;</operator> <name>stream_count</name></expr>;</condition> <incr><expr><name>stream_num</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// See if the stream resolves all of the references.</comment>
		<if_stmt><if>if<condition>(<expr><call><name>raxIsSubset</name><argument_list>(<argument><expr><name><name>stream_entities</name><index>[<expr><name>stream_num</name></expr>]</index></name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>stream_num</name> <operator>==</operator> <name>stream_count</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NOT_RESOLVED</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// No single stream resolves all references.</comment>
	<return>return <expr><name>stream_num</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Tests to see if given filter can act as a join condition.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_applicableFilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_PRED</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>OP_EQUAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Collects all consecutive filters beneath given op.</comment>
<function><type><specifier>static</specifier> <name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>_locate_filters</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>filters</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>OpFilter</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>parent</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>_applicableFilter</name><argument_list>(<argument><expr><name><name>filter_op</name><operator>-&gt;</operator><name>filterTree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>filters</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// This function builds a Hash Join operation given its left and right branches and join criteria.</comment>
<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>_build_hash_join_op</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>left_branch</name></decl></parameter>,
								   <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>right_branch</name></decl></parameter>, <parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>lhs_join_exp</name></decl></parameter>, <parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>rhs_join_exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>value_hash_join</name></decl>;</decl_stmt>

	<comment type="block">/* The Value Hash Join will cache its left-hand stream. To reduce the cache size,
	 * prefer to cache the stream which will produce the smallest number of records.
	 * Our current heuristic for this is to prefer a stream which contains a filter operation. */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>left_branch_filtered</name> <init>= <expr><operator>(</operator><call><name>ExecutionPlan_LocateOp</name><argument_list>(<argument><expr><name>left_branch</name></expr></argument>, <argument><expr><name>OPType_FILTER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>right_branch_filtered</name> <init>= <expr><operator>(</operator><call><name>ExecutionPlan_LocateOp</name><argument_list>(<argument><expr><name>right_branch</name></expr></argument>, <argument><expr><name>OPType_FILTER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>left_branch_filtered</name> <operator>&amp;&amp;</operator> <name>right_branch_filtered</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Only the RHS stream is filtered, swap the input streams and expressions.</comment>
		<expr_stmt><expr><name>value_hash_join</name> <operator>=</operator> <call><name>NewValueHashJoin</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>rhs_join_exp</name></expr></argument>, <argument><expr><name>lhs_join_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>left_branch</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>left_branch</name> <operator>=</operator> <name>right_branch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>right_branch</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>value_hash_join</name> <operator>=</operator> <call><name>NewValueHashJoin</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>lhs_join_exp</name></expr></argument>, <argument><expr><name>rhs_join_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Add the detached streams to the join op.</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>value_hash_join</name></expr></argument>, <argument><expr><name>left_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>value_hash_join</name></expr></argument>, <argument><expr><name>right_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>value_hash_join</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Reduces a cartisian product to hash joins operations.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_reduce_cp_to_hashjoin</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Retrieve all equality filter operations located upstream from the Cartesian Product.</comment>
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>filter_ops</name> <init>= <expr><call><name>_locate_filters</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>filter_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>filter_ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// For each stream joined by the Cartesian product, collect all entities the stream resolves.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>stream_count</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>childCount</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name><name>stream_entities</name><index>[<expr><name>stream_count</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>stream_count</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>stream_entities</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stream_entities</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Try reduce the cartesian product to value hash join with the current filter.</comment>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><name><name>filter_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Each filter being considered here tests for equality between its left and right values.
		 * The Cartesian Product can be replaced if both sides of the filter can be fully and
		 * separately resolved by exactly two child streams. */</comment>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>filter_op</name><operator>-&gt;</operator><name>filterTree</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Make sure LHS of the filter is resolved by a stream. */</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>lhs</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>lhs_resolving_stream</name> <init>= <expr><call><name>_relate_exp_to_stream</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>stream_entities</name></expr></argument>, <argument><expr><name>stream_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>lhs_resolving_stream</name> <operator>==</operator> <name>NOT_RESOLVED</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="block">/* Make sure RHS of the filter is resolved by a stream. */</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>rhs_resolving_stream</name> <init>= <expr><call><name>_relate_exp_to_stream</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>stream_entities</name></expr></argument>, <argument><expr><name>stream_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>rhs_resolving_stream</name> <operator>==</operator> <name>NOT_RESOLVED</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// This filter is solved by a single cartesian product child and needs to be propagated up.</comment>
		<if_stmt><if>if<condition>(<expr><name>lhs_resolving_stream</name> <operator>==</operator> <name>rhs_resolving_stream</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>rhs_resolving_stream</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Clone the filter expressions.</comment>
		<expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Retrieve the relevant branch roots.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>right_branch</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>rhs_resolving_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>left_branch</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>lhs_resolving_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Detach the streams for the Value Hash Join from the execution plan.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_DetachOp</name><argument_list>(<argument><expr><name>right_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_DetachOp</name><argument_list>(<argument><expr><name>left_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Build hash join op.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>value_hash_join</name> <init>= <expr><call><name>_build_hash_join_op</name>
								  <argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>, <argument><expr><name>left_branch</name></expr></argument>, <argument><expr><name>right_branch</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// The filter will now be resolved by the join operation; remove it.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Place hash join op.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// The entire Cartesian Product can be replaced with the join op.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>value_hash_join</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* The optimization has depleted all of the cartesian product children, merged them and replaced the
			 * cartesian product with the new operation.
			 * Since the original cartesian product is no longer a valid operation, and there might be
			 * additional filters which are applicable to re position after the optimization is done,
			 * the following code tries to propagate up the remaining filters, and finish the loop. */</comment>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>ExecutionPlan_RePositionFilterOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>value_hash_join</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name><name>filter_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// The Cartesian Product still has a child operation; introduce the join op as another child.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>value_hash_join</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// If there are remaining filters, re-collect cartesian product streams.</comment>
			<if_stmt><if>if<condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>filter_count</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// Streams are no longer valid since cartesian product changed.</comment>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>stream_count</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>stream_entities</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<expr_stmt><expr><name>stream_count</name> <operator>=</operator> <name><name>cp</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>stream_count</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name><name>stream_entities</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stream_entities</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<comment type="line">// Clean up.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stream_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>stream_entities</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filter_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// TODO: Consider changing Cartesian Products such that each has exactly two child operations.</comment>
<comment type="block">/* Try to replace Cartesian Products (cross joins) with Value Hash Joins.
 * This is viable when a Cartesian Product is combining two streams that each satisfies
 * one side of an EQUALS filter operation, like:
 * MATCH (a), (b) WHERE ID(a) = ID(b) */</comment>
<function><type><name>void</name></type> <name>applyJoin</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>cps</name> <init>= <expr><call><name>ExecutionPlan_CollectOps</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>OPType_CARTESIAN_PRODUCT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>cp_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>cps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cp_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name><name>cps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_reduce_cp_to_hashjoin</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>cps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
