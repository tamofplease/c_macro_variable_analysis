<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/traverse_order.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/algebraic_expression/utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traverse_order_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="line">// having chosen which algebraic expression will be evaluated first</comment>
<comment type="line">// determine whether it is worthwhile to transpose it</comment>
<comment type="line">// thus swap the source and destination</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_should_transpose_entry_point</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>filtered_entities</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// validate inputs</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name>                 <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ae</name>                 <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bound_vars</name>         <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="line">// consider src and dest as stand-alone expressions</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name>  <init>= <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ScoredExp</name></type> <name><name>scored_exp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name><name>exps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
											 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>exps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
											 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// compute src score</comment>
	<expr_stmt><expr><call><name>TraverseOrder_ScoreExpressions</name><argument_list>(<argument><expr><name>scored_exp</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>,
								   <argument><expr><name>filtered_entities</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>src_score</name> <init>= <expr><name><name>scored_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>score</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// transpose</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>exps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>exps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

	<comment type="line">// compute dest score</comment>
	<expr_stmt><expr><call><name>TraverseOrder_ScoreExpressions</name><argument_list>(<argument><expr><name>scored_exp</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>,
								   <argument><expr><name>filtered_entities</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dest_score</name> <init>= <expr><name><name>scored_exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>score</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// transpose if top scored expression is 'dest_exp'</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>transpose</name> <init>= <expr><name>dest_score</name> <operator>&gt;</operator> <name>src_score</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name><name>exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AlgebraicExpression_Free</name><argument_list>(<argument><expr><name><name>exps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>transpose</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// transpose out-of-order expressions such that each expresson's source</comment>
<comment type="line">// is resolved in the winning arrangement</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_resolve_winning_sequence</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>exp_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// skip opening expression</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exp_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>src_resolved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>exps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// see if source is already resolved</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>prev_exp</name> <init>= <expr><name><name>exps</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>prev_exp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>||</operator>
			   <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>prev_exp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>src_resolved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>src_resolved</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AlgebraicExpression_Transpose</name><argument_list>(<argument><expr><name>exps</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="line">// TODO: when DEBUG is enabled, make sure transposed expression</comment>
		<comment type="line">// source (prev dest) is resolved</comment>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// construct a sorted list of valid expressions to consider, given a subset of</comment>
<comment type="line">// expression already in use 'arrangement' these will not show up in the</comment>
<comment type="line">// returned list.</comment>
<comment type="line">// the elements are sorted by their score</comment>
<function><type><specifier>static</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>_valid_expressions</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ScoredExp</name> <modifier>*</modifier></type><name>exps</name></decl></parameter>,             <comment type="line">// input list of expressions</comment>
	<parameter><decl><type><name>uint</name></type> <name>nexp</name></decl></parameter>,                         <comment type="line">// number of expressions</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>restricted</name></decl></parameter>,  <comment type="line">// expressions already in use</comment>
	<parameter><decl><type><name>uint</name></type> <name>nrestricted</name></decl></parameter>                   <comment type="line">// number of elements in restricted</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// sorted array of valid expressions to return</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nexp</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// see if current expression is a valid expression to use</comment>
		<comment type="line">// a valid expression is one which isn't already in use</comment>
		<comment type="line">// and either its source or destination have been encountered</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>exps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exp</name></expr></init></decl>;</decl_stmt>

		<comment type="line">// see if expression already in use</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nrestricted</name> <operator>&amp;&amp;</operator> <name>valid</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <operator>(</operator><name>exp</name> <operator>!=</operator> <name><name>restricted</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// see if either exp source or destination were already encountered</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name>  <init>= <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nrestricted</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>used</name> <init>= <expr><name><name>restricted</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>used_src</name> <init>= <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>used</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>used_dest</name>  <init>= <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>used</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>used_src</name></expr></argument>)</argument_list></call>   <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator>
			   <call><name>strcmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>used_dest</name></expr></argument>)</argument_list></call>  <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator>
			   <call><name>strcmp</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>used_src</name></expr></argument>)</argument_list></call>  <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator>
			   <call><name>strcmp</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>used_dest</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if<condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_arrangement_set_expression</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>arrangement</name></decl></parameter>,   <comment type="line">// arrangement of expressions</comment>
	<parameter><decl><type><specifier>const</specifier> <name>ScoredExp</name> <modifier>*</modifier></type><name>exps</name></decl></parameter>,              <comment type="line">// input list of expressions</comment>
	<parameter><decl><type><name>uint</name></type> <name>nexp</name></decl></parameter>,                          <comment type="line">// number of expressions</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>,      <comment type="line">// posible expressions for position i</comment>
	<parameter><decl><type><name>uint</name></type> <name>i</name></decl></parameter>                              <comment type="line">// index in arrangement to resolve</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Done.</comment>
	<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>nexp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>position_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>  <comment type="line">// did we manage to resolve position i..n</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>follows</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Find the best possible expression to place at position i</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// as long as we didn't find an expression for position i</comment>
	<comment type="line">// and there are options to go through</comment>
	<while>while<condition>(<expr><operator>!</operator><name>position_set</name> <operator>&amp;&amp;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// options are sorted by score</comment>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// set current expression in arrangement</comment>
		<expr_stmt><expr><name><name>arrangement</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>

		<comment type="line">// compose a list of valid expressions for next position</comment>
		<expr_stmt><expr><name>follows</name> <operator>=</operator> <call><name>_valid_expressions</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>nexp</name></expr></argument>, <argument><expr><name>arrangement</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// position i set, recursively advance to next position</comment>
		<expr_stmt><expr><name>position_set</name> <operator>=</operator> <call><name>_arrangement_set_expression</name><argument_list>(<argument><expr><name>arrangement</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><name>nexp</name></expr></argument>,
												   <argument><expr><name>follows</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>position_set</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_order_expressions</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>arrangement</name></decl></parameter>,   <comment type="line">// arrangement of expressions</comment>
	<parameter><decl><type><specifier>const</specifier> <name>ScoredExp</name> <modifier>*</modifier></type><name>exps</name></decl></parameter>,               <comment type="line">// input list of expressions</comment>
	<parameter><decl><type><name>uint</name></type> <name>nexp</name></decl></parameter>                            <comment type="line">// number of expressions</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// collect all possible expression for first position in arrangement</comment>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name> <init>= <expr><call><name>_valid_expressions</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>nexp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// construct arrangement</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>_arrangement_set_expression</name><argument_list>(<argument><expr><name>arrangement</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><name>nexp</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_score_cmp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ScoredExp</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>ScoredExp</name> <modifier>*</modifier></type><name>b</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>score</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>score</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// given a set of algebraic expressions representing a graph traversal</comment>
<comment type="line">// we pick the order in which the expressions will be evaluated</comment>
<comment type="line">// taking into account filters and transposes</comment>
<comment type="line">// 'exps' will be reordered</comment>
<function><type><name>void</name></type> <name>orderExpressions</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl></parameter>,
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>exp_count</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Validate inputs</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name>          <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exps</name>        <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp_count</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>_exp_count</name> <init>= <expr><operator>*</operator><name>exp_count</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScoredExp</name></type> <name><name>scored_exps</name><index>[<expr><name>_exp_count</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name><name>arrangement</name><index>[<expr><name>_exp_count</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="line">// collect all filtered aliases</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>filtered_entities</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>ft</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>filtered_entities</name> <operator>=</operator> <call><name>FilterTree_CollectModified</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// enrich filtered_entities with independent filtered entities frequency</comment>
		<expr_stmt><expr><call><name>FilterTree_CollectIndependentEntities</name><argument_list>(<argument><expr><name>ft</name></expr></argument>, <argument><expr><name>filtered_entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// score each expression and sort</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// associate each expression with a score</comment>
	<expr_stmt><expr><call><name>TraverseOrder_ScoreExpressions</name><argument_list>(<argument><expr><name>scored_exps</name></expr></argument>, <argument><expr><name>exps</name></expr></argument>, <argument><expr><name>_exp_count</name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>,
								   <argument><expr><name>filtered_entities</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// sort scored_exps on score in descending order</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>scored_exps</name></expr></argument>, <argument><expr><name>_exp_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScoredExp</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>_score_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// Find the highest-scoring valid arrangement</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><call><name>_order_expressions</name><argument_list>(<argument><expr><name>arrangement</name></expr></argument>, <argument><expr><name>scored_exps</name></expr></argument>, <argument><expr><name>_exp_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// overwrite the original expressions array with the optimal arrangement</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>arrangement</name></expr></argument>, <argument><expr><name>_exp_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AlgebraicExpression</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// transpose expressions as necessary so that the traversals will work in</comment>
	<comment type="line">// the selected order</comment>
	<expr_stmt><expr><call><name>_resolve_winning_sequence</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>_exp_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// transpose the winning expression if the destination node is a more</comment>
	<comment type="line">// efficient starting point</comment>
	<if_stmt><if>if<condition>(<expr><call><name>_should_transpose_entry_point</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name><name>exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>filtered_entities</name></expr></argument>,
									 <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>AlgebraicExpression_Transpose</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// remove redundent operands from expressions</comment>
	<comment type="line">// MATCH (a:A)-[:R]-&gt;(b:B), (a)-[:R]-&gt;(c:C), (a:A)-[:R]-&gt;(d:D)</comment>
	<comment type="line">// will result in 2 expressions:</comment>
	<comment type="line">// 1. A*R*B</comment>
	<comment type="line">// 2. A*R*C</comment>
	<comment type="line">// 3. A*R*D</comment>
	<comment type="line">//</comment>
	<comment type="line">// as we're dealing with the same 'a' node there's no need to multiply</comment>
	<comment type="line">// expressions 2 and 3 by 'A'</comment>
	<comment type="line">//</comment>
	<comment type="line">// RemoveRedundentOperands will remove label operands from already resolved</comment>
	<comment type="line">// nodes, this might reduce numder of expressions in 'exps'</comment>
	<expr_stmt><expr><call><name>_AlgebraicExpression_RemoveRedundentOperands</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>exp_count</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>filtered_entities</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>filtered_entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
