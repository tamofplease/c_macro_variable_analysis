<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/compact_filters.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../filter_tree/filter_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="block">/* The compact filters optimizer scans an execution plan for filters that can be
 * compressed. In case the filter is compressed into a final constant 'true' value,
 * the filter operation will be removed from the execution plan. */</comment>

<comment type="line">// Try to compact a filter.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_compactFilter</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>op</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>FilterTree_Compact</name><argument_list>(<argument><expr><name><name>filter_op</name><operator>-&gt;</operator><name>filterTree</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// In case the compacted filter resolved to 'true', remove it from the execution plan.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_removeTrueFilter</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>op</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name><name>filter_op</name><operator>-&gt;</operator><name>filterTree</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// We can only have a contant expression in this point (after compaction).</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_EXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Evaluate the expression, and check if it is a 'true' value.</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>bool_val</name> <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>exp</name><operator>.</operator><name>exp</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>bool_val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_BOOL</name> <operator>&amp;&amp;</operator> <call><name>SI_TYPE</name><argument_list>(<argument><expr><name>bool_val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Value did not resolve to boolean, emit an error.</comment>
		<expr_stmt><expr><call><name>Error_SITypeMismatch</name><argument_list>(<argument><expr><name>bool_val</name></expr></argument>, <argument><expr><name>T_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>bool_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SIValue_IsNull</name><argument_list>(<argument><expr><name>bool_val</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SIValue_IsTrue</name><argument_list>(<argument><expr><name>bool_val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_compactFilters</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Try to compact the filter.</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>compact</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>compact</name> <operator>=</operator> <call><name>_compactFilter</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Try to compact children.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>_compactFilters</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// If there was a compaction, try to remove 'true' filters.</comment>
	<if_stmt><if>if<condition>(<expr><name>compact</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_removeTrueFilter</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>compactFilters</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_compactFilters</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
