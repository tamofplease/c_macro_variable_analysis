<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/reduce_count.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/aggregate_funcs/agg_funcs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="block">/* The reduceCount optimization will look for execution plan
 * performing solely node/edge counting: total number of nodes/edges
 * in the graph, total number of nodes/edges with a specific label/relation.
 * In which case we can avoid performing both SCAN* and AGGREGATE
 * operations by simply returning a precomputed count */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_identifyResultAndAggregateOps</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OpResult</name> <modifier>*</modifier><modifier>*</modifier></type><name>opResult</name></decl></parameter>,
										  <parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier><modifier>*</modifier></type><name>opAggregate</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Op Results.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_RESULTS</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>opResult</name> <operator>=</operator> <operator>(</operator><name>OpResult</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="line">// Op Aggregate.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_AGGREGATE</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Expecting a single aggregation, without ordering.</comment>
	<expr_stmt><expr><operator>*</operator><name>opAggregate</name> <operator>=</operator> <operator>(</operator><name>OpAggregate</name> <operator>*</operator><operator>)</operator><name>op</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><operator>(</operator><operator>*</operator><name>opAggregate</name><operator>)</operator><operator>-&gt;</operator><name>aggregate_count</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name>opAggregate</name><operator>)</operator><operator>-&gt;</operator><name>key_count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>opAggregate</name><operator>)</operator><operator>-&gt;</operator><name>aggregate_exps</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

	<comment type="line">// Make sure aggregation performs counting.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AR_EXP_OP</name> <operator>||</operator>
	   <name><name>exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>aggregate</name></name> <operator>!=</operator> <name>true</name> <operator>||</operator>
	   <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>AR_EXP_GetFuncName</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
	   <call><name>AR_EXP_PerformsDistinct</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Make sure Count acts on an alias.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>child_count</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AR_EXP_OPERAND</name> <operator>&amp;&amp;</operator>
			<name><name>arg</name><operator>-&gt;</operator><name>operand</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AR_EXP_VARIADIC</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Checks if execution plan solely performs node count */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_identifyNodeCountPattern</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OpResult</name> <modifier>*</modifier><modifier>*</modifier></type><name>opResult</name></decl></parameter>, <parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier><modifier>*</modifier></type><name>opAggregate</name></decl></parameter>,
									 <parameter><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>opScan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Reset.</comment>
	<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>opScan</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>opResult</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>opAggregate</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_identifyResultAndAggregateOps</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>opResult</name></expr></argument>, <argument><expr><name>opAggregate</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>opAggregate</name><operator>)</operator><operator>-&gt;</operator><name><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Scan, either a full node or label scan.</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_ALL_NODE_SCAN</name> <operator>&amp;&amp;</operator>
		<name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_NODE_BY_LABEL_SCAN</name><operator>)</operator> <operator>||</operator>
	   <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>opScan</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_NODE_BY_LABEL_SCAN</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>labelScan</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>op</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name>label</name> <operator>=</operator> <name><name>labelScan</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_reduceNodeCount</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* We'll only modify execution plan if it is structured as follows:
	 * "Scan -&gt; Aggregate -&gt; Results" */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opScan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpResult</name> <modifier>*</modifier></type><name>opResult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>opAggregate</name></decl>;</decl_stmt>

	<comment type="block">/* See if execution-plan matches the pattern:
	 * "Scan -&gt; Aggregate -&gt; Results".
	 * if that's not the case, simply return without making any modifications. */</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_identifyNodeCountPattern</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opResult</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opAggregate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opScan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>label</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* User is trying to get total number of nodes in the graph
	 * optimize by skiping SCAN and AGGREGATE. */</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>nodeCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// If label is specified, count only labeled entities.</comment>
	<if_stmt><if>if<condition>(<expr><name>label</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchema</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nodeCount</name> <operator>=</operator> <call><name>SI_LongVal</name><argument_list>(<argument><expr><call><name>Graph_LabeledNodeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nodeCount</name> <operator>=</operator> <call><name>SI_LongVal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line">// Specified Label doesn't exists.</comment>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>nodeCount</name> <operator>=</operator> <call><name>SI_LongVal</name><argument_list>(<argument><expr><call><name>Graph_NodeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Construct a constant expression, used by a new projection operation</comment>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_NewConstOperandNode</name><argument_list>(<argument><expr><name>nodeCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// The new expression must be aliased to populate the Record.</comment>
	<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <name><name>opAggregate</name><operator>-&gt;</operator><name>aggregate_exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opProject</name> <init>= <expr><call><name>NewProjectOp</name><argument_list>(<argument><expr><name><name>opAggregate</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name></name></expr></argument>, <argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// New execution plan: "Project -&gt; Results"</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>opScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>opScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>opAggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>opAggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>opResult</name></expr></argument>, <argument><expr><name>opProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Checks if execution plan solely performs edge count */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_identifyEdgeCountPattern</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OpResult</name> <modifier>*</modifier><modifier>*</modifier></type><name>opResult</name></decl></parameter>,
		<parameter><decl><type><name>OpAggregate</name> <modifier>*</modifier><modifier>*</modifier></type><name>opAggregate</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>opTraverse</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>opScan</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<comment type="line">// reset</comment>
	<expr_stmt><expr><operator>*</operator><name>opScan</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>opTraverse</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>opResult</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>opAggregate</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_identifyResultAndAggregateOps</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>opResult</name></expr></argument>, <argument><expr><name>opAggregate</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>opAggregate</name><operator>)</operator><operator>-&gt;</operator><name><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_CONDITIONAL_TRAVERSE</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>opTraverse</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="line">// only a full node scan can be converted, as a labeled source acts as a</comment>
	<comment type="line">// filter that may invalidate some of the edges</comment>
	<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_ALL_NODE_SCAN</name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>opScan</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_reduceEdgeCount</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// we'll only modify execution plan if it is structured as follows:</comment>
	<comment type="line">// "Full Scan -&gt; Conditional Traverse -&gt; Aggregate -&gt; Results"</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opScan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opTraverse</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpResult</name> <modifier>*</modifier></type><name>opResult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpAggregate</name> <modifier>*</modifier></type><name>opAggregate</name></decl>;</decl_stmt>

	<comment type="line">// see if execution-plan matches the pattern:</comment>
	<comment type="line">// "Full Scan -&gt; Conditional Traverse -&gt; Aggregate -&gt; Results"</comment>
	<comment type="line">// if that's not the case, simply return without making any modifications</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_identifyEdgeCountPattern</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opResult</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opAggregate</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>opTraverse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opScan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// user is trying to count edges (either in total or of specific types)</comment>
	<comment type="line">// in the graph. optimize by skipping Scan, Traverse and Aggregate</comment>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>edgeCount</name> <init>= <expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// if type is specified, count only labeled entities</comment>
	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>condTraverse</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>opTraverse</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// the traversal op doesn't contain information about the traversed edge,</comment>
	<comment type="line">// cannot apply optimization</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>condTraverse</name><operator>-&gt;</operator><name>edge_ctx</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>relationCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>condTraverse</name><operator>-&gt;</operator><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRelationTypes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64_t</name></type> <name>edges</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>relationCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>relType</name> <init>= <expr><name><name>condTraverse</name><operator>-&gt;</operator><name>edge_ctx</name><operator>-&gt;</operator><name>edgeRelationTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name>relType</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>GRAPH_NO_RELATION</name></expr>:</case>
				<comment type="line">// should be the only relationship type mentioned, -[]-&gt;</comment>
				<expr_stmt><expr><name>edges</name> <operator>=</operator> <call><name>Graph_EdgeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>GRAPH_UNKNOWN_RELATION</name></expr>:</case>
				<comment type="line">// no change to current count, -[:none_existing]-&gt;</comment>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name>edges</name> <operator>+=</operator> <call><name>Graph_RelationEdgeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>relType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><name>edgeCount</name> <operator>=</operator> <call><name>SI_LongVal</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// construct a constant expression, used by a new projection operation</comment>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_NewConstOperandNode</name><argument_list>(<argument><expr><name>edgeCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// the new expression must be aliased to populate the Record</comment>
	<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <name><name>opAggregate</name><operator>-&gt;</operator><name>aggregate_exps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>resolved_name</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opProject</name> <init>= <expr><call><name>NewProjectOp</name><argument_list>(<argument><expr><name><name>opAggregate</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name></name></expr></argument>, <argument><expr><name>exps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// new execution plan: "Project -&gt; Results"</comment>
	<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>opScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>opScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>opTraverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>opTraverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>opAggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>opAggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>opResult</name></expr></argument>, <argument><expr><name>opProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reduceCount</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// start by trying to identify node count pattern</comment>
	<comment type="line">// if unsuccessful try edge count pattern</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_reduceNodeCount</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_reduceEdgeCount</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

</unit>
