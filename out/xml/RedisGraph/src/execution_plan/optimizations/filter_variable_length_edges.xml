<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/filter_variable_length_edges.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_cond_var_len_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="block">/* The filterVariableLengthEdges optimization finds variable-length traversal ops
 * in the op tree that are immediately followed by filter ops and, if the filter
 * op(s) apply predicates directly to the traversed edge, migrates those predicates
 * into the traversal itself.
 *
 * This allows us to only expand paths on which the traversed edges pass the
 * filter predicates, rather than applying them after discovering all paths. */</comment>

<comment type="line">// Returns true if the given filter operates exclusively on the traversed edge</comment>
<comment type="line">// of a CondVarLenTraverse op</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_applicableFilter</name><parameter_list>(<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>applicable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Collect all modified aliases in the FilterTree.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>filtered</name> <init>= <expr><call><name>FilterTree_CollectModified</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Look up the edge alias in the alias map.</comment>
	<expr_stmt><expr><name>applicable</name> <operator>=</operator> <operator>(</operator><call><name>raxFind</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>edge</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>applicable</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Reject filter trees that contain either the source or destination node.
		 * This avoids false positives on TOPATH expressions that collect all aliases in a path
		 * and rejects filters between an edge property and a traversal's src/dest property,
		 * which will not be available during traversals. */</comment>
		<expr_stmt><expr><name>applicable</name> <operator>=</operator>
			<operator>(</operator><call><name>raxFind</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>raxNotFound</name>
			 <operator>&amp;&amp;</operator>
			 <call><name>raxFind</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>raxNotFound</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>applicable</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_filterVariableLengthEdges</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
									   <parameter><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>traverse_op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>traverse_op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// retrieve the aliases of the traversed source, destination, and edge</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name>     <init>= <expr><name><name>traverse_op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name>    <init>= <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name><name>traverse_op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge</name>   <init>= <expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name><name>traverse_op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name>   <init>= <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name><name>traverse_op</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>filters</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>OpFilter</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// collect applicable filters</comment>
	<while>while<condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// track the next op to visit in case we free parent</comment>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>op_filter</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>parent</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><name><name>op_filter</name><operator>-&gt;</operator><name>filterTree</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// check if the filter is applied to the traversed edge</comment>
		<if_stmt><if>if<condition>(<expr><call><name>_applicableFilter</name><argument_list>(<argument><expr><name>ft</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>op_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// advance</comment>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<decl_stmt><decl><type><name>uint</name></type> <name>n</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// concat filters using AND condition</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><name><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name> <init>= <expr><name><name>filter_op</name><operator>-&gt;</operator><name>filterTree</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// remove filter operation from execution plan</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// NULL-set the filter tree to avoid a double free</comment>
		<expr_stmt><expr><name><name>filter_op</name><operator>-&gt;</operator><name>filterTree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>ft</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type> <name>and</name> <init>= <expr><call><name>FilterTree_CreateConditionFilter</name><argument_list>(<argument><expr><name>OP_AND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>( <argument><expr><name>and</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>( <argument><expr><name>and</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>and</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// embed the filter tree in the variable-length traversal</comment>
	<if_stmt><if>if<condition>(<expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CondVarLenTraverseOp_SetFilter</name><argument_list>(<argument><expr><name>traverse_op</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>filterVariableLengthEdges</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>var_len_traverse_ops</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Collect all variable-length traversals</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>OPType</name></type> <name><name>types</name><index>[]</index></name> <init>= <expr><block>{<expr><name>OPType_CONDITIONAL_VAR_LEN_TRAVERSE</name></expr>,
							<expr><name>OPType_CONDITIONAL_VAR_LEN_TRAVERSE_EXPAND_INTO</name></expr>
						   }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>var_len_traverse_ops</name> <operator>=</operator> <call><name>ExecutionPlan_CollectOpsMatchingType</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
																<argument><expr><name>types</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>var_len_traverse_ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name><name>var_len_traverse_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_filterVariableLengthEdges</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>var_len_traverse_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
