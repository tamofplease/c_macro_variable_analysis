<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/apply_skip.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_sort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_skip.h"</cpp:file></cpp:include>

<comment type="block">/* applySkip will traverse the given execution plan looking for Skip operations.
 * Once one is found, all relevant child operations (e.g. Sort) will be
 * notified about the current skip value.
 * This is beneficial as a number of different optimizations can be applied
 * once a skip is known */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>notify_skip</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>skip</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OPType</name></type> <name>t</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>OPType_SKIP</name></expr>:</case>
			<comment type="line">// update skip</comment>
			<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OpSkip</name> <operator>*</operator><operator>)</operator><name>op</name><operator>)</operator><operator>-&gt;</operator><name>skip</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OPType_SORT</name></expr>:</case>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>OpSort</name> <operator>*</operator><operator>)</operator><name>op</name><operator>)</operator><operator>-&gt;</operator><name>skip</name> <operator>=</operator> <name>skip</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>notify_skip</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>applySkip</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>notify_skip</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
