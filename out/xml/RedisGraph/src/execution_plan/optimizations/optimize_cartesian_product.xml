<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/optimize_cartesian_product.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_cartesian_product.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_construct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="line">// this struct is an auxilary struct for sorting filters according to their</comment>
<comment type="line">// referenced entities count</comment>
<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>   <comment type="line">// filter operation</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>entities</name></decl>;</decl_stmt>      <comment type="line">// contains the entities that the filter references</comment>
}</block></struct></type> <name>FilterCtx</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>_FilterCtx_cmp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>FilterCtx</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>FilterCtx</name> <modifier>*</modifier></type><name>b</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>entities</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>entities</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// this optimization takes multiple branched cartesian product</comment>
<comment type="line">// (with more than two branches)</comment>
<comment type="line">// followed by filter(s) and try to apply the filter as soon possible by</comment>
<comment type="line">// locating situations where a new Cartesian Product of smaller amount of</comment>
<comment type="line">// streams can resolve the filter for a filter F executing on a dual-branched</comment>
<comment type="line">// cartesian product output, the runtime complexity is at most f=n^2</comment>
<comment type="line">// for a filter F' which execute on a dual-branched cartesian product output</comment>
<comment type="line">// where one of its branches is F, the overall time complexity is at most</comment>
<comment type="line">// f'=f*n = n^3</comment>
<comment type="line">// in the general case, the runtime complaxity of filter that is executing over</comment>
<comment type="line">// the output of a cartesian product which all of its children are nested</comment>
<comment type="line">// cartesian product followed by a filter (as a result of this optimization)</comment>
<comment type="line">// is at most n^x where x is the number of branchs of the original cartesian</comment>
<comment type="line">// product consider MATCH (a), (b), (c) where a.x &gt; b.x RETURN a, b, c</comment>
<comment type="line">// prior to this optimization a, b and c will be combined via a cartesian</comment>
<comment type="line">// product O(n^3) because we require a.v &gt; b.v we can create a cartesian</comment>
<comment type="line">// product between a and b, and re-position the filter after this new cartesian</comment>
<comment type="line">// product, remove both a and b branches from the original cartesian product and</comment>
<comment type="line">// place the filter operation is a new branch creating nested cartesian products</comment>
<comment type="line">// operations and re-positioning the filter op will:</comment>
<comment type="line">// 1. potentially reduce memory consumption (storing only f records instead n^x)</comment>
<comment type="line">// in each phase</comment>
<comment type="line">// 2. reduce the overall filter runtime by potentially order(s) of magnitude</comment>


<comment type="line">// Free FilterCtx.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_FilterCtx_Free</name><parameter_list>(<parameter><decl><type><name>FilterCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>entities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// collects all consecutive filters beneath given op</comment>
<comment type="line">// sort them by the number of referenced entities</comment>
<comment type="line">// the array is soreted in order to reposition the filter that require smaller</comment>
<comment type="line">// cartiesian products first</comment>
<function><type><specifier>static</specifier> <name>FilterCtx</name> <modifier>*</modifier></type><name>_locate_filters_and_entities</name>
<parameter_list>(
	<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FilterCtx</name> <modifier>*</modifier></type><name>filter_ctx_arr</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>FilterCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>parent</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FilterCtx</name></type> <name>filter_ctx</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>filter_ctx</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <name>filter_op</name></expr>;</expr_stmt>
		<comment type="line">// collect referenced entities</comment>
		<expr_stmt><expr><name><name>filter_ctx</name><operator>.</operator><name>entities</name></name> <operator>=</operator> <call><name>FilterTree_CollectModified</name><argument_list>(<argument><expr><name><name>filter_op</name><operator>-&gt;</operator><name>filterTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>filter_ctx_arr</name></expr></argument>, <argument><expr><name>filter_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// sort by the number of referenced entities</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>filter_ctx_arr</name></expr></argument>, <argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name>filter_ctx_arr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FilterCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>int</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>_FilterCtx_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>filter_ctx_arr</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Finds all the cartesian product's children which solve a specific filter entities.</comment>
<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>_find_entities_solving_branches</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>entities</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>entities_count</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>entities_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// No dependencies in filters.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>solving_branches</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>OpBase</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Iterate over all the children or until all the entities are resolved.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>cp</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&amp;&amp;</operator> <name>entities_count</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>branch</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// Don't recurse into previous scopes when trying to resolve references.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>recurse_limit</name> <init>= <expr><call><name>ExecutionPlan_LocateOpMatchingType</name><argument_list>(<argument><expr><name>branch</name></expr></argument>, <argument><expr><name>PROJECT_OPS</name></expr></argument>, <argument><expr><name>PROJECT_OP_COUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Locate references reduces the amount of entities upon each call
		 * that partially solves the references. */</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_LocateReferences</name><argument_list>(<argument><expr><name>branch</name></expr></argument>, <argument><expr><name>recurse_limit</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>new_entities_count</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>new_entities_count</name> <operator>!=</operator> <name>entities_count</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// Update entity count.</comment>
			<expr_stmt><expr><name>entities_count</name> <operator>=</operator> <name>new_entities_count</name></expr>;</expr_stmt>
			<comment type="line">// Add partially solving branch into the array.</comment>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>solving_branches</name></expr></argument>, <argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if<condition>(<expr><name>entities_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Error_InvalidFilterPlacement</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>solving_branches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>solving_branches</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_optimize_cartesian_product</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Retrieve all filter operations located upstream from the Cartesian Product.</comment>
	<decl_stmt><decl><type><name>FilterCtx</name> <modifier>*</modifier></type><name>filter_ctx_arr</name> <init>= <expr><call><name>_locate_filters_and_entities</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>filter_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>filter_ctx_arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Try to create a cartesian product, followed by the current filter.</comment>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><name><name>filter_ctx_arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>solving_branches</name> <init>= <expr><call><name>_find_entities_solving_branches</name><argument_list>(<argument><expr><name><name>filter_ctx_arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entities</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>solving_branches</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// Filter placement failed, return early.</comment>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filter_ctx_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>uint</name></type> <name>solving_branch_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>solving_branches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// In case this filter is solved by the entire cartesian product, it does not need to be repositioned.</comment>
		<if_stmt><if>if<condition>(<expr><name>solving_branch_count</name> <operator>==</operator> <name><name>cp</name><operator>-&gt;</operator><name>childCount</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>solving_branches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// The filter needs to be repositioned.</comment>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// This filter is solved by a single cartesian product child and needs to be propagated up.</comment>
		<if_stmt><if>if<condition>(<expr><name>solving_branch_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>solving_op</name> <init>= <expr><name><name>solving_branches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Single branch solving a filter that was after a cartesian product.
			 * The filter may be pushed directly onto the appropriate branch. */</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name>solving_op</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>solving_branches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Need to create a new cartesian product and connect the solving branches to the filter.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>new_cp</name> <init>= <expr><call><name>NewCartesianProductOp</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>, <argument><expr><name>new_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Detach each solving branch from the original cp, and attach them as children for the new cp.</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>solving_branch_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>solving_branch</name> <init>= <expr><name><name>solving_branches</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_DetachOp</name><argument_list>(<argument><expr><name>solving_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>new_cp</name></expr></argument>, <argument><expr><name>solving_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>solving_branches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// The entire Cartesian Product can be removed.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* The optimization has depleted all of the cartesian product children, merged them and replaced the
			 * cartesian product with the filter op.
			 * Since the original cartesian product is no longer a valid operation, and there might be
			 * additional filters which are applicable to reposition after the optimization is done,
			 * the following code tries to propagate up the remaining filters, and finish the loop. */</comment>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>ExecutionPlan_RePositionFilterOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
												 <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name><name>filter_ctx_arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// The Cartesian Product still has a child operation; introduce the new op as another child.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<comment type="line">// Clean up.</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>filter_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_FilterCtx_Free</name><argument_list>(<argument><expr><name>filter_ctx_arr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filter_ctx_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reduceCartesianProductStreamCount</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>cps</name> <init>= <expr><call><name>ExecutionPlan_CollectOps</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>OPType_CARTESIAN_PRODUCT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>cp_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>cps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cp_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name><name>cps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>childCount</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_optimize_cartesian_product</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>cps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
