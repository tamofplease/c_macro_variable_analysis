<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/reduce_scans.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_node_by_label_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_conditional_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="block">/* The reduce scans optimizer searches the execution plans for
 * SCAN operations which set node N, in-case there's an earlier
 * operation within the execution plan e.g. PROCEDURE-CALL which sets N
 * then omit SCAN. */</comment>

<function><type><specifier>static</specifier> <name>OpBase</name> <modifier>*</modifier></type><name>_LabelScanToConditionalTraverse</name><parameter_list>(<parameter><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryCtx_GetGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name> <init>= <expr><call><name>AlgebraicExpression_NewOperand</name><argument_list>(<argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
															 <argument><expr><name><name>op</name><operator>-&gt;</operator><name>n</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>NewCondTraverseOp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name></name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_reduceScans</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Return early if the scan has no child operations.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>childCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// The scan operation should be operating on a single alias.</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>modifies</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>scanned_alias</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>modifies</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Collect variables bound before this operation.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scan</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>scanned_alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>scanned_alias</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// If the alias the scan operates on is already bound, the scan operation is redundant.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_NODE_BY_LABEL_SCAN</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// If we are performing a label scan, introduce a conditional traversal to filter by label.</comment>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>traverse</name> <init>= <expr><call><name>_LabelScanToConditionalTraverse</name><argument_list>(<argument><expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator><name>scan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>traverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Remove the redundant scan op.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reduceScans</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Collect all SCAN operations within the execution plan.</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>scans</name> <init>= <expr><call><name>ExecutionPlan_CollectOpsMatchingType</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>SCAN_OPS</name></expr></argument>, <argument><expr><name>SCAN_OP_COUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>scan_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>scans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>scan_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>_reduceScans</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>scans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>scans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
