<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/seek_by_id.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_all_node_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_node_by_id_seek.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_node_by_label_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/range/numeric_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../arithmetic/arithmetic_op.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="block">/* The seek by ID optimization searches for a SCAN operation on which
 * a filter of the form ID(n) = X is applied in which case
 * both the SCAN and FILTER operations can be reduced into a single
 * NODE_BY_ID_SEEK operation. */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_idFilter</name><parameter_list>(<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>AST_Operator</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>EntityID</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>reverse</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>t</name></name> <operator>!=</operator> <name>FT_N_PRED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>OP_NEQUAL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>AR_OpNode</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>lhs</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>rel</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name></expr>;</expr_stmt>

	<comment type="block">/* Either ID(N) compare const
	 * OR
	 * const compare ID(N) */</comment>
	<if_stmt><if>if<condition>(<expr><name><name>lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AR_EXP_OPERAND</name> <operator>&amp;&amp;</operator> <name><name>rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AR_EXP_OP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>&amp;</operator><name><name>rhs</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>expr</name> <operator>=</operator> <name>lhs</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>reverse</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AR_EXP_OP</name> <operator>&amp;&amp;</operator> <name><name>rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AR_EXP_OPERAND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>&amp;</operator><name><name>lhs</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>expr</name> <operator>=</operator> <name>rhs</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>reverse</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Make sure ID is compared to a constant int64.</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>reduced</name> <init>= <expr><call><name>AR_EXP_ReduceToScalar</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>reduced</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>T_INT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Make sure applied function is ID.</comment>
	<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_UseIdOptimization</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>scan_op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* See if there's a filter of the form
	 * ID(n) op X
	 * where X is a constant and op in [EQ, GE, LE, GT, LT] */</comment>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>scan_op</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>grandparent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UnsignedRange</name> <modifier>*</modifier></type><name>id_range</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_FILTER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>grandparent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt> <comment type="line">// Track the next op to visit in case we free parent.</comment>
		<decl_stmt><decl><type><name>OpFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>(</operator><name>OpFilter</name> <operator>*</operator><operator>)</operator><name>parent</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>filterTree</name></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>AST_Operator</name></type> <name>op</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>EntityID</name></type> <name>id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>reverse</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>_idFilter</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reverse</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><name>id_range</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>id_range</name> <operator>=</operator> <call><name>UnsignedRange_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name>reverse</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>ArithmeticOp_ReverseOp</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>UnsignedRange_TightenRange</name><argument_list>(<argument><expr><name>id_range</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// Free replaced operations.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// Advance.</comment>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>grandparent</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>(<expr><name>id_range</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Don't replace label scan, but set it to have range query.
		 * Issue 818 https://github.com/RedisGraph/RedisGraph/issues/818
		 * This optimization caused a range query over the entire range of ids in the graph
		 * regardless to the label. */</comment>
		<if_stmt><if>if<condition>(<expr><name><name>scan_op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_NODE_BY_LABEL_SCAN</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>NodeByLabelScan</name> <modifier>*</modifier></type><name>label_scan</name> <init>= <expr><operator>(</operator><name>NodeByLabelScan</name> <operator>*</operator><operator>)</operator> <name>scan_op</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>NodeByLabelScanOp_SetIDRange</name><argument_list>(<argument><expr><name>label_scan</name></expr></argument>, <argument><expr><name>id_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><operator>(</operator><operator>(</operator><name>AllNodeScan</name> <operator>*</operator><operator>)</operator><name>scan_op</name><operator>)</operator><operator>-&gt;</operator><name>alias</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>opNodeByIdSeek</name> <init>= <expr><call><name>NewNodeByIdSeekOp</name><argument_list>(<argument><expr><name><name>scan_op</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>id_range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// Managed to reduce!</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>scan_op</name></expr></argument>, <argument><expr><name>opNodeByIdSeek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>scan_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>UnsignedRange_Free</name><argument_list>(<argument><expr><name>id_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>seekByID</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>OPType</name></type> <name><name>types</name><index>[]</index></name> <init>= <expr><block>{<expr><name>OPType_ALL_NODE_SCAN</name></expr>, <expr><name>OPType_NODE_BY_LABEL_SCAN</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>scan_ops</name> <init>= <expr><call><name>ExecutionPlan_CollectOpsMatchingType</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>scan_ops</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>_UseIdOptimization</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>scan_ops</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>scan_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
