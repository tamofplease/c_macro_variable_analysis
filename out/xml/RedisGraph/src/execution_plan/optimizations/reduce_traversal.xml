<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/reduce_traversal.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_expand_into.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_conditional_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ops/op_cond_var_len_traverse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>

<comment type="block">/* Reduce traversal searches for traversal operations where
 * both the src and destination nodes in the traversal are already
 * resolved by former operation, in which case we need to make sure
 * src is connected to dest via the current expression.
 *
 * Consider the following query, execution plan:
 * MATCH (A)-[X]-&gt;(B)-[Y]-&gt;(A) RETURN A,B
 * SCAN (A)
 * TRAVERSE-1 (A)-[X]-&gt;(B)
 * TRAVERSE-2 (B)-[Y]-&gt;(A)
 * TRAVERSE-2 tries to see if B is connected to A via Y
 * but A and B are known, we just need to make sure there's an edge
 * of type Y connecting B to A
 * this is done by the EXPAND-INTO operation. */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_isInSubExecutionPlan</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>ExecutionPlan_LocateOp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>OPType_ARGUMENT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_removeRedundantTraversal</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>traverse</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name> <init>=  <expr><name><name>traverse</name><operator>-&gt;</operator><name>ae</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>AlgebraicExpression_OperandCount</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
	   <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>traverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>traverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Inspect each traverse operation T,
 * For each T see if T's source and destination nodes
 * are already resolved, in which case replace traversal operation
 * with expand-into op. */</comment>
<function><type><name>void</name></type> <name>reduceTraversal</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>traversals</name> <init>= <expr><call><name>ExecutionPlan_CollectOpsMatchingType</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>TRAVERSE_OPS</name></expr></argument>,
															   <argument><expr><name>TRAVERSE_OP_COUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>traversals_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>traversals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Keep track of redundant traversals which will be removed
	 * once we'll inspect every traversal operation. */</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>redundantTraversalsCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name><name>redundantTraversals</name><index>[<expr><name>traversals_count</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>traversals_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name><name>traversals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>ae</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CONDITIONAL_TRAVERSE</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>traverse</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>op</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ae</name> <operator>=</operator> <name><name>traverse</name><operator>-&gt;</operator><name>ae</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CONDITIONAL_VAR_LEN_TRAVERSE</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>traverse</name> <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name>op</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ae</name> <operator>=</operator> <name><name>traverse</name><operator>-&gt;</operator><name>ae</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* If traverse src and dest nodes are the same,
		 * number of hops is 1 and the matrix being used is a label matrix, than
		 * traverse acts as a filter which make sure the node is of a specific type
		 * e.g. MATCH (a:A)-[e:R]-&gt;(b:B) RETURN e
		 * in this case there will be a traverse operation which will
		 * filter our dest nodes (b) which aren't of type B. */</comment>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		   <call><name>AlgebraicExpression_OperandCount</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
		   <call><name>AlgebraicExpression_DiagonalOperand</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Collect variables bound before this op.</comment>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>ExecutionPlan_BoundVariables</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// The destination could not be resolved, cannot optimize.</comment>
			<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Both src and dest are already known
		 * perform expand into instead of traverse. */</comment>
		<if_stmt><if>if<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CONDITIONAL_TRAVERSE</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>OpCondTraverse</name> <modifier>*</modifier></type><name>traverse</name> <init>= <expr><operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>op</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>traverse_plan</name> <init>= <expr><name><name>traverse</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>expand_into</name> <init>= <expr><call><name>NewExpandIntoOp</name><argument_list>(<argument><expr><name>traverse_plan</name></expr></argument>, <argument><expr><name><name>traverse</name><operator>-&gt;</operator><name>graph</name></name></expr></argument>, <argument><expr><name><name>traverse</name><operator>-&gt;</operator><name>ae</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// Set traverse algebraic_expression to NULL to avoid early free.</comment>
			<expr_stmt><expr><name><name>traverse</name><operator>-&gt;</operator><name>ae</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_ReplaceOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>traverse</name></expr></argument>, <argument><expr><name>expand_into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><operator>(</operator><name>OpBase</name> <operator>*</operator><operator>)</operator><name>traverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>CondVarLenTraverse</name> <modifier>*</modifier></type><name>traverse</name> <init>= <expr><operator>(</operator><name>CondVarLenTraverse</name> <operator>*</operator><operator>)</operator><name>op</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>traverse_plan</name> <init>= <expr><name><name>traverse</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>CondVarLenTraverseOp_ExpandInto</name><argument_list>(<argument><expr><name>traverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Conditional variable length traversal do not perform
			 * label filtering by matrix matrix multiplication
			 * it introduces conditional traverse operation in order
			 * to perform label filtering, but in case a node is already
			 * resolved this filtering is redundent and should be removed. */</comment>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name><name>traverse_plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>, <argument><expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>QGNode_Labeled</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CONDITIONAL_TRAVERSE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_isInSubExecutionPlan</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<comment type="line">// Queue traversal for removal.</comment>
					<expr_stmt><expr><name><name>redundantTraversals</name><index>[<expr><name>redundantTraversalsCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>t</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name><name>traverse_plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>,
													 <argument><expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>QGNode_Labeled</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_CONDITIONAL_TRAVERSE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>_isInSubExecutionPlan</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<comment type="line">// Queue traversal for removal.</comment>
					<expr_stmt><expr><name><name>redundantTraversals</name><index>[<expr><name>redundantTraversalsCount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>OpCondTraverse</name> <operator>*</operator><operator>)</operator><name>t</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Remove redundant traversals</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>redundantTraversalsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_removeRedundantTraversal</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>redundantTraversals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="line">// Clean up.</comment>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>traversals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
