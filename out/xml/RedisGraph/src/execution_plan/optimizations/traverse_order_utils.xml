<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/optimizations/traverse_order_utils.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traverse_order_utils.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_AlgebraicExpression_IsVarLen</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// is this an "edge" operand, traversing a relationship matrix</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>edge_alias</name> <init>= <expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>edge_alias</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// return true if query edge is marked as variable length</comment>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>edge_alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>QGEdge_VariableLength</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Scoring functions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// score expression based on its source and destination labels</comment>
<comment type="line">// score = src label count + dest label count</comment>
<function><type><name>int</name></type> <name>TraverseOrder_LabelsScore</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type>         <name>score</name>       <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  <modifier>*</modifier></type><name>src</name>        <init>=  <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  <modifier>*</modifier></type><name>dest</name>       <init>=  <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name>      <modifier>*</modifier></type><name>src_node</name>   <init>=  <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name>      <modifier>*</modifier></type><name>dest_node</name>  <init>=  <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>QGNode_LabelCount</name><argument_list>(<argument><expr><name>dest_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// TODO: re-enable, see https://github.com/RedisGraph/RedisGraph/issues/1742</comment>
	<comment type="line">// consider 'dest' only if different than 'src'</comment>
	<comment type="line">//if(strcmp(src, dest) != 0) {</comment>
	<comment type="line">//  score += QGNode_LabelCount(dest_node);</comment>
	<comment type="line">//}</comment>

	<comment type="line">// if expression represents a variable length traversal</comment>
	<comment type="line">// zero label score as these are performed by dedicated expressions</comment>
	<comment type="line">//</comment>
	<comment type="line">// MATCH (a:A)-[e:R*]-&gt;(b:B)</comment>
	<comment type="line">// is performed by 3 expressions:</comment>
	<comment type="line">// 1. [A] - label matrix</comment>
	<comment type="line">// 2. [R] - relationship matrix</comment>
	<comment type="line">// 3. [B] - label matrix</comment>
	<comment type="line">//</comment>
	<comment type="line">// we don't want to score expression [R] as if it resolves labels</comment>
	<if_stmt><if>if<condition>(<expr><call><name>_AlgebraicExpression_IsVarLen</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>score</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// score expression based on the existence of filters applied to entities</comment>
<comment type="line">// in the expression, adding additional score for independent filtered entities</comment>
<function><type><name>int</name></type> <name>TraverseOrder_FilterExistenceScore</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>filtered_entities</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>filtered_entities</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type>          <name>score</name>          <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>frequency</name>     <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// independent occurrences</comment>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>char</name>  <modifier>*</modifier></type><name>src</name>           <init>=  <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>char</name>  <modifier>*</modifier></type><name>dest</name>          <init>=  <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier>  <name>char</name>  <modifier>*</modifier></type><name>edge</name>          <init>=  <expr><call><name>AlgebraicExpression_Edge</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// varible length expression shouldn't be scored on its source or destination</comment>
	<comment type="line">// as these are usually (if labeled) represented via seperated expressions</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_AlgebraicExpression_IsVarLen</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>frequency</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>filtered_entities</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>frequency</name> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>score</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>frequency</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// consider 'dest' only if different than 'src'</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>frequency</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>filtered_entities</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>frequency</name> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>score</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>frequency</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// a filtered edge will increase the expression score</comment>
	<comment type="line">// but not as much as a filtered node, as filtering an edge requires</comment>
	<comment type="line">// the expression to be traversed, unlike filters applied to nodes</comment>
	<if_stmt><if>if<condition>(<expr><name>edge</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>filtered_entities</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>edge</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		   <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>score</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// score expression based on bounded nodes</comment>
<function><type><name>int</name></type> <name>TraverseOrder_BoundVariableScore</name>
<parameter_list>(
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bound_vars</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type>         <name>score</name>       <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>src_bound</name>   <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>        <name>dest_bound</name>  <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name>         <init>=  <expr><call><name>AlgebraicExpression_Src</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name>        <init>=  <expr><call><name>AlgebraicExpression_Dest</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>src_bound</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>,
						<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>;</expr_stmt>

	<comment type="line">// consider 'dest' only if different than 'src'</comment>
	<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dest_bound</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>dest</name></expr></argument>,
							 <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>src_bound</name></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>dest_bound</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>score</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// collect independent entities</comment>
<comment type="line">// and the number of their independent occurrences from a filter tree</comment>
<comment type="line">// an indpendent entity is an entity that is the single entity in a predicate</comment>
<comment type="line">// for example: 'n.v = 1', `n` is independent</comment>
<comment type="line">// unlike 'n.v = m.v' in which `n` and `m` depend on one another</comment>
<function><type><name>void</name></type> <name>FilterTree_CollectIndependentEntities</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <comment type="line">// filter tree root</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>entities</name></decl></parameter>              <comment type="line">// [output] populated with independent frequency</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>entities</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// clone input filter-tree as we're about to modify it</comment>
	<comment type="line">// breaking it down to sub-trees</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name>  <modifier>*</modifier></type><name>tree</name>           <init>=  <expr><call><name>FilterTree_Clone</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FT_FilterNode</name>  <modifier>*</modifier><modifier>*</modifier></type><name>sub_trees</name>     <init>=  <expr><call><name>FilterTree_SubTrees</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>           <name>sub_tree_count</name>  <init>=  <expr><call><name>array_len</name><argument_list>(<argument><expr><name>sub_trees</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// for each sub tree of 'root'</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sub_tree_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// 'n' number of different entities mentioned in 't'</comment>
		<comment type="line">// if 'n' is 1, 't' relies on just a single graph entity 'e' which makes</comment>
		<comment type="line">// 'e' independent</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>raxIterator</name></type> <name>it</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>sub_trees</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>modified</name> <init>= <expr><call><name>FilterTree_CollectModified</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// set entity frequency</comment>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>freq</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>freq</name> <operator>!=</operator> <name>raxNotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>freq</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>freq</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>freq</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>key_len</name></name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>sub_trees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// score each expression and sort expressions by score</comment>
<function><type><name>void</name></type> <name>TraverseOrder_ScoreExpressions</name>
<parameter_list>(
	<parameter><decl><type><name>ScoredExp</name> <modifier>*</modifier></type><name>scored_exps</name></decl></parameter>,      <comment type="line">// sorted array of scored expressions</comment>
	<parameter><decl><type><name>AlgebraicExpression</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name></decl></parameter>,  <comment type="line">// expressions to score</comment>
	<parameter><decl><type><name>uint</name></type> <name>nexp</name></decl></parameter>,                   <comment type="line">// number of expressions</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name></decl></parameter>,             <comment type="line">// map of bounded entities</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>filtered_entities</name></decl></parameter>,      <comment type="line">// map of filtered entities</comment>
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>         <comment type="line">// query graph</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// scoring of algebraic expression is done according to 3 criterias</comment>
	<comment type="line">// ordered by strongest to weakest:</comment>
	<comment type="line">// 1. The source or destination are bound</comment>
	<comment type="line">// 2. Existence of filters on either source or destinaion</comment>
	<comment type="line">// 3. Label(s) on the expression source or destination</comment>
	<comment type="line">//</comment>
	<comment type="line">// the expressions will be evaluated in 3 phases, one for each criteria</comment>
	<comment type="line">// (from weakest to strongest)</comment>
	<comment type="line">//</comment>
	<comment type="line">// the score given for each criteria is:</comment>
	<comment type="line">// (the maximum score given in the previous criteria) + (criteria scoring function)</comment>
	<comment type="line">// where the first criteria starts with (criteria scoring function)</comment>
	<comment type="line">//</comment>
	<comment type="line">// phase 1 - check for labels on either source or destination</comment>
	<comment type="line">// expression scoring = _expression_labels_score</comment>
	<comment type="line">//</comment>
	<comment type="line">// phase 2 - check for existence of filters on either source or destinaion</comment>
	<comment type="line">// expression scoring = (max(phase 1 scoring results)) + _expression_filter_existence_score</comment>
	<comment type="line">//</comment>
	<comment type="line">// phase 3 - bound variables</comment>
	<comment type="line">// phase expression scoring = (max(phase 2 scoring results)) +  _expression_bound_variable_score</comment>
	<comment type="line">//</comment>

	<decl_stmt><decl><type><name>int</name></type>                  <name>max</name>          <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                  <name>score</name>        <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                  <name>currmax</name>      <init>=  <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlgebraicExpression</name>  <modifier>*</modifier></type><name>exp</name>         <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScoredExp</name>            <modifier>*</modifier></type><name>scored_exp</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">//  phase 1 score label</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nexp</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>exps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>scored_exp</name> <operator>=</operator> <name>scored_exps</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>TraverseOrder_LabelsScore</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scored_exp</name><operator>-&gt;</operator><name>exp</name></name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scored_exp</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// update phase 1 maximum score</comment>
	<expr_stmt><expr><name>currmax</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">//  phase 2 score filters</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>filtered_entities</name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nexp</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>scored_exp</name> <operator>=</operator> <name>scored_exps</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>scored_exp</name><operator>-&gt;</operator><name>exp</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>TraverseOrder_FilterExistenceScore</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>,
													   <argument><expr><name>filtered_entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><call><name>_AlgebraicExpression_IsVarLen</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<comment type="line">// variable length traversal should always "lose" to its</comment>
					<comment type="line">// direct prev and next expressions</comment>
					<expr_stmt><expr><name>score</name> <operator>=</operator> <name>currmax</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>currmax</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name><name>scored_exp</name><operator>-&gt;</operator><name>score</name></name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>scored_exp</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="line">// update phase 2 maximum score</comment>
		<expr_stmt><expr><name>currmax</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">//  phase 3 score bound variables</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>bound_vars</name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nexp</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>scored_exp</name> <operator>=</operator> <name>scored_exps</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>scored_exp</name><operator>-&gt;</operator><name>exp</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>TraverseOrder_BoundVariableScore</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>currmax</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>scored_exp</name><operator>-&gt;</operator><name>score</name></name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
