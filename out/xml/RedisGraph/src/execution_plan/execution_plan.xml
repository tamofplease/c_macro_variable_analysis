<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/execution_plan/execution_plan.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./ops/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./optimizations/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ast/ast_build_filter_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_build/execution_plan_modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_plan_build/execution_plan_construct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>

<comment type="line">// Allocate a new ExecutionPlan segment.</comment>
<function><type><specifier>inline</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>ExecutionPlan_NewEmptyExecutionPlan</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExecutionPlan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_PopulateExecutionPlan</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Initialize the plan's record mapping if necessary.</comment>
	<comment type="line">// It will already be set if this ExecutionPlan has been created to populate a single stream.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Build query graph</comment>
	<comment type="line">// Query graph is set if this ExecutionPlan has been created to populate a single stream.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name> <operator>=</operator> <call><name>BuildQueryGraph</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>clause_count</name> <init>= <expr><call><name>cypher_ast_query_nclauses</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>clause_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Build the appropriate operation(s) for each clause in the query.</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlanSegment_ConvertClause</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>ast</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>_ExecutionPlan_UnionPlans</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>end_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>start_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>clause_count</name> <init>= <expr><call><name>cypher_ast_query_nclauses</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name> <modifier>*</modifier></type><name>union_indices</name> <init>= <expr><call><name>AST_GetClauseIndices</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_UNION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>union_indices</name></expr></argument>, <argument><expr><name>clause_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>union_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>union_indices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>union_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Placeholder for each execution plan, these all will be joined
	 * via a single UNION operation. */</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name><name>plans</name><index>[<expr><name>union_count</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>union_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Create an AST segment from which we will build an execution plan.</comment>
		<expr_stmt><expr><name>end_offset</name> <operator>=</operator> <name><name>union_indices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast_segment</name> <init>= <expr><call><name>AST_NewSegment</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>start_offset</name></expr></argument>, <argument><expr><name>end_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>plans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>NewExecutionPlan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>AST_Free</name><argument_list>(<argument><expr><name>ast_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Free the AST segment.</comment>

		<comment type="line">// Next segment starts where this one ends.</comment>
		<expr_stmt><expr><name>start_offset</name> <operator>=</operator> <name><name>union_indices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// AST segments have been freed, set master AST in QueryCtx.</comment>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>union_indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Join streams:
	 * MATCH (a) RETURN a UNION MATCH (a) RETURN a ....
	 * left stream:     [Scan]-&gt;[Project]-&gt;[Results]
	 * right stream:    [Scan]-&gt;[Project]-&gt;[Results]
	 *
	 * Joined:
	 * left stream:     [Scan]-&gt;[Project]
	 * right stream:    [Scan]-&gt;[Project]
	 *                  [Union]-&gt;[Distinct]-&gt;[Result] */</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><call><name>ExecutionPlan_NewEmptyExecutionPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>results_op</name> <init>= <expr><call><name>NewResultsOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>results_op</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>results_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Introduce distinct only if `ALL` isn't specified.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>union_clause</name> <init>= <expr><call><name>AST_GetClause</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_UNION</name></expr></argument>,
														 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>cypher_ast_union_has_all</name><argument_list>(<argument><expr><name>union_clause</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>clause_count</name> <init>= <expr><call><name>cypher_ast_query_nclauses</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>last_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>clause_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>last_clause</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_RETURN</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>projection_count</name> <init>= <expr><call><name>cypher_ast_return_nprojections</name><argument_list>(<argument><expr><name>last_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Build a stack array to hold the aliases to perform Distinct on</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>projections</name><index>[<expr><name>projection_count</name></expr>]</index></name></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>projection_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<comment type="line">// Retrieve aliases from the RETURN clause</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><call><name>cypher_ast_return_get_projection</name><argument_list>(<argument><expr><name>last_clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><call><name>cypher_ast_projection_get_alias</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>alias</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>cypher_ast_projection_get_expression</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>projections</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<comment type="line">// Build a Distinct op and add it to the op tree</comment>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>distinct_op</name> <init>= <expr><call><name>NewDistinctOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>projections</name></expr></argument>, <argument><expr><name>projection_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>results_op</name></expr></argument>, <argument><expr><name>distinct_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>distinct_op</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>join_op</name> <init>= <expr><call><name>NewJoinOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>join_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Join execution plans.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>union_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>sub_plan</name> <init>= <expr><name><name>plans</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>sub_plan</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_RESULTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Remove OP_Result.</comment>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op_result</name> <init>= <expr><name><name>sub_plan</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_RemoveOp</name><argument_list>(<argument><expr><name>sub_plan</name></expr></argument>, <argument><expr><name><name>sub_plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>op_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>join_op</name></expr></argument>, <argument><expr><name><name>sub_plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>plan</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>_process_segment</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>segment_start_idx</name></decl></parameter>,
									   <parameter><decl><type><name>uint</name></type> <name>segment_end_idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ast</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>segment_start_idx</name> <operator>&lt;=</operator> <name>segment_end_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Construct a new ExecutionPlanSegment.</comment>
	<expr_stmt><expr><name>segment</name> <operator>=</operator> <call><name>ExecutionPlan_NewEmptyExecutionPlan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segment</name><operator>-&gt;</operator><name>ast_segment</name></name> <operator>=</operator> <name>ast</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_PopulateExecutionPlan</name><argument_list>(<argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>segment</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ExecutionPlan</name> <modifier>*</modifier><modifier>*</modifier></type><name>_process_segments</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>nsegments</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="line">// number of segments</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>seg_end_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="line">// segment clause end index</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>clause_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="line">// number of clauses</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>seg_start_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="line">// segment clause start index</comment>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast_segment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>          <comment type="line">// segment AST</comment>
	<decl_stmt><decl><type><name>uint</name> <modifier>*</modifier></type><name>segment_indices</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>     <comment type="line">// array segment bounds</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    <comment type="line">// portion of the entire execution plan</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier><modifier>*</modifier></type><name>segments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// constructed segments</comment>

	<expr_stmt><expr><name>clause_count</name> <operator>=</operator> <call><name>cypher_ast_query_nclauses</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// bound segments</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="block">/* retrieve the indices of each WITH clause to properly set
	 * the segment's bounds.
	 * Every WITH clause demarcates the beginning of a new segment. */</comment>
	<expr_stmt><expr><name>segment_indices</name> <operator>=</operator> <call><name>AST_GetClauseIndices</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// last segment</comment>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>segment_indices</name></expr></argument>, <argument><expr><name>clause_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nsegments</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>segment_indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>segments</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>ExecutionPlan</name> <operator>*</operator></expr></argument>, <argument><expr><name>nsegments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// process segments</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><name>seg_start_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsegments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>seg_end_idx</name> <operator>=</operator> <name><name>segment_indices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>seg_end_idx</name> <operator>-</operator> <name>seg_start_idx</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="line">// skip empty segment</comment>

		<comment type="line">// slice the AST to only include the clauses in the current segment</comment>
		<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast_segment</name> <init>= <expr><call><name>AST_NewSegment</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>seg_start_idx</name></expr></argument>, <argument><expr><name>seg_end_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// create ExecutionPlan segment that represents this slice of the AST</comment>
		<expr_stmt><expr><name>segment</name> <operator>=</operator> <call><name>_process_segment</name><argument_list>(<argument><expr><name>ast_segment</name></expr></argument>, <argument><expr><name>seg_start_idx</name></expr></argument>, <argument><expr><name>seg_end_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// The next segment will start where the current one ended.</comment>
		<expr_stmt><expr><name>seg_start_idx</name> <operator>=</operator> <name>seg_end_idx</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Restore the overall AST.</comment>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>segment_indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>segments</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>_tie_segments</name>
<parameter_list>(
	<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier><modifier>*</modifier></type><name>segments</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>segment_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FT_FilterNode</name>  <modifier>*</modifier></type><name>ft</name>                  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="line">// filters following WITH</comment>
	<decl_stmt><decl><type><name>OpBase</name>         <modifier>*</modifier></type><name>connecting_op</name>       <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="line">// op connecting one segment to another</comment>
	<decl_stmt><decl><type><name>OpBase</name>         <modifier>*</modifier></type><name>prev_connecting_op</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="line">// root of previous segment</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name>  <modifier>*</modifier></type><name>prev_segment</name>        <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecutionPlan</name>  <modifier>*</modifier></type><name>current_segment</name>     <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AST</name>            <modifier>*</modifier></type><name>master_ast</name>          <init>=  <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// top-level AST of plan</comment>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// merge segments</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segment_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>segment</name> <init>= <expr><name><name>segments</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><name><name>segment</name><operator>-&gt;</operator><name>ast_segment</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// find the firstmost non-argument operation in this segment</comment>
		<expr_stmt><expr><name>prev_connecting_op</name> <operator>=</operator> <name>connecting_op</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier><modifier>*</modifier></type><name>taps</name> <init>= <expr><call><name>ExecutionPlan_LocateTaps</name><argument_list>(<argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name>taps</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>connecting_op</name> <operator>=</operator> <name><name>taps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>taps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// tie the current segment's tap to the previous segment's root op</comment>
		<if_stmt><if>if<condition>(<expr><name>prev_segment</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// validate the connecting operation</comment>
			<comment type="line">// the connecting operation may already have children</comment>
			<comment type="line">// if it's been attached to a previous scope</comment>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>connecting_op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_PROJECT</name> <operator>||</operator>
			       <name><name>connecting_op</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_AGGREGATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ExecutionPlan_AddOp</name><argument_list>(<argument><expr><name>connecting_op</name></expr></argument>, <argument><expr><name><name>prev_segment</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// build pattern comprehension ops</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<comment type="line">// WITH projections</comment>
		<if_stmt><if>if<condition>(<expr><name>prev_segment</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>opening_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>opening_clause</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint</name></type> <name>projections</name> <init>= <expr><call><name>cypher_ast_with_nprojections</name><argument_list>(<argument><expr><name>opening_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>projections</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><call><name>cypher_ast_with_get_projection</name><argument_list>(<argument><expr><name>opening_clause</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>buildPatternComprehensionOps</name><argument_list>(<argument><expr><name>prev_segment</name></expr></argument>, <argument><expr><name>connecting_op</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>buildPatternPathOps</name><argument_list>(<argument><expr><name>prev_segment</name></expr></argument>, <argument><expr><name>connecting_op</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// RETURN projections</comment>
		<if_stmt><if>if <condition>(<expr><name><name>segment</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_RESULTS</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>clause_count</name> <init>= <expr><call><name>cypher_ast_query_nclauses</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>closing_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>clause_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><name><name>segment</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_PROJECT</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OPType_AGGREGATE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
			<decl_stmt><decl><type><name>uint</name></type> <name>projections</name> <init>= <expr><call><name>cypher_ast_return_nprojections</name><argument_list>(<argument><expr><name>closing_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>projections</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><call><name>cypher_ast_return_get_projection</name><argument_list>(<argument><expr><name>closing_clause</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>buildPatternComprehensionOps</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>buildPatternPathOps</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>prev_segment</name> <operator>=</operator> <name>segment</name></expr>;</expr_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// introduce projection filters</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<comment type="line">// Retrieve the current projection clause to build any necessary filters</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>opening_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>opening_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Only WITH clauses introduce filters at this level;</comment>
		<comment type="line">// all other scopes will be fully built at this point.</comment>
		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>!=</operator> <name>CYPHER_AST_WITH</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Build filters required by current segment.</comment>
		<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ft</name> <operator>=</operator> <call><name>AST_BuildFilterTreeFromClauses</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opening_clause</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ft</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// If any of the filtered variables operate on a WITH alias,</comment>
		<comment type="line">// place the filter op above the projection.</comment>
		<if_stmt><if>if<condition>(<expr><call><name>FilterTree_FiltersAlias</name><argument_list>(<argument><expr><name>ft</name></expr></argument>, <argument><expr><name>opening_clause</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>filter_op</name> <init>= <expr><call><name>NewFilterOp</name><argument_list>(<argument><expr><name>current_segment</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_PushBelow</name><argument_list>(<argument><expr><name>connecting_op</name></expr></argument>, <argument><expr><name>filter_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// None of the filtered variables are aliases;</comment>
			<comment type="line">// filter ops may be placed anywhere in the scope.</comment>
			<expr_stmt><expr><call><name>ExecutionPlan_PlaceFilterOps</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>connecting_op</name></expr></argument>, <argument><expr><name>prev_connecting_op</name></expr></argument>, <argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Restore the master AST.</comment>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>master_ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// The last ExecutionPlan segment is the master ExecutionPlan.</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><name><name>segments</name><index>[<expr><name>segment_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>plan</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Add an implicit "Result" operation to ExecutionPlan if necessary.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_implicit_result</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// If the query culminates in a procedure call, it implicitly returns results.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OPType_PROC_CALL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>results_op</name> <init>= <expr><call><name>NewResultsOp</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExecutionPlan_UpdateRoot</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>results_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>NewExecutionPlan</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// handle UNION if there are any</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>union_query</name> <init>= <expr><call><name>AST_ContainsClause</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_UNION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>union_query</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>_ExecutionPlan_UnionPlans</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// execution plans are created in 1 or more segments</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier><modifier>*</modifier></type><name>segments</name> <init>= <expr><call><name>_process_segments</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>segments</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>segment_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>segment_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// connect all segments into a single ExecutionPlan</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><call><name>_tie_segments</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>segment_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// the root operation is OpResults only if the query culminates in a RETURN</comment>
	<comment type="line">// or CALL clause</comment>
	<expr_stmt><expr><call><name>_implicit_result</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// clean up</comment>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>plan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_PreparePlan</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Plan should be prepared only once.</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>plan</name><operator>-&gt;</operator><name>prepared</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>optimizePlan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>prepared</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>rax</name> <modifier>*</modifier></type><name>ExecutionPlan_GetMappings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>&amp;&amp;</operator> <name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Record</name></type> <name>ExecutionPlan_BorrowRecord</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>mapping</name> <init>= <expr><call><name>ExecutionPlan_GetMappings</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>record_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get a Record from the pool and set its owner and mapping.</comment>
	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><call><name>ObjectPool_NewItem</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>record_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>plan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_ReturnRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>&amp;&amp;</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ObjectPool_DeleteItem</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>record_pool</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Execution plan initialization</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_ExecutionPlan_InitRecordPool</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>record_pool</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<comment type="block">/* Initialize record pool.
	 * Determine Record size to inform ObjectPool allocation. */</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>entries_count</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>rec_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_Record</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>entries_count</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">// Create a data block with initial capacity of 256 records.</comment>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>record_pool</name></name> <operator>=</operator> <call><name>ObjectPool_New</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>rec_size</name></expr></argument>, <argument><expr><operator>(</operator><name>fpDestructor</name><operator>)</operator><name>Record_FreeEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlanInit</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// If the ExecutionPlan associated with this op hasn't built a record pool yet, do so now.</comment>
	<expr_stmt><expr><call><name>_ExecutionPlan_InitRecordPool</name><argument_list>(<argument><expr><operator>(</operator><name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>root</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Initialize the operation if necessary.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>root</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Continue initializing downstream operations.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>_ExecutionPlanInit</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_Init</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_ExecutionPlanInit</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ResultSet</name> <modifier>*</modifier></type><name>ExecutionPlan_Execute</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<macro><name>ASSERT</name><argument_list>(<argument>plan-&gt;prepared</argument>)</argument_list></macro>
	<comment type="block">/* Set an exception-handling breakpoint to capture run-time errors.
	 * encountered_error will be set to 0 when setjmp is invoked, and will be nonzero if
	 * a downstream exception returns us to this breakpoint. */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>encountered_error</name> <init>= <expr><call><name>SET_EXCEPTION_HANDLER</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Encountered a run-time error - return immediately.</comment>
	<if_stmt><if>if<condition>(<expr><name>encountered_error</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>QueryCtx_GetResultSet</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_Init</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Record</name></type> <name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Execute the root operation and free the processed Record until the data stream is depleted.</comment>
	<while>while<condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>OpBase_Consume</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ExecutionPlan_ReturnRecord</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<return>return <expr><call><name>QueryCtx_GetResultSet</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Execution plan draining</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// NOP operation consume routine for immediately terminating execution.</comment>
<function><type><specifier>static</specifier> <name>Record</name></type> <name>deplete_consume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>OpBase</name></name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return true if execution plan been drained</comment>
<comment type="line">// false otherwise</comment>
<function><type><name>bool</name></type> <name>ExecutionPlan_Drained</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>plan</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>consume</name></name> <operator>==</operator> <name>deplete_consume</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlan_Drain</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>consume</name></name> <operator>=</operator> <name>deplete_consume</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>_ExecutionPlan_Drain</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// Resets each operation consume function to simply return NULL</comment>
<comment type="line">// this will cause the execution-plan to quickly deplete</comment>
<function><type><name>void</name></type> <name>ExecutionPlan_Drain</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>plan</name> <operator>&amp;&amp;</operator> <name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_ExecutionPlan_Drain</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Execution plan profiling</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlan_InitProfiling</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>consume</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>consume</name></name> <operator>=</operator> <name>OpBase_Profile</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpStats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileExecTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileRecordCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_ExecutionPlan_InitProfiling</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlan_FinalizeProfiling</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileExecTime</name></name> <operator>-=</operator> <name><name>child</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileExecTime</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_ExecutionPlan_FinalizeProfiling</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>stats</name><operator>-&gt;</operator><name>profileExecTime</name></name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>   <comment type="line">// Milliseconds.</comment>
</block_content>}</block></function>

<function><type><name>ResultSet</name> <modifier>*</modifier></type><name>ExecutionPlan_Profile</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>_ExecutionPlan_InitProfiling</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><call><name>ExecutionPlan_Execute</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_ExecutionPlan_FinalizeProfiling</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rs</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Execution plan free functions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ExecutionPlan_FreeInternals</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>plan</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>connected_components</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>connected_component_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>connected_components</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>connected_component_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>QueryGraph_Free</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>connected_components</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>connected_components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>QueryGraph_Free</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>query_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>record_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>record_pool</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ObjectPool_Free</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>record_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>ast_segment</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AST_Free</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>ast_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Free an op tree and its associated ExecutionPlan segments.</comment>
<function><type><specifier>static</specifier> <name>ExecutionPlan</name> <modifier>*</modifier></type><name>_ExecutionPlan_FreeOpTree</name><parameter_list>(<parameter><decl><type><name>OpBase</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>child_plan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>prev_child_plan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Store a reference to the current plan.</comment>
	<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>current_plan</name> <init>= <expr><operator>(</operator><name>ExecutionPlan</name> <operator>*</operator><operator>)</operator><name><name>op</name><operator>-&gt;</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>childCount</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>child_plan</name> <operator>=</operator> <call><name>_ExecutionPlan_FreeOpTree</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// In most cases all children will share the same plan, but if they don't</comment>
		<comment type="line">// (for an operation like UNION) then free the now-obsolete previous child plan.</comment>
		<if_stmt><if>if<condition>(<expr><name>prev_child_plan</name> <operator>!=</operator> <name>child_plan</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>_ExecutionPlan_FreeInternals</name><argument_list>(<argument><expr><name>prev_child_plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>prev_child_plan</name> <operator>=</operator> <name>child_plan</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Free this op.</comment>
	<expr_stmt><expr><call><name>OpBase_Free</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Free each ExecutionPlan segment once all ops associated with it have been freed.</comment>
	<if_stmt><if>if<condition>(<expr><name>current_plan</name> <operator>!=</operator> <name>child_plan</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_ExecutionPlan_FreeInternals</name><argument_list>(<argument><expr><name>child_plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>current_plan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionPlan_Free</name><parameter_list>(<parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>plan</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Free all ops and ExecutionPlan segments.</comment>
	<expr_stmt><expr><call><name>_ExecutionPlan_FreeOpTree</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Free the final ExecutionPlan segment.</comment>
	<expr_stmt><expr><call><name>_ExecutionPlan_FreeInternals</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
