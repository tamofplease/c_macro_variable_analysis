<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/commands/cmd_dispatcher.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmd_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/thpool/pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/blocked_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../configuration/config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_VERSION_MISSING</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<comment type="line">// command handler function pointer</comment>
<typedef>typedef <function_decl><type><name>void</name></type>(<modifier>*</modifier><name>Command_Handler</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="line">// read configuration flags</comment>
<comment type="line">// returning REDIS_MODULE_ERR if flag parsing failed</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_read_flags</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,   <comment type="line">// commands arguments</comment>
  	<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                   <comment type="line">// number of arguments</comment>
  	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>compact</name></decl></parameter>,              <comment type="line">// compact result-set format</comment>
  	<parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>,         <comment type="line">// query level timeout </comment>
  	<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>timeout_rw</name></decl></parameter>,           <comment type="line">// apply timeout on both read and write queries</comment>
  	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>graph_version</name></decl></parameter>,        <comment type="line">// graph version [UNUSED]</comment>
  	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>errmsg</name></decl></parameter>               <comment type="line">// reported error message</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>compact</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timeout</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>max_timeout</name></decl>;</decl_stmt>

	<comment type="line">// set defaults</comment>
	<expr_stmt><expr><operator>*</operator><name>compact</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>  <comment type="line">// verbose</comment>
	<expr_stmt><expr><operator>*</operator><name>graph_version</name> <operator>=</operator> <name>GRAPH_VERSION_MISSING</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_TIMEOUT_DEFAULT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_TIMEOUT_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>max_timeout</name> <operator>!=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name> <operator>||</operator>
	   <operator>*</operator><name>timeout</name> <operator>!=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>timeout_rw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>timeout</name> <operator>=</operator> <name>max_timeout</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_TIMEOUT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>timeout_rw</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// GRAPH.QUERY &lt;GRAPH_KEY&gt; &lt;QUERY&gt;</comment>
	<comment type="line">// make sure we've got more than 3 arguments</comment>
	<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// scan arguments</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--compact"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// compact result-set</comment>
			<expr_stmt><expr><operator>*</operator><name>compact</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// query timeout</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>REDISMODULE_ERR</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// Set the current argument to the timeout value.</comment>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RedisModule_StringToLongLong</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if<condition>(<expr><name>max_timeout</name> <operator>!=</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name> <operator>&amp;&amp;</operator>
				   <operator>*</operator><name>timeout</name> <operator>&gt;</operator> <name>max_timeout</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><literal type="string">"The query TIMEOUT parameter value cannot exceed the TIMEOUT_MAX configuration parameter value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name> <operator>&amp;&amp;</operator> <name>timeout_rw</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_TIMEOUT_DEFAULT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>(<expr><name>timeout</name> <operator>==</operator> <name>CONFIG_TIMEOUT_NO_TIMEOUT</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>timeout</name> <operator>=</operator> <name>max_timeout</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Emit error on missing, negative, or non-numeric timeout values.</comment>
			<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>REDISMODULE_OK</name> <operator>||</operator> <operator>*</operator><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse query timeout value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><name>GRAPH_VERSION_MISSING</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>REDISMODULE_ERR</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// Set the current argument to the version value.</comment>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>RedisModule_StringToLongLong</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>graph_version</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Emit error on missing, negative, or non-numeric version values.</comment>
			<if_stmt><if>if<condition>(<expr><name>err</name> <operator>!=</operator> <name>REDISMODULE_OK</name> <operator>||</operator> <name><name>v</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>UINT_MAX</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse graph version value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>REDISMODULE_ERR</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns false if client provided a graph version</comment>
<comment type="line">// which mismatch the current graph version</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_verifyGraphVersion</name><parameter_list>(<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// caller did not specify graph version</comment>
	<if_stmt><if>if<condition>(<expr><name>version</name> <operator>==</operator> <name>GRAPH_VERSION_MISSING</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><call><name>GraphContext_GetVersion</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>version</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_rejectOnVersionMismatch</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"version mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Return true if the command has a valid number of arguments.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_validate_command_arity</name><parameter_list>(<parameter><decl><type><name>GRAPH_Commands</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arity</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>CMD_QUERY</name></expr>:</case>
		<case>case <expr><name>CMD_RO_QUERY</name></expr>:</case>
		<case>case <expr><name>CMD_EXPLAIN</name></expr>:</case>
		<case>case <expr><name>CMD_PROFILE</name></expr>:</case>
			<comment type="line">// Expect a command, graph name, a query, and optional config flags.</comment>
			<return>return <expr><name>arity</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>arity</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"encountered unhandled query type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// Get command handler.</comment>
<function><type><specifier>static</specifier> <name>Command_Handler</name></type> <name>get_command_handler</name><parameter_list>(<parameter><decl><type><name>GRAPH_Commands</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>CMD_QUERY</name></expr>:</case>
		<case>case <expr><name>CMD_RO_QUERY</name></expr>:</case>
			<return>return <expr><name>Graph_Query</name></expr>;</return>
		<case>case <expr><name>CMD_EXPLAIN</name></expr>:</case>
			<return>return <expr><name>Graph_Explain</name></expr>;</return>
		<case>case <expr><name>CMD_PROFILE</name></expr>:</case>
			<return>return <expr><name>Graph_Profile</name></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Convert from string representation to an enum.</comment>
<function><type><specifier>static</specifier> <name>GRAPH_Commands</name></type> <name>determine_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr><literal type="string">"graph.QUERY"</literal></expr></argument>)</argument_list></call>    <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CMD_QUERY</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr><literal type="string">"graph.RO_QUERY"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CMD_RO_QUERY</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr><literal type="string">"graph.EXPLAIN"</literal></expr></argument>)</argument_list></call>  <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CMD_EXPLAIN</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr><literal type="string">"graph.PROFILE"</literal></expr></argument>)</argument_list></call>  <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CMD_PROFILE</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// we shouldn't reach this point</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>CMD_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>should_command_create_graph</name><parameter_list>(<parameter><decl><type><name>GRAPH_Commands</name></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>CMD_QUERY</name></expr>:</case>
		<case>case <expr><name>CMD_PROFILE</name></expr>:</case>
			<return>return <expr><name>true</name></expr>;</return>
		<case>case <expr><name>CMD_EXPLAIN</name></expr>:</case>
		<case>case <expr><name>CMD_RO_QUERY</name></expr>:</case>
			<return>return <expr><name>false</name></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>CommandDispatch</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>compact</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>timeout_rw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>graph_name</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_name</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GRAPH_Commands</name></type> <name>cmd</name> <init>= <expr><call><name>determine_command</name><argument_list>(<argument><expr><name>command_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>_validate_command_arity</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>RedisModule_WrongArity</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// parse additional arguments</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>_read_flags</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compact</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <name>REDISMODULE_ERR</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// emit error and exit if argument parsing failed</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// the API reference dictates that registered functions should always return OK</comment>
		<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>shouldCreate</name> <init>= <expr><call><name>should_command_create_graph</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>GraphContext_Retrieve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>shouldCreate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// if GraphContext is null, key access failed and an error been emitted</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// return incase caller provided a mismatched graph version</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>_verifyGraphVersion</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_rejectOnVersionMismatch</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>GraphContext_GetVersion</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Release the GraphContext, as we increased its reference count</comment>
		<comment type="line">// when retrieving it.</comment>
		<expr_stmt><expr><call><name>GraphContext_DecreaseRefCount</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Determin query execution context
	 * queries issued within a LUA script or multi exec block must
	 * run on Redis main thread, others can run on different threads. */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>RedisModule_GetContextFlags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_replicated</name> <init>= <expr><call><name>RedisModule_GetContextFlags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>REDISMODULE_CTX_FLAGS_REPLICATED</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>main_thread</name> <init>= <expr><operator>(</operator><name>is_replicated</name> <operator>||</operator> 
		<operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REDISMODULE_CTX_FLAGS_MULTI</name>       <operator>|</operator>
				<name>REDISMODULE_CTX_FLAGS_LUA</name>           <operator>|</operator>
				<name>REDISMODULE_CTX_FLAGS_DENY_BLOCKING</name> <operator>|</operator>
				<name>REDISMODULE_CTX_FLAGS_LOADING</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecutorThread</name></type> <name>exec_thread</name> <init>=  <expr><ternary><condition><expr><name>main_thread</name></expr> ?</condition><then> <expr><name>EXEC_THREAD_MAIN</name></expr> </then><else>: <expr><name>EXEC_THREAD_READER</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Command_Handler</name></type> <name>handler</name> <init>= <expr><call><name>get_command_handler</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>exec_thread</name> <operator>==</operator> <name>EXEC_THREAD_MAIN</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// run query on Redis main thread</comment>
		<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>CommandCtx_New</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>exec_thread</name></expr></argument>,
								 <argument><expr><name>is_replicated</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout_rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>handler</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// run query on a dedicated thread</comment>
		<decl_stmt><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><call><name>RedisGraph_BlockClient</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>CommandCtx_New</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bc</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>exec_thread</name></expr></argument>,
								 <argument><expr><name>is_replicated</name></expr></argument>, <argument><expr><name>compact</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout_rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>ThreadPools_AddWorkReader</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>THPOOL_QUEUE_FULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// Report an error once our workers thread pool internal queue</comment>
			<comment type="line">// is full, this error usually happens when the server is</comment>
			<comment type="line">// under heavy load and is unable to catch up</comment>
			<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Max pending queries exceeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Release the GraphContext, as we increased its reference count</comment>
			<comment type="line">// when retrieving it.</comment>
			<expr_stmt><expr><call><name>GraphContext_DecreaseRefCount</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CommandCtx_Free</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

</unit>
