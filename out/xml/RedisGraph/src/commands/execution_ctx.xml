<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/commands/execution_ctx.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan/execution_plan_clone.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ExecutionType</name></type> <name>_GetExecutionTypeFromAST</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_type_t</name></type> <name>root_type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>root_type</name> <operator>==</operator> <name>CYPHER_AST_QUERY</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>EXECUTION_TYPE_QUERY</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>root_type</name> <operator>==</operator> <name>CYPHER_AST_CREATE_NODE_PROPS_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>EXECUTION_TYPE_INDEX_CREATE</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>root_type</name> <operator>==</operator> <name>CYPHER_AST_CREATE_PATTERN_PROPS_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>EXECUTION_TYPE_INDEX_CREATE</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>root_type</name> <operator>==</operator> <name>CYPHER_AST_DROP_PROPS_INDEX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>EXECUTION_TYPE_INDEX_DROP</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"Unknown execution type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ExecutionCtx</name> <modifier>*</modifier></type><name>_ExecutionCtx_New</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>,
									   <parameter><decl><type><name>ExecutionType</name></type> <name>exec_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExecutionCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>ast</name></name>       <operator>=</operator> <name>ast</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>plan</name></name>      <operator>=</operator> <name>plan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>cached</name></name>    <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>exec_type</name></name> <operator>=</operator> <name>exec_type</name></expr>;</expr_stmt>

	<return>return <expr><name>exec_ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>ExecutionCtx_Clone</name><parameter_list>(<parameter><decl><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>execution_ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExecutionCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>execution_ctx</name><operator>-&gt;</operator><name>ast</name></name> <operator>=</operator> <call><name>AST_ShallowCopy</name><argument_list>(<argument><expr><name><name>orig</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// set the AST copy in thread local storage</comment>
	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name><name>execution_ctx</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>execution_ctx</name><operator>-&gt;</operator><name>plan</name></name>      <operator>=</operator> <call><name>ExecutionPlan_Clone</name><argument_list>(<argument><expr><name><name>orig</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>execution_ctx</name><operator>-&gt;</operator><name>cached</name></name>    <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>cached</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>execution_ctx</name><operator>-&gt;</operator><name>exec_type</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>exec_type</name></name></expr>;</expr_stmt>

	<return>return <expr><name>execution_ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AST</name> <modifier>*</modifier></type><name>_ExecutionCtx_ParseAST</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_string</name></decl></parameter>,
								   <parameter><decl><type><name>cypher_parse_result_t</name> <modifier>*</modifier></type><name>params_parse_result</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>cypher_parse_result_t</name> <modifier>*</modifier></type><name>query_parse_result</name> <init>= <expr><call><name>parse_query</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// If no output from the parser, the query is not valid.</comment>
	<if_stmt><if>if<condition>(<expr><call><name>ErrorCtx_EncounteredError</name><argument_list>()</argument_list></call> <operator>||</operator> <name>query_parse_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>parse_result_free</name><argument_list>(<argument><expr><name>query_parse_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>query_parse_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>parse_result_free</name><argument_list>(<argument><expr><name>params_parse_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Prepare the constructed AST.</comment>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>AST_Build</name><argument_list>(<argument><expr><name>query_parse_result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Set parameters parse result in the execution ast.</comment>
	<expr_stmt><expr><call><name>AST_SetParamsParseResult</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>params_parse_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ast</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>ExecutionCtx_FromQuery</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>query</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_string</name></decl>;</decl_stmt>

	<comment type="line">// Parse and validate parameters only. Extract query string.</comment>
	<comment type="line">// Return invalid execution context if there isn't a parser result.</comment>
	<decl_stmt><decl><type><name>cypher_parse_result_t</name> <modifier>*</modifier></type><name>params_parse_result</name> <init>= <expr><call><name>parse_params</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
															  <argument><expr><operator>&amp;</operator><name>query_string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Parameter parsing failed, return NULL.</comment>
	<if_stmt><if>if<condition>(<expr><name>params_parse_result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// query included only params e.g. 'cypher a=1' was provided</comment>
	<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>parse_result_free</name><argument_list>(<argument><expr><name>params_parse_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Error: empty query."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// update query context with the query without params</comment>
	<decl_stmt><decl><type><name>QueryCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>QueryCtx_GetQueryCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>query_data</name><operator>.</operator><name>query_no_params</name></name> <operator>=</operator> <name>query_string</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>GraphContext_GetCache</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Check the cache to see if we already have a cached context for this query.</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>Cache_GetValue</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Set parameters parse result in the execution ast.</comment>
		<expr_stmt><expr><call><name>AST_SetParamsParseResult</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><name>params_parse_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>cached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// No cached execution plan, try to parse the query.</comment>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>_ExecutionCtx_ParseAST</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>, <argument><expr><name>params_parse_result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// if query parsing failed, return NULL</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ast</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// if no error has been set, emit one now</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ErrorCtx_EncounteredError</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Error: could not parse query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>ExecutionType</name></type> <name>exec_type</name> <init>= <expr><call><name>_GetExecutionTypeFromAST</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// In case of valid query, create execution plan, and cache it and the AST.</comment>
	<if_stmt><if>if<condition>(<expr><name>exec_type</name> <operator>==</operator> <name>EXECUTION_TYPE_QUERY</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ExecutionPlan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><call><name>NewExecutionPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// TODO: there must be a better way to understand if the execution-plan</comment>
		<comment type="line">// was constructed correctly,</comment>
		<comment type="line">// maybe free the plan within NewExecutionPlan, if error was encountered</comment>
		<comment type="line">// and return NULL ?</comment>
		<if_stmt><if>if<condition>(<expr><call><name>ErrorCtx_EncounteredError</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// Encountered an error in ExecutionPlan construction,</comment>
			<comment type="line">// clean up and return NULL.</comment>
			<expr_stmt><expr><call><name>AST_Free</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecutionPlan_Free</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>exec_ctx_to_cache</name> <init>= <expr><call><name>_ExecutionCtx_New</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>,
															<argument><expr><name>exec_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>exec_ctx_from_cache</name> <init>= <expr><call><name>Cache_SetGetValue</name><argument_list>(<argument><expr><name>cache</name></expr></argument>,
															  <argument><expr><name>query_string</name></expr></argument>, <argument><expr><name>exec_ctx_to_cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>exec_ctx_from_cache</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name>_ExecutionCtx_New</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>exec_type</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ExecutionCtx_Free</name><parameter_list>(<parameter><decl><type><name>ExecutionCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>plan</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ExecutionPlan_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ast</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AST_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
