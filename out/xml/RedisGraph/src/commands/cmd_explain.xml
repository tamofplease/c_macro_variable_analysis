<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/commands/cmd_explain.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmd_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"execution_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../index/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan/execution_plan.h"</cpp:file></cpp:include>

<comment type="block">/* Builds an execution plan but does not execute it
 * reports plan back to the client
 * Args:
 * argv[1] graph name
 * argv[2] query */</comment>
<function><type><name>void</name></type> <name>Graph_Explain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>lock_acquired</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommandCtx</name>     <modifier>*</modifier></type><name>command_ctx</name> <init>= <expr><operator>(</operator><name>CommandCtx</name> <operator>*</operator><operator>)</operator><name>args</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name>         <init>= <expr><call><name>CommandCtx_GetRedisCtx</name><argument_list>(<argument><expr><name>command_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphContext</name>   <modifier>*</modifier></type><name>gc</name>          <init>= <expr><call><name>CommandCtx_GetGraphContext</name><argument_list>(<argument><expr><name>command_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecutionCtx</name>   <modifier>*</modifier></type><name>exec_ctx</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>QueryCtx_SetGlobalExecutionCtx</name><argument_list>(<argument><expr><name>command_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CommandCtx_TrackCtx</name><argument_list>(<argument><expr><name>command_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Error: empty query."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>QueryCtx_BeginTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Start query timing.</comment>

	<comment type="block">/* Retrieve the required execution items and information:
	 * 1. Execution plan
	 * 2. Whether these items were cached or not */</comment>
	<decl_stmt><decl><type><name>bool</name></type>           <name>cached</name>     <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecutionPlan</name>  <modifier>*</modifier></type><name>plan</name>      <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>exec_ctx</name>  <operator>=</operator>  <call><name>ExecutionCtx_FromQuery</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>exec_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>plan</name> <operator>=</operator> <name><name>exec_ctx</name><operator>-&gt;</operator><name>plan</name></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ExecutionType</name></type> <name>exec_type</name> <init>= <expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>exec_type</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>exec_type</name> <operator>==</operator> <name>EXECUTION_TYPE_INDEX_CREATE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Create Index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>exec_type</name> <operator>==</operator> <name>EXECUTION_TYPE_INDEX_DROP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Drop Index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Graph_AcquireReadLock</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lock_acquired</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_PreparePlan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecutionPlan_Init</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">// Initialize the plan's ops.</comment>

	<if_stmt><if>if<condition>(<expr><call><name>ErrorCtx_EncounteredError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ExecutionPlan_Print</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Print the execution plan.</comment>

<label><name>cleanup</name>:</label>
	<if_stmt><if>if<condition>(<expr><call><name>ErrorCtx_EncounteredError</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ErrorCtx_EmitException</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>lock_acquired</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Graph_ReleaseLock</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ExecutionCtx_Free</name><argument_list>(<argument><expr><name>exec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GraphContext_DecreaseRefCount</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CommandCtx_Free</name><argument_list>(<argument><expr><name>command_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>QueryCtx_Free</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Reset the QueryCtx and free its allocations.</comment>
	<expr_stmt><expr><call><name>ErrorCtx_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
