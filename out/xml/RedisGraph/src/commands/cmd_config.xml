<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/commands/cmd_config.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../configuration/config.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>_Config_get_all</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>config_count</name> <init>= <expr><name>Config_END_MARKER</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>config_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>Config_Option_Field</name></type> <name>field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name>Config_END_MARKER</name></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_name</name> <init>= <expr><call><name>Config_Field_name</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <name>config_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Configuration field was not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RedisModule_ReplyWithCString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>config_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_Config_get</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// return the given config's value to the user</comment>
	<decl_stmt><decl><type><name>Config_Option_Field</name></type> <name>config_field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_name</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// return entire configuration</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>config_name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_Config_get_all</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// return specific configuration field</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Config_Contains_field</name><argument_list>(<argument><expr><name>config_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config_field</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown configuration field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>config_field</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithCString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>config_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Configuration field was not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_Config_set</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate configuration</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// dryrun configuration, make sure all configurations are valid</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// retrieve and validate config field</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<decl_stmt><decl><type><name>Config_Option_Field</name></type> <name>config_field</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_name</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Config_Contains_field</name><argument_list>(<argument><expr><name>config_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config_field</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown configuration field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// ensure field is a runtime configuration</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>configurable_field</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RUNTIME_CONFIG_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>RUNTIME_CONFIGS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>config_field</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>configurable_field</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	
		<comment type="line">// field is not allowed to be reconfigured</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>configurable_field</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"This configuration parameter cannot be set at run-time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// make sure value is valid</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val_str</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Config_Option_dryrun</name><argument_list>(<argument><expr><name>config_field</name></expr></argument>, <argument><expr><name>val_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>error</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>, <argument><expr><literal type="string">"Failed to set config value %s to %s"</literal></expr></argument>, <argument><expr><name>config_name</name></expr></argument>, <argument><expr><name>val_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// if we're here configuration passed all validations</comment>
	<comment type="line">// apply configuration</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>               <name>res</name>   <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RedisModuleString</name>  <modifier>*</modifier></type><name>key</name>  <init>=  <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RedisModuleString</name>  <modifier>*</modifier></type><name>val</name>  <init>=  <expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Config_Option_Field</name></type> <name>config_field</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_name</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Config_Contains_field</name><argument_list>(<argument><expr><name>config_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set configuration</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val_str</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>Config_Option_set</name><argument_list>(<argument><expr><name>config_field</name></expr></argument>, <argument><expr><name>val_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RedisModule_ReplyWithSimpleString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Graph_Config</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// GRAPH.CONFIG &lt;GET|SET&gt; &lt;NAME&gt; [value]</comment>
	<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>RedisModule_WrongArity</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// GRAPH.CONFIG GET &lt;NAME&gt;</comment>
		<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>RedisModule_WrongArity</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>_Config_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// GRAPH.CONFIG SET &lt;NAME&gt; [value] &lt;NAME&gt; [value] ...</comment>
		<comment type="line">// emit an error if we received an odd number of arguments,</comment>
		<comment type="line">// as this indicates an invalid configuration</comment>
		<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>RedisModule_WrongArity</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>_Config_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithError</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown subcommand for GRAPH.CONFIG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

</unit>
