<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/commands/cmd_context.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmd_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/thpool/pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../slow_log/slow_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/blocked_client.h"</cpp:file></cpp:include>

<comment type="block">/* Array with one entry per worker thread
 * keeps track after currently executing commands
 * initialized at module.c accessed via cmd_* and debug.c */</comment>
<decl_stmt><decl><type><name>CommandCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>command_ctxs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>CommandCtx</name> <modifier>*</modifier></type><name>CommandCtx_New</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>bc</name></decl></parameter>,
	<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>cmd_name</name></decl></parameter>,
	<parameter><decl><type><name>RedisModuleString</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>graph_ctx</name></decl></parameter>,
	<parameter><decl><type><name>ExecutorThread</name></type> <name>thread</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>replicated_command</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>compact</name></decl></parameter>,
	<parameter><decl><type><name>long</name> <name>long</name></type> <name>timeout</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>timeout_rw</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommandCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bc</name></name>                 <operator>=</operator> <name>bc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ctx</name></name>                <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>query</name></name>              <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>thread</name></name>             <operator>=</operator> <name>thread</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>compact</name></name>            <operator>=</operator> <name>compact</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>timeout</name></name>            <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>graph_ctx</name></name>          <operator>=</operator> <name>graph_ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>command_name</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>timeout_rw</name></name>         <operator>=</operator> <name>timeout_rw</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>replicated_command</name></name> <operator>=</operator> <name>replicated_command</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>cmd_name</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Make a copy of command name.</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_name</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>command_name</name></name> <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>command_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Make a copy of query.</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>context</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// place given 'ctx' in 'command_ctxs' at position 'tid'</comment>
<comment type="line">// representing the current thread</comment>
<function><type><name>void</name></type> <name>CommandCtx_TrackCtx</name><parameter_list>(<parameter><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctxs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><call><name>ThreadPools_GetThreadID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>command_ctxs</name><index>[<expr><name>tid</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set ctx at the current thread entry</comment>
	<comment type="line">// CommandCtx_Free will remove it eventually</comment>
	<expr_stmt><expr><name><name>command_ctxs</name><index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<comment type="line">// reset thread memory consumption to 0 (no memory consumed)</comment>
	<expr_stmt><expr><call><name>rm_reset_n_alloced</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CommandCtx_UntrackCtx</name><parameter_list>(<parameter><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctxs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><call><name>ThreadPools_GetThreadID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>command_ctxs</name><index>[<expr><name>tid</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="line">// nothing to clean</comment>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>command_ctxs</name><index>[<expr><name>tid</name></expr>]</index></name> <operator>==</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// set ctx at the current thread entry</comment>
	<comment type="line">// CommandCtx_Free will remove it eventually</comment>
	<expr_stmt><expr><name><name>command_ctxs</name><index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>CommandCtx_GetRedisCtx</name><parameter_list>(<parameter><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>command_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Either we already have a context or block client is set.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>bc</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <call><name>RedisModule_GetThreadSafeContext</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>bc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RedisModuleBlockedClient</name> <modifier>*</modifier></type><name>CommandCtx_GetBlockingClient</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommandCtx</name> <modifier>*</modifier></type><name>command_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>command_ctx</name><operator>-&gt;</operator><name>bc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GraphContext</name> <modifier>*</modifier></type><name>CommandCtx_GetGraphContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommandCtx</name> <modifier>*</modifier></type><name>command_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>command_ctx</name><operator>-&gt;</operator><name>graph_ctx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CommandCtx_GetCommandName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommandCtx</name> <modifier>*</modifier></type><name>command_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>command_ctx</name><operator>-&gt;</operator><name>command_name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CommandCtx_GetQuery</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommandCtx</name> <modifier>*</modifier></type><name>command_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>command_ctx</name><operator>-&gt;</operator><name>query</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CommandCtx_ThreadSafeContextLock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommandCtx</name> <modifier>*</modifier></type><name>command_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Acquire lock only when working with a blocked client
	 * otherwise we're running on Redis main thread,
	 * no need to acquire lock. */</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctx</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>command_ctx</name><operator>-&gt;</operator><name>bc</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RedisModule_ThreadSafeContextLock</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CommandCtx_ThreadSafeContextUnlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommandCtx</name> <modifier>*</modifier></type><name>command_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Release lock only when working with a blocked client
	 * otherwise we're running on Redis main thread,
	 * no need to release lock. */</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>command_ctx</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>command_ctx</name><operator>-&gt;</operator><name>bc</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RedisModule_ThreadSafeContextUnlock</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CommandCtx_Free</name><parameter_list>(<parameter><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>command_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>command_ctx</name><operator>-&gt;</operator><name>bc</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisGraph_UnblockClient</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>bc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RedisModule_FreeThreadSafeContext</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CommandCtx_UntrackCtx</name><argument_list>(<argument><expr><name>command_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>command_ctx</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>command_ctx</name><operator>-&gt;</operator><name>command_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>command_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
