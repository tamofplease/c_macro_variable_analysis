<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/serializers/graphmeta_type.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphmeta_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoding_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encoder/encode_graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decoders/decode_graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decoders/decode_previous.h"</cpp:file></cpp:include>

<comment type="block">/* Declaration of the type for redis registration. */</comment>
<decl_stmt><decl><type><name>RedisModuleType</name> <modifier>*</modifier></type><name>GraphMetaRedisModuleType</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>_GraphMetaType_RdbLoad</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encver</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>encver</name> <operator>&gt;</operator> <name>GRAPH_ENCODING_VERSION_LATEST</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Not forward compatible.</comment>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failed loading Graph, RedisGraph version (%d) is not forward compatible.\n"</literal></expr></argument>,
			   <argument><expr><name>REDISGRAPH_MODULE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
		<comment type="line">// Not backward compatible.</comment>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>encver</name> <operator>&lt;</operator> <name>GRAPHMETA_TYPE_DECODE_MIN_V</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failed loading Graph, RedisGraph version (%d) is not backward compatible with encoder version %d.\n"</literal></expr></argument>,
			   <argument><expr><name>REDISGRAPH_MODULE_VERSION</name></expr></argument>, <argument><expr><name>encver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
		<comment type="line">// Previous version.</comment>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>encver</name> <operator>&lt;</operator> <name>GRAPH_ENCODING_VERSION_LATEST</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>Decode_Previous</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>encver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// Current version.</comment>
		<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>RdbLoadGraph</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="line">// Add GraphContext to global array of graphs.</comment>
	<expr_stmt><expr><call><name>GraphContext_RegisterWithModule</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>gc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_GraphMetaType_RdbSave</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>RdbSaveGraph</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_GraphMetaType_Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>GraphContext_DecreaseRefCount</name><argument_list>(<argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>GraphMetaType_Register</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>RedisModuleTypeMethods</name></type> <name>tm</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>version</name></name>   <operator>=</operator>  <name>REDISMODULE_TYPE_METHOD_VERSION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>rdb_load</name></name>  <operator>=</operator>  <name>_GraphMetaType_RdbLoad</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>rdb_save</name></name>  <operator>=</operator>  <name>_GraphMetaType_RdbSave</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>free</name></name>      <operator>=</operator>  <name>_GraphMetaType_Free</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>GraphMetaRedisModuleType</name> <operator>=</operator> <call><name>RedisModule_CreateDataType</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"graphmeta"</literal></expr></argument>,
			<argument><expr><name>GRAPH_ENCODING_VERSION_LATEST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>GraphMetaRedisModuleType</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>REDISMODULE_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>REDISMODULE_OK</name></expr>;</return>
</block_content>}</block></function>

</unit>
