<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/serializers/encode_context.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encode_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../configuration/config.h"</cpp:file></cpp:include>

<function><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>GraphEncodeContext_New</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GraphEncodeContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>meta_keys</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GraphEncodeContext_Reset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_GraphEncodeContext_ResetHeader</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GraphEncodeHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>header</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>key_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>node_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>edge_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>graph_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>label_matrix_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>relationship_matrix_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>multi_edge</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>multi_edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>multi_edge</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_Reset</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_GraphEncodeContext_ResetHeader</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>keys_processed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ENCODE_STATE_INIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_src_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_dest_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_relation_matrix_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_current_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_VKEY_MAX_ENTITY_COUNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>vkey_entity_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Avoid leaks in case or reset during encodeing.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>datablock_iterator</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>DataBlockIterator_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>datablock_iterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>datablock_iterator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Avoid leaks in case or reset during encodeing.</comment>
	<expr_stmt><expr><call><name>RG_MatrixTupleIter_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>matrix_tuple_iterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_InitHeader</name>
<parameter_list>(
	<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>,
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>g</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>r_count</name> <init>= <expr><call><name>Graph_RelationTypeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GraphEncodeHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>header</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>multi_edge</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>graph_name</name></name>                 <operator>=</operator>  <name>graph_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>node_count</name></name>                 <operator>=</operator>  <call><name>Graph_NodeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>edge_count</name></name>                 <operator>=</operator>  <call><name>Graph_EdgeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>deleted_node_count</name></name>         <operator>=</operator>  <call><name>Graph_DeletedNodeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>deleted_edge_count</name></name>         <operator>=</operator>  <call><name>Graph_DeletedEdgeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>relationship_matrix_count</name></name>  <operator>=</operator>  <name>r_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>label_matrix_count</name></name>         <operator>=</operator>  <call><name>Graph_LabelTypeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>key_count</name></name>                  <operator>=</operator>  <call><name>GraphEncodeContext_GetKeyCount</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>multi_edge</name></name>                 <operator>=</operator>  <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>r_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// denote for each relationship matrix Ri if it contains muti-edge entries</comment>
	<comment type="line">// this information alows for an optimization when loading the data</comment>
	<comment type="line">// as construction of a matrix without multiple edge entry is cheaper</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>multi_edge</name> <init>= <expr><call><name>Graph_RelationshipContainsMultiEdge</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>multi_edge</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>multi_edge</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>EncodeState</name></type> <name>GraphEncodeContext_GetEncodeState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_SetEncodeState</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>EncodeState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>GraphEncodeContext_GetKeyCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// The `meta_keys` rax contains only the meta keys names. Add one for the graph context key.</comment>
	<return>return <expr><call><name>raxSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>meta_keys</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_AddMetaKey</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>meta_keys</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>GraphEncodeContext_GetMetaKeys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>raxKeys</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>meta_keys</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_ClearMetaKeys</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>meta_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>meta_keys</name></name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>GraphEncodeContext_GetProcessedKeyCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>keys_processed</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>GraphEncodeContext_GetProcessedEntitiesOffset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_SetProcessedEntitiesOffset</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
												   <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>GraphEncodeContext_GetDatablockIterator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>datablock_iterator</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_SetDatablockIterator</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
											 <parameter><decl><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>datablock_iterator</name></name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>GraphEncodeContext_GetCurrentRelationID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>current_relation_matrix_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_SetCurrentRelationID</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
											 <parameter><decl><type><name>uint</name></type> <name>current_relation_matrix_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_relation_matrix_id</name></name> <operator>=</operator> <name>current_relation_matrix_id</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>GraphEncodeContext_GetMatrixTupleIterator</name><parameter_list>(
	<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>matrix_tuple_iterator</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_SetMutipleEdgesArray</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>EdgeID</name> <modifier>*</modifier></type><name>edges</name></decl></parameter>,
											 <parameter><decl><type><name>uint</name></type> <name>current_index</name></decl></parameter>, <parameter><decl><type><name>NodeID</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>NodeID</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_array</name></name> <operator>=</operator> <name>edges</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_current_index</name></name> <operator>=</operator> <name>current_index</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_src_id</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_dest_id</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>EdgeID</name> <modifier>*</modifier></type><name>GraphEncodeContext_GetMultipleEdgesArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_array</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint</name></type> <name>GraphEncodeContext_GetMultipleEdgesCurrentIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_current_index</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>NodeID</name></type> <name>GraphEncodeContext_GetMultipleEdgesSourceNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_src_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>NodeID</name></type> <name>GraphEncodeContext_GetMultipleEdgesDestinationNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>multiple_edges_dest_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GraphEncodeContext_Finished</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>keys_processed</name></name> <operator>==</operator> <call><name>GraphEncodeContext_GetKeyCount</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_IncreaseProcessedKeyCount</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>keys_processed</name></name> <operator>&lt;</operator> <call><name>GraphEncodeContext_GetKeyCount</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>keys_processed</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GraphEncodeContext_FreeHeader</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>multi_edge</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>multi_edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GraphEncodeContext_Free</name><parameter_list>(<parameter><decl><type><name>GraphEncodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>GraphEncodeContext_FreeHeader</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>meta_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
