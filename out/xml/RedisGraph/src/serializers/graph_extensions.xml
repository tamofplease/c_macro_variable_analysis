<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/serializers/graph_extensions.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/datablock/oo_datablock.h"</cpp:file></cpp:include>

<comment type="line">// functions declerations - implemented in graph.c</comment>
<function_decl><type><name>bool</name></type> <name>Graph_FormConnection</name><parameter_list>(<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>NodeID</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>NodeID</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>EdgeID</name></type> <name>edge_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>Graph_EnsureNodeCap</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>cap</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>DataBlock_Ensure</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type>       <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type>  <name>dim</name> <init>= <expr><call><name>Graph_RequiredMatrixDim</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>  <name>M</name>   <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>Graph_GetAdjacencyMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RG_Matrix_resize</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>Graph_GetNodeLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RG_Matrix_resize</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_resize</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>relations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RG_Matrix_resize</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>Serializer_Graph_MarkEdgeDeleted</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>EdgeID</name></type> <name>id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>DataBlock_MarkAsDeletedOutOfOrder</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>Serializer_Graph_MarkNodeDeleted</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>DataBlock_MarkAsDeletedOutOfOrder</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Serializer_Graph_SetNode</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>id</name></decl></parameter>,
	<parameter><decl><type><name>LabelID</name> <modifier>*</modifier></type><name>labels</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>label_count</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><call><name>DataBlock_AllocateItemOutOfOrder</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>id</name></name>             <operator>=</operator>  <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>attributes</name></name>     <operator>=</operator>  <name>set</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>LabelID</name></type> <name>label</name> <init>= <expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// set label matrix at position [id, id]</comment>
		<decl_stmt><decl><type><name>RG_Matrix</name></type>  <name>M</name>  <init>=  <expr><call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name>  <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_INVALID_INDEX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"RESIZE LABEL MATRIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Graph_EnsureNodeCap</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// computes NodeLabelMarix out of label matrices</comment>
<comment type="line">// NodeLabelMatrix[:i] = diag(LabelMatrix[i])</comment>
<comment type="line">// must be called once after all virtual keys loaded for perf</comment>
<function><type><name>void</name></type> <name>Serializer_Graph_SetNodeLabels</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>node_count</name>           <init>= <expr><call><name>Graph_RequiredMatrixDim</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>label_count</name>          <init>= <expr><call><name>Graph_LabelTypeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type> <name>node_labels</name>    <init>= <expr><call><name>Graph_GetNodeLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>node_labels_m</name> <init>= <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>node_labels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RG_DEBUG</name></expr></cpp:if>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RG_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>node_labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>GrB_Vector_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>RG_Matrix</name></type>  <name>M</name>  <init>=  <expr><call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name>  <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>GxB_Vector_diag</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>GxB_Row_subassign</name><argument_list>(<argument><expr><name>node_labels_m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>GrB_transpose</name><argument_list>(<argument><expr><name>node_labels_m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>node_labels_m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GrB_Vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// optimized version of Graph_FormConnection</comment>
<comment type="line">// used only when matrix doesn't contains multi edge values</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_OptimizedSingleEdgeFormConnection</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>src</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>dest</name></decl></parameter>,
	<parameter><decl><type><name>EdgeID</name></type> <name>edge_id</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>  <name>M</name>      <init>=  <expr><call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RG_Matrix</name></type>  <name>adj</name>    <init>=  <expr><call><name>Graph_GetAdjacencyMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name>      <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>tm</name>     <init>=  <expr><call><name>RG_MATRIX_TM</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>adj_m</name>  <init>=  <expr><call><name>RG_MATRIX_M</name><argument_list>(<argument><expr><name>adj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>adj_tm</name> <init>=  <expr><call><name>RG_MATRIX_TM</name><argument_list>(<argument><expr><name>adj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// rows represent source nodes, columns represent destination nodes</comment>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// update adjacency matrix</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name>adj_m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_INVALID_INDEX</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// in case of writing out of matrix bounds resize the matrices</comment>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"RESIZE MATRIX SINGLE EDGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_id</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Graph_EnsureNodeCap</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>max_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name>adj_m</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name>adj_tm</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// update relationship matrix</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement_UINT64</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>edge_id</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_setElement_BOOL</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// an edge of type r has just been created, update statistics</comment>
	<comment type="line">// TODO: stats-&gt;edge_count[relation_idx] += nvals;</comment>
	<expr_stmt><expr><call><name>GraphStatistics_IncEdgeCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// set a given edge in the graph - Used for deserialization of graph</comment>
<function><type><name>void</name></type> <name>Serializer_Graph_SetEdge</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>multi_edge</name></decl></parameter>,
	<parameter><decl><type><name>EdgeID</name></type> <name>edge_id</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>src</name></decl></parameter>,
	<parameter><decl><type><name>NodeID</name></type> <name>dest</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>AttributeSet</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><call><name>DataBlock_AllocateItemOutOfOrder</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name>edge_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>set</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>id</name></name>            <operator>=</operator>  <name>edge_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>attributes</name></name>    <operator>=</operator>  <name>set</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>relationID</name></name>    <operator>=</operator>  <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>srcNodeID</name></name>     <operator>=</operator>  <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>destNodeID</name></name>    <operator>=</operator>  <name>dest</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>multi_edge</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>Graph_FormConnection</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>edge_id</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// resize matrices</comment>
			<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"RESIZE MATRIX MULTI EDGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>uint64_t</name></type> <name>max_id</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Graph_EnsureNodeCap</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>max_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>Graph_FormConnection</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>edge_id</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>_OptimizedSingleEdgeFormConnection</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>edge_id</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// returns the graph deleted nodes list</comment>
<function><type><name>uint64_t</name> <modifier>*</modifier></type><name>Serializer_Graph_GetDeletedNodesList</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>g</name><operator>-&gt;</operator><name>nodes</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns the graph deleted edge list</comment>
<function><type><name>uint64_t</name> <modifier>*</modifier></type><name>Serializer_Graph_GetDeletedEdgesList</name>
<parameter_list>(
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>g</name><operator>-&gt;</operator><name>edges</name><operator>-&gt;</operator><name>deletedIdx</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
