<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/serializers/decoders/prev/v10/decode_graph.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode_v10.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>_GetOrCreateGraphContext</name>
<parameter_list>(
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>GraphContext_GetRegisteredGraphContext</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gc</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// New graph is being decoded. Inform the module and create new graph context.</comment>
		<expr_stmt><expr><name>gc</name> <operator>=</operator> <call><name>GraphContext_New</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// While loading the graph, minimize matrix realloc and synchronization calls.</comment>
		<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Free the name string, as it either not in used or copied.</comment>
	<expr_stmt><expr><call><name>RedisModule_Free</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>gc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The first initialization of the graph data structure guarantees that there will be no further re-allocation
 * of data blocks and matrices since they are all in the appropriate size. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_InitGraphDataStructure</name><parameter_list>(<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>node_count</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>edge_count</name></decl></parameter>,
									<parameter><decl><type><name>uint64_t</name></type> <name>label_count</name></decl></parameter>,  <parameter><decl><type><name>uint64_t</name></type> <name>relation_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>Graph_AllocateNodes</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Graph_AllocateEdges</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>edge_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Graph_AddLabel</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>relation_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Graph_AddRelationType</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<comment type="line">// flush all matrices, guarantee matrix dimensions matches graph's nodes count</comment>
	<expr_stmt><expr><call><name>Graph_ApplyAllPending</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GraphContext</name> <modifier>*</modifier></type><name>_DecodeHeader</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Header format:
	 * Graph name
	 * Node count
	 * Edge count
	 * Label matrix count
	 * Relation matrix count - N
	 * Does relationship matrix Ri holds mutiple edges under a single entry X N
	 * Number of graph keys (graph context key + meta keys)
	 * Schemas
	 */</comment>

	<comment type="line">// Graph name</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name> <init>= <expr><call><name>RedisModule_LoadStringBuffer</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Each key header contains the following: #nodes, #edges, #labels matrices, #relation matrices</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>node_count</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>edge_count</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>label_count</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>relation_count</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>multi_edge</name><index>[<expr><name>relation_count</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>relation_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>multi_edge</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Total keys representing the graph.</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>key_number</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>_GetOrCreateGraphContext</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// If it is the first key of this graph, allocate all the data structures,</comment>
	<comment type="line">// with the appropriate dimensions</comment>
	<if_stmt><if>if<condition>(<expr><call><name>GraphDecodeContext_GetProcessedKeyCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_InitGraphDataStructure</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>, <argument><expr><name>edge_count</name></expr></argument>, <argument><expr><name>label_count</name></expr></argument>, <argument><expr><name>relation_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name><operator>-&gt;</operator><name>multi_edge</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>relation_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>relation_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<comment type="line">// Enable/Disable support for multi-edge</comment>
			<comment type="line">// we will enable support for multi-edge on all relationship</comment>
			<comment type="line">// matrices once we finish loading the graph</comment>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name><operator>-&gt;</operator><name>multi_edge</name></name></expr></argument>,  <argument><expr><name><name>multi_edge</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>GraphDecodeContext_SetKeyCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name></expr></argument>, <argument><expr><name>key_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// decode graph schemas</comment>
	<expr_stmt><expr><call><name>RdbLoadGraphSchema_v10</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>gc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PayloadInfo</name> <modifier>*</modifier></type><name>_RdbLoadKeySchema</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Format:
	*  #Number of payloads info - N
	*  N * Payload info:
	*      Encode state
	*      Number of entities encoded in this state.
	*/</comment>

	<decl_stmt><decl><type><name>uint64_t</name></type> <name>payloads_count</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PayloadInfo</name> <modifier>*</modifier></type><name>payloads</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>PayloadInfo</name></expr></argument>, <argument><expr><name>payloads_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>payloads_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// For each payload, load its type and the number of entities it contains.</comment>
		<decl_stmt><decl><type><name>PayloadInfo</name></type> <name>payload_info</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>payload_info</name><operator>.</operator><name>state</name></name> <operator>=</operator>  <call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>payload_info</name><operator>.</operator><name>entities_count</name></name> <operator>=</operator>  <call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>payloads</name></expr></argument>, <argument><expr><name>payload_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>payloads</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GraphContext</name> <modifier>*</modifier></type><name>RdbLoadGraphContext_v10</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<comment type="block">/* Key format:
	 *  Header
	 *  Payload(s) count: N
	 *  Key content X N:
	 *      Payload type (Nodes / Edges / Deleted nodes/ Deleted edges/ Graph schema)
	 *      Entities in payload
	 *  Payload(s) X N
	 * */</comment>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>_DecodeHeader</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// load the key schema</comment>
	<decl_stmt><decl><type><name>PayloadInfo</name> <modifier>*</modifier></type><name>key_schema</name> <init>= <expr><call><name>_RdbLoadKeySchema</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// the decode process contains the decode operation of many meta keys</comment>
	<comment type="line">// representing independent parts of the graph</comment>
	<comment type="line">//</comment>
	<comment type="line">// each key contains data on one or more of the following:</comment>
	<comment type="line">// 1. nodes - The nodes that are currently valid in the graph</comment>
	<comment type="line">//</comment>
	<comment type="line">// 2. deleted nodes - Nodes that were deleted and there ids can be re-used</comment>
	<comment type="line">//    used for exact replication of data block state</comment>
	<comment type="line">//</comment>
	<comment type="line">// 3. edges - The edges that are currently valid in the graph</comment>
	<comment type="line">//</comment>
	<comment type="line">// 4. deleted edges - edges that were deleted and there ids can be re-used</comment>
	<comment type="line">//    used for exact replication of data block state</comment>
	<comment type="line">//</comment>
	<comment type="line">// 5. graph schema - properties, indices</comment>
	<comment type="line">//</comment>
	<comment type="line">// the following switch checks which part of the graph the current key holds</comment>
	<comment type="line">// and decodes it accordingly</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>payloads_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>key_schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>payloads_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>PayloadInfo</name></type> <name>payload</name> <init>= <expr><name><name>key_schema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name><name>payload</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>ENCODE_STATE_NODES</name></expr>:</case>
				<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RdbLoadNodes_v10</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ENCODE_STATE_DELETED_NODES</name></expr>:</case>
				<expr_stmt><expr><call><name>RdbLoadDeletedNodes_v10</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ENCODE_STATE_EDGES</name></expr>:</case>
				<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>SYNC_POLICY_NOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RdbLoadEdges_v10</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ENCODE_STATE_DELETED_EDGES</name></expr>:</case>
				<expr_stmt><expr><call><name>RdbLoadDeletedEdges_v10</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ENCODE_STATE_GRAPH_SCHEMA</name></expr>:</case>
				<comment type="line">// skip, handled in _DecodeHeader</comment>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"Unknown encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>key_schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// update decode context</comment>
	<expr_stmt><expr><call><name>GraphDecodeContext_IncreaseProcessedKeyCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// before finalizing keep encountered meta keys names, for future deletion</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>RedisModuleString</name> <modifier>*</modifier></type><name>rm_key_name</name> <init>= <expr><call><name>RedisModule_GetKeyNameFromIO</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_name</name> <init>= <expr><call><name>RedisModule_StringPtrLen</name><argument_list>(<argument><expr><name>rm_key_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// the virtual key name is not equal the graph name</comment>
	<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key_name</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>GraphDecodeContext_AddMetaKey</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name></expr></argument>, <argument><expr><name>key_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>GraphDecodeContext_Finished</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// set the node label matrix</comment>
		<expr_stmt><expr><call><name>Serializer_Graph_SetNodeLabels</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Graph_ApplyAllPending</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// revert to default synchronization behavior</comment>
		<expr_stmt><expr><call><name>Graph_SetMatrixPolicy</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>SYNC_POLICY_FLUSH_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>Graph_LabelTypeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// update the node statistics</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>RG_Matrix</name></type> <name>L</name> <init>= <expr><call><name>Graph_GetLabelMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>RG_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>GraphStatistics_IncNodeCount</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// make sure graph doesn't contains may pending changes</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>Graph_Pending</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>GraphDecodeContext_Reset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>RedisModule_GetContextFromIO</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"Done decoding graph %s"</literal></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>gc</name></expr>;</return>
</block_content>}</block></function>

</unit>
