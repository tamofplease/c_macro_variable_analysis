<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/serializers/decoders/prev/v10/decode_graph_entities.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode_v10.h"</cpp:file></cpp:include>

<comment type="line">// Forward declarations.</comment>
<function_decl><type><specifier>static</specifier> <name>SIValue</name></type> <name>_RdbLoadPoint</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SIValue</name></type> <name>_RdbLoadSIArray</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>SIValue</name></type> <name>_RdbLoadSIValue</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Format:
	 * SIType
	 * Value */</comment>
	<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>T_INT64</name></expr>:</case>
			<return>return <expr><call><name>SI_LongVal</name><argument_list>(<argument><expr><call><name>RedisModule_LoadSigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>T_DOUBLE</name></expr>:</case>
			<return>return <expr><call><name>SI_DoubleVal</name><argument_list>(<argument><expr><call><name>RedisModule_LoadDouble</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>T_STRING</name></expr>:</case>
			<comment type="line">// Transfer ownership of the heap-allocated string to the</comment>
			<comment type="line">// newly-created SIValue</comment>
			<return>return <expr><call><name>SI_TransferStringVal</name><argument_list>(<argument><expr><call><name>RedisModule_LoadStringBuffer</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>T_BOOL</name></expr>:</case>
			<return>return <expr><call><name>SI_BoolVal</name><argument_list>(<argument><expr><call><name>RedisModule_LoadSigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>T_ARRAY</name></expr>:</case>
			<return>return <expr><call><name>_RdbLoadSIArray</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>T_POINT</name></expr>:</case>
			<return>return <expr><call><name>_RdbLoadPoint</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>T_NULL</name></expr>:</case>
		<default>default:</default> <comment type="line">// currently impossible</comment>
			<return>return <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SIValue</name></type> <name>_RdbLoadPoint</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>lat</name> <init>= <expr><call><name>RedisModule_LoadDouble</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>lon</name> <init>= <expr><call><name>RedisModule_LoadDouble</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>SI_Point</name><argument_list>(<argument><expr><name>lat</name></expr></argument>, <argument><expr><name>lon</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SIValue</name></type> <name>_RdbLoadSIArray</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* loads array as
	   unsinged : array legnth
	   array[0]
	   .
	   .
	   .
	   array[array length -1]
	 */</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>list</name> <init>= <expr><call><name>SI_Array</name><argument_list>(<argument><expr><name>arrayLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>elem</name> <init>= <expr><call><name>_RdbLoadSIValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SIArray_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbLoadEntity</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Format:
	 * #properties N
	 * (name, value type, value) X N
	*/</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>propCount</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>propCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>attr_value</name> <init>= <expr><call><name>_RdbLoadSIValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>GraphEntity_AddProperty</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>, <argument><expr><name>attr_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>attr_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>RdbLoadNodes_v10</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>node_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Node Format:
	 *      ID
	 *      #labels M
	 *      (labels) X M
	 *      #properties N
	 *      (name, value type, value) X N
	 */</comment>

	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Node</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>id</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Extend this logic when multi-label support is added.</comment>
		<comment type="line">// #labels M</comment>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>nodeLabelCount</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// * (labels) x M</comment>
		<comment type="line">// M will currently always be 0 or 1</comment>
		<decl_stmt><decl><type><name>LabelID</name></type> <name>l</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nodeLabelCount</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>GRAPH_NO_LABEL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Serializer_Graph_SetNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>nodeLabelCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>_RdbLoadEntity</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>l</name> <operator>!=</operator> <name>GRAPH_NO_LABEL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>GraphContext_GetSchemaByID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>SCHEMA_NODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_IndexNode</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Index_IndexNode</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fulltextIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RdbLoadDeletedNodes_v10</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>deleted_node_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Format:
	 * node id X N */</comment>
	<expr_stmt><expr><call><name>Graph_AllocateNodes</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>deleted_node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>deleted_node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>id</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Serializer_Graph_MarkNodeDeleted</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RdbLoadEdges_v10</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>edge_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Format:
	 * {
	 *  edge ID
	 *  source node ID
	 *  destination node ID
	 *  relation type
	 * } X N
	 * edge properties X N */</comment>

	<comment type="line">// Construct connections.</comment>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name></type> <name>e</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>EdgeID</name></type> <name>edgeId</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>srcId</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>destId</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>relation</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Serializer_Graph_SetEdge</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>,
				<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>decoding_context</name><operator>-&gt;</operator><name>multi_edge</name><index>[<expr><name>relation</name></expr>]</index></name></expr></argument>, <argument><expr><name>edgeId</name></expr></argument>, <argument><expr><name>srcId</name></expr></argument>,
				<argument><expr><name>destId</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_RdbLoadEntity</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RdbLoadDeletedEdges_v10</name><parameter_list>(<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>deleted_edge_count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Format:
	 * edge id X N */</comment>
	<expr_stmt><expr><call><name>Graph_AllocateEdges</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>deleted_edge_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>deleted_edge_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>EdgeID</name></type> <name>id</name> <init>= <expr><call><name>RedisModule_LoadUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Serializer_Graph_MarkEdgeDeleted</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
