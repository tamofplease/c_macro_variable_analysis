<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/serializers/encoder/v12/encode_graph_entities.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encode_v12.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../datatypes/datatypes.h"</cpp:file></cpp:include>

<comment type="line">// forword decleration</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveSIValue</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>v</name></decl></parameter>
)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveSIArray</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name></type> <name>list</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="block">/* saves array as
	   unsigned : array legnth
	   array[0]
	   .
	   .
	   .
	   array[array length -1]
	 */</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>arrayLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_RdbSaveSIValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveSIValue</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>SIValue</name> <modifier>*</modifier></type><name>v</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Format:</comment>
	<comment type="line">// SIType</comment>
	<comment type="line">// Value</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch<condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>T_BOOL</name></expr>:</case>
		<case>case <expr><name>T_INT64</name></expr>:</case>
			<expr_stmt><expr><call><name>RedisModule_SaveSigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>longval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		<case>case <expr><name>T_DOUBLE</name></expr>:</case>
			<expr_stmt><expr><call><name>RedisModule_SaveDouble</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>doubleval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		<case>case <expr><name>T_STRING</name></expr>:</case>
			<expr_stmt><expr><call><name>RedisModule_SaveStringBuffer</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>stringval</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stringval</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		<case>case <expr><name>T_ARRAY</name></expr>:</case>
			<expr_stmt><expr><call><name>_RdbSaveSIArray</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		<case>case <expr><name>T_POINT</name></expr>:</case>
			<expr_stmt><expr><call><name>RedisModule_SaveDouble</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><call><name>Point_lat</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RedisModule_SaveDouble</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><call><name>Point_lon</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><name>T_NULL</name></expr>:</case>
			<return>return;</return> <comment type="line">// No data beyond the type needs to be encoded for a NULL value.</comment>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Attempted to serialize value of invalid type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveEntity</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Format:</comment>
	<comment type="line">// #attributes N</comment>
	<comment type="line">// (name, value type, value) X N </comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>GraphEntity_GetAttributes</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>AttributeSet_GetIdx</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_RdbSaveSIValue</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveEdge</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>
)</parameter_list> <block>{<block_content>

	<comment type="line">// Format:</comment>
	<comment type="line">//  edge ID</comment>
	<comment type="line">//  source node ID</comment>
	<comment type="line">//  destination node ID</comment>
	<comment type="line">//  relation type</comment>
	<comment type="line">//  edge properties</comment>

	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// source node ID</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><call><name>Edge_GetSrcNodeID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// destination node ID</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><call><name>Edge_GetDestNodeID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// relation type</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// edge properties</comment>
	<expr_stmt><expr><call><name>_RdbSaveEntity</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveNode_v12</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>GraphEntity</name> <modifier>*</modifier></type><name>n</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Format:</comment>
	<comment type="line">//     ID</comment>
	<comment type="line">//     #labels M</comment>
	<comment type="line">//     (labels) X M</comment>
	<comment type="line">//     #properties N</comment>
	<comment type="line">//     (name, value type, value) X N */</comment>

	<comment type="line">// save ID</comment>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>id</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// retrieve node labels</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>l_count</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>l_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>l_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// save labels</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="line">// properties N</comment>
	<comment type="line">// (name, value type, value) X N</comment>
	<expr_stmt><expr><call><name>_RdbSaveEntity</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveDeletedEntities_v12</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>deleted_entities_to_encode</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>deleted_id_list</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Get the number of deleted entities already encoded.</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><call><name>GraphEncodeContext_GetProcessedEntitiesOffset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Iterated over the required range in the datablock deleted items.</comment>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><name>offset</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>deleted_entities_to_encode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>deleted_id_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RdbSaveDeletedNodes_v12</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>deleted_nodes_to_encode</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Format:</comment>
	<comment type="line">// node id X N</comment>

	<if_stmt><if>if<condition>(<expr><name>deleted_nodes_to_encode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<comment type="line">// get deleted nodes list</comment>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>deleted_nodes_list</name> <init>= <expr><call><name>Serializer_Graph_GetDeletedNodesList</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_RdbSaveDeletedEntities_v12</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>deleted_nodes_to_encode</name></expr></argument>, <argument><expr><name>deleted_nodes_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RdbSaveDeletedEdges_v12</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>deleted_edges_to_encode</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Format:</comment>
	<comment type="line">// edge id X N</comment>

	<if_stmt><if>if<condition>(<expr><name>deleted_edges_to_encode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// get deleted edges list</comment>
	<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>deleted_edges_list</name> <init>= <expr><call><name>Serializer_Graph_GetDeletedEdgesList</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_RdbSaveDeletedEntities_v12</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>deleted_edges_to_encode</name></expr></argument>, <argument><expr><name>deleted_edges_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RdbSaveNodes_v12</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>nodes_to_encode</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Format:</comment>
	<comment type="line">// Node Format * nodes_to_encode:</comment>
	<comment type="line">//  ID</comment>
	<comment type="line">//  #labels M</comment>
	<comment type="line">//  (labels) X M</comment>
	<comment type="line">//  #properties N</comment>
	<comment type="line">//  (name, value type, value) X N</comment>

	<if_stmt><if>if<condition>(<expr><name>nodes_to_encode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<comment type="line">// get graph's node count</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>graph_nodes</name> <init>= <expr><call><name>Graph_NodeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// get the number of nodes already encoded</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><call><name>GraphEncodeContext_GetProcessedEntitiesOffset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get datablock iterator from context,</comment>
	<comment type="line">// already set to offset by a previous encodeing of nodes, or create new one</comment>
	<decl_stmt><decl><type><name>DataBlockIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>GraphEncodeContext_GetDatablockIterator</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>iter</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>Graph_ScanNodes</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GraphEncodeContext_SetDatablockIterator</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodes_to_encode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>GraphEntity</name></type> <name>e</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>attributes</name></name> <operator>=</operator> <operator>(</operator><name>AttributeSet</name> <operator>*</operator><operator>)</operator><call><name>DataBlockIterator_Next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_RdbSaveNode_v12</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// check if done encodeing nodes</comment>
	<if_stmt><if>if<condition>(<expr><name>offset</name> <operator>+</operator> <name>nodes_to_encode</name> <operator>==</operator> <name>graph_nodes</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>DataBlockIterator_Free</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GraphEncodeContext_SetDatablockIterator</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Auxilary function to encode a multiple edges array,</comment>
<comment type="line">// while consdirating the allowed number of edges to encode</comment>
<comment type="line">// returns true if the number of encoded edges has reached the capacity</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveMultipleEdges</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,                  <comment type="line">// RDB IO.</comment>
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,                    <comment type="line">// Graph context.</comment>
	<parameter><decl><type><name>uint</name></type> <name>r</name></decl></parameter>,                              <comment type="line">// Edges relation id.</comment>
	<parameter><decl><type><name>EdgeID</name> <modifier>*</modifier></type><name>multiple_edges_array</name></decl></parameter>,        <comment type="line">// Multiple edges array (passed by ref).</comment>
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>multiple_edges_current_index</name></decl></parameter>,  <comment type="line">// Current index of the array to start encoding from (passed by ref).</comment>
	<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>encoded_edges</name></decl></parameter>,             <comment type="line">// Number of encoded edges in this phase (passed by ref).</comment>
	<parameter><decl><type><name>uint64_t</name></type> <name>edges_to_encode</name></decl></parameter>,            <comment type="line">// Allowed capacity for encoding edges.</comment>
	<parameter><decl><type><name>NodeID</name></type> <name>src</name></decl></parameter>,                          <comment type="line">// Edges source node id.</comment>
	<parameter><decl><type><name>NodeID</name></type> <name>dest</name></decl></parameter>                          <comment type="line">// Edges destination node id.</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>edgeCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>multiple_edges_array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// define function local variables from passed-by-reference parameters.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>multiple_edges_current_index</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>encoded_edges_count</name> <init>= <expr><operator>*</operator><name>encoded_edges</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// add edges as long the number of encoded edges is in the allowed range</comment>
	<comment type="line">// and the array is not depleted</comment>
	<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>edgeCount</name> <operator>&amp;&amp;</operator> <name>encoded_edges_count</name> <operator>&lt;</operator> <name>edges_to_encode</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name></type> <name>e</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>EdgeID</name></type> <name>edgeID</name> <init>= <expr><name><name>multiple_edges_array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>srcNodeID</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>destNodeID</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Graph_GetEdge</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>edgeID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_RdbSaveEdge</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>encoded_edges_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// update passed-by-reference parameters</comment>
	<expr_stmt><expr><operator>*</operator><name>encoded_edges</name> <operator>=</operator> <name>encoded_edges_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>multiple_edges_current_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RdbSaveEdges_v12</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>edges_to_encode</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Format:</comment>
	<comment type="line">// Edge format * edges_to_encode:</comment>
	<comment type="line">//  edge ID</comment>
	<comment type="line">//  source node ID</comment>
	<comment type="line">//  destination node ID</comment>
	<comment type="line">//  relation type</comment>
	<comment type="line">//  edge properties</comment>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>edges_to_encode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// get graph's edge count</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>graph_edges</name> <init>= <expr><call><name>Graph_EdgeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get the number of edges already encoded</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><call><name>GraphEncodeContext_GetProcessedEntitiesOffset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// count the edges that will be encoded in this phase</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>encoded_edges</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// get current relation matrix</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>r</name> <init>= <expr><call><name>GraphEncodeContext_GetCurrentRelationID</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>RG_Matrix</name></type> <name>M</name> <init>= <expr><call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get matrix tuple iterator from context</comment>
	<comment type="line">// already set to the next entry to fetch</comment>
	<comment type="line">// for previous edge encide or create new one</comment>
	<decl_stmt><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>GraphEncodeContext_GetMatrixTupleIterator</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RG_MatrixTupleIter_is_attached</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_MatrixTupleIter_attach</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// first, see if the last edges encoding stopped at multiple edges array</comment>
	<decl_stmt><decl><type><name>EdgeID</name> <modifier>*</modifier></type><name>multiple_edges_array</name> <init>= <expr><call><name>GraphEncodeContext_GetMultipleEdgesArray</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeID</name></type> <name>src</name> <init>= <expr><call><name>GraphEncodeContext_GetMultipleEdgesSourceNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeID</name></type> <name>dest</name> <init>= <expr><call><name>GraphEncodeContext_GetMultipleEdgesDestinationNode</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>multiple_edges_current_index</name> <init>= <expr><call><name>GraphEncodeContext_GetMultipleEdgesCurrentIndex</name><argument_list>(
											<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>multiple_edges_array</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_RdbSaveMultipleEdges</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>multiple_edges_array</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>multiple_edges_current_index</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>encoded_edges</name></expr></argument>, <argument><expr><name>edges_to_encode</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// if the multiple edges array filled the capacity of entities allowed</comment>
		<comment type="line">// to be encoded, finish encoding</comment>
		<if_stmt><if>if<condition>(<expr><name>encoded_edges</name> <operator>==</operator> <name>edges_to_encode</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>finish</name>;</goto>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// reset the multiple edges context for re-use</comment>
			<expr_stmt><expr><name>multiple_edges_array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>multiple_edges_current_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>relation_count</name> <init>= <expr><call><name>Graph_RelationTypeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// write the required number of edges</comment>
	<while>while<condition>(<expr><name>encoded_edges</name> <operator>&lt;</operator> <name>edges_to_encode</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name></type> <name>e</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>EdgeID</name></type> <name>edgeID</name></decl>;</decl_stmt>

		<comment type="line">// try to get next tuple</comment>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_MatrixTupleIter_next_UINT64</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edgeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// if iterator is depleted</comment>
		<comment type="line">// get new tuple from different matrix or finish encode</comment>
		<while>while<condition>(<expr><name>info</name> <operator>==</operator> <name>GxB_EXHAUSTED</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// proceed to next relation matrix</comment>
			<expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="line">// if done iterating over all the matrices, jump to finish</comment>
			<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <name>relation_count</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

			<comment type="line">// get matrix and set iterator</comment>
			<expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_MatrixTupleIter_attach</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>RG_MatrixTupleIter_next_UINT64</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edgeID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>srcNodeID</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>destNodeID</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>SINGLE_EDGE</name><argument_list>(<argument><expr><name>edgeID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Graph_GetEdge</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>edgeID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_RdbSaveEdge</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>encoded_edges</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>multiple_edges_array</name> <operator>=</operator> <operator>(</operator><name>EdgeID</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>CLEAR_MSB</name><argument_list>(<argument><expr><name>edgeID</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_RdbSaveMultipleEdges</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>multiple_edges_array</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>multiple_edges_current_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoded_edges</name></expr></argument>, <argument><expr><name>edges_to_encode</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// if the multiple edges array filled the capacity of entities</comment>
			<comment type="line">// allowed to be encoded, finish encoding</comment>
			<if_stmt><if>if<condition>(<expr><name>encoded_edges</name> <operator>==</operator> <name>edges_to_encode</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>finish</name>;</goto>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="line">// reset the multiple edges context for re-use</comment>
				<expr_stmt><expr><name>multiple_edges_array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>multiple_edges_current_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

<label><name>finish</name>:</label>
	<comment type="line">// check if done encoding edges</comment>
	<if_stmt><if>if<condition>(<expr><name>offset</name> <operator>+</operator> <name>edges_to_encode</name> <operator>==</operator> <name>graph_edges</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_MatrixTupleIter_detach</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// update context</comment>
	<expr_stmt><expr><call><name>GraphEncodeContext_SetCurrentRelationID</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GraphEncodeContext_SetMutipleEdgesArray</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>, <argument><expr><name>multiple_edges_array</name></expr></argument>,
											<argument><expr><name>multiple_edges_current_index</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
