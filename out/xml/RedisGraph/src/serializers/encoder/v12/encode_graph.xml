<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/serializers/encoder/v12/encode_graph.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encode_v12.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>process_is_child</name></decl>;</decl_stmt> <comment type="line">// Global variable declared in module.c</comment>

<comment type="line">// Determine whether we are in the context of a bgsave, in which case</comment>
<comment type="line">// the process is independent and should not acquire locks.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>_shouldAcquireLocks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>!</operator><name>process_is_child</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_RdbSaveHeader</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Header format:</comment>
	<comment type="line">// Graph name</comment>
	<comment type="line">// Node count</comment>
	<comment type="line">// Edge count</comment>
	<comment type="line">// Deleted node count</comment>
	<comment type="line">// Deleted edge count</comment>
	<comment type="line">// Label matrix count</comment>
	<comment type="line">// Relation matrix count - N</comment>
	<comment type="line">// Does relationship Ri holds mutiple edges under a single entry X N </comment>
	<comment type="line">// Number of graph keys (graph context key + meta keys)</comment>
	<comment type="line">// Schema</comment>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GraphEncodeHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name><operator>-&gt;</operator><name>header</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="line">// graph name</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveStringBuffer</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// node count</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>node_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// edge count</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>edge_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// deleted node count</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>deleted_node_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// deleted edge count</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>deleted_edge_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// label matrix count</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>label_matrix_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// relation matrix count</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>relationship_matrix_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// does relationship Ri holds mutiple edges under a single entry X N</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><operator>-&gt;</operator><name>relationship_matrix_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// true if R[i] contain a multi edge entry</comment>
		<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>multi_edge</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// number of keys</comment>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>key_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// save graph schemas</comment>
	<expr_stmt><expr><call><name>RdbSaveGraphSchema_v12</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// returns a state information regarding the number of entities required</comment>
<comment type="line">// to encode in this state</comment>
<function><type><specifier>static</specifier> <name>PayloadInfo</name></type> <name>_StatePayloadInfo</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>EncodeState</name></type> <name>state</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>,
	<parameter><decl><type><name>uint64_t</name></type> <name>entities_to_encode</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>required_entities_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ENCODE_STATE_NODES</name></expr>:</case>
		<expr_stmt><expr><name>required_entities_count</name> <operator>=</operator> <call><name>Graph_NodeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ENCODE_STATE_DELETED_NODES</name></expr>:</case>
		<expr_stmt><expr><name>required_entities_count</name> <operator>=</operator> <call><name>Graph_DeletedNodeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ENCODE_STATE_EDGES</name></expr>:</case>
		<expr_stmt><expr><name>required_entities_count</name> <operator>=</operator> <call><name>Graph_EdgeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ENCODE_STATE_DELETED_EDGES</name></expr>:</case>
		<expr_stmt><expr><name>required_entities_count</name> <operator>=</operator> <call><name>Graph_DeletedEdgeCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ENCODE_STATE_GRAPH_SCHEMA</name></expr>:</case>
		<expr_stmt><expr><name>required_entities_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"Unknown encoding state in _CurrentStatePayloadInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<decl_stmt><decl><type><name>PayloadInfo</name></type> <name>payload_info</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>payload_info</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
	<comment type="line">// when this state will be encoded, the number of entities to encode</comment>
	<comment type="line">// is the minimum between the number of entities to encode and</comment>
	<comment type="line">// the remaining entities left to encode from the same type</comment>
	<expr_stmt><expr><name><name>payload_info</name><operator>.</operator><name>entities_count</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>entities_to_encode</name></expr></argument>, <argument><expr><name>required_entities_count</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>payload_info</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// this function saves the key content schema</comment>
<comment type="line">// and returns it so the encoder can know how to encode the key</comment>
<function><type><specifier>static</specifier> <name>PayloadInfo</name> <modifier>*</modifier></type><name>_RdbSaveKeySchema</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">//  Format:</comment>
	<comment type="line">//  #Number of payloads info - N</comment>
	<comment type="line">//  N * Payload info:</comment>
	<comment type="line">//      Encode state</comment>
	<comment type="line">//      Number of entities encoded in this state</comment>

	<decl_stmt><decl><type><name>PayloadInfo</name> <modifier>*</modifier></type><name>payloads</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>PayloadInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get current encoding state</comment>
	<decl_stmt><decl><type><name>EncodeState</name></type> <name>current_state</name> <init>= <expr><call><name>GraphEncodeContext_GetEncodeState</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// if this is the start of the encodeing, set the state to be NODES</comment>
	<if_stmt><if>if<condition>(<expr><name>current_state</name> <operator>==</operator> <name>ENCODE_STATE_INIT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current_state</name> <operator>=</operator> <name>ENCODE_STATE_NODES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint64_t</name></type> <name>remaining_entities</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Config_Option_get</name><argument_list>(<argument><expr><name>Config_VKEY_MAX_ENTITY_COUNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining_entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// check if this is the last key</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>last_key</name> <init>= <expr><call><name>GraphEncodeContext_GetProcessedKeyCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
					<operator>(</operator><call><name>GraphEncodeContext_GetKeyCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>last_key</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>remaining_entities</name> <operator>=</operator> <name>VKEY_ENTITY_COUNT_UNLIMITED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// get the current state encoded entities count</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><call><name>GraphEncodeContext_GetProcessedEntitiesOffset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// while there are still remaining entities to encode in this key</comment>
	<comment type="line">// and the state is valid</comment>
	<while>while<condition>(<expr><name>remaining_entities</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>current_state</name> <operator>&lt;</operator> <name>ENCODE_STATE_FINAL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// get the current state payload info, with respect to offset</comment>
		<decl_stmt><decl><type><name>PayloadInfo</name></type> <name>current_state_payload_info</name> <init>= <expr><call><name>_StatePayloadInfo</name><argument_list>(<argument><expr><name>gc</name></expr></argument>,
				<argument><expr><name>current_state</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>remaining_entities</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>payloads</name></expr></argument>, <argument><expr><name>current_state_payload_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>last_key</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>remaining_entities</name> <operator>-=</operator> <name><name>current_state_payload_info</name><operator>.</operator><name>entities_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>remaining_entities</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// new state offset is 0</comment>
			<expr_stmt><expr><name>current_state</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// advance in the states</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="line">// save the number of payloads</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>payloads_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>payloads</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>payloads_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>payloads_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// for each payload</comment>
		<comment type="line">// save its type and the number of entities it contains</comment>
		<decl_stmt><decl><type><name>PayloadInfo</name></type> <name>payload_info</name> <init>= <expr><name><name>payloads</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>payload_info</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RedisModule_SaveUnsigned</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name><name>payload_info</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>payloads</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RdbSaveGraph_v12</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleIO</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// Encoding format for graph context and graph meta key:</comment>
	<comment type="line">//  Header</comment>
	<comment type="line">//  Payload(s) count: N</comment>
	<comment type="line">//  Key content X N:</comment>
	<comment type="line">//      Payload type (Nodes / Edges / Deleted nodes/ Deleted edges/ Graph schema)</comment>
	<comment type="line">//      Entities in payload</comment>
	<comment type="line">//  Payload(s) X N</comment>
	<comment type="line">//</comment>
	<comment type="line">// This function will encode each payload type (if needed) in the following order:</comment>
	<comment type="line">// 1. Nodes</comment>
	<comment type="line">// 2. Deleted nodes</comment>
	<comment type="line">// 3. Edges</comment>
	<comment type="line">// 4. Deleted edges</comment>
	<comment type="line">// 5. Graph schema</comment>
	<comment type="line">//</comment>
	<comment type="line">// Each payload type can spread over one or more keys. For example:</comment>
	<comment type="line">// A graph with 200,000 nodes, and the number of entities per payload</comment>
	<comment type="line">// is 100,000 then there will be two nodes payloads,</comment>
	<comment type="line">// each containing 100,000 nodes, encoded into two different RDB meta keys</comment>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// TODO: remove, no need, as GIL is taken</comment>

	<comment type="line">// acquire a read lock if we're not in a thread-safe context</comment>
	<if_stmt><if>if<condition>(<expr><call><name>_shouldAcquireLocks</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Graph_AcquireReadLock</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>EncodeState</name></type> <name>current_state</name> <init>= <expr><call><name>GraphEncodeContext_GetEncodeState</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>current_state</name> <operator>==</operator> <name>ENCODE_STATE_INIT</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// inital state, populate encoding context header</comment>
		<expr_stmt><expr><call><name>GraphEncodeContext_InitHeader</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// save header</comment>
	<expr_stmt><expr><call><name>_RdbSaveHeader</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// save payloads info for this key and retrive the key schema</comment>
	<decl_stmt><decl><type><name>PayloadInfo</name> <modifier>*</modifier></type><name>key_schema</name> <init>= <expr><call><name>_RdbSaveKeySchema</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>payloads_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>key_schema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>payloads_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// if the current key encoding more than one payload type,</comment>
		<comment type="line">// payloads count &gt;1 and we are in a new state, zero the entities count</comment>
		<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GraphEncodeContext_SetProcessedEntitiesOffset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>PayloadInfo</name></type> <name>payload</name> <init>= <expr><name><name>key_schema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name><name>payload</name><operator>.</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ENCODE_STATE_NODES</name></expr>:</case>
			<expr_stmt><expr><call><name>RdbSaveNodes_v12</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ENCODE_STATE_DELETED_NODES</name></expr>:</case>
			<expr_stmt><expr><call><name>RdbSaveDeletedNodes_v12</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ENCODE_STATE_EDGES</name></expr>:</case>
			<expr_stmt><expr><call><name>RdbSaveEdges_v12</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ENCODE_STATE_DELETED_EDGES</name></expr>:</case>
			<expr_stmt><expr><call><name>RdbSaveDeletedEdges_v12</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ENCODE_STATE_GRAPH_SCHEMA</name></expr>:</case>
			<comment type="line">// skip, handled in _RdbSaveHeader</comment>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"Unknown encoding phase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<comment type="line">// save the current state and the number of encoded entities</comment>
		<expr_stmt><expr><call><name>GraphEncodeContext_SetEncodeState</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>, <argument><expr><name><name>payload</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><call><name>GraphEncodeContext_GetProcessedEntitiesOffset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>GraphEncodeContext_SetProcessedEntitiesOffset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>,
													  <argument><expr><name><name>payload</name><operator>.</operator><name>entities_count</name></name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>key_schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// increase processed key count</comment>
	<comment type="line">// if finished encoding, reset context</comment>
	<expr_stmt><expr><call><name>GraphEncodeContext_IncreaseProcessedKeyCount</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>GraphEncodeContext_Finished</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>GraphEncodeContext_Reset</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>encoding_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>RedisModule_GetContextFromIO</name><argument_list>(<argument><expr><name>rdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>, <argument><expr><literal type="string">"Done encoding graph %s"</literal></expr></argument>, <argument><expr><name><name>gc</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// if a lock was acquired, release it</comment>
	<if_stmt><if>if<condition>(<expr><call><name>_shouldAcquireLocks</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Graph_ReleaseLock</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

</unit>
