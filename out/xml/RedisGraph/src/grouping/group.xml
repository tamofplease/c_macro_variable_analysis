<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/grouping/group.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../redismodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../execution_plan/ops/op.h"</cpp:file></cpp:include>

<comment type="line">// Creates a new group</comment>
<comment type="line">// arguments specify group's key.</comment>
<function><type><name>Group</name> <modifier>*</modifier></type><name>NewGroup</name><parameter_list>(<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>key_count</name></decl></parameter>, <parameter><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>funcs</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>func_count</name></decl></parameter>, <parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Group</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Group</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <name>keys</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>aggregationFunctions</name></name> <operator>=</operator> <name>funcs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>key_count</name></name> <operator>=</operator> <name>key_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>func_count</name></name> <operator>=</operator> <name>func_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>OpBase_CloneRecord</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
	<return>return <expr><name>g</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeGroup</name><parameter_list>(<parameter><decl><type><name>Group</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Record_FreeEntries</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="line">// Will be freed by Record owner.</comment>
	<if_stmt><if>if<condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>keys</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>key_count</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>func_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>aggregationFunctions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>aggregationFunctions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
