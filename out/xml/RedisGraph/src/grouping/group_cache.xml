<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/grouping/group_cache.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"group_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><name>CacheGroup</name> <modifier>*</modifier></type><name>CacheGroupNew</name><parameter_list>()</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CacheGroupAdd</name><parameter_list>(<parameter><decl><type><name>CacheGroup</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>XXH64_hash_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Group</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// retrives a group, sets group to NULL if key is missing</comment>
<function><type><name>Group</name> <modifier>*</modifier></type><name>CacheGroupGet</name><parameter_list>(<parameter><decl><type><name>CacheGroup</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>, <parameter><decl><type><name>XXH64_hash_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Group</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>g</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>g</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeGroupCache</name><parameter_list>(<parameter><decl><type><name>CacheGroup</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>FreeGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// populates an iterator to scan entire group cache</comment>
<function><type><name>CacheGroupIterator</name> <modifier>*</modifier></type><name>CacheGroupIter</name>
<parameter_list>(
	<parameter><decl><type><name>CacheGroup</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>CacheGroupIterator</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CacheGroupIterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// advance iterator and returns value in current position</comment>
<function><type><name>int</name></type> <name>CacheGroupIterNext</name><parameter_list>(<parameter><decl><type><name>CacheGroupIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>Group</name> <modifier>*</modifier><modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>raxNext</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt> <comment type="line">// TODO revisit this to fix up</comment>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CacheGroupIterator_Free</name><parameter_list>(<parameter><decl><type><name>CacheGroupIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
