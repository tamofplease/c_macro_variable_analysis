<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/ast/cypher_whitelist.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cypher_whitelist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../deps/libcypher-parser/lib/src/operators.h"</cpp:file></cpp:include> <comment type="line">// TODO safe?</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>

<comment type="block">/* Whitelist of all accepted cypher_astnode types:
 * Includes entities like CREATE clauses and node patterns,
 * does not include entities like REMOVE clauses or CASE statements. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>rax</name> <modifier>*</modifier></type><name>_astnode_type_whitelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Whitelist of all accepted AST operators:
 * Includes operators like greater-than,
 * does not include operators like regexes or IN. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>rax</name> <modifier>*</modifier></type><name>_operator_whitelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Build a whitelist containing all AST types currently supported by the module.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_buildTypesWhitelist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>_astnode_type_whitelist</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// The end_of_list token allows us to modify this array without worrying about its length</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>end_of_list</name></cpp:macro> <cpp:value>UINT8_MAX</cpp:value></cpp:define>
	<comment type="line">// When we introduce support for one of these, simply remove it from the list.</comment>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name><name>supported_types</name><index>[]</index></name> <init>= <expr><block>{
		<expr><name>CYPHER_AST_STATEMENT</name></expr>,
		<expr><name>CYPHER_AST_STATEMENT_OPTION</name></expr>,
		<expr><name>CYPHER_AST_CYPHER_OPTION</name></expr>,
		<expr><name>CYPHER_AST_CYPHER_OPTION_PARAM</name></expr>,
		<comment type="line">// CYPHER_AST_EXPLAIN_OPTION,</comment>
		<comment type="line">// CYPHER_AST_PROFILE_OPTION,</comment>
		<comment type="line">// CYPHER_AST_SCHEMA_COMMAND,</comment>
		<expr><name>CYPHER_AST_CREATE_NODE_PROPS_INDEX</name></expr>,
		<expr><name>CYPHER_AST_DROP_PROPS_INDEX</name></expr>,
		<expr><name>CYPHER_AST_CREATE_PATTERN_PROPS_INDEX</name></expr>,
		<comment type="line">// CYPHER_AST_CREATE_NODE_PROP_CONSTRAINT,</comment>
		<comment type="line">// CYPHER_AST_DROP_NODE_PROP_CONSTRAINT,</comment>
		<comment type="line">// CYPHER_AST_CREATE_REL_PROP_CONSTRAINT,</comment>
		<comment type="line">// CYPHER_AST_DROP_REL_PROP_CONSTRAINT,</comment>
		<expr><name>CYPHER_AST_QUERY</name></expr>,
		<comment type="line">// CYPHER_AST_QUERY_OPTION,</comment>
		<comment type="line">// CYPHER_AST_USING_PERIODIC_COMMIT,</comment>
		<expr><name>CYPHER_AST_QUERY_CLAUSE</name></expr>,
		<comment type="line">// CYPHER_AST_LOAD_CSV,</comment>
		<comment type="line">// CYPHER_AST_START,</comment>
		<comment type="line">// CYPHER_AST_START_POINT,</comment>
		<comment type="line">// CYPHER_AST_NODE_INDEX_LOOKUP,</comment>
		<comment type="line">// CYPHER_AST_NODE_INDEX_QUERY,</comment>
		<comment type="line">// CYPHER_AST_NODE_ID_LOOKUP,</comment>
		<comment type="line">// CYPHER_AST_ALL_NODES_SCAN,</comment>
		<comment type="line">// CYPHER_AST_REL_INDEX_LOOKUP,</comment>
		<comment type="line">// CYPHER_AST_REL_INDEX_QUERY,</comment>
		<comment type="line">// CYPHER_AST_REL_ID_LOOKUP,</comment>
		<comment type="line">// CYPHER_AST_ALL_RELS_SCAN,</comment>
		<expr><name>CYPHER_AST_MATCH</name></expr>,
		<comment type="line">// CYPHER_AST_MATCH_HINT,</comment>
		<comment type="line">// CYPHER_AST_USING_INDEX,</comment>
		<comment type="line">// CYPHER_AST_USING_JOIN,</comment>
		<comment type="line">// CYPHER_AST_USING_SCAN,</comment>
		<expr><name>CYPHER_AST_MERGE</name></expr>,
		<expr><name>CYPHER_AST_MERGE_ACTION</name></expr>,
		<expr><name>CYPHER_AST_ON_MATCH</name></expr>,
		<expr><name>CYPHER_AST_ON_CREATE</name></expr>,
		<expr><name>CYPHER_AST_CREATE</name></expr>,
		<expr><name>CYPHER_AST_SET</name></expr>,
		<expr><name>CYPHER_AST_SET_ITEM</name></expr>,
		<expr><name>CYPHER_AST_SET_PROPERTY</name></expr>,
		<expr><name>CYPHER_AST_SET_ALL_PROPERTIES</name></expr>,
		<expr><name>CYPHER_AST_MERGE_PROPERTIES</name></expr>,
		<expr><name>CYPHER_AST_SET_LABELS</name></expr>,
		<expr><name>CYPHER_AST_DELETE</name></expr>,
		<expr><name>CYPHER_AST_REMOVE</name></expr>,
		<comment type="line">// CYPHER_AST_REMOVE_ITEM,</comment>
		<expr><name>CYPHER_AST_REMOVE_LABELS</name></expr>,
		<expr><name>CYPHER_AST_REMOVE_PROPERTY</name></expr>,
		<comment type="line">// CYPHER_AST_FOREACH,</comment>
		<expr><name>CYPHER_AST_WITH</name></expr>,
		<expr><name>CYPHER_AST_UNWIND</name></expr>,
		<expr><name>CYPHER_AST_CALL</name></expr>,
		<expr><name>CYPHER_AST_RETURN</name></expr>,
		<expr><name>CYPHER_AST_PROJECTION</name></expr>,
		<expr><name>CYPHER_AST_ORDER_BY</name></expr>,
		<expr><name>CYPHER_AST_SORT_ITEM</name></expr>,
		<expr><name>CYPHER_AST_UNION</name></expr>,
		<expr><name>CYPHER_AST_EXPRESSION</name></expr>,
		<expr><name>CYPHER_AST_UNARY_OPERATOR</name></expr>,
		<expr><name>CYPHER_AST_BINARY_OPERATOR</name></expr>,
		<expr><name>CYPHER_AST_COMPARISON</name></expr>,
		<expr><name>CYPHER_AST_APPLY_OPERATOR</name></expr>,
		<expr><name>CYPHER_AST_APPLY_ALL_OPERATOR</name></expr>,
		<expr><name>CYPHER_AST_PROPERTY_OPERATOR</name></expr>,
		<expr><name>CYPHER_AST_SUBSCRIPT_OPERATOR</name></expr>,
		<expr><name>CYPHER_AST_SLICE_OPERATOR</name></expr>,
		<expr><name>CYPHER_AST_LABELS_OPERATOR</name></expr>,
		<expr><name>CYPHER_AST_LIST_COMPREHENSION</name></expr>,
		<expr><name>CYPHER_AST_PATTERN_COMPREHENSION</name></expr>,
		<expr><name>CYPHER_AST_CASE</name></expr>,
		<comment type="line">// CYPHER_AST_FILTER,  // Deprecated, will not be supported</comment>
		<comment type="line">// CYPHER_AST_EXTRACT, // Deprecated, will not be supported</comment>
		<expr><name>CYPHER_AST_REDUCE</name></expr>,
		<expr><name>CYPHER_AST_ALL</name></expr>,
		<expr><name>CYPHER_AST_ANY</name></expr>,
		<expr><name>CYPHER_AST_SINGLE</name></expr>,
		<expr><name>CYPHER_AST_NONE</name></expr>,
		<expr><name>CYPHER_AST_COLLECTION</name></expr>,
		<expr><name>CYPHER_AST_MAP</name></expr>,
		<expr><name>CYPHER_AST_IDENTIFIER</name></expr>,
		<expr><name>CYPHER_AST_PARAMETER</name></expr>,
		<expr><name>CYPHER_AST_STRING</name></expr>,
		<expr><name>CYPHER_AST_INTEGER</name></expr>,
		<expr><name>CYPHER_AST_FLOAT</name></expr>,
		<expr><name>CYPHER_AST_BOOLEAN</name></expr>,
		<expr><name>CYPHER_AST_TRUE</name></expr>,
		<expr><name>CYPHER_AST_FALSE</name></expr>,
		<expr><name>CYPHER_AST_NULL</name></expr>,
		<expr><name>CYPHER_AST_LABEL</name></expr>,
		<expr><name>CYPHER_AST_RELTYPE</name></expr>,
		<expr><name>CYPHER_AST_PROP_NAME</name></expr>,
		<expr><name>CYPHER_AST_FUNCTION_NAME</name></expr>,
		<comment type="line">// CYPHER_AST_INDEX_NAME,</comment>
		<expr><name>CYPHER_AST_PROC_NAME</name></expr>,
		<expr><name>CYPHER_AST_PATTERN</name></expr>,
		<expr><name>CYPHER_AST_NAMED_PATH</name></expr>,
		<expr><name>CYPHER_AST_SHORTEST_PATH</name></expr>,
		<expr><name>CYPHER_AST_PATTERN_PATH</name></expr>,
		<expr><name>CYPHER_AST_NODE_PATTERN</name></expr>,
		<expr><name>CYPHER_AST_REL_PATTERN</name></expr>,
		<expr><name>CYPHER_AST_RANGE</name></expr>,
		<comment type="line">// CYPHER_AST_COMMAND,</comment>
		<expr><name>CYPHER_AST_COMMENT</name></expr>,
		<expr><name>CYPHER_AST_LINE_COMMENT</name></expr>,
		<expr><name>CYPHER_AST_BLOCK_COMMENT</name></expr>,
		<expr><name>CYPHER_AST_ERROR</name></expr>,
		<expr><name>CYPHER_AST_MAP_PROJECTION</name></expr>,
		<expr><name>CYPHER_AST_MAP_PROJECTION_SELECTOR</name></expr>,
		<expr><name>CYPHER_AST_MAP_PROJECTION_LITERAL</name></expr>,
		<expr><name>CYPHER_AST_MAP_PROJECTION_PROPERTY</name></expr>,
		<expr><name>CYPHER_AST_MAP_PROJECTION_IDENTIFIER</name></expr>,
		<expr><name>CYPHER_AST_MAP_PROJECTION_ALL_PROPERTIES</name></expr>,
		<expr><name>end_of_list</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>supported_type</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>supported_type</name> <operator>=</operator> <name><name>supported_types</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>end_of_list</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Introduce every type to the whitelist rax</comment>
		<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>_astnode_type_whitelist</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>supported_type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>supported_type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_buildOperatorsWhitelist</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>_operator_whitelist</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// The end_of_list token allows us to modify this array without worrying about its length</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name>end_of_operator_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// When we introduce support for one of these, simply remove it from the list.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name><name>supported_operators</name><index>[]</index></name> <init>= <expr><block>{
		<expr><name>CYPHER_OP_OR</name></expr>,
		<expr><name>CYPHER_OP_XOR</name></expr>,
		<expr><name>CYPHER_OP_AND</name></expr>,
		<expr><name>CYPHER_OP_NOT</name></expr>,
		<expr><name>CYPHER_OP_EQUAL</name></expr>,
		<expr><name>CYPHER_OP_NEQUAL</name></expr>,
		<expr><name>CYPHER_OP_LT</name></expr>,
		<expr><name>CYPHER_OP_GT</name></expr>,
		<expr><name>CYPHER_OP_LTE</name></expr>,
		<expr><name>CYPHER_OP_GTE</name></expr>,
		<expr><name>CYPHER_OP_PLUS</name></expr>,
		<expr><name>CYPHER_OP_MINUS</name></expr>,
		<expr><name>CYPHER_OP_MULT</name></expr>,
		<expr><name>CYPHER_OP_DIV</name></expr>,
		<expr><name>CYPHER_OP_MOD</name></expr>,
		<expr><name>CYPHER_OP_POW</name></expr>,
		<expr><name>CYPHER_OP_UNARY_PLUS</name></expr>,
		<expr><name>CYPHER_OP_UNARY_MINUS</name></expr>,
		<comment type="line">// CYPHER_OP_SUBSCRIPT,</comment>
		<comment type="line">// CYPHER_OP_MAP_PROJECTION,</comment>
		<comment type="line">// CYPHER_OP_REGEX,</comment>
		<expr><name>CYPHER_OP_IN</name></expr>,
		<expr><name>CYPHER_OP_STARTS_WITH</name></expr>,
		<expr><name>CYPHER_OP_ENDS_WITH</name></expr>,
		<expr><name>CYPHER_OP_CONTAINS</name></expr>,
		<expr><name>CYPHER_OP_IS_NULL</name></expr>,
		<expr><name>CYPHER_OP_IS_NOT_NULL</name></expr>,
		<expr><name>CYPHER_OP_PROPERTY</name></expr>,
		<expr><name>CYPHER_OP_LABEL</name></expr>,
		<expr><name>end_of_operator_list</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name>supported_operator</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>supported_operator</name> <operator>=</operator> <name><name>supported_operators</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>end_of_operator_list</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Introduce every type to the whitelist rax</comment>
		<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>_operator_whitelist</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>supported_operator</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>supported_operator</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AST_Validation</name></type> <name>_CypherWhitelist_ValidateQuery</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>elem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AST_VALID</name></expr>;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Validate the type of the AST node</comment>
	<if_stmt><if>if<condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>_astnode_type_whitelist</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>Error_UnsupportedASTNodeType</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>AST_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// As the UNWIND clause is the only place we currently support COLLECTIONs, validate it separately</comment>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_UNWIND</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>AST_VALID</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// If the node is an operator call, validate that we support the operator type</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name>operator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_BINARY_OPERATOR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>operator</name> <operator>=</operator> <call><name>cypher_ast_binary_operator_get_operator</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_UNARY_OPERATOR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>operator</name> <operator>=</operator> <call><name>cypher_ast_unary_operator_get_operator</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>operator</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>_operator_whitelist</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>operator</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>operator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Error_UnsupportedASTOperator</name><argument_list>(<argument><expr><name>operator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>AST_INVALID</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Recursively visit children</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>nchildren</name> <init>= <expr><call><name>cypher_astnode_nchildren</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nchildren</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>CypherWhitelist_ValidateQuery</name><argument_list>(<argument><expr><call><name>cypher_astnode_get_child</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AST_VALID</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>AST_INVALID</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>AST_VALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AST_Validation</name></type> <name>CypherWhitelist_ValidateQuery</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>_CypherWhitelist_ValidateQuery</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CypherWhitelist_Build</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>_astnode_type_whitelist</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>_operator_whitelist</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		   <literal type="string">"Attempted to build query whitelist twice - was the module correctly loaded?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_buildTypesWhitelist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_buildOperatorsWhitelist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
