<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/ast/ast_build_op_contexts.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ast_build_op_contexts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arithmetic/arithmetic_expression_construct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>EdgeCreateCtx</name></type> <name>_NewEdgeCreateCtx</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QGEdge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><call><name>cypher_ast_rel_pattern_get_properties</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>EdgeCreateCtx</name></type> <name>new_edge</name> <init>= <expr><block>{  <expr><operator>.</operator><name>alias</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr>,
								<expr><operator>.</operator><name>relation</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>reltypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
								<expr><operator>.</operator><name>reltypeId</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>reltypeIDs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
								<expr><operator>.</operator><name>properties</name> <operator>=</operator> <call><name>PropertyMap_New</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>,
								<expr><operator>.</operator><name>src</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>alias</name></name></expr>,
								<expr><operator>.</operator><name>dest</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>alias</name></name></expr>
							 }</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>new_edge</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>NodeCreateCtx</name></type> <name>_NewNodeCreateCtx</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QGNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_node</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_props</name> <init>= <expr><call><name>cypher_ast_node_pattern_get_properties</name><argument_list>(<argument><expr><name>ast_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>NodeCreateCtx</name></type> <name>new_node</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>new_node</name><operator>.</operator><name>alias</name></name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_node</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <call><name>PropertyMap_New</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>ast_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>new_node</name><operator>.</operator><name>labels</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>new_node</name><operator>.</operator><name>labelsId</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>labelsID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>new_node</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// updates a single property or label</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_ConvertUpdateItem</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>updates</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>update_item</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>gc</name>          <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>updates</name>     <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>update_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>                  <modifier>*</modifier></type><name>alias</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// entity being updated</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>                  <modifier>*</modifier></type><name>attribute</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// attribute being set</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name>      <modifier>*</modifier></type><name>prop_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name>      <modifier>*</modifier></type><name>ast_prop</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name>      <modifier>*</modifier></type><name>ast_key</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// AST node attribute set</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name>      <modifier>*</modifier></type><name>ast_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// AST node value set</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_type_t</name></type> <name>type</name>       <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>         <name>set_labels</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>         <name>remove_labels</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UPDATE_MODE</name></type>  <name>update_mode</name>   <init>= <expr><name>UPDATE_MERGE</name></expr></init></decl>;</decl_stmt>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// determine the type of assignment</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// 1. override  - MATCH (a) SET a = {v: 5}</comment>
	<comment type="line">// 2. merge     - MATCH (a) SET a += {v: 5}</comment>
	<comment type="line">// 3. update    - MATCH (a) SET a.v = 5</comment>
	<comment type="line">// 4. label set - MATCH (a) SET a:Label1:Label2</comment>
	<comment type="line">// 5. label del - MATCH (a) REMOVE a:Label1:Label2</comment>
	<comment type="line">// 6. attr del  - MATCH (a) REMOVE a.v</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_SET_ALL_PROPERTIES</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// MATCH (a) SET a = {v: 5}</comment>
		<expr_stmt><expr><name>update_mode</name> <operator>=</operator> <name>UPDATE_REPLACE</name></expr>;</expr_stmt>

		<comment type="line">// alias</comment>
		<expr_stmt><expr><name>prop_expr</name> <operator>=</operator> <call><name>cypher_ast_set_all_properties_get_identifier</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// value</comment>
		<expr_stmt><expr><name>ast_value</name> <operator>=</operator> <call><name>cypher_ast_set_all_properties_get_expression</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_MERGE_PROPERTIES</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// MATCH (a) SET a += {v: 5}</comment>
		<comment type="line">// alias</comment>
		<expr_stmt><expr><name>prop_expr</name> <operator>=</operator> <call><name>cypher_ast_merge_properties_get_identifier</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// value</comment>
		<expr_stmt><expr><name>ast_value</name> <operator>=</operator> <call><name>cypher_ast_merge_properties_get_expression</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_SET_PROPERTY</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// MATCH (a) SET a.v = 5</comment>

		<comment type="line">// alias</comment>
		<expr_stmt><expr><name>ast_prop</name> <operator>=</operator> <call><name>cypher_ast_set_property_get_property</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prop_expr</name> <operator>=</operator> <call><name>cypher_ast_property_operator_get_expression</name><argument_list>(<argument><expr><name>ast_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// attribute</comment>
		<expr_stmt><expr><name>ast_key</name> <operator>=</operator> <call><name>cypher_ast_property_operator_get_prop_name</name><argument_list>(<argument><expr><name>ast_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>attribute</name> <operator>=</operator> <call><name>cypher_ast_prop_name_get_value</name><argument_list>(<argument><expr><name>ast_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// updated value</comment>
		<expr_stmt><expr><name>ast_value</name> <operator>=</operator> <call><name>cypher_ast_set_property_get_expression</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_SET_LABELS</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// MATCH (a) SET a:Label1:Label2</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>id</name> <init>=
			<expr><call><name>cypher_ast_set_labels_get_identifier</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>set_labels</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_REMOVE_LABELS</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// MATCH (a) REMOVE a:Label1:Label2</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>id</name> <init>=
			<expr><call><name>cypher_ast_remove_labels_get_identifier</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>remove_labels</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_REMOVE_PROPERTY</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// MATCH (a) REMOVE a.v</comment>

		<comment type="line">// alias</comment>
		<expr_stmt><expr><name>ast_prop</name> <operator>=</operator> <call><name>cypher_ast_remove_property_get_property</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prop_expr</name> <operator>=</operator> <call><name>cypher_ast_property_operator_get_expression</name><argument_list>(<argument><expr><name>ast_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>prop_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// attribute</comment>
		<expr_stmt><expr><name>ast_key</name> <operator>=</operator> <call><name>cypher_ast_property_operator_get_prop_name</name><argument_list>(<argument><expr><name>ast_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>attribute</name> <operator>=</operator> <call><name>cypher_ast_prop_name_get_value</name><argument_list>(<argument><expr><name>ast_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// see if we need to create an update context for updated entity</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>updates</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>UpdateCtx_New</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>updates</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt> 

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// collect update information</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// 1. set of labels to add</comment>
	<comment type="line">// 2. set of labels to remove</comment>
	<comment type="line">// 3. attribute to set</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if<condition>(<expr><name>set_labels</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>labels</name>      <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>cypher_ast_set_labels_nlabels</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>label</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>

		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>label_node</name> <init>=
				<expr><call><name>cypher_ast_set_labels_get_label</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label</name> <init>= <expr><call><name>cypher_ast_label_get_name</name><argument_list>(<argument><expr><name>label_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>label</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="line">// mark label for addition</comment>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>remove_labels</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>labels</name>      <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>label_count</name> <init>= <expr><call><name>cypher_ast_remove_labels_nlabels</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>label_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>label</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>

		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type> <name>label_node</name> <init>=
				<expr><call><name>cypher_ast_remove_labels_get_label</name><argument_list>(<argument><expr><name>update_item</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label</name> <init>= <expr><call><name>cypher_ast_label_get_name</name><argument_list>(<argument><expr><name>label_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>label</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="line">// mark label for removal</comment>
				<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>update_mode</name> <operator>==</operator> <name>UPDATE_REPLACE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>UpdateCtx_Clear</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// updated value</comment>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>ast_value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>ast_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// remove an attribute e.g. REMOVE a.v</comment>
			<comment type="line">// this is done by performing a.v = NULL</comment>
			<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>AR_EXP_NewConstOperandNode</name><argument_list>(<argument><expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<decl_stmt><decl><type><name>PropertySetCtx</name></type> <name>update</name> <init>= <expr><block>{ <expr><operator>.</operator><name>attribute</name>  <operator>=</operator> <name>attribute</name></expr>, <expr><operator>.</operator><name>exp</name> <operator>=</operator> <name>exp</name></expr>, <expr><operator>.</operator><name>mode</name> <operator>=</operator> <name>update_mode</name></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AST_PreparePathCreation</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name></decl></parameter>,
	<parameter><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name></decl></parameter>,
	<parameter><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>edges</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>QueryGraph_ExtractPaths</name><argument_list>(<argument><expr><name>qg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>path_elem_count</name> <init>= <expr><call><name>cypher_ast_pattern_path_nelements</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_elem_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* See if current entity needs to be created:
		 * 1. Current entity is NOT bound in a previous clause.
		 * 2. We have yet to account for this entity. */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><call><name>cypher_ast_pattern_path_get_element</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><call><name>AST_ToString</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Skip entities defined in previous clauses or already represented in our nodes/edges arrays.</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>alias</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// relation</comment>
			<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>QueryGraph_GetEdgeByAlias</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>EdgeCreateCtx</name></type> <name>new_edge</name> <init>= <expr><call><name>_NewEdgeCreateCtx</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>edges</name></expr></argument>, <argument><expr><name>new_edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// node</comment>
			<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>QueryGraph_GetNodeByAlias</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>NodeCreateCtx</name></type> <name>new_node</name> <init>= <expr><call><name>_NewNodeCreateCtx</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>nodes</name></expr></argument>, <argument><expr><name>new_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>QueryGraph_Free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// SORT operation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Get direction of each sort operation, append to an array, return the array in the form of out parameter</comment>
<function><type><name>void</name></type> <name>AST_PrepareSortOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>order_clause</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>sort_directions</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>order_clause</name> <operator>&amp;&amp;</operator> <name>sort_directions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nitems</name> <init>= <expr><call><name>cypher_ast_order_by_nitems</name><argument_list>(<argument><expr><name>order_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>directions</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cypher_ast_order_by_get_item</name><argument_list>(<argument><expr><name>order_clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>direction</name> <init>= <expr><ternary><condition><expr><call><name>cypher_ast_sort_item_is_ascending</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DIR_ASC</name></expr> </then><else>: <expr><name>DIR_DESC</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>directions</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>sort_directions</name> <operator>=</operator> <name>directions</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// UNWIND operation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>AST_UnwindContext</name></type> <name>AST_PrepareUnwindOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>unwind_clause</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>collection</name> <init>= <expr><call><name>cypher_ast_unwind_get_expression</name><argument_list>(<argument><expr><name>unwind_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>collection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>resolved_name</name></name> <operator>=</operator> <call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><call><name>cypher_ast_unwind_get_alias</name><argument_list>(<argument><expr><name>unwind_clause</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AST_UnwindContext</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><operator>.</operator><name>exp</name> <operator>=</operator> <name>exp</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// DELETE operation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>AST_PrepareDeleteOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>delete_clause</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>delete_count</name> <init>= <expr><call><name>cypher_ast_delete_nexpressions</name><argument_list>(<argument><expr><name>delete_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>exps</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>delete_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>delete_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_expr</name> <init>=
			<expr><call><name>cypher_ast_delete_get_expression</name><argument_list>(<argument><expr><name>delete_clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>ast_expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exps</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>exps</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// MERGE operation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>AST_MergeContext</name></type> <name>AST_PrepareMergeOp</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>merge_clause</name></decl></parameter>,
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AST_MergeContext</name></type> <name>merge_ctx</name> <init>= <expr><block>{ <expr><operator>.</operator><name>nodes_to_merge</name> <operator>=</operator> <name>NULL</name></expr>,
								   <expr><operator>.</operator><name>edges_to_merge</name> <operator>=</operator> <name>NULL</name></expr>,
								   <expr><operator>.</operator><name>on_match</name> <operator>=</operator> <name>NULL</name></expr>,
								   <expr><operator>.</operator><name>on_create</name> <operator>=</operator> <name>NULL</name></expr>
								 }</block></expr></init></decl>;</decl_stmt>

	<comment type="line">// Prepare all create contexts for nodes and edges on Merge path.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>on_match_items</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>on_create_items</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier></type><name>nodes_to_merge</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>NodeCreateCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>edges_to_merge</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>EdgeCreateCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>cypher_ast_merge_get_pattern_path</name><argument_list>(<argument><expr><name>merge_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Shouldn't operate on the original bound variables map, as this function may insert aliases.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_and_introduced_entities</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bound_vars</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>raxClone</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AST_PreparePathCreation</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>, <argument><expr><name>bound_and_introduced_entities</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodes_to_merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edges_to_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_and_introduced_entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="line">// Convert any ON MATCH and ON CREATE directives.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>directive_count</name> <init>= <expr><call><name>cypher_ast_merge_nactions</name><argument_list>(<argument><expr><name>merge_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>directive_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>directive</name> <init>= <expr><call><name>cypher_ast_merge_get_action</name><argument_list>(<argument><expr><name>merge_clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>directive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_ON_CREATE</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>create_prop_count</name> <init>= <expr><call><name>cypher_ast_on_create_nitems</name><argument_list>(<argument><expr><name>directive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>on_create_items</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>on_create_items</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>create_prop_count</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>create_item</name> <init>= <expr><call><name>cypher_ast_on_create_get_item</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>_ConvertUpdateItem</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>on_create_items</name></expr></argument>, <argument><expr><name>create_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_ON_MATCH</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>match_prop_count</name> <init>= <expr><call><name>cypher_ast_on_match_nitems</name><argument_list>(<argument><expr><name>directive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>on_match_items</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>on_match_items</name> <operator>=</operator> <call><name>raxNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>match_prop_count</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>match_item</name> <init>= <expr><call><name>cypher_ast_on_match_get_item</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>_ConvertUpdateItem</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>on_match_items</name></expr></argument>, <argument><expr><name>match_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>merge_ctx</name><operator>.</operator><name>on_match</name></name> <operator>=</operator> <name>on_match_items</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>merge_ctx</name><operator>.</operator><name>on_create</name></name> <operator>=</operator> <name>on_create_items</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>merge_ctx</name><operator>.</operator><name>edges_to_merge</name></name> <operator>=</operator> <name>edges_to_merge</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>merge_ctx</name><operator>.</operator><name>nodes_to_merge</name></name> <operator>=</operator> <name>nodes_to_merge</name></expr>;</expr_stmt>
	<return>return <expr><name>merge_ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// UPDATE operation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>rax</name> <modifier>*</modifier></type><name>AST_PrepareUpdateOp</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_SET</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>CYPHER_AST_REMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>updates</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// entity alias -&gt; EntityUpdateEvalCtx</comment>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_SET</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>nitems</name> <init>= <expr><call><name>cypher_ast_set_nitems</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>set_item</name> <init>=
				<expr><call><name>cypher_ast_set_get_item</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_ConvertUpdateItem</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>updates</name></expr></argument>, <argument><expr><name>set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>nitems</name> <init>= <expr><call><name>cypher_ast_remove_nitems</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>remove_item</name> <init>=
				<expr><call><name>cypher_ast_remove_get_item</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_ConvertUpdateItem</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>updates</name></expr></argument>, <argument><expr><name>remove_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>updates</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// CREATE operation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>AST_CreateContext</name></type> <name>AST_PrepareCreateOp</name>
<parameter_list>(
	<parameter><decl><type><name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>,
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_vars</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// shouldn't operate on the original bound variables map</comment>
	<comment type="line">// as this function may insert aliases</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>bound_and_introduced_entities</name> <init>= <expr><call><name>raxClone</name><argument_list>(<argument><expr><name>bound_vars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>NodeCreateCtx</name> <modifier>*</modifier></type><name>nodes_to_create</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>NodeCreateCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EdgeCreateCtx</name> <modifier>*</modifier></type><name>edges_to_create</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>EdgeCreateCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>cypher_ast_create_get_pattern</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>npaths</name> <init>= <expr><call><name>cypher_ast_pattern_npaths</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>npaths</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>cypher_ast_pattern_get_path</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AST_PreparePathCreation</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>qg</name></expr></argument>, <argument><expr><name>bound_and_introduced_entities</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>nodes_to_create</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edges_to_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>bound_and_introduced_entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AST_CreateContext</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><operator>.</operator><name>nodes_to_create</name> <operator>=</operator> <name>nodes_to_create</name></expr>,
		<expr><operator>.</operator><name>edges_to_create</name> <operator>=</operator> <name>edges_to_create</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

</unit>
