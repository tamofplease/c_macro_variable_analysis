<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/ast/enrichment/annotate_projected_named_paths.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"annotate_projected_named_paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">//  Annotation context - Attach named path projection identifiers their respective ast structure</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>AnnotationCtx</name> <modifier>*</modifier></type><name>_AST_NewProjectNamedPathContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AnnotationCtx</name> <modifier>*</modifier></type><name>project_all_ctx</name> <init>= <expr><call><name>cypher_ast_annotation_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>project_all_ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// annotate identifier expression with a pointer to its referenced path</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_attach_identifier</name><parameter_list>(<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name></decl></parameter>,
	   	<parameter><decl><type><name>AnnotationCtx</name> <modifier>*</modifier></type><name>named_paths_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path_identifier</name></decl></parameter>,
	   	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_name</name> <init>= <expr><call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>path_identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>exp_arr</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>path_name</name></expr></argument>,
			<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>exp_arr</name> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>exp_arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>cypher_astnode_attach_annotation</name><argument_list>(<argument><expr><name>named_paths_ctx</name></expr></argument>, <argument><expr><name><name>exp_arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// recursively annotate all named paths in pattern comprehension nodes</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_annotate_named_paths_in_expression</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name></decl></parameter>,
	   	<parameter><decl><type><name>AnnotationCtx</name> <modifier>*</modifier></type><name>named_paths_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_PATTERN_COMPREHENSION</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path_identifier</name> <init>=
		   	<expr><call><name>cypher_ast_pattern_comprehension_get_identifier</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>path_identifier</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>=
			   	<expr><call><name>cypher_ast_pattern_comprehension_get_pattern</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_attach_identifier</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>named_paths_ctx</name></expr></argument>,
					<argument><expr><name>path_identifier</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// recursively visit children</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>cypher_astnode_nchildren</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>cypher_astnode_get_child</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_annotate_named_paths_in_expression</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>,
				<argument><expr><name>named_paths_ctx</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>_annotate_relevant_projected_named_path_identifier</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
															   <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_start</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AnnotationCtx</name> <modifier>*</modifier></type><name>named_paths_ctx</name> <init>= <expr><call><name>AST_AnnotationCtxCollection_GetNamedPathsCtx</name><argument_list>(
										 <argument><expr><name><name>ast</name><operator>-&gt;</operator><name>anot_ctx_collection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>clause_iter</name> <init>= <expr><name>scope_start</name></expr></init></decl>;</init> <condition><expr><name>clause_iter</name> <operator>&lt;=</operator> <name>scope_end</name></expr>;</condition> <incr><expr><name>clause_iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>clause_iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_type_t</name></type> <name>clause_type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>clause_type</name> <operator>==</operator> <name>CYPHER_AST_MATCH</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>cypher_ast_match_get_pattern</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint</name></type> <name>path_count</name> <init>= <expr><call><name>cypher_ast_pattern_npaths</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>path_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>cypher_ast_pattern_get_path</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_NAMED_PATH</name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path_identifier</name> <init>= <expr><call><name>cypher_ast_named_path_get_identifier</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>_attach_identifier</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>named_paths_ctx</name></expr></argument>,
						   	<argument><expr><name>path_identifier</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>clause_type</name> <operator>==</operator> <name>CYPHER_AST_MERGE</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>cypher_ast_merge_get_pattern_path</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_NAMED_PATH</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path_identifier</name> <init>= <expr><call><name>cypher_ast_named_path_get_identifier</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_name</name> <init>= <expr><call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>path_identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>_attach_identifier</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>named_paths_ctx</name></expr></argument>,
						   	<argument><expr><name>path_identifier</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>clause_type</name> <operator>==</operator> <name>CYPHER_AST_RETURN</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>return_projection_count</name> <init>= <expr><call><name>cypher_ast_return_nprojections</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>return_projection_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><call><name>cypher_ast_return_get_projection</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>cypher_ast_projection_get_expression</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>_annotate_named_paths_in_expression</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>named_paths_ctx</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>clause_type</name> <operator>==</operator> <name>CYPHER_AST_WITH</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint</name></type> <name>with_projection_count</name> <init>= <expr><call><name>cypher_ast_with_nprojections</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>with_projection_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><call><name>cypher_ast_with_get_projection</name><argument_list>(<argument><expr><name>clause</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>cypher_ast_projection_get_expression</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>_annotate_named_paths_in_expression</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>named_paths_ctx</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_collect_projected_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_exp</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// In case of identifier.</comment>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_IDENTIFIER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>identifier</name> <init>= <expr><call><name>cypher_ast_identifier_get_name</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>exp_arr</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>identifier</name></expr></argument>,
												   <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Use array in case of multiple projections for the same named path.</comment>
		<if_stmt><if>if<condition>(<expr><name>exp_arr</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>exp_arr</name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><specifier>const</specifier> <name>cypher_astnode_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>exp_arr</name></expr></argument>, <argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>identifier</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exp_arr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// Recurse over children.</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><call><name>cypher_astnode_nchildren</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>cypher_astnode_get_child</name><argument_list>(<argument><expr><name>ast_exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Recursively continue mapping.</comment>
			<expr_stmt><expr><call><name>_collect_projected_identifier</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_annotate_with_clause_projected_named_path</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
													   <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>with_clause</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_start</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Iterate over the projections and find their identifiers.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>with_projection_count</name> <init>= <expr><call><name>cypher_ast_with_nprojections</name><argument_list>(<argument><expr><name>with_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>projection_iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>projection_iter</name> <operator>&lt;</operator> <name>with_projection_count</name></expr>;</condition> <incr><expr><name>projection_iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><call><name>cypher_ast_with_get_projection</name><argument_list>(<argument><expr><name>with_clause</name></expr></argument>, <argument><expr><name>projection_iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_collect_projected_identifier</name><argument_list>(<argument><expr><name>projection</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>_annotate_relevant_projected_named_path_identifier</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>array_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_annotate_delete_clause_projected_named_path</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
														 <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>delete_clause</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_start</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>delete_exp_count</name> <init>= <expr><call><name>cypher_ast_delete_nexpressions</name><argument_list>(<argument><expr><name>delete_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>exp_iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>exp_iter</name> <operator>&lt;</operator> <name>delete_exp_count</name></expr>;</condition> <incr><expr><name>exp_iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>cypher_ast_delete_get_expression</name><argument_list>(<argument><expr><name>delete_clause</name></expr></argument>, <argument><expr><name>exp_iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_collect_projected_identifier</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>_annotate_relevant_projected_named_path_identifier</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>array_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_annotate_unwind_clause_projected_named_path</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
														 <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>unwind_clause</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_start</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>cypher_ast_unwind_get_expression</name><argument_list>(<argument><expr><name>unwind_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_collect_projected_identifier</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_annotate_relevant_projected_named_path_identifier</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>array_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_annotate_return_clause_projected_named_path</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
														 <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>return_clause</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_start</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>return_projection_count</name> <init>= <expr><call><name>cypher_ast_return_nprojections</name><argument_list>(<argument><expr><name>return_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>projection_iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>projection_iter</name> <operator>&lt;</operator> <name>return_projection_count</name></expr>;</condition> <incr><expr><name>projection_iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>projection</name> <init>= <expr><call><name>cypher_ast_return_get_projection</name><argument_list>(<argument><expr><name>return_clause</name></expr></argument>,
																			  <argument><expr><name>projection_iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_collect_projected_identifier</name><argument_list>(<argument><expr><name>projection</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>_annotate_relevant_projected_named_path_identifier</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>array_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_annotate_match_clause_projected_named_path</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
														<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>match_clause</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_start</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>scope_end</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>identifier_map</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_collect_projected_identifier</name><argument_list>(<argument><expr><name>match_clause</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_annotate_relevant_projected_named_path_identifier</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>identifier_map</name></expr></argument>, <argument><expr><name>array_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_annotate_projected_named_path</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// TODO: find a better approach for PATH annotation.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>scope_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>scope_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>clause_count</name> <init>= <expr><call><name>cypher_ast_query_nclauses</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>clause_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_WITH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>scope_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>with_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_annotate_with_clause_projected_named_path</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>with_clause</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>scope_start</name> <operator>=</operator> <name>scope_end</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_RETURN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>scope_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>return_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_annotate_return_clause_projected_named_path</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>return_clause</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>scope_start</name> <operator>=</operator> <name>scope_end</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_DELETE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>scope_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>delete_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_annotate_delete_clause_projected_named_path</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>delete_clause</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Do not update scope start!</comment>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_UNWIND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>scope_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>unwind_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_annotate_unwind_clause_projected_named_path</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>unwind_clause</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Do not update scope start!</comment>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_MATCH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>scope_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>match_clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_annotate_match_clause_projected_named_path</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>match_clause</name></expr></argument>, <argument><expr><name>scope_start</name></expr></argument>, <argument><expr><name>scope_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Do not update scope start!</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AST_AnnotateNamedPaths</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>AST_AnnotationCtxCollection_SetNamedPathsCtx</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>anot_ctx_collection</name></name></expr></argument>,
												 <argument><expr><call><name>_AST_NewProjectNamedPathContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_annotate_projected_named_path</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
