<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/ast/ast_shared.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ast_shared.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rax_extensions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arithmetic/arithmetic_expression_construct.h"</cpp:file></cpp:include>

<function><type><name>AST_Operator</name></type> <name>AST_ConvertOperatorNode</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name>op</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<comment type="line">// TODO: ordered by precedence</comment>
	<comment type="line">// which I don't know if we're managing properly right now</comment>
	<if_stmt><if>if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_OR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_OR</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_XOR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_XOR</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_AND</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_AND</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_NOT</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// Unary, maybe doesn't belong here</comment>
		<return>return <expr><name>OP_NOT</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_EQUAL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_EQUAL</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_NEQUAL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_NEQUAL</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_LT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_LT</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_GT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_GT</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_LTE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_LE</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_GTE</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_GE</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_PLUS</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_PLUS</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_MINUS</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_MINUS</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_MULT</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_MULT</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_DIV</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_DIV</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_MOD</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_MOD</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_POW</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_POW</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_CONTAINS</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_CONTAINS</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_STARTS_WITH</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_STARTSWITH</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_ENDS_WITH</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_ENDSWITH</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_IN</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_IN</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_IS_NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_IS_NULL</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>op</name> <operator>==</operator> <name>CYPHER_OP_IS_NOT_NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>OP_IS_NOT_NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PropertyMap</name> <modifier>*</modifier></type><name>PropertyMap_New</name>
<parameter_list>(
	<parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>props</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>props</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO add parameter support</comment>

	<decl_stmt><decl><type><name>uint</name></type> <name>prop_count</name> <init>= <expr><call><name>cypher_ast_map_nentries</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PropertyMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PropertyMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>keys</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>prop_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>AR_ExpNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>prop_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>prop_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>prop_idx</name> <operator>&lt;</operator> <name>prop_count</name></expr>;</condition> <incr><expr><name>prop_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>insert_idx</name>                   <init>= <expr><name>prop_idx</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_key</name>   <init>= <expr><call><name>cypher_ast_map_get_key</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>prop_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attribute</name>             <init>= <expr><call><name>cypher_ast_prop_name_get_value</name><argument_list>(<argument><expr><name>ast_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_value</name> <init>= <expr><call><name>cypher_ast_map_get_value</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>prop_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>value</name>                 <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>ast_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// search for duplicate attributes</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>attribute</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>insert_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if<condition>(<expr><name>insert_idx</name> <operator>==</operator> <name>prop_idx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>insert_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>insert_idx</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PropertyMap</name> <modifier>*</modifier></type><name>_PropertyMap_Clone</name>
<parameter_list>(
	<parameter><decl><type><name>PropertyMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>PropertyMap</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PropertyMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>AR_EXP_Clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PropertyMap_Free</name>
<parameter_list>(
	<parameter><decl><type><name>PropertyMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free_cb</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>AR_EXP_Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>NodeCreateCtx</name></type> <name>NodeCreateCtx_Clone</name>
<parameter_list>(
	<parameter><decl><type><name>NodeCreateCtx</name></type> <name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>NodeCreateCtx</name></type> <name>clone</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>clone</name><operator>.</operator><name>labels</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>clone</name><operator>.</operator><name>labelsId</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>labelsId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>.</operator><name>properties</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <call><name>_PropertyMap_Clone</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>NodeCreateCtx_Free</name>
<parameter_list>(
	<parameter><decl><type><name>NodeCreateCtx</name></type> <name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>labelsId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PropertyMap_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>EdgeCreateCtx</name></type> <name>EdgeCreateCtx_Clone</name>
<parameter_list>(
	<parameter><decl><type><name>EdgeCreateCtx</name></type> <name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>EdgeCreateCtx</name></type> <name>clone</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>.</operator><name>properties</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>clone</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <call><name>_PropertyMap_Clone</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>UpdateCtx_New</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EntityUpdateEvalCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>alias</name></name>         <operator>=</operator> <name>alias</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>record_idx</name></name>    <operator>=</operator> <name>INVALID_INDEX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name></name>    <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>PropertySetCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>UpdateCtx_Clone</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>clone</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EntityUpdateEvalCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>orig</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>alias</name></name>         <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>alias</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>record_idx</name></name>    <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>record_idx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>properties</name></name>    <operator>=</operator> <call><name>array_new</name><argument_list>(<argument><expr><name>PropertySetCtx</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>add_labels</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>remove_labels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>orig</name><operator>-&gt;</operator><name>add_labels</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>add_labels</name></name></expr></argument>, <argument><expr><name><name>orig</name><operator>-&gt;</operator><name>add_labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>orig</name><operator>-&gt;</operator><name>remove_labels</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_clone</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>remove_labels</name></name></expr></argument>, <argument><expr><name><name>orig</name><operator>-&gt;</operator><name>remove_labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>PropertySetCtx</name></type> <name>update</name> <init>= <expr><block>{
			<expr><operator>.</operator><name>attribute</name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>properties</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attribute</name></expr>,
			<expr><operator>.</operator><name>exp</name> <operator>=</operator> <call><name>AR_EXP_Clone</name><argument_list>(<argument><expr><name><name>orig</name><operator>-&gt;</operator><name>properties</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exp</name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>properties</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr>,
		}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateCtx_Clear</name>
<parameter_list>(
	<parameter><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateCtx_Free</name>
<parameter_list>(
	<parameter><decl><type><name>EntityUpdateEvalCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>AR_EXP_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>remove_labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
