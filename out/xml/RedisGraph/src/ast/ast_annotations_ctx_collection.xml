<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/ast/ast_annotations_ctx_collection.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ast_annotations_ctx_collection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_free_to_string_annotation</name>
<parameter_list>(
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>annotation</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AST_AnnotationCtxCollection</name> <modifier>*</modifier></type><name>AST_AnnotationCtxCollection_New</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AST_AnnotationCtxCollection</name> <modifier>*</modifier></type><name>anotCtxCollection</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AST_AnnotationCtxCollection</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>anotCtxCollection</name><operator>-&gt;</operator><name>named_paths_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>anotCtxCollection</name><operator>-&gt;</operator><name>to_string_ctx</name></name>   <operator>=</operator> <call><name>cypher_ast_annotation_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// set release handler to free allocated string</comment>
	<expr_stmt><expr><call><name>cypher_ast_annotation_context_set_release_handler</name><argument_list>(<argument><expr><name><name>anotCtxCollection</name><operator>-&gt;</operator><name>to_string_ctx</name></name></expr></argument>, <argument><expr><name>_free_to_string_annotation</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>anotCtxCollection</name><operator>-&gt;</operator><name>anon_count</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>anotCtxCollection</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>AnnotationCtx</name> <modifier>*</modifier></type><name>AST_AnnotationCtxCollection_GetNamedPathsCtx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AST_AnnotationCtxCollection</name>
																   <modifier>*</modifier></type><name>anot_ctx_collection</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>anot_ctx_collection</name><operator>-&gt;</operator><name>named_paths_ctx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>AnnotationCtx</name> <modifier>*</modifier></type><name>AST_AnnotationCtxCollection_GetToStringCtx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AST_AnnotationCtxCollection</name>
																   <modifier>*</modifier></type><name>anot_ctx_collection</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><name><name>anot_ctx_collection</name><operator>-&gt;</operator><name>to_string_ctx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>void</name></type> <name>AST_AnnotationCtxCollection_SetNamedPathsCtx</name><parameter_list>(<parameter><decl><type><name>AST_AnnotationCtxCollection</name>
														 <modifier>*</modifier></type><name>anot_ctx_collection</name></decl></parameter>,
														 <parameter><decl><type><name>AnnotationCtx</name> <modifier>*</modifier></type><name>named_paths_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>anot_ctx_collection</name><operator>-&gt;</operator><name>named_paths_ctx</name></name> <operator>=</operator> <name>named_paths_ctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AST_AnnotationCtxCollection_Free</name><parameter_list>(<parameter><decl><type><name>AST_AnnotationCtxCollection</name> <modifier>*</modifier></type><name>anotCtxCollection</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>anotCtxCollection</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>anotCtxCollection</name><operator>-&gt;</operator><name>named_paths_ctx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cypher_ast_annotation_context_free</name><argument_list>(
				<argument><expr><name><name>anotCtxCollection</name><operator>-&gt;</operator><name>named_paths_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>cypher_ast_annotation_context_free</name><argument_list>(<argument><expr><name><name>anotCtxCollection</name><operator>-&gt;</operator><name>to_string_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>anotCtxCollection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
