<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/ast/ast_build_filter_tree.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ast_build_filter_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ast_shared.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../arithmetic/arithmetic_expression_construct.h"</cpp:file></cpp:include>

<comment type="line">// Forward declaration</comment>
<function_decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>_FilterNode_FromAST</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>_CreatePredicateFilterNode</name><parameter_list>(<parameter><decl><type><name>AST_Operator</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>,
										  <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>FilterTree_CreatePredicateFilter</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_FT_Append</name><parameter_list>(<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root_ptr</name></decl></parameter>, <parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><operator>*</operator><name>root_ptr</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// If the tree is uninitialized, its root is the child</comment>
	<if_stmt><if>if<condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>root_ptr</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_COND</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>left</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// NOT condition nodes should always have a NULL right child; do not replace it.</comment>
		<if_stmt><if>if<condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>right</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>op</name></name> <operator>!=</operator> <name>OP_NOT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>new_root</name> <init>= <expr><call><name>FilterTree_CreateConditionFilter</name><argument_list>(<argument><expr><name>OP_AND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>(<argument><expr><name>new_root</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>(<argument><expr><name>new_root</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>root_ptr</name> <operator>=</operator> <name>new_root</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>_CreateFilterSubtree</name><parameter_list>(<parameter><decl><type><name>AST_Operator</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>,
									<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>OP_OR</name></expr>:</case>
	<case>case <expr><name>OP_AND</name></expr>:</case>
	<case>case <expr><name>OP_XOR</name></expr>:</case>
		<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>FilterTree_CreateConditionFilter</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>_FilterNode_FromAST</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>_FilterNode_FromAST</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>filter</name></expr>;</return>
	<case>case <expr><name>OP_NOT</name></expr>:</case>
		<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>FilterTree_CreateConditionFilter</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>_FilterNode_FromAST</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>filter</name></expr>;</return>
	<case>case <expr><name>OP_EQUAL</name></expr>:</case>
	<case>case <expr><name>OP_NEQUAL</name></expr>:</case>
	<case>case <expr><name>OP_LT</name></expr>:</case>
	<case>case <expr><name>OP_LE</name></expr>:</case>
	<case>case <expr><name>OP_GT</name></expr>:</case>
	<case>case <expr><name>OP_GE</name></expr>:</case>
		<return>return <expr><call><name>_CreatePredicateFilterNode</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</return>
	<default>default:</default>
		<comment type="block">/* Probably an invalid query
		 * e.g. MATCH (u) where u.v NOT NULL RETURN u
		 * this will cause the constructed tree to form an illegal structure
		 * which will be caught later on by `FilterTree_Valid`
		 * and set a compile-time error. */</comment>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// AND, OR, XOR (others?)</comment>
<comment type="block">/* WHERE (condition) AND (condition),
 * WHERE a.val = b.val */</comment>
<function><type><specifier>static</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>_convertBinaryOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>op_node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name>operator</name> <init>= <expr><call><name>cypher_ast_binary_operator_get_operator</name><argument_list>(<argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AST_Operator</name></type> <name>op</name> <init>= <expr><call><name>AST_ConvertOperatorNode</name><argument_list>(<argument><expr><name>operator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>OP_OR</name></expr>:</case>
	<case>case <expr><name>OP_AND</name></expr>:</case>
	<case>case <expr><name>OP_XOR</name></expr>:</case>
	<case>case <expr><name>OP_EQUAL</name></expr>:</case>
	<case>case <expr><name>OP_NEQUAL</name></expr>:</case>
	<case>case <expr><name>OP_LT</name></expr>:</case>
	<case>case <expr><name>OP_LE</name></expr>:</case>
	<case>case <expr><name>OP_GT</name></expr>:</case>
	<case>case <expr><name>OP_GE</name></expr>:</case>
		<comment type="line">// Arguments are of type CYPHER_AST_EXPRESSION</comment>
		<expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>cypher_ast_binary_operator_get_argument1</name><argument_list>(<argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>cypher_ast_binary_operator_get_argument2</name><argument_list>(<argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>_CreateFilterSubtree</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>OP_NOT</name></expr>:</case>
		<expr_stmt><expr><call><name>ErrorCtx_SetError</name><argument_list>(<argument><expr><literal type="string">"Invalid usage of 'NOT' filter with expressions on left and right sides."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	<default>default:</default>
		<return>return <expr><call><name>FilterTree_CreateExpressionFilter</name><argument_list>(<argument><expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>_convertUnaryOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>op_node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name>operator</name> <init>= <expr><call><name>cypher_ast_unary_operator_get_operator</name><argument_list>(<argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Argument is of type CYPHER_AST_EXPRESSION</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>cypher_ast_unary_operator_get_argument</name><argument_list>(<argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AST_Operator</name></type> <name>op</name> <init>= <expr><call><name>AST_ConvertOperatorNode</name><argument_list>(<argument><expr><name>operator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>OP_NOT</name></expr>:</case>
			<return>return <expr><call><name>_CreateFilterSubtree</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<return>return <expr><call><name>FilterTree_CreateExpressionFilter</name><argument_list>(<argument><expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>op_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>_convertOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>FilterTree_CreateExpressionFilter</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* A comparison node contains two arrays - one of operators, and one of expressions.
 * Most comparisons will only have one operator and two expressions, but Cypher
 * allows more complex formulations like "x &lt; y &lt;= z".
 * A comparison takes a form such as "WHERE a.val &lt; y.val". */</comment>
<function><type><specifier>static</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>_convertComparison</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>comparison_node</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// "x &lt; y &lt;= z"</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>nelems</name> <init>= <expr><call><name>cypher_ast_comparison_get_length</name><argument_list>(<argument><expr><name>comparison_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>filters</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>FT_FilterNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>nelems</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Create and accumulate simple predicates x &lt; y.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_operator_t</name> <modifier>*</modifier></type><name>operator</name> <init>= <expr><call><name>cypher_ast_comparison_get_operator</name><argument_list>(<argument><expr><name>comparison_node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>cypher_ast_comparison_get_argument</name><argument_list>(<argument><expr><name>comparison_node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>cypher_ast_comparison_get_argument</name><argument_list>(<argument><expr><name>comparison_node</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>AST_Operator</name></type> <name>op</name> <init>= <expr><call><name>AST_ConvertOperatorNode</name><argument_list>(<argument><expr><name>operator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>_CreatePredicateFilterNode</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Reduce by anding.</comment>
	<while>while<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>intersec</name> <init>= <expr><call><name>FilterTree_CreateConditionFilter</name><argument_list>(<argument><expr><name>OP_AND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>FilterTree_AppendLeftChild</name><argument_list>(<argument><expr><name>intersec</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FilterTree_AppendRightChild</name><argument_list>(<argument><expr><name>intersec</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>intersec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>_convertInlinedProperties</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>entity</name></decl></parameter>,
												<parameter><decl><type><name>GraphEntityType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>ast_identifer</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>GETYPE_NODE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>cypher_ast_node_pattern_get_properties</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// relation</comment>
		<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>cypher_ast_rel_pattern_get_properties</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Retrieve the entity's alias.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><call><name>AST_ToString</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>nelems</name> <init>= <expr><call><name>cypher_ast_map_nentries</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelems</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// key is of type CYPHER_AST_PROP_NAME</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>cypher_ast_prop_name_get_value</name><argument_list>(<argument><expr><call><name>cypher_ast_map_get_key</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>graph_entity</name> <init>= <expr><call><name>AR_EXP_NewVariableOperandNode</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AR_EXP_NewAttributeAccessNode</name><argument_list>(<argument><expr><name>graph_entity</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// val is of type CYPHER_AST_EXPRESSION</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>cypher_ast_map_get_value</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AR_EXP_FromASTNode</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* TODO In a query like:
		 * "MATCH (r:person {name:"Roi"}) RETURN r"
		 * (note the repeated double quotes) - this creates a variable rather than a scalar.
		 * Can we use this to handle escape characters or something? How does it work? */</comment>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>FilterTree_CreatePredicateFilter</name><argument_list>(<argument><expr><name>OP_EQUAL</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>_FT_Append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>_convertPatternPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>entity</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Collect aliases specified in pattern.</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>aliases</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AST_CollectAliases</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aliases</name></expr></argument>, <argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>alias_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Create a function call expression
	 * First argument is a pointer to the original AST pattern node.
	 * argument 1..alias_count are the referenced aliases,
	 * required for filter positioning when constructing an execution plan. */</comment>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><call><name>AR_EXP_NewOpNode</name><argument_list>(<argument><expr><literal type="string">"path_filter"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>alias_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AR_EXP_NewConstOperandNode</name><argument_list>(<argument><expr><call><name>SI_PtrVal</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>entity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alias_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>AR_EXP_NewVariableOperandNode</name><argument_list>(<argument><expr><name><name>aliases</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>FilterTree_CreateExpressionFilter</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>_FilterNode_FromAST</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_COMPARISON</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_convertComparison</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_BINARY_OPERATOR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_convertBinaryOperator</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_UNARY_OPERATOR</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_convertUnaryOperator</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_PATTERN_PATH</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_convertPatternPath</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name>_convertOperator</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_AST_ConvertGraphPatternToFilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,
									  <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pattern</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>npaths</name> <init>= <expr><call><name>cypher_ast_pattern_npaths</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Go over each path in the pattern.</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>npaths</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>cypher_ast_pattern_get_path</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Go over each element in the path pattern and check if there is an inline filter.</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>nelements</name> <init>= <expr><call><name>cypher_ast_pattern_path_nelements</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Nodes are in even places.</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nelements</name></expr>;</condition> <incr><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>cypher_ast_pattern_path_get_element</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ft_node</name> <operator>=</operator> <call><name>_convertInlinedProperties</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>GETYPE_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>ft_node</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_FT_Append</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>ft_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<comment type="line">// Edges are in odd places.</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>e</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>nelements</name></expr>;</condition> <incr><expr><name>e</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>edge</name> <init>= <expr><call><name>cypher_ast_pattern_path_get_element</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ft_node</name> <operator>=</operator> <call><name>_convertInlinedProperties</name><argument_list>(<argument><expr><name>edge</name></expr></argument>, <argument><expr><name>GETYPE_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>ft_node</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_FT_Append</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>ft_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AST_ConvertFilters</name><parameter_list>(<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>entity</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>entity</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_PATTERN_PATH</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_convertPatternPath</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_COMPARISON</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_convertComparison</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_BINARY_OPERATOR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_convertBinaryOperator</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_UNARY_OPERATOR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_convertUnaryOperator</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_convertOperator</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>_FT_Append</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>AST_BuildFilterTree</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter_tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>match_clauses</name> <init>= <expr><call><name>AST_GetClauses</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_MATCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>match_clauses</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>match_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>match_clauses</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>match_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<comment type="line">// Optional match clauses are handled separately.</comment>
			<if_stmt><if>if<condition>(<expr><call><name>cypher_ast_match_is_optional</name><argument_list>(<argument><expr><name><name>match_clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>cypher_ast_match_get_pattern</name><argument_list>(<argument><expr><name><name>match_clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_AST_ConvertGraphPatternToFilter</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>predicate</name> <init>= <expr><call><name>cypher_ast_match_get_predicate</name><argument_list>(<argument><expr><name><name>match_clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>predicate</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AST_ConvertFilters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>match_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>with_clauses</name> <init>= <expr><call><name>AST_GetClauses</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_WITH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>with_clauses</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>with_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>with_clauses</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>with_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>predicate</name> <init>= <expr><call><name>cypher_ast_with_get_predicate</name><argument_list>(<argument><expr><name><name>with_clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>predicate</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AST_ConvertFilters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>with_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>call_clauses</name> <init>= <expr><call><name>AST_GetClauses</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><name>CYPHER_AST_CALL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>call_clauses</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>call_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>call_clauses</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>call_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>where_predicate</name> <init>= <expr><call><name>cypher_ast_call_get_predicate</name><argument_list>(<argument><expr><name><name>call_clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>where_predicate</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AST_ConvertFilters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>, <argument><expr><name>where_predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>call_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FilterTree_Valid</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// Invalid filter tree structure, a compile-time error has been set.</comment>
		<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Apply De Morgan's laws</comment>
	<expr_stmt><expr><call><name>FilterTree_DeMorgan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>filter_tree</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>AST_BuildFilterTreeFromClauses</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>clauses</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter_tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>predicate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name><name>clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_MATCH</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>cypher_ast_match_get_pattern</name><argument_list>(<argument><expr><name><name>clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>_AST_ConvertGraphPatternToFilter</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>predicate</name> <operator>=</operator> <call><name>cypher_ast_match_get_predicate</name><argument_list>(<argument><expr><name><name>clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_WITH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>predicate</name> <operator>=</operator> <call><name>cypher_ast_with_get_predicate</name><argument_list>(<argument><expr><name><name>clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>type</name> <operator>==</operator> <name>CYPHER_AST_CALL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>predicate</name> <operator>=</operator> <call><name>cypher_ast_call_get_predicate</name><argument_list>(<argument><expr><name><name>clauses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if<condition>(<expr><name>predicate</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AST_ConvertFilters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FilterTree_Valid</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// Invalid filter tree structure, a compile-time error has been set.</comment>
		<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name>filter_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Apply De Morgan's laws</comment>
	<expr_stmt><expr><call><name>FilterTree_DeMorgan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>filter_tree</name></expr>;</return>
</block_content>}</block></function>

</unit>
