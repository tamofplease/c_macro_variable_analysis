<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/ast/ast_mock.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ast_mock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><name>AST</name> <modifier>*</modifier></type><name>AST_MockMatchClause</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>master_ast</name></decl></parameter>, <parameter><decl><type><name>cypher_astnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>node_is_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* The AST node and its children must be reused directly,
	 * as cloning causes annotations (entity names) to be lost.
	 * TODO consider updating parser to improve this. */</comment>
	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>referenced_entities</name></name> <operator>=</operator> <name><name>master_ast</name><operator>-&gt;</operator><name>referenced_entities</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>anot_ctx_collection</name></name> <operator>=</operator> <name><name>master_ast</name><operator>-&gt;</operator><name>anot_ctx_collection</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>free_root</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cypher_input_range</name></name></type> <name>range</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>predicate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>child_count</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>node_is_path</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>cypher_astnode_nchildren</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>cypher_astnode_t</name> <modifier>*</modifier></type><name><name>children</name><index>[<expr><name>child_count</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>node_is_path</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* MERGE clauses and path filters are comprised of a single path.
		 * Construct a pattern node containing just this path. */</comment>
		<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>cypher_ast_pattern</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* OPTIONAL MATCH clauses contain a pattern node
		 * and possibly a predicate node (containing WHERE conditions). */</comment>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pattern</name> <operator>=</operator> <operator>(</operator><name>cypher_astnode_t</name> <operator>*</operator><operator>)</operator><call><name>cypher_ast_match_get_pattern</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>predicate</name> <operator>=</operator> <call><name>cypher_ast_match_get_predicate</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Explicitly collect all child nodes from the clause.</comment>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>child_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cypher_astnode_t</name> <operator>*</operator><operator>)</operator><call><name>cypher_astnode_get_child</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// Build a new match clause that holds this pattern.</comment>
	<decl_stmt><decl><type><name>cypher_astnode_t</name> <modifier>*</modifier></type><name>match_clause</name> <init>= <expr><call><name>cypher_ast_match</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>predicate</name></expr></argument>,
													  <argument><expr><name>children</name></expr></argument>, <argument><expr><name>child_count</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Build a query node holding this clause.</comment>
	<expr_stmt><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>cypher_ast_query</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>match_clause</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>match_clause</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>QueryCtx_SetAST</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Update the TLS.</comment>

	<return>return <expr><name>ast</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AST_MockFree</name><parameter_list>(<parameter><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>free_pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* When freeing the mock AST, we have to be careful to not free any shared node
	 * or its annotations. We'll free every surrounding layer explicitly - the MATCH
	 * pattern (if we constructed it), the MATCH clause, and finally the AST root. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>clause</name> <init>= <expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CYPHER_AST_MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>free_pattern</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>cypher_ast_match_get_pattern</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>cypher_astnode_free</name><argument_list>(<argument><expr><operator>(</operator><name>cypher_astnode_t</name> <operator>*</operator><operator>)</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>cypher_astnode_free</name><argument_list>(<argument><expr><operator>(</operator><name>cypher_astnode_t</name> <operator>*</operator><operator>)</operator><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cypher_astnode_free</name><argument_list>(<argument><expr><operator>(</operator><name>cypher_astnode_t</name> <operator>*</operator><operator>)</operator><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
