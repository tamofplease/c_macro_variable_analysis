<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/resultset/formatters/resultset_replycompact.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resultset_formatters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../datatypes/datatypes.h"</cpp:file></cpp:include>

<comment type="line">// Forward declarations.</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithNode</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithEdge</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithSIArray</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithPath</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithMap</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithPoint</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ValueType</name></type> <name>_mapValueType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SIValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>T_NULL</name></expr>:</case>
		<return>return <expr><name>VALUE_NULL</name></expr>;</return>
	<case>case <expr><name>T_STRING</name></expr>:</case>
		<return>return <expr><name>VALUE_STRING</name></expr>;</return>
	<case>case <expr><name>T_INT64</name></expr>:</case>
		<return>return <expr><name>VALUE_INTEGER</name></expr>;</return>
	<case>case <expr><name>T_BOOL</name></expr>:</case>
		<return>return <expr><name>VALUE_BOOLEAN</name></expr>;</return>
	<case>case <expr><name>T_DOUBLE</name></expr>:</case>
		<return>return <expr><name>VALUE_DOUBLE</name></expr>;</return>
	<case>case <expr><name>T_ARRAY</name></expr>:</case>
		<return>return <expr><name>VALUE_ARRAY</name></expr>;</return>
	<case>case <expr><name>T_NODE</name></expr>:</case>
		<return>return <expr><name>VALUE_NODE</name></expr>;</return>
	<case>case <expr><name>T_EDGE</name></expr>:</case>
		<return>return <expr><name>VALUE_EDGE</name></expr>;</return>
	<case>case <expr><name>T_PATH</name></expr>:</case>
		<return>return <expr><name>VALUE_PATH</name></expr>;</return>
	<case>case <expr><name>T_MAP</name></expr>:</case>
		<return>return <expr><name>VALUE_MAP</name></expr>;</return>
	<case>case <expr><name>T_POINT</name></expr>:</case>
		<return>return <expr><name>VALUE_POINT</name></expr>;</return>
	<default>default:</default>
		<return>return <expr><name>VALUE_UNKNOWN</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_ResultSet_ReplyWithValueType</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SIValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>_mapValueType</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithSIValue</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
											   <parameter><decl><type><specifier>const</specifier> <name>SIValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Emit the value type, then the actual value (to facilitate client-side parsing)</comment>
	<expr_stmt><expr><call><name>_ResultSet_ReplyWithValueType</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>T_STRING</name></expr>:</case>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithStringBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><name>T_INT64</name></expr>:</case>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>longval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><name>T_DOUBLE</name></expr>:</case>
		<expr_stmt><expr><call><name>_ResultSet_ReplyWithRoundedDouble</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>doubleval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><name>T_BOOL</name></expr>:</case>
		<if_stmt><if>if<condition>(<expr><name><name>v</name><operator>.</operator><name>longval</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RedisModule_ReplyWithStringBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>RedisModule_ReplyWithStringBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<return>return;</return>
	<case>case <expr><name>T_ARRAY</name></expr>:</case>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithSIArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>T_NULL</name></expr>:</case>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithNull</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><name>T_NODE</name></expr>:</case>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithNode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>ptrval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><name>T_EDGE</name></expr>:</case>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithEdge</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>ptrval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><name>T_PATH</name></expr>:</case>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithPath</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><name>T_MAP</name></expr>:</case>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithMap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><name>T_POINT</name></expr>:</case>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithPoint</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	<default>default:</default>
		<expr_stmt><expr><call><name>RedisModule_Assert</name><argument_list>(<argument><expr><literal type="string">"Unhandled value type"</literal> <operator>&amp;&amp;</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithProperties</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
												  <parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>AttributeSet</name></type> <name>set</name> <init>= <expr><call><name>GraphEntity_GetAttributes</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>prop_count</name> <init>= <expr><call><name>ATTRIBUTE_SET_COUNT</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>prop_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Iterate over all properties stored on entity</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prop_count</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Compact replies include the value's type; verbose replies do not</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attr_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>value</name> <init>= <expr><call><name>AttributeSet_GetIdx</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Emit the string index</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Emit the value</comment>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithSIValue</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithNode</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/*  Compact node reply format:
	 *  [
	 *      Node ID (integer),
	        [label string index (integer) X N],
	 *      [[name, value, value type] X N]
	 *  ]
	 */</comment>
	<comment type="line">// 3 top-level entities in node reply</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// id (integer)</comment>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>id</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// [label string index X N]</comment>
	<comment type="line">// Retrieve node labels</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>lbls_count</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>NODE_GET_LABELS</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>lbls_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lbls_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lbls_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// [properties]</comment>
	<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithProperties</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithEdge</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/*  Compact edge reply format:
	 *  [
	 *      Edge ID (integer),
	        reltype string index (integer),
	        src node ID (integer),
	        dest node ID (integer),
	 *      [[name, value, value type] X N]
	 *  ]
	 */</comment>
	<comment type="line">// 5 top-level entities in edge reply</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// id (integer)</comment>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>id</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// reltype string index, retrieve reltype.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>reltype_id</name> <init>= <expr><call><name>Graph_GetEdgeRelation</name><argument_list>(<argument><expr><name><name>gc</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>reltype_id</name> <operator>!=</operator> <name>GRAPH_NO_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>reltype_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// src node ID</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>Edge_GetSrcNodeID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// dest node ID</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>Edge_GetDestNodeID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// [properties]</comment>
	<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithProperties</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>(</operator><name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithSIArray</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
											   <parameter><decl><type><name>SIValue</name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>

	<comment type="block">/*  Compact array reply format:
	 *  [
	 *      [type, value] // every member is returned at its compact representation
	 *      [type, value]
	 *      .
	 *      .
	 *      .
	 *      [type, value]
	 *  ]
	 */</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>arrayLen</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arrayLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrayLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Reply with array with space for type and value</comment>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithSIValue</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithPath</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* Path will return as an array of two SIArrays, the first is path nodes and the second is edges,
	* see array compact format.
	* Compact path reply:
	* [
	*      type : array,
	*      [
	*          [Node compact reply format],
	*          .
	*          .
	*          .
	*          [Node compact reply format]
	*      ],
	*      type: array,
	*      [
	*          [Edge compact reply format],
	*          .
	*          .
	*          .
	*          [Edge compact reply format]
	*      ]
	* ]
	*/</comment>

	<comment type="line">// Response consists of two arrays.</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// First array type and value.</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>nodes</name> <init>= <expr><call><name>SIPath_Nodes</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithSIValue</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Second array type and value.</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>relationships</name> <init>= <expr><call><name>SIPath_Relationships</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithSIValue</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>relationships</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>relationships</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithMap</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// map will be returned as an array of key/value pairs</comment>
	<comment type="line">// consider the map object: {a:1, b:'str', c: {x:1, y:2}}</comment>
	<comment type="line">//</comment>
	<comment type="line">// the reply will be structured:</comment>
	<comment type="line">// [</comment>
	<comment type="line">//     string(a), int(1),</comment>
	<comment type="line">//     string(b), string(str),</comment>
	<comment type="line">//     string(c), [</comment>
	<comment type="line">//                    string(x), int(1),</comment>
	<comment type="line">//                    string(y), int(2)</comment>
	<comment type="line">//                 ]</comment>
	<comment type="line">// ]</comment>

	<decl_stmt><decl><type><name>uint</name></type> <name>key_count</name> <init>= <expr><call><name>Map_KeyCount</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Map</name></type> <name>m</name> <init>= <expr><name><name>v</name><operator>.</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

	<comment type="line">// response consists of N pairs array:</comment>
	<comment type="line">// (string, value type, value)</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key_count</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Pair</name></type>     <name>p</name>     <init>=  <expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type>  <name>val</name>   <init>=  <expr><name><name>p</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>key</name>  <init>=  <expr><name><name>p</name><operator>.</operator><name>key</name><operator>.</operator><name>stringval</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// emit key</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithCString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// emit value</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithSIValue</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_CompactReplyWithPoint</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>, <parameter><decl><type><name>SIValue</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_ResultSet_ReplyWithRoundedDouble</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>Point_lat</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_ResultSet_ReplyWithRoundedDouble</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>Point_lon</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ResultSet_EmitCompactRow</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name></decl></parameter>,
							  <parameter><decl><type><name>SIValue</name> <modifier>*</modifier><modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>numcols</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Prepare return array sized to the number of RETURN entities</comment>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>numcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numcols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>cell</name> <init>= <expr><operator>*</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Reply with array with space for type and value</comment>
		<expr_stmt><expr><call><name>_ResultSet_CompactReplyWithSIValue</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// For every column in the header, emit a 2-array containing the ColumnType enum</comment>
<comment type="line">// followed by the column alias.</comment>
<function><type><name>void</name></type> <name>ResultSet_ReplyWithCompactHeader</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>columns</name></decl></parameter>,
									  <parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>col_rec_map</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>columns_len</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>columns_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columns_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Because the types found in the first Record do not necessarily inform the types
		 * in subsequent records, we will always set the column type as scalar. */</comment>
		<decl_stmt><decl><type><name>ColumnType</name></type> <name>t</name> <init>= <expr><name>COLUMN_SCALAR</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithLongLong</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Second, emit the identifier string associated with the column</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithStringBuffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
