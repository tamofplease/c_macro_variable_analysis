<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/resultset/resultset.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resultset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../grouping/group_cache.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_ReplyWithPreamble</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// prepare a response containing a header, records, and statistics</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// emit the table header using the appropriate formatter</comment>
		<expr_stmt><expr><call><name><name>set</name><operator>-&gt;</operator><name>formatter</name><operator>-&gt;</operator><name>EmitHeader</name></name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>,
				<argument><expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// prepare a response containing only statistics</comment>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_ResultSet_SetColumns</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>columns</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AST</name> <modifier>*</modifier></type><name>ast</name> <init>= <expr><call><name>QueryCtx_GetAST</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_type_t</name></type> <name>root_type</name> <init>= <expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>root_type</name> <operator>==</operator> <name>CYPHER_AST_QUERY</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>clause_count</name> <init>= <expr><call><name>cypher_ast_query_nclauses</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>cypher_astnode_t</name> <modifier>*</modifier></type><name>last_clause</name> <init>=
			<expr><call><name>cypher_ast_query_get_clause</name><argument_list>(<argument><expr><name><name>ast</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>clause_count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>cypher_astnode_type_t</name></type> <name>last_clause_type</name> <init>=
			<expr><call><name>cypher_astnode_type</name><argument_list>(<argument><expr><name>last_clause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>last_clause_type</name> <operator>==</operator> <name>CYPHER_AST_RETURN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>columns</name></name> <operator>=</operator> <call><name>AST_BuildReturnColumnNames</name><argument_list>(<argument><expr><name>last_clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>last_clause_type</name> <operator>==</operator> <name>CYPHER_AST_CALL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>columns</name></name> <operator>=</operator> <call><name>AST_BuildCallColumnNames</name><argument_list>(<argument><expr><name>last_clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name> <operator>=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// create a new result set</comment>
<function><type><name>ResultSet</name> <modifier>*</modifier></type><name>NewResultSet</name>
<parameter_list>(
	<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>ResultSetFormatterType</name></type> <name>format</name></decl></parameter>  <comment type="line">// resultset format</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ResultSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>gc</name></name>                  <operator>=</operator>  <call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>ctx</name></name>                 <operator>=</operator>  <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name>               <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>format</name></name>              <operator>=</operator>  <name>format</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>columns</name></name>             <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>formatter</name></name>           <operator>=</operator>  <call><name>ResultSetFormatter_GetFormatter</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name>        <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>cells_allocation</name></name>    <operator>=</operator>  <name>M_NONE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name></name>  <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// init resultset statistics</comment>
	<expr_stmt><expr><call><name>ResultSetStat_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// create resultset columns</comment>
	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>FORMATTER_NOP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_ResultSet_SetColumns</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// allocate space for resultset entries only if data is expected</comment>
	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// none empty result-set</comment>
		<comment type="line">// allocate enough space for at least 10 rows</comment>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>nrows</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name> <operator>=</operator> <call><name>DataBlock_New</name><argument_list>(<argument><expr><literal type="number">16384</literal></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIValue</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>set</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// map each column to a record index</comment>
<comment type="line">// such that when resolving resultset row i column j we'll extract</comment>
<comment type="line">// data from record at position columns_record_map[j]</comment>
<function><type><name>void</name></type> <name>ResultSet_MapProjection</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,  <comment type="line">// resultset to init mappings for</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>mapping</name></decl></parameter>     <comment type="line">// mapping</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name>     <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mapping</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name></name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>raxFind</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>column</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>raxNotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>idx</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// returns number of rows in result-set</comment>
<function><type><name>uint64_t</name></type> <name>ResultSet_RowCount</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>  <comment type="line">// resultset to inquery</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>DataBlock_ItemCount</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// add a new row to resultset</comment>
<function><type><name>int</name></type> <name>ResultSet_AddRecord</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,  <comment type="line">// resultset to extend</comment>
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>         <comment type="line">// record containing projected data</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>r</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// copy projected values from record to resultset</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>cell</name> <init>= <expr><call><name>DataBlock_AllocateItem</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name>cell</name> <operator>=</operator> <call><name>Record_Get</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIValue_Persist</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>cells_allocation</name></name> <operator>|=</operator> <call><name>SI_ALLOCATION</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// remove entry from record in a second pass</comment>
	<comment type="line">// this will ensure duplicated projections are not removed</comment>
	<comment type="line">// too early, consider: MATCH (a) RETURN max(a.val), max(a.val)</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Record_Remove</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>RESULTSET_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// update resultset index creation statistics</comment>
<function><type><name>void</name></type> <name>ResultSet_IndexCreated</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,  <comment type="line">// resultset to update</comment>
	<parameter><decl><type><name>int</name></type> <name>status_code</name></decl></parameter>  <comment type="line">// index creation status code</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>index_creation</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>status_code</name> <operator>==</operator> <name>INDEX_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>indices_created</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// update resultset index deleted statistics</comment>
<function><type><name>void</name></type> <name>ResultSet_IndexDeleted</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,  <comment type="line">// resultset to update</comment>
	<parameter><decl><type><name>int</name></type> <name>status_code</name></decl></parameter>  <comment type="line">// index deletion status code</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>index_deletion</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>status_code</name> <operator>==</operator> <name>INDEX_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>indices_deleted</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// update resultset cache execution statistics</comment>
<function><type><name>void</name></type> <name>ResultSet_CachedExecution</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>  <comment type="line">// resultset to update</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>set</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>cached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// flush resultset to network</comment>
<function><type><name>void</name></type> <name>ResultSet_Reply</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>  <comment type="line">// resultset to reply with</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint64_t</name></type> <name>row_count</name> <init>= <expr><call><name>ResultSet_RowCount</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// check to see if we've encountered a run-time error</comment>
	<comment type="line">// if so, emit it as the only response</comment>
	<if_stmt><if>if<condition>(<expr><call><name>ErrorCtx_EncounteredError</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ErrorCtx_EmitException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// set up the results array and emit the header if the query requires one</comment>
	<expr_stmt><expr><call><name>_ResultSet_ReplyWithPreamble</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// emit resultset</comment>
	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RedisModule_ReplyWithArray</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>row_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name><name>row</name><index>[<expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>cells</name> <init>= <expr><call><name>DataBlock_ItemCount</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// for each row</comment>
		<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cells</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr></incr>)</control> <block>{<block_content>
			<comment type="line">// for each column</comment>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>DataBlock_GetItem</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name><name>set</name><operator>-&gt;</operator><name>formatter</name><operator>-&gt;</operator><name>EmitRow</name></name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>gc</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>set</name><operator>-&gt;</operator><name>column_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ResultSetStat_emit</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// response with statistics</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ResultSet_Clear</name><parameter_list>(<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>set</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResultSetStat_Clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// free resultset</comment>
<function><type><name>void</name></type> <name>ResultSet_Free</name>
<parameter_list>(
	<parameter><decl><type><name>ResultSet</name> <modifier>*</modifier></type><name>set</name></decl></parameter>  <comment type="line">// resultset to free</comment>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>set</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>columns</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>columns_record_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// free resultset cells</comment>
	<comment type="line">// NOTE: for large result-set containing only NONE heap allocated values</comment>
	<comment type="line">// the following is a bit of a waste as there's no real memory to free</comment>
	<comment type="line">// at the moment we can't tell rather or not</comment>
	<comment type="line">// calling SIValue_Free is required</comment>
	<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name></expr>)</condition> <block>{<block_content>
		<comment type="line">// free individual cells if resultset encountered a heap allocated value</comment>
		<if_stmt><if>if<condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>cells_allocation</name></name> <operator>&amp;</operator> <name>M_SELF</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><call><name>DataBlock_ItemCount</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>DataBlock_GetItem</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>DataBlock_Free</name><argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
