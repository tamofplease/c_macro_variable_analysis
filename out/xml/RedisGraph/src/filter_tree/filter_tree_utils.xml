<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/filter_tree/filter_tree_utils.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_tree_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>isInFilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_EXP</name> <operator>&amp;&amp;</operator>
			<name><name>filter</name><operator>-&gt;</operator><name>exp</name><operator>.</operator><name>exp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AR_EXP_OP</name> <operator>&amp;&amp;</operator>
			<call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>AR_EXP_GetFuncName</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>exp</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"in"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// extracts both origin and radius from a distance filter</comment>
<comment type="line">// distance(n.location, origin) &lt; radius</comment>
<function><type><name>bool</name></type> <name>extractOriginAndRadius</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>origin</name></decl></parameter>,
		<parameter><decl><type><name>SIValue</name> <modifier>*</modifier></type><name>radius</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>point</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// distance (n.location, origin) &lt; radius</comment>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>t</name></name> <operator>!=</operator> <name>FT_N_PRED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>p</name>             <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type>     <name>d</name>              <init>=  <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>      <comment type="line">// radius</comment>
	<decl_stmt><decl><type><name>AR_ExpNode</name>  <modifier>*</modifier></type><name>lhs</name>           <init>=  <expr><name><name>filter</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>lhs</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name>  <modifier>*</modifier></type><name>rhs</name>           <init>=  <expr><name><name>filter</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name>  <modifier>*</modifier></type><name>radius_exp</name>    <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AR_ExpNode</name>  <modifier>*</modifier></type><name>distance_exp</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// find distance expression</comment>
	<if_stmt><if>if<condition>(<expr><call><name>AR_EXP_IsOperation</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	   <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>AR_EXP_GetFuncName</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"distance"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>radius_exp</name> <operator>=</operator> <name>rhs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>distance_exp</name> <operator>=</operator> <name>lhs</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// could not find 'distance' function call</comment>
	<if_stmt><if>if<condition>(<expr><name>distance_exp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// make sure radius is constant</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>scalar</name> <init>= <expr><call><name>AR_EXP_ReduceToScalar</name><argument_list>(<argument><expr><name>radius_exp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>scalar</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>SI_NUMERIC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// find origin</comment>
	<comment type="line">// distance expression should have 2 arguments</comment>
	<expr_stmt><expr><name>lhs</name> <operator>=</operator> <name><name>distance_exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rhs</name> <operator>=</operator> <name><name>distance_exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SIValue</name></type>  <name>l</name>         <init>=  <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type>  <name>r</name>         <init>=  <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>     <name>res</name>       <init>=  <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>     <name>l_scalar</name>  <init>=  <expr><call><name>AR_EXP_ReduceToScalar</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>     <name>r_scalar</name>  <init>=  <expr><call><name>AR_EXP_ReduceToScalar</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>l_scalar</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>r_scalar</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AR_EXP_IsAttribute</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>point</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>point</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>origin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>origin</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>radius</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>radius</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name>l_scalar</name> <operator>&amp;&amp;</operator> <name>r_scalar</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AR_EXP_IsAttribute</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>point</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>point</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>origin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>origin</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>radius</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>radius</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>l_scalar</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>r_scalar</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SIValue_Free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return true if filter performs distance filtering</comment>
<comment type="line">// distance(n.location, point({lat:1.1, lon:2.2})) &lt; 40</comment>
<function><type><name>bool</name></type> <name>isDistanceFilter</name><parameter_list>(<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>extractOriginAndRadius</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_PRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>AST_Operator</name></type> <name>op</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// make sure filter structure is: distance(point, origin) &lt;= radius</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>OP_LT</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>OP_LE</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

</unit>
