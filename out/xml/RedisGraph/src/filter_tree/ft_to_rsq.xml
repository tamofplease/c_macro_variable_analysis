<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/filter_tree/ft_to_rsq.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ft_to_rsq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_tree_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/range/string_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/range/numeric_range.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// forward declarations</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// returns true if 'tree' been converted into an index query, false otherwise</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>_FilterTreeToQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>RSQNode</name><modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,       <comment type="line">// array of query nodes to populate</comment>
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <comment type="line">// filter to convert into an index query</comment>
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>         <comment type="line">// queried index</comment>
)</parameter_list>;</function_decl>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// To RediSearch query node</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// create a RediSearch query node out of a numeric range object</comment>
<function><type><specifier>static</specifier> <name>RSQNode</name> <modifier>*</modifier></type><name>_NumericRangeToQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,              <comment type="line">// queried index</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,         <comment type="line">// queried field</comment>
	<parameter><decl><type><specifier>const</specifier> <name>NumericRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>  <comment type="line">// range to query</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>==</operator> <name>INFINITY</name><operator>)</operator></expr> ?</condition><then> <expr><name>RSRANGE_INF</name></expr> </then><else>: <expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>min</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <operator>-</operator><name>INFINITY</name><operator>)</operator></expr> ?</condition><then> <expr><name>RSRANGE_NEG_INF</name></expr> </then><else>: <expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>RediSearch_CreateNumericNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>include_max</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// create a RediSearch query node out of a string range object</comment>
<function><type><specifier>static</specifier> <name>RSQNode</name> <modifier>*</modifier></type><name>_StringRangeToQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,             <comment type="line">// queried index</comment>
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,        <comment type="line">// queried field</comment>
	<parameter><decl><type><specifier>const</specifier> <name>StringRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>  <comment type="line">// range to query</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>RediSearch_CreateTagNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>max</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>min</name> <init>= <expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>max</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>min</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// exact match</comment>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>RediSearch_CreateTagTokenNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// range search</comment>
		<expr_stmt><expr><name>max</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>max</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>RSLECRANGE_INF</name></expr>     </then><else>: <expr><name>max</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>min</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>RSLEXRANGE_NEG_INF</name></expr> </then><else>: <expr><name>min</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>RediSearch_CreateTagLexRangeNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>,
				<argument><expr><name><name>range</name><operator>-&gt;</operator><name>include_min</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>include_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>RediSearch_QueryNodeAddChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// creates a RediSearch distance query from given filter</comment>
<function><type><specifier>static</specifier> <name>RSQNode</name> <modifier>*</modifier></type><name>_FilterTreeToDistanceQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,  <comment type="line">// filter to convert</comment>
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>            <comment type="line">// queried index</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>field</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>         <comment type="line">// field being filtered</comment>
	<decl_stmt><decl><type><name>SIValue</name></type>  <name>origin</name>  <init>=  <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// center of circle</comment>
	<decl_stmt><decl><type><name>SIValue</name></type>  <name>radius</name>  <init>=  <expr><call><name>SI_NullVal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// circle radius</comment>

	<expr_stmt><expr><call><name>extractOriginAndRadius</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>origin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>radius</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>RediSearch_CreateGeoNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><call><name>Point_lat</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><call><name>Point_lon</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RS_GEO_DISTANCE_M</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// creates a RediSearch query node out of given IN filter</comment>
<function><type><specifier>static</specifier> <name>RSQNode</name> <modifier>*</modifier></type><name>_FilterTreeToInQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,  <comment type="line">// filter to convert</comment>
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>            <comment type="line">// queried index</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>    <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>isInFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// n.v IN [1,2,3]</comment>
	<comment type="line">// a single union node should hold a number of token/numeric nodes</comment>
	<comment type="line">// one for each element in the array.</comment>

	<comment type="line">// extract both field name and list from expression</comment>
	<decl_stmt><decl><type><name>AR_ExpNode</name> <modifier>*</modifier></type><name>inOp</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>exp</name><operator>.</operator><name>exp</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>attribute</name> <init>= <expr><call><name>AR_EXP_IsAttribute</name><argument_list>(<argument><expr><name><name>inOp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attribute</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SIValue</name></type> <name>list</name> <init>= <expr><name><name>inOp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>operand</name><operator>.</operator><name>constant</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>list_len</name> <init>= <expr><call><name>SIArray_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>list_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// Special case: "WHERE a.v in []"</comment>
		<return>return <expr><call><name>RediSearch_CreateEmptyNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>U</name> <init>= <expr><call><name>RediSearch_CreateUnionNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>list_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><call><name>SIArray_Get</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>T_STRING</name></expr>:</case>
			<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>RediSearch_CreateTagNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateTokenNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RediSearch_QueryNodeAddChild</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DOUBLE</name></expr>:</case>
		<case>case <expr><name>T_INT64</name></expr>:</case>
		<case>case <expr><name>T_BOOL</name></expr>:</case>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateNumericNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"unexpected conditional operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>RediSearch_QueryNodeAddChild</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>U</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// reduce filter into a range object</comment>
<comment type="line">// return true if filter was reduce, false otherwise</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_predicateTreeToRange</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,  <comment type="line">// filter to convert</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>string_ranges</name></decl></parameter>,         <comment type="line">// string ranges</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>numeric_ranges</name></decl></parameter>         <comment type="line">// numerical ranges</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tree</name>           <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>string_ranges</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numeric_ranges</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// handel filters of form: 'n.v op constant'</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// TODO: we might not need this check</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>AR_EXP_IsAttribute</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>lhs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>AR_EXP_ContainsVariadic</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>c</name> <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type>  <name>t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// make sure constant is an indexable type</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>SI_INDEXABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type>           <name>op</name>        <init>=  <expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringRange</name>   <modifier>*</modifier></type><name>sr</name>       <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NumericRange</name>  <modifier>*</modifier></type><name>nr</name>       <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>          <name>prop_len</name>  <init>=  <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get or create range object for alias.prop</comment>
	<comment type="line">// constant is either numeric or boolean</comment>
	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>&amp;</operator> <name>SI_NUMERIC</name> <operator>||</operator> <name>t</name> <operator>==</operator> <name>T_BOOL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// TODO: remove when RediSearch INT64 indexing bug fixed</comment>
		<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>T_INT64</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>.</operator><name>longval</name></name> <operator>&amp;</operator> <literal type="number">0x7FF0000000000000</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>numeric_ranges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>prop</name></expr></argument>, <argument><expr><name>prop_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// create if doesn't exists</comment>
		<if_stmt><if>if<condition>(<expr><name>nr</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>NumericRange_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>numeric_ranges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>prop</name></expr></argument>, <argument><expr><name>prop_len</name></expr></argument>,
					<argument><expr><name>nr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>NumericRange_TightenRange</name><argument_list>(<argument><expr><name>nr</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sr</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>string_ranges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>prop</name></expr></argument>, <argument><expr><name>prop_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// create if doesn't exists</comment>
		<if_stmt><if>if<condition>(<expr><name>sr</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sr</name> <operator>=</operator> <call><name>StringRange_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxTryInsert</name><argument_list>(<argument><expr><name>string_ranges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>prop</name></expr></argument>, <argument><expr><name>prop_len</name></expr></argument>, <argument><expr><name>sr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>StringRange_TightenRange</name><argument_list>(<argument><expr><name>sr</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// connect all RediSearch query nodes</comment>
<function><type><specifier>static</specifier> <name>RSQNode</name> <modifier>*</modifier></type><name>_concat_query_nodes</name>
<parameter_list>(
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,     <comment type="line">// queried index</comment>
	<parameter><decl><type><name>RSQNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name></decl></parameter>,  <comment type="line">// query nodes to concat</comment>
	<parameter><decl><type><name>uint</name></type> <name>count</name></decl></parameter>        <comment type="line">// number of nodes</comment>
)</parameter_list> <block>{<block_content>
	<comment type="line">// no nodes, can not utilize the index</comment>
	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// just a single filter</comment>
	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// multiple filters, combine using AND</comment>
	<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>RediSearch_CreateIntersectNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>qnode</name> <init>= <expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RediSearch_QueryNodeAddChild</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>qnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// compose index query from ranges</comment>
<function><type><specifier>static</specifier> <name>RSQNode</name> <modifier>*</modifier></type><name>_ranges_to_query_nodes</name>
<parameter_list>(
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,        <comment type="line">// index to query</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>string_ranges</name></decl></parameter>,  <comment type="line">// string ranges</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>numeric_ranges</name></decl></parameter>  <comment type="line">// numerical ranges</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>string_ranges</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numeric_ranges</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// build RediSearch query tree</comment>
	<comment type="line">// convert each range object to RediSearch query node</comment>
	<decl_stmt><decl><type><name>raxIterator</name></type> <name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>  <comment type="line">// false if there's a range conflict</comment>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// validate ranges</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	
	<comment type="line">// validate string ranges</comment>
	<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>string_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* make sure each property is bound to either numeric or string type
		 * but not to both, e.g. a.v = 1 AND a.v = 'a'
		 * in which case use an empty RSQueryNode. */</comment>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>it</name><operator>.</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>raxFind</name><argument_list>(<argument><expr><name>numeric_ranges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>field</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>it</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>StringRange</name> <modifier>*</modifier></type><name>sr</name> <init>= <expr><operator>(</operator><name>StringRange</name> <operator>*</operator><operator>)</operator> <name><name>it</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>StringRange_IsValid</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if<condition>(<expr><name>valid</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>RediSearch_CreateEmptyNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// validate numeric ranges</comment>
	<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>numeric_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>NumericRange</name> <modifier>*</modifier></type><name>nr</name> <init>= <expr><operator>(</operator><name>NumericRange</name> <operator>*</operator><operator>)</operator> <name><name>it</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NumericRange_IsValid</name><argument_list>(<argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>valid</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>RediSearch_CreateEmptyNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// construct index range queries</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// detemine number of ranges</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>query_field_name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>range_count</name> <init>= <expr><call><name>raxSize</name><argument_list>(<argument><expr><name>numeric_ranges</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name>string_ranges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name><name>rsqnodes</name><index>[<expr><name>range_count</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>it</name><operator>.</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>key_len</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>query_field_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>NumericRange</name> <modifier>*</modifier></type><name>nr</name> <init>= <expr><operator>(</operator><name>NumericRange</name> <operator>*</operator><operator>)</operator> <name><name>it</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>query_field_name</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>it</name><operator>.</operator><name>key_len</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>rsqn</name> <init>= <expr><call><name>_NumericRangeToQueryNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>query_field_name</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>rsqnodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rsqn</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>raxStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>string_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxSeek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>raxNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>it</name><operator>.</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>key_len</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>query_field_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>StringRange</name> <modifier>*</modifier></type><name>sr</name> <init>= <expr><operator>(</operator><name>StringRange</name> <operator>*</operator><operator>)</operator> <name><name>it</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>query_field_name</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>it</name><operator>.</operator><name>key_len</name></name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>rsqn</name> <init>= <expr><call><name>_StringRangeToQueryNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>query_field_name</name></expr></argument>, <argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>rsqnodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rsqn</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>raxStop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>_concat_query_nodes</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>rsqnodes</name></expr></argument>, <argument><expr><name>range_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// reduce filters into ranges</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_compose_ranges</name>
<parameter_list>(
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>trees</name></decl></parameter>,  <comment type="line">// filters to convert into ranges</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>string_ranges</name></decl></parameter>,     <comment type="line">// string ranges</comment>
	<parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>numeric_ranges</name></decl></parameter>     <comment type="line">// numerical reages</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>trees</name>          <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>string_ranges</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numeric_ranges</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>trees</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name><name>trees</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_PRED</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>_predicateTreeToRange</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>string_ranges</name></expr></argument>, <argument><expr><name>numeric_ranges</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// managed to convert tree into range</comment>
				<comment type="line">// discard tree and update loop index</comment>
				<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>array_del_fast</name><argument_list>(<argument><expr><name>trees</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// tries to convert filter tree to a RediSearch query</comment>
<comment type="line">// return true if tree was converted, false otherwise</comment>
<comment type="line">// a conversion might fail if tree contains a none indexable type e.g. array</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_FilterTreeConditionToQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>RSQNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,      <comment type="line">// [output] query node</comment>
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <comment type="line">// filter to convert</comment>
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>         <comment type="line">// queried index</comment>
)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tree</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_COND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <comment type="line">// initialize output to NULL</comment>

	<comment type="line">// validate operator</comment>
	<decl_stmt><decl><type><name>AST_Operator</name></type> <name>op</name> <init>= <expr><name><name>tree</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <name>OP_OR</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>OP_AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>RSQNode</name>  <modifier>*</modifier></type><name>node</name>   <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSQNode</name>  <modifier>*</modifier></type><name>left</name>   <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSQNode</name>  <modifier>*</modifier></type><name>right</name>  <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// create root node</comment>
	<if_stmt><if>if<condition>(<expr><name>op</name> <operator>==</operator> <name>OP_OR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateUnionNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateIntersectNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// convert left and right hand sides</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// process left branch</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>_FilterTreeToQueryNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// process right branch</comment>
	<expr_stmt><expr><name>res</name> <operator>&amp;=</operator> <call><name>_FilterTreeToQueryNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>right</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>cond</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RediSearch_QueryNodeAddChild</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RediSearch_QueryNodeAddChild</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns true if predicate filter been converted to an index query</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_FilterTreePredicateToQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>RSQNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,      <comment type="line">// [output] query node</comment>
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <comment type="line">// filter to convert</comment>
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>         <comment type="line">// queried index</comment>
)</parameter_list> <block>{<block_content>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tree</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>t</name></name> <operator>==</operator> <name>FT_N_PRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// initialize root to NULL</comment>
	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="line">// expecting left hand side to be an attribute access</comment>
	<decl_stmt><decl><type><name>bool</name></type>     <name>res</name>        <init>=  <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSQNode</name>  <modifier>*</modifier></type><name>node</name>      <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>field</name>     <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>     <name>attribute</name>  <init>=  <expr><call><name>AR_EXP_IsAttribute</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>lhs</name></name></expr></argument>,  <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attribute</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// validate const type</comment>
	<decl_stmt><decl><type><name>SIValue</name></type> <name>v</name> <init>= <expr><call><name>AR_EXP_Evaluate</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>rhs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>&amp;</operator> <name>SI_INDEXABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="line">// none indexable type, consult with the none indexed field</comment>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateTagNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>INDEX_FIELD_NONE_INDEXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>RediSearch_CreateTokenNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>,
				<argument><expr><name>INDEX_FIELD_NONE_INDEXED</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>RediSearch_QueryNodeAddChild</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// validate operation, we can handle &lt;, &lt;=, =, &gt;, &gt;=</comment>
	<decl_stmt><decl><type><name>AST_Operator</name></type> <name>op</name> <init>= <expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <name>OP_LT</name> <operator>||</operator>
		   <name>op</name> <operator>==</operator> <name>OP_LE</name> <operator>||</operator>
		   <name>op</name> <operator>==</operator> <name>OP_GT</name> <operator>||</operator>
		   <name>op</name> <operator>==</operator> <name>OP_GE</name> <operator>||</operator>
		   <name>op</name> <operator>==</operator> <name>OP_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
		<switch>switch<condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>OP_LT</name></expr>:</case>    <comment type="line">// &lt;</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateLexRangeNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>RSLEXRANGE_NEG_INF</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OP_LE</name></expr>:</case>    <comment type="line">// &lt;=</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateLexRangeNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>RSLEXRANGE_NEG_INF</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OP_GT</name></expr>:</case>    <comment type="line">// &gt;</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateLexRangeNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><name>RSLECRANGE_INF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OP_GE</name></expr>:</case>    <comment type="line">// &gt;=</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateLexRangeNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>, <argument><expr><name>RSLECRANGE_INF</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OP_EQUAL</name></expr>:</case>  <comment type="line">// ==</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateTokenNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"unexpected operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>RediSearch_CreateTagNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RediSearch_QueryNodeAddChild</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>t</name> <operator>&amp;</operator> <name>SI_NUMERIC</name> <operator>||</operator> <name>t</name> <operator>==</operator> <name>T_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>pred</name><operator>.</operator><name>op</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>OP_LT</name></expr>:</case>    <comment type="line">// &lt;</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateNumericNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>RSRANGE_NEG_INF</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OP_LE</name></expr>:</case>    <comment type="line">// &lt;=</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateNumericNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>RSRANGE_NEG_INF</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OP_GT</name></expr>:</case>    <comment type="line">// &gt;</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateNumericNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>RSRANGE_INF</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OP_GE</name></expr>:</case>    <comment type="line">// &gt;=</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateNumericNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>RSRANGE_INF</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OP_EQUAL</name></expr>:</case>  <comment type="line">// ==</comment>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RediSearch_CreateNumericNode</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// TODO: remove when RediSearch INT64 indexing bug fixed</comment>
				<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>T_INT64</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>.</operator><name>longval</name></name> <operator>&amp;</operator> <literal type="number">0x7FF0000000000000</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"unexpected operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns true if 'tree' been converted into an index query, false otherwise</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_FilterTreeToQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>RSQNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>,      <comment type="line">// [output] query node</comment>
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <comment type="line">// filter to convert into an index query</comment>
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>         <comment type="line">// queried index</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tree</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// initialize 'root' to NULL</comment>
	<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>isInFilter</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>attribute</name> <init>= <expr><call><name>AR_EXP_IsAttribute</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>exp</name><operator>.</operator><name>exp</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>attribute</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <call><name>_FilterTreeToInQueryNode</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>isDistanceFilter</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <call><name>_FilterTreeToDistanceQueryNode</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>FT_FilterNodeType</name></type> <name>t</name> <init>= <expr><name><name>tree</name><operator>-&gt;</operator><name>t</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>FT_N_COND</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_FilterTreeConditionToQueryNode</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>FT_N_PRED</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>_FilterTreePredicateToQueryNode</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="string">"unknown filter tree node type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// creates a RediSearch query node out of given filter tree</comment>
<function><type><name>RSQNode</name> <modifier>*</modifier></type><name>FilterTreeToQueryNode</name>
<parameter_list>(
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>none_converted_filters</name></decl></parameter>, <comment type="line">// [output] none convertable filters</comment>
	<parameter><decl><type><specifier>const</specifier> <name>FT_FilterNode</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,              <comment type="line">// filter tree to convert</comment>
	<parameter><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>                            <comment type="line">// index to query</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tree</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>none_converted_filters</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// clone filter tree, as it is about to be modified</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name>  <modifier>*</modifier></type><name>t</name>       <init>=  <expr><call><name>FilterTree_Clone</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSQNode</name>        <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name>  <init>=  <expr><call><name>array_new</name><argument_list>(<argument><expr><name>RSQNode</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// intermidate nodes</comment>
	<decl_stmt><decl><type><name>FT_FilterNode</name>  <modifier>*</modifier><modifier>*</modifier></type><name>trees</name>  <init>=  <expr><call><name>FilterTree_SubTrees</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// individual subtrees</comment>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// convert filters to numeric and string ranges</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>string_ranges</name>  <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>numeric_ranges</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>_compose_ranges</name><argument_list>(<argument><expr><name>trees</name></expr></argument>, <argument><expr><name>string_ranges</name></expr></argument>, <argument><expr><name>numeric_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>raxSize</name><argument_list>(<argument><expr><name>string_ranges</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>raxSize</name><argument_list>(<argument><expr><name>numeric_ranges</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>ranges</name> <init>= <expr><call><name>_ranges_to_query_nodes</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>string_ranges</name></expr></argument>, <argument><expr><name>numeric_ranges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// TODO: check for empty node RediSearch_CreateEmptyNode</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// convert remaining filters into RediSearch query nodes</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>uint</name></type> <name>tree_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>trees</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tree_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>RSQNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>resolved_filter</name> <init>= <expr><call><name>_FilterTreeToQueryNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name><name>trees</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>resolved_filter</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FilterTree_Free</name><argument_list>(<argument><expr><name><name>trees</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// remove converted filter from filters array</comment>
			<expr_stmt><expr><call><name>array_del_fast</name><argument_list>(<argument><expr><name>trees</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>tree_count</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// combine remaining filters</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// filters that can not be converted into an index query will be returned</comment>
	<comment type="line">// to caller as a single filter tree</comment>
	<comment type="line">// this might happen when the value compared against is a runtime value of</comment>
	<comment type="line">// none indexable type e.g. array</comment>
	<expr_stmt><expr><operator>*</operator><name>none_converted_filters</name> <operator>=</operator> <call><name>FilterTree_Combine</name><argument_list>(<argument><expr><name>trees</name></expr></argument>, <argument><expr><name>tree_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>RSQNode</name>  <modifier>*</modifier></type><name>root</name>       <init>=  <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>     <name>node_count</name>  <init>=  <expr><call><name>array_len</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// compose root query node by intersecting individual query nodes</comment>
	<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>_concat_query_nodes</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// clean up</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>trees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>string_ranges</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>StringRange_Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFreeWithCallback</name><argument_list>(<argument><expr><name>numeric_ranges</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>NumericRange_Free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

</unit>
