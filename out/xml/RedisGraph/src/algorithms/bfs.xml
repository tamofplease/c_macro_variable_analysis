<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/bfs.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./bfs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/entities/qg_edge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rax.h"</cpp:file></cpp:include>

<comment type="line">// Returns a set of nodes reached at given level from S.</comment>
<function><type><name>QGNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>BFS</name><parameter_list>(<parameter><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>seen</name></decl>;</decl_stmt>                             <comment type="line">// Has node been visited?</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>current_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="line">// Tracks BFS level.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>visited</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>                <comment type="line">// Dictionary of visited nodes.</comment>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>QGNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>     <comment type="line">// Nodes to explore next.</comment>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>current</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>QGNode</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// Nodes currently explored.</comment>

	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// As long as we've yet to reach required level and there are nodes to process.</comment>
	<while>while<condition>(<expr><name>current_level</name> <operator>&lt;</operator> <operator>*</operator><name>level</name> <operator>&amp;&amp;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// As long as there are nodes in the frontier.</comment>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>current</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// Have we already processed n?</comment>
			<expr_stmt><expr><name>seen</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>seen</name> <operator>!=</operator> <name>raxNotFound</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// Expand node N by visiting all of its neighbors</comment>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>outgoing_edges</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>outgoing_edges</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>seen</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>seen</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>incoming_edges</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>incoming_edges</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>seen</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if<condition>(<expr><name>seen</name> <operator>==</operator> <name>raxNotFound</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<comment type="line">// Mark n as visited.</comment>
			<expr_stmt><expr><call><name>raxInsert</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* No way to progress and we're interested in the lowest level leafs
		 * do not clear current queue. */</comment>
		<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>level</name> <operator>==</operator> <name>BFS_LOWEST_LEVEL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <name>current_level</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Queue consumed, swap queues.</comment>
		<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>current</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>current</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>current_level</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>visited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>current</name></expr>;</return>
</block_content>}</block></function>

</unit>
