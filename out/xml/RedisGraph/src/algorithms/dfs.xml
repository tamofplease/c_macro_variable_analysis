<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/dfs.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./bfs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/entities/qg_edge.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>_DFS</name><parameter_list>(<parameter><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>close_cycle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_level</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>visited</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>used_edges</name></decl></parameter>,
		  <parameter><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// As long as we've yet to reach required level and there are nodes to process.</comment>
	<if_stmt><if>if<condition>(<expr><name>current_level</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Mark n as visited, return if node already marked.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>raxInsert</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// We've already processed n.</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Expand node N by visiting all of its neighbors</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>not_seen</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>outgoing_edges</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>outgoing_edges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>not_seen</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>raxNotFound</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>not_seen</name> <operator>||</operator> <name>close_cycle</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>raxInsert</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>_DFS</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>close_cycle</name></expr></argument>, <argument><expr><name>current_level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>used_edges</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>incoming_edges</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>incoming_edges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>not_seen</name> <operator>=</operator> <call><name>raxFind</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>raxNotFound</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>not_seen</name> <operator>||</operator> <name>close_cycle</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>raxInsert</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>_DFS</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>close_cycle</name></expr></argument>, <argument><expr><name>current_level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>used_edges</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>array_pop</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns a single path from S to a reachable node at distance level.</comment>
<function><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>DFS</name><parameter_list>(<parameter><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>close_cycle</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>current_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="line">// Tracks BFS level.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>visited</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>                <comment type="line">// Dictionary of visited nodes.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>used_edges</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>             <comment type="line">// Dictionary of used edges.</comment>
	<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>array_new</name><argument_list>(<argument><expr><name>QGEdge</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Path found.</comment>

	<expr_stmt><expr><call><name>_DFS</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>close_cycle</name></expr></argument>, <argument><expr><name>current_level</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>visited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>
</unit>
