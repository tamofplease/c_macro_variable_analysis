<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/all_paths.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"all_paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"all_shortest_paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">// Make sure context level array have 'cap' available entries.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AllPathsCtx_EnsureLevelArrayCap</name><parameter_list>(<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>cap</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>len</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>level</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>LevelConnection</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <call><name>array_ensure_cap</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>level</name> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><call><name>array_new</name><argument_list>(<argument><expr><name>LevelConnection</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Append given 'node' to given 'level' array.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_AllPathsCtx_AddConnectionToLevel</name><parameter_list>(<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
											  <parameter><decl><type><name>Edge</name> <modifier>*</modifier></type><name>edge</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>level</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LevelConnection</name></type> <name>connection</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>connection</name><operator>.</operator><name>node</name></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>edge</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>connection</name><operator>.</operator><name>edge</name></name> <operator>=</operator> <operator>*</operator><name>edge</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Check to see if context levels array has entries at position 'level'.</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>_AllPathsCtx_LevelNotEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><name>array_len</name><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>array_len</name><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addOutgoingNeighbors</name>
<parameter_list>(
	<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>LevelConnection</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>,
	<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>frontierId</name> <init>= <expr><name>INVALID_ENTITY_ID</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>frontierId</name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frontier</name><operator>-&gt;</operator><name>edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Get frontier neighbors.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>relationCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>Graph_GetNodeEdges</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frontier</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>GRAPH_EDGE_DIR_OUTGOING</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Add unvisited neighbors to next level.</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>neighborsCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// apply filter to edge</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neighborsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Edge</name></type> <name>e</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// update the record with the current edge</comment>
			<expr_stmt><expr><call><name>Record_AddEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>edge_idx</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// drop edge if it doesn't passes filter</comment>
			<if_stmt><if>if<condition>(<expr><call><name>FilterTree_applyFilters</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FILTER_PASS</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>array_del_fast</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>neighborsCount</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>_AllPathsCtx_EnsureLevelArrayCap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>neighborsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neighborsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Don't follow the frontier edge again.</comment>
		<if_stmt><if>if<condition>(<expr><name>frontierId</name> <operator>==</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="line">// Set the neighbor by following the edge in the correct directoin.</comment>
		<decl_stmt><decl><type><name>Node</name></type> <name>neighbor</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><call><name>Edge_GetDestNodeID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Add the node and edge to the frontier.</comment>
		<expr_stmt><expr><call><name>_AllPathsCtx_AddConnectionToLevel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbor</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addIncomingNeighbors</name>
<parameter_list>(
	<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>LevelConnection</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>,
	<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>EntityID</name></type> <name>frontierId</name> <init>= <expr><name>INVALID_ENTITY_ID</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>frontierId</name> <operator>=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frontier</name><operator>-&gt;</operator><name>edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Get frontier neighbors.</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>relationCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>Graph_GetNodeEdges</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frontier</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>GRAPH_EDGE_DIR_INCOMING</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationIDs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Add unvisited neighbors to next level.</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>neighborsCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// apply filter to edge</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neighborsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>Edge</name></type> <name>e</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="line">// update the record with the current edge</comment>
			<expr_stmt><expr><call><name>Record_AddEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>edge_idx</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// drop edge if it doesn't passes filter</comment>
			<if_stmt><if>if<condition>(<expr><call><name>FilterTree_applyFilters</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FILTER_PASS</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>array_del_fast</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>neighborsCount</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>_AllPathsCtx_EnsureLevelArrayCap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>neighborsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neighborsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// Don't follow the frontier edge again.</comment>
		<if_stmt><if>if<condition>(<expr><name>frontierId</name> <operator>==</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="line">// Set the neighbor by following the edge in the correct directoin.</comment>
		<decl_stmt><decl><type><name>Node</name></type> <name>neighbor</name> <init>= <expr><call><name>GE_NEW_NODE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Graph_GetNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><call><name>Edge_GetSrcNodeID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Add the node and edge to the frontier.</comment>
		<expr_stmt><expr><call><name>_AllPathsCtx_AddConnectionToLevel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighbor</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Traverse from the frontier node in the specified direction and add all encountered nodes and edges.</comment>
<function><type><name>void</name></type> <name>addNeighbors</name>
<parameter_list>(
	<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>LevelConnection</name> <modifier>*</modifier></type><name>frontier</name></decl></parameter>,
	<parameter><decl><type><name>uint32_t</name></type> <name>depth</name></decl></parameter>,
	<parameter><decl><type><name>GRAPH_EDGE_DIR</name></type> <name>dir</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<switch>switch<condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>GRAPH_EDGE_DIR_OUTGOING</name></expr>:</case>
			<expr_stmt><expr><call><name>addOutgoingNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frontier</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>GRAPH_EDGE_DIR_INCOMING</name></expr>:</case>
			<expr_stmt><expr><call><name>addIncomingNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frontier</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>GRAPH_EDGE_DIR_BOTH</name></expr>:</case>
			<expr_stmt><expr><call><name>addIncomingNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frontier</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addOutgoingNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frontier</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"encountered unexpected traversal direction in AllPaths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>AllPathsCtx_New</name>
<parameter_list>(
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>relationIDs</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>relationCount</name></decl></parameter>,
	<parameter><decl><type><name>GRAPH_EDGE_DIR</name></type> <name>dir</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>minLen</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>maxLen</name></decl></parameter>,
	<parameter><decl><type><name>Record</name></type> <name>r</name></decl></parameter>,
	<parameter><decl><type><name>FT_FilterNode</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>,
	<parameter><decl><type><name>uint</name></type> <name>edge_idx</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>shortest_paths</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AllPathsCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name>         <operator>=</operator>  <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name>         <operator>=</operator>  <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name>        <operator>=</operator>  <name>ft</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name>       <operator>=</operator>  <name>dir</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>edge_idx</name></name>  <operator>=</operator>  <name>edge_idx</name></expr>;</expr_stmt>

	<comment type="line">// Cypher variable path "[:*min..max]"" specifies edge count</comment>
	<comment type="line">// While the path constructed here contains only nodes.</comment>
	<comment type="line">// As such a path which require min..max edges</comment>
	<comment type="line">// should contain min+1..max+1 nodes.</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name>         <operator>=</operator>  <name>minLen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name>         <operator>=</operator>  <name>maxLen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationIDs</name></name>    <operator>=</operator>  <name>relationIDs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>relationCount</name></name>  <operator>=</operator>  <name>relationCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name>         <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>LevelConnection</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name>           <operator>=</operator>  <call><name>Path_New</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name>      <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>Edge</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst</name></name>            <operator>=</operator>  <name>dst</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>shortest_paths</name></name> <operator>=</operator>  <name>shortest_paths</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name>        <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_AllPathsCtx_EnsureLevelArrayCap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_AllPathsCtx_AddConnectionToLevel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>shortest_paths</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// If the destination is NULL due to a scenario like a</comment>
			<comment type="line">// failed optional match, no results will be produced</comment>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>ctx</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// get the the minimum length between src and dst</comment>
		<comment type="line">// then start the traversal from dst to src</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>min_path_len</name> <init>= <expr><call><name>AllShortestPaths_FindMinimumLength</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name> <operator>=</operator> <name>min_path_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>=</operator> <name>min_path_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst</name></name>    <operator>=</operator> <name>src</name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>dir</name> <operator>==</operator> <name>GRAPH_EDGE_DIR_INCOMING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>GRAPH_EDGE_DIR_OUTGOING</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>dir</name> <operator>==</operator> <name>GRAPH_EDGE_DIR_OUTGOING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>GRAPH_EDGE_DIR_INCOMING</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>_AllPathsCtx_AddConnectionToLevel</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// in case we have filter tree validate that we can access the filtered edge</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>ft</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>edge_idx</name></name> <operator>&lt;</operator> <call><name>Record_length</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Path</name> <modifier>*</modifier></type><name>_AllPathsCtx_NextPath</name><parameter_list>(<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// As long as path is not empty OR there are neighbors to traverse.</comment>
	<while>while<condition>(<expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_AllPathsCtx_LevelNotEmpty</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name> <init>= <expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Can we advance?</comment>
		<if_stmt><if>if<condition>(<expr><call><name>_AllPathsCtx_LevelNotEmpty</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// Get a new frontier.</comment>
			<decl_stmt><decl><type><name>LevelConnection</name></type> <name>frontierConnection</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Node</name></type> <name>frontierNode</name> <init>= <expr><name><name>frontierConnection</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* See if frontier is already on path,
			 * it is OK for a path to contain an entity twice,
			 * such as in the case of a cycle, but in such case we
			 * won't expand frontier.
			 * i.e. closing a cycle and continuing traversal. */</comment>
			<decl_stmt><decl><type><name>bool</name></type> <name>frontierAlreadyOnPath</name> <init>= <expr><call><name>Path_ContainsNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frontierNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// Add frontier to path.</comment>
			<expr_stmt><expr><call><name>Path_AppendNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>frontierNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* If depth is 0 this is the source node, there is no leading edge to it.
			 * For depth &gt; 0 for each frontier node, there is a leading edge. */</comment>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Path_AppendEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>frontierConnection</name><operator>.</operator><name>edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="line">// Update path depth.</comment>
			<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/* Introduce neighbors only if path depth &lt; maximum path length.
			 * and frontier wasn't already expanded. */</comment>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>frontierAlreadyOnPath</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>addNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frontierConnection</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// See if we can return path.</comment>
			<comment type="block">/* TODO Note that further calls to this function will continue to operate on
			 * this path, so it is essential that the caller does not modify it (or creates
			 * a copy beforehand). If future features like an algorithm API use this routine,
			 * they should either be responsible for memory safety or a memory-safe boolean/routine
			 * should be offered. */</comment>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>dst</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>Node</name></type> <name>dst</name> <init>= <expr><call><name>Path_Head</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// No way to advance, backtrack.</comment>
			<expr_stmt><expr><call><name>Path_PopNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><call><name>Path_EdgeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Path_PopEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<comment type="line">// Couldn't find a path.</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Path</name> <modifier>*</modifier></type><name>AllPathsCtx_NextPath</name><parameter_list>(<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>shortest_paths</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>AllShortestPaths_NextPath</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>_AllPathsCtx_NextPath</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AllPathsCtx_Free</name><parameter_list>(<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>levelsCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>levelsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Path_Free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>neighbors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GrB_Vector_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
