<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/longest_path.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./longest_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./bfs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./dfs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>"./detect_cycle.h"</cpp:file></cpp:include>

<comment type="line">// Scans the graph in a DFS fashion, keeps track after the longest path length.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__DFSMaxDepth</name><parameter_list>(<parameter><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_depth</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>visited</name></decl></parameter>, <parameter><decl><type><name>rax</name> <modifier>*</modifier></type><name>used_edges</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>level</name> <operator>&gt;</operator> <operator>*</operator><name>max_depth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>max_depth</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Mark n as visited, return if node already marked.</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>raxInsert</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// We've already processed n.</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Expand node N by visiting all of its neighbors</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>outgoing_edges</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>outgoing_edges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>raxInsert</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>__DFSMaxDepth</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_depth</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>used_edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Expand node N by visiting all of its neighbors</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>incoming_edges</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>QGEdge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>incoming_edges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>raxInsert</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>__DFSMaxDepth</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_depth</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>used_edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>raxRemove</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Finds out the longest path distance from given node.</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_DFSMaxDepth</name><parameter_list>(<parameter><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="line">// Starting at level 0.</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>max_depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="line">// Longest path length.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>visited</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>    <comment type="line">// Dictionary of visited nodes.</comment>
	<decl_stmt><decl><type><name>rax</name> <modifier>*</modifier></type><name>used_edges</name> <init>= <expr><call><name>raxNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Dictionary of used edges.</comment>

	<expr_stmt><expr><call><name>__DFSMaxDepth</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_depth</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>used_edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>visited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>raxFree</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>max_depth</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Finds the longest path in an cyclic graph.</comment>
<function><type><name>QGNode</name> <modifier>*</modifier></type><name>LongestPathGraph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* To find the longest path in a graph containing a cycle
	 * where we do not expand from a visited node:
	 * 1. the entire graph is a cycle, in which case it doesn't matter
	 * which node we pick to begin out traversal.
	 * 2. there's a node with in-degree of out-degree 0, as we know
	 * this node resided on the "edge" of the graph from which the longest path
	 * begins/ends. */</comment>

	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// Node from which the longest path expand.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>node_count</name> <init>= <expr><call><name>QueryGraph_NodeCount</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>node_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><call><name>QGNode_IncomeDegree</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>QGNode_OutgoingDegree</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <call><name>_DFSMaxDepth</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// All nodes are part of a cycle, pick one randomly.</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <call><name>_DFSMaxDepth</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Finds the longest path in an acyclic graph.</comment>
<function><type><name>QGNode</name> <modifier>*</modifier></type><name>LongestPathTree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>BFS_LOWEST_LEVEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>leafs</name> <init>= <expr><call><name>BFS</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>leaf</name> <init>= <expr><name><name>leafs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>leafs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>l</name> <operator>=</operator> <name>BFS_LOWEST_LEVEL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>leafs</name> <operator>=</operator> <call><name>BFS</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name>leafs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>QGNode</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>leafs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name>leafs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

</unit>
