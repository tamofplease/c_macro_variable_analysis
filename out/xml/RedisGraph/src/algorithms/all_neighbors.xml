<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/all_neighbors.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"all_neighbors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_AllNeighborsCtx_CollectNeighbors</name>
<parameter_list>(
	<parameter><decl><type><name>AllNeighborsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>EntityID</name></type> <name>id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name> <operator>==</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>RG_MatrixTupleIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RG_MatrixTupleIter_AttachRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>M</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RG_MatrixTupleIter_iterate_row</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>_AllNeighborsCtx_Visited</name>
<parameter_list>(
	<parameter><decl><type><name>AllNeighborsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>EntityID</name></type> <name>id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AllNeighborsCtx_Reset</name>
<parameter_list>(
	<parameter><decl><type><name>AllNeighborsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,  <comment type="line">// all neighbors context to reset</comment>
	<parameter><decl><type><name>EntityID</name></type> <name>src</name></decl></parameter>,          <comment type="line">// source node from which to traverse</comment>
	<parameter><decl><type><name>RG_Matrix</name></type> <name>M</name></decl></parameter>,           <comment type="line">// matrix describing connections</comment>
	<parameter><decl><type><name>uint</name></type> <name>minLen</name></decl></parameter>,           <comment type="line">// minimum traversal depth</comment>
	<parameter><decl><type><name>uint</name></type> <name>maxLen</name></decl></parameter>            <comment type="line">// maximum traversal depth</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>M</name>             <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name>           <operator>!=</operator> <name>INVALID_ENTITY_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name>           <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>M</name></name>              <operator>=</operator>  <name>M</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name></name>            <operator>=</operator>  <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name>         <operator>=</operator>  <name>minLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name>         <operator>=</operator>  <name>maxLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_pull</name></name>     <operator>=</operator>  <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name>  <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_MatrixTupleIter_detach</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Dummy iterator at level 0</comment>
	<macro><name>array_append</name><argument_list>(<argument>ctx-&gt;levels</argument>, <argument>(RG_MatrixTupleIter) {<literal type="number">0</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>AllNeighborsCtx</name> <modifier>*</modifier></type><name>AllNeighborsCtx_New</name>
<parameter_list>(
	<parameter><decl><type><name>EntityID</name></type> <name>src</name></decl></parameter>,  <comment type="line">// source node from which to traverse</comment>
	<parameter><decl><type><name>RG_Matrix</name></type> <name>M</name></decl></parameter>,   <comment type="line">// matrix describing connections</comment>
	<parameter><decl><type><name>uint</name></type> <name>minLen</name></decl></parameter>,   <comment type="line">// minimum traversal depth</comment>
	<parameter><decl><type><name>uint</name></type> <name>maxLen</name></decl></parameter>    <comment type="line">// maximum traversal depth</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>M</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>INVALID_ENTITY_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AllNeighborsCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>rm_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AllNeighborsCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>M</name></name>              <operator>=</operator>  <name>M</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name></name>            <operator>=</operator>  <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name>         <operator>=</operator>  <name>minLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name>         <operator>=</operator>  <name>maxLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name>         <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>RG_MatrixTupleIter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name>        <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>EntityID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_pull</name></name>     <operator>=</operator>  <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name>  <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="line">// Dummy iterator at level 0</comment>
	<macro><name>array_append</name><argument_list>(<argument>ctx-&gt;levels</argument>, <argument>(RG_MatrixTupleIter) {<literal type="number">0</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EntityID</name></type> <name>AllNeighborsCtx_NextNeighbor</name>
<parameter_list>(
	<parameter><decl><type><name>AllNeighborsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INVALID_ENTITY_ID</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>first_pull</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_pull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<comment type="line">// update visited path, replace frontier with current node</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// current_level &gt;= ctx-&gt;minLen</comment>
		<comment type="line">// see if we should expand further?</comment>
		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// we can expand further</comment>
			<expr_stmt><expr><call><name>_AllNeighborsCtx_CollectNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>src</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>RG_MatrixTupleIter</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>GrB_Index</name></type> <name>dest_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>RG_MatrixTupleIter_next_UINT64</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GxB_EXHAUSTED</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// backtrack</comment>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// update visited path, replace frontier with current node</comment>
		<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>, <argument><expr><name>dest_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// continue traversing</comment>
			<expr_stmt><expr><call><name>_AllNeighborsCtx_CollectNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dest_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// current_level &gt;= ctx-&gt;minLen</comment>
		<comment type="line">// see if we should expand further?</comment>
		<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>current_level</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>&amp;&amp;</operator>
		   <operator>!</operator><call><name>_AllNeighborsCtx_Visited</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dest_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// we can expand further</comment>
			<expr_stmt><expr><call><name>_AllNeighborsCtx_CollectNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dest_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>dest_id</name></expr>;</return>
	</block_content>}</block></while>

	<comment type="line">// couldn't find a neighbor</comment>
	<return>return <expr><name>INVALID_ENTITY_ID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AllNeighborsCtx_Free</name>
<parameter_list>(
	<parameter><decl><type><name>AllNeighborsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RG_MatrixTupleIter_detach</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
