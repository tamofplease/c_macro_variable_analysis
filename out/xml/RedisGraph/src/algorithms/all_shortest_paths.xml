<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/all_shortest_paths.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"all_shortest_paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>

<comment type="line">// run BFS from `src` until `dest` is reached</comment>
<comment type="line">// add all nodes visited during traversal except for nodes in</comment>
<comment type="line">// `dest` level, so it can be used later on in `AllShortestPaths_NextPath`</comment>
<function><type><name>int</name></type> <name>AllShortestPaths_FindMinimumLength</name>
<parameter_list>(
	<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,   <comment type="line">// context of the all shortest path</comment>
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,          <comment type="line">// source node</comment>
	<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>          <comment type="line">// destination node</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name>  <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type>    <name>depth</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NodeID</name></type> <name>destID</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>visited</name></decl>;</decl_stmt>       <comment type="line">// all visited nodes</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>newly_visited</name></decl>;</decl_stmt> <comment type="line">// nodes visited in current level</comment>

	<comment type="line">// initialize both `visited` and `newly_visited` vectors</comment>
	<expr_stmt><expr><call><name>GrB_Vector_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>visited</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><call><name>Graph_UncompactedNodeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GxB_set</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GrB_Vector_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newly_visited</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><call><name>Graph_UncompactedNodeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GxB_set</name><argument_list>(<argument><expr><name>newly_visited</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// see if we have nodes in the current level</comment>
		<decl_stmt><decl><type><name>uint</name></type> <name>neighborCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>neighborCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// current level depleted, move to next level</comment>
			<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>||</operator> <name>depth</name> <operator>&gt;=</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// we reached max level and didn't found the dest node</comment>
				<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// indicate `dest` wasn't reached</comment>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// add the newly_visited nodes to the global visited vector</comment>
			<comment type="line">// as we finished with current level and move to next level</comment>
			<expr_stmt><expr><call><name>GrB_Vector_eWiseAdd_BinaryOp</name><argument_list>(<argument><expr><name>visited</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_ANY_BOOL</name></expr></argument>,
					<argument><expr><name>visited</name></expr></argument>, <argument><expr><name>newly_visited</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// clear newly visited</comment>
			<expr_stmt><expr><call><name>GrB_Vector_clear</name><argument_list>(<argument><expr><name>newly_visited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// get the node from the frontier</comment>
		<decl_stmt><decl><type><name>LevelConnection</name></type> <name>frontierConnection</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name></type> <name>frontierNode</name> <init>= <expr><name><name>frontierConnection</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NodeID</name></type> <name>frontierID</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frontierNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// check if we reached dest</comment>
		<if_stmt><if>if<condition>(<expr><name>destID</name> <operator>==</operator> <name>frontierID</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// introduce neighbors only if path depth &lt; maximum path length</comment>
		<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// the node has already been visited if it is already in either</comment>
		<comment type="line">// visited or newly_visited</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>x</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GrB_Vector_extractElement_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>frontierID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>is_visited</name> <init>= <expr><operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>is_visited</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Vector_extractElement_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>newly_visited</name></expr></argument>, <argument><expr><name>frontierID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_visited</name> <operator>=</operator> <operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>is_visited</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// mark node in newly_visited vector</comment>
		<expr_stmt><expr><call><name>GrB_Vector_setElement_BOOL</name><argument_list>(<argument><expr><name>newly_visited</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>frontierID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// add all neighbors of the current node to the next level</comment>
		<expr_stmt><expr><call><name>addNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frontierConnection</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// `dest` was reached</comment>
		<expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// clean data</comment>
		<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// switch from edge count to node count</comment>
		<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&lt;</operator> <call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>array_clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newly_visited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name> <operator>=</operator> <name>visited</name></expr>;</expr_stmt>

	<return>return <expr><name>depth</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// find paths from src to dest by traversing from dest to src using DFS</comment>
<comment type="line">// inspecting nodes which where discovered by</comment>
<comment type="line">// the previous call to `AllShortestPaths_FindMinimumLength`</comment>
<function><type><name>Path</name> <modifier>*</modifier></type><name>AllShortestPaths_NextPath</name>
<parameter_list>(
	<parameter><decl><type><name>AllPathsCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name> <init>= <expr><call><name>Path_NodeCount</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// a full path already returned</comment>
		<comment type="line">// advance to next path by backtracking</comment>
		<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Path_EnsureLen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>LevelConnection</name></type> <name>frontierConnection</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name></type> <name>frontierNode</name> <init>= <expr><name><name>frontierConnection</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Path_SetNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name> <operator>-</operator> <name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>frontierNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frontierConnection</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// as long as we didn't found a full path from src to dest</comment>
	<while>while <condition>(<expr><name>depth</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// get a new node from the frontier</comment>
			<decl_stmt><decl><type><name>bool</name></type> <name>is_visited</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>LevelConnection</name></type> <name>frontierConnection</name> <init>= <expr><call><name>array_pop</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Node</name></type> <name>frontierNode</name> <init>= <expr><name><name>frontierConnection</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>NodeID</name></type> <name>frontierID</name> <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frontierNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GrB_Vector_extractElement_BOOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>is_visited</name></expr></argument>,
					<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>visited</name></name></expr></argument>, <argument><expr><name>frontierID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// consider only previously discovered nodes</comment>
			<if_stmt><if>if<condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

			<comment type="line">// if we reached to the end of the path and this node is not the</comment>
			<comment type="line">// dst node continue</comment>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
			   <name>frontierID</name> <operator>!=</operator> <call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>Path_SetNode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name> <operator>-</operator> <name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>frontierNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Path_SetEdge</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>minLen</name></name> <operator>-</operator> <name>depth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>frontierConnection</name><operator>.</operator><name>edge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>maxLen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addNeighbors</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frontierConnection</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>Path_Clear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// first level fully consumed</comment>
				<comment type="line">// there are no more paths leading from src to dest, we're done</comment>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
