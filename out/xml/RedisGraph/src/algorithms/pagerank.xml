<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/pagerank.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// LAGraph_pagerank: pagerank using a real semiring</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="block">/*
    LAGraph:  graph algorithms based on GraphBLAS
    Copyright 2019 LAGraph Contributors.
    (see Contributors.txt for a full list of Contributors; see
    ContributionInstructions.txt for information on how you can Contribute to
    this project).
    All Rights Reserved.
    NO WARRANTY. THIS MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. THE LAGRAPH
    CONTRIBUTORS MAKE NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
    AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
    PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF
    THE MATERIAL. THE CONTRIBUTORS DO NOT MAKE ANY WARRANTY OF ANY KIND WITH
    RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
    Released under a BSD license, please see the LICENSE file distributed with
    this Software or contact permission@sei.cmu.edu for full terms.
    Created, in part, with funding and support from the United States
    Government.  (see Acknowledgments.txt file).
    This program includes and/or can make use of certain third party source
    code, object code, documentation and other files ("Third Party Software").
    See LICENSE file for more details.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pagerank.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// scalar operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAMPING</name></cpp:macro> <cpp:value>0.85</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>fdiff</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>float</name></type> <name>delta</name> <init>= <expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>y</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>z</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>delta</name> <operator>*</operator> <name>delta</name></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// comparison function for qsort</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>int</name></type> <name>compar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>LAGraph_PageRank</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>LAGraph_PageRank</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>LAGraph_PageRank</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>LAGraph_PageRank</name> <operator>*</operator><operator>)</operator> <name>y</name></expr></init></decl> ;</decl_stmt>

	<comment type="line">// sort by pagerank in descending order</comment>
	<if_stmt><if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>pagerank</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>pagerank</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ;</return>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>pagerank</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>pagerank</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr> ;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// LAGraph_pagerank: compute the pagerank of all nodes in a graph</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>Pagerank</name>               <comment type="line">// GrB_SUCCESS or error condition</comment>
<parameter_list>(
	<parameter><decl><type><name>LAGraph_PageRank</name> <modifier>*</modifier><modifier>*</modifier></type><name>Phandle</name></decl></parameter>, <comment type="line">// output: array of LAGraph_PageRank structs</comment>
	<parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,               <comment type="line">// binary input graph, not modified</comment>
	<parameter><decl><type><name>int</name></type> <name>itermax</name></decl></parameter>,                <comment type="line">// max number of iterations</comment>
	<parameter><decl><type><name>double</name></type> <name>tol</name></decl></parameter>,                 <comment type="line">// stop when norm (r-rnew,2) &lt; tol</comment>
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iters</name></decl></parameter>                  <comment type="line">// number of iterations taken</comment>
)</parameter_list> <block>{<block_content>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// initializations</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>rsum</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>LAGraph_PageRank</name> <modifier>*</modifier></type><name>P</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op_diff</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nvals</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>D</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Phandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>Phandle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

	<comment type="line">// n = size (A,1) ;         // number of nodes</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

	<comment type="line">// teleport = (1 - 0.85) / n</comment>
	<decl_stmt><decl><type><name>float</name></type> <name>one</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>teleport</name> <init>= <expr><operator>(</operator><name>one</name> <operator>-</operator> <name>DAMPING</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>n</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

	<comment type="line">// r (i) = 1/n for all nodes i</comment>
	<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>n</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Vector_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_assign</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">// d (i) = out deg of node i</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Vector_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_reduce</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<comment type="line">// GxB_print (d, 3) ;</comment>

	<comment type="line">// D = (1/diag (d)) * DAMPING</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>iso</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>jumbled</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>vi_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>vx_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>vi_size</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>vx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvals</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>X</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>DAMPING</name> <operator>/</operator> <name><name>X</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Matrix_build</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">// C = diagonal matrix with all zeros on the diagonal.  This ensures that</comment>
	<comment type="line">// the vectors r and t remain dense, which is faster, and is required</comment>
	<comment type="line">// for the t += teleport_scalar step.</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<comment type="line">// GxB_set (C, GxB_HYPER, GxB_ALWAYS_HYPER) ;</comment>

	<for>for<control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// C(k,k) = 0</comment>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Matrix_setElement</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// make sure D is diagonal</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_eWiseAdd</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">// use GrB_mxv for t=C*r below</comment>
	<comment type="line">// C = C+(D*A)' = C+A'*D'  : using the transpose of C, and C*r below</comment>

	<comment type="line">// T = D*A</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_mxm</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP32</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">// C = C+T'</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_transpose</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">// create operator</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_BinaryOp_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op_diff</name></expr></argument>, <argument><expr><name>fdiff</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name>float</name></type> <name>ftol</name> <init>= <expr><name>tol</name> <operator>*</operator> <name>tol</name></expr></init></decl> ;</decl_stmt> <comment type="line">// use tol^2 so sqrt(rdiff) not needed</comment>
	<decl_stmt><decl><type><name>float</name></type> <name>rdiff</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>       <comment type="line">// so first iteration is always done</comment>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Vector_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// iterate to compute the pagerank of each node</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<for>for<control>(<init><expr><operator>(</operator><operator>*</operator><name>iters</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><operator>(</operator><operator>*</operator><name>iters</name><operator>)</operator> <operator>&lt;</operator> <name>itermax</name> <operator>&amp;&amp;</operator> <name>rdiff</name> <operator>&gt;</operator> <name>ftol</name></expr> ;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>iters</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// t = (r*C or C*r) + (teleport * sum (r)) ;</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// GxB_print (r, 2) ;</comment>

		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP32_MONOID</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

		<comment type="line">// t = C*r</comment>
		<comment type="line">// using the transpose of A, scaled (dot product)</comment>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_mxv</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_TIMES_FP32</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

		<comment type="line">// t += teleport_scalar ;</comment>
		<decl_stmt><decl><type><name>float</name></type> <name>teleport_scalar</name> <init>= <expr><name>teleport</name> <operator>*</operator> <name>rsum</name></expr></init></decl> ;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_assign</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>, <argument><expr><name>teleport_scalar</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// rdiff = sum ((r-t).^2)</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_eWiseAdd</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op_diff</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdiff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP32_MONOID</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// swap r and t</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>temp</name> <init>= <expr><name>r</name></expr></init></decl> ;</decl_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>t</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <name>temp</name></expr> ;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// scale the result</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// rsum = sum (r)</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP32_MONOID</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">// r = r / rsum</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GrB_Vector_assign_FP32</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_TIMES_FP32</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>/</operator> <name>rsum</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// sort the nodes by pagerank</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<comment type="line">// [r,irank] = sort (r, 'descend') ;</comment>

	<comment type="line">// extract the contents of r</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GxB_Vector_export_CSC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>vi_size</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>vx_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">// this will always be true since r is dense, but check anyway:</comment>
	<if_stmt><if>if<condition>(<expr><name>nvals</name> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PANIC</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

	<comment type="line">// P = struct (X,I)</comment>
	<expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LAGraph_PageRank</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>P</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvals</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// The kth ranked page is P[k].page (with k=0 being the highest rank),</comment>
		<comment type="line">// and its pagerank is P[k].pagerank.</comment>
		<expr_stmt><expr><name><name>P</name> <index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pagerank</name> <operator>=</operator> <name><name>X</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
		<comment type="line">// I [k] == k will be true for SuiteSparse:GraphBLAS but in general I</comment>
		<comment type="line">// can be returned in any order, so use I [k] instead of k, for other</comment>
		<comment type="line">// GraphBLAS implementations.</comment>
		<expr_stmt><expr><name><name>P</name> <index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>page</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// qsort (P) in descending order</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LAGraph_PageRank</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// return result</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>Phandle</name><operator>)</operator> <operator>=</operator> <name>P</name></expr> ;</expr_stmt>

	<comment type="line">// Clean up.</comment>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>op_diff</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>
</unit>
