<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/detect_cycle.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./detect_cycle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/entities/qg_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../deps/GraphBLAS/Include/GraphBLAS.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>IsAcyclicGraph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QueryGraph</name> <modifier>*</modifier></type><name>qg</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>acyclic</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Give an ID for each node, abuse of `labelID`.</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>node_count</name> <init>= <expr><call><name>QueryGraph_NodeCount</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>edge_count</name> <init>= <expr><call><name>QueryGraph_EdgeCount</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>m</name></decl>;</decl_stmt>   <comment type="line">// Matrix representation of QueryGraph.</comment>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>c</name></decl>;</decl_stmt>   <comment type="line">// Intermidate matrix, c = m^i.</comment>
	<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>t</name></decl>;</decl_stmt>   <comment type="line">// Temporary matrix, t = c .* i. elementwise boolean multiplication.</comment>

	<comment type="line">// Build matrix representation of query graph.</comment>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>QueryGraph_MatrixRepresentation</name><argument_list>(<argument><expr><name>qg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GrB_Matrix_dup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GrB_Matrix_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>, <argument><expr><name>node_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Perform traversals, stop when:
	* 1. Node i manged to reach itself, x[i,i] is set (cycle detected).
	* 2. After edge_count multiplications, no cycles. */</comment>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edge_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">// c = c * m.</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GrB_mxm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GxB_ANY_PAIR_BOOL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*  Extract main diagonal of `c` into `t`.
		 * Check if C[i,i] is set.
		 * t = c&lt;identity&gt; */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GxB_Matrix_select</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GxB_DIAG</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>, <argument><expr><name>GrB_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* How many entries are there in `t`?
		 * if there are any entires in `t` this means node `k` was able to reach itself cycle! */</comment>
		<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GrB_Matrix_nvals</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>nvals</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>acyclic</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">// Cleanup.</comment>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GrB_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>acyclic</name></expr>;</return>
</block_content>}</block></function>

</unit>
