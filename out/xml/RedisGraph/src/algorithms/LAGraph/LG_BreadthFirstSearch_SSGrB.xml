<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/algorithms/LAGraph/LG_BreadthFirstSearch_SSGrB.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// LG_BreadthFirstSearch_SSGrB:  BFS using Suitesparse extensions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// LAGraph, (c) 2021 by The LAGraph Contributors, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: BSD-2-Clause</comment>
<comment type="line">//</comment>
<comment type="line">// See additional acknowledgments in the LICENSE file,</comment>
<comment type="line">// or contact permission@sei.cmu.edu for the full terms.</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// References:</comment>
<comment type="line">//</comment>
<comment type="line">// Carl Yang, Aydin Buluc, and John D. Owens. 2018. Implementing Push-Pull</comment>
<comment type="line">// Efficiently in GraphBLAS. In Proceedings of the 47th International</comment>
<comment type="line">// Conference on Parallel Processing (ICPP 2018). ACM, New York, NY, USA,</comment>
<comment type="line">// Article 89, 11 pages. DOI: https://doi.org/10.1145/3225058.3225122</comment>
<comment type="line">//</comment>
<comment type="line">// Scott Beamer, Krste Asanovic and David A. Patterson, The GAP Benchmark</comment>
<comment type="line">// Suite, http://arxiv.org/abs/1508.03619, 2015.  http://gap.cs.berkeley.edu/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GraphBLAS.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LAGraph_bfs.h"</cpp:file></cpp:include>

<comment type="line">//****************************************************************************</comment>
<function><type><name>int</name></type> <name>LG_BreadthFirstSearch_SSGrB</name>
<parameter_list>(
	<parameter><decl><type><name>GrB_Vector</name>    <modifier>*</modifier></type><name>level</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Vector</name>    <modifier>*</modifier></type><name>parent</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Matrix</name></type>    <name>A</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type>     <name>src</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name>     <modifier>*</modifier></type><name>dest</name></decl></parameter>,
	<parameter><decl><type><name>GrB_Index</name></type>     <name>max_level</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// check inputs</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Vector</name></type>  <name>q</name>   <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>  <comment type="line">//  the current frontier</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name></type>  <name>pi</name>  <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>  <comment type="line">//  parent vector</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name></type>  <name>v</name>   <init>=  <expr><name>NULL</name></expr></init></decl>  ;</decl_stmt>  <comment type="line">//  level vector</comment>

	<expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>compute_level</name>  <init>= <expr><operator>(</operator><name>level</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>compute_parent</name> <init>= <expr><operator>(</operator><name>parent</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>compute_level</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>level</name> <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>compute_parent</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>parent</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>compute_level</name> <operator>||</operator> <name>compute_parent</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// nothing to do</comment>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// get the problem size and properties</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nvals</name></decl> ;</decl_stmt>
	<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<comment type="line">// determine the semiring type</comment>
	<decl_stmt><decl><type><name>GrB_Type</name></type> <name>int_type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;</operator> <name>INT32_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_INT64</name></expr> </then><else>: <expr><name>GrB_INT32</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>semiring</name></decl> ;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>compute_parent</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// use the ANY_SECONDI_INT* semiring: either 32 or 64-bit depending on</comment>
		<comment type="line">// the # of nodes in the graph.</comment>
		<expr_stmt><expr><name>semiring</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;</operator> <name>INT32_MAX</name><operator>)</operator></expr> ?</condition><then>
			<expr><name>GxB_ANY_SECONDI_INT64</name></expr> </then><else>: <expr><name>GxB_ANY_SECONDI_INT32</name></expr></else></ternary></expr> ;</expr_stmt>

		<comment type="line">// create the parent vector.  pi(i) is the parent id of node i</comment>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><name>int_type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GxB_set</name> <argument_list>(<argument><expr><name>pi</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<comment type="line">// pi (src) = src denotes the root of the BFS tree</comment>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement</name> <argument_list>(<argument><expr><name>pi</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

		<comment type="line">// create a sparse integer vector q, and set q(src) = src</comment>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>int_type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// only the level is needed</comment>
		<expr_stmt><expr><name>semiring</name> <operator>=</operator> <name>GrB_LOR_LAND_SEMIRING_BOOL</name></expr> ;</expr_stmt>

		<comment type="line">// create a sparse boolean vector q, and set q(src) = true</comment>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>compute_level</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// create the level vector. v(i) is the level of node i</comment>
		<comment type="line">// v (src) = 0 denotes the source node</comment>

		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>int_type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GxB_set</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>nq</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>          <comment type="line">// number of nodes in the current level</comment>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// BFS traversal and label the nodes</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>


	<comment type="line">// {!mask} is the set of unvisited nodes</comment>
	<decl_stmt><decl><type><name>GrB_Vector</name></type> <name>mask</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>compute_parent</name><operator>)</operator></expr> ?</condition><then> <expr><name>pi</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

	<comment type="line">// create a scalar to hold the destination value</comment>
	<decl_stmt><decl><type><name>GrB_Index</name></type> <name>dest_val</name></decl> ;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int64_t</name></type> <name>nvisited</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>nvisited</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>nvisited</name> <operator>+=</operator> <name>nq</name></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// q = kth level of the BFS</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<comment type="line">// mask is pi if computing parent, v if computing just level</comment>
		<comment type="line">// q'{!mask} = q'*A</comment>
		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_vxm</name> <argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_DESC_RSC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// done if q is empty</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nq</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nq</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<break>break ;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">//----------------------------------------------------------------------</comment>
		<comment type="line">// assign parents/levels</comment>
		<comment type="line">//----------------------------------------------------------------------</comment>

		<if_stmt><if>if <condition>(<expr><name>compute_parent</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// q(i) currently contains the parent id of node i in tree.</comment>
			<comment type="line">// pi{q} = q</comment>
			<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_assign</name> <argument_list>(<argument><expr><name>pi</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>compute_level</name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// v{q} = k, the kth level of the BFS</comment>
			<expr_stmt><expr><call><name>GrB_OK</name> <argument_list>(<argument><expr><call><name>GrB_assign</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// check if destination has been reached, if one is provided</comment>
		<if_stmt><if>if<condition>(<expr><name>dest</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>GrB_Info</name></type> <name>res</name> <init>= <expr><call><name>GrB_Vector_extractElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dest_val</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>res</name> <operator>!=</operator> <name>GrB_NO_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// check if max level has been reached, if one is provided</comment>
		<if_stmt><if>if<condition>(<expr><name>max_level</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;=</operator> <name>max_level</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="line">//--------------------------------------------------------------------------</comment>
	<comment type="line">// free workspace and return result</comment>
	<comment type="line">//--------------------------------------------------------------------------</comment>

	<if_stmt><if>if <condition>(<expr><name>compute_parent</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>parent</name><operator>)</operator> <operator>=</operator> <name>pi</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>compute_level</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>level</name> <operator>)</operator> <operator>=</operator> <name>v</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>GrB_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
</block_content>}</block></function>
</unit>
