<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/debug.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/thpool/pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/cmd_context.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>CommandCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>command_ctxs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sigaction</name></name></type> <name>old_act</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>startCrashReport</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"=== REDISGRAPH BUG REPORT START: ==="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>endCrashReport</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"=== REDISGRAPH BUG REPORT END. ==="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>logCommands</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// #readers + #writers + Redis main thread</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>ThreadPools_ThreadCount</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>command_ctxs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RedisModule_Log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command_name</name></name></expr></argument>,
					<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>InfoFunc</name><parameter_list>(<parameter><decl><type><name>RedisModuleInfoCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_crash_report</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// make sure information is requested for crash report</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>for_crash_report</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// pause all working threads</comment>
	<comment type="line">// NOTE: pausing is not an atomic action;</comment>
	<comment type="line">// other threads can potentially change states before being interrupted.</comment>
	<expr_stmt><expr><call><name>ThreadPools_Pause</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command_desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// #readers + #writers + Redis main thread</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>ThreadPools_ThreadCount</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RedisModule_InfoAddSection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"executing commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>CommandCtx</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name><name>command_ctxs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>command_desc</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command_name</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RedisModule_InfoAddFieldCString</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>, <argument><expr><name>command_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>command_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>crashHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ucontext</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// pause all working threads</comment>
	<comment type="line">// NOTE: pausing is an async operation</comment>
	<expr_stmt><expr><call><name>ThreadPools_Pause</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>startCrashReport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// log currently executing GRAPH commands</comment>
	<expr_stmt><expr><call><name>logCommands</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>endCrashReport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// call previous (Redis original) handler</comment>
	<expr_stmt><expr><call>(<modifier>*</modifier><name><name>old_act</name><operator>.</operator><name>sa_sigaction</name></name>)<argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>ucontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setupCrashHandlers</name><parameter_list>(<parameter><decl><type><name>RedisModuleCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// if RedisModule_RegisterInfoFunc is available use it</comment>
	<comment type="line">// to report RedisGraph additional information in case of a crash</comment>
	<comment type="line">// otherwise overwrite Redis signal handler</comment>

	<if_stmt><if>if<condition>(<expr><name>RedisModule_RegisterInfoFunc</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>registered</name> <init>= <expr><call><name>RedisModule_RegisterInfoFunc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>InfoFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>registered</name> <operator>==</operator> <name>REDISMODULE_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// RegisterInfoFunc is not available, replace redis</comment>
		<comment type="line">// SIGSEGV signal handler</comment>

		<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_NODEFER</name> <operator>|</operator> <name>SA_RESETHAND</name> <operator>|</operator> <name>SA_SIGINFO</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_sigaction</name></name> <operator>=</operator> <name>crashHandler</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
