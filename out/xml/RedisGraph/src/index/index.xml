<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/index/index.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/arr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/rmalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../datatypes/point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/entities/node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/rg_matrix/rg_matrix_iter.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>populateEdgeIndex</name><parameter_list>(<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>populateNodeIndex</name><parameter_list>(<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>RSDoc</name> <modifier>*</modifier></type><name>Index_IndexGraphEntity</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
	<parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>doc_field_count</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>              <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name>                <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name>              <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>doc_field_count</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key_len</name>          <operator>&gt;</operator>   <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>double</name></type>      <name>score</name>            <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>     <comment type="line">// default score</comment>
	<decl_stmt><decl><type><name>IndexField</name>  <modifier>*</modifier></type><name>field</name>           <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// current indexed field</comment>
	<decl_stmt><decl><type><name>SIValue</name>     <modifier>*</modifier></type><name>v</name>               <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// current indexed value</comment>
	<decl_stmt><decl><type><name>RSIndex</name>     <modifier>*</modifier></type><name>rsIdx</name>           <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>    <name>id</name>               <init>= <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint</name></type>        <name>field_count</name>      <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>doc_field_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="line">// list of none indexable fields</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>none_indexable_fields_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// number of none indexed fields</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>none_indexable_fields</name><index>[<expr><name>field_count</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// none indexed fields</comment>

	<comment type="line">// create an empty document</comment>
	<decl_stmt><decl><type><name>RSDoc</name> <modifier>*</modifier></type><name>doc</name> <init>= <expr><call><name>RediSearch_CreateDocument2</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name>score</name></expr></argument>,
			<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// add document field for each indexed property</comment>
	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IDX_FULLTEXT</name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>field_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>fields</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_name</name> <init>= <expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GraphEntity_GetProperty</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>ATTRIBUTE_NOTFOUND</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

			<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// value must be of type string</comment>
			<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>doc_field_count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RediSearch_DocumentAddFieldString</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>stringval</name></name></expr></argument>,
						<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RSFLDTYPE_FULLTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>field_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>field</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>fields</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_name</name> <init>= <expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GraphEntity_GetProperty</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>ATTRIBUTE_NOTFOUND</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

			<decl_stmt><decl><type><name>SIType</name></type> <name>t</name> <init>= <expr><call><name>SI_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><operator>*</operator><name>doc_field_count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <name>T_STRING</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RediSearch_DocumentAddFieldString</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>stringval</name></name></expr></argument>,
						<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RSFLDTYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>&amp;</operator> <operator>(</operator><name>SI_NUMERIC</name> <operator>|</operator> <name>T_BOOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>SI_GET_NUMERIC</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>RediSearch_DocumentAddFieldNumber</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
						<argument><expr><name>RSFLDTYPE_NUMERIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>t</name> <operator>==</operator> <name>T_POINT</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>double</name></type> <name>lat</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><call><name>Point_lat</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>lon</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><call><name>Point_lon</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>RediSearch_DocumentAddFieldGeo</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>, <argument><expr><name>lat</name></expr></argument>, <argument><expr><name>lon</name></expr></argument>,
						<argument><expr><name>RSFLDTYPE_GEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="line">// none indexable field</comment>
				<expr_stmt><expr><name><name>none_indexable_fields</name><index>[<expr><name>none_indexable_fields_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
					<name>field_name</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<comment type="line">// index name of none index fields</comment>
		<if_stmt><if>if<condition>(<expr><name>none_indexable_fields_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// concat all none indexable field names</comment>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>none_indexable_fields_count</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// seperators</comment>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>none_indexable_fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>none_indexable_fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name><name>stack_fields</name><index>[<expr><name>len</name></expr>]</index></name></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>stack_fields</name></expr>;</expr_stmt></block_content></block></if> <comment type="line">// stack base</comment>
			<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line">// heap base</comment>

			<comment type="line">// concat</comment>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>none_indexable_fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>none_indexable_fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%c%s"</literal></expr></argument>, <argument><expr><name>INDEX_SEPARATOR</name></expr></argument>, <argument><expr><name><name>none_indexable_fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>RediSearch_DocumentAddFieldString</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>INDEX_FIELD_NONE_INDEXED</name></expr></argument>,
						<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>RSFLDTYPE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">// free if heap based</comment>
			<if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name>stack_fields</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>doc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>IndexField_New</name>
<parameter_list>(
	<parameter><decl><type><name>IndexField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>id</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
	<parameter><decl><type><name>double</name></type> <name>weight</name></decl></parameter>,
	<parameter><decl><type><name>bool</name></type> <name>nostem</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>phonetic</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name>      <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field</name>     <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>phonetic</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>id</name></name>       <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name>     <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>weight</name></name>   <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>nostem</name></name>   <operator>=</operator> <name>nostem</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>phonetic</name></name> <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>phonetic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>IndexField_Free</name>
<parameter_list>(
	<parameter><decl><type><name>IndexField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>phonetic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// create a new index</comment>
<function><type><name>Index</name> <modifier>*</modifier></type><name>Index_New</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,           <comment type="line">// indexed label</comment>
	<parameter><decl><type><name>int</name></type> <name>label_id</name></decl></parameter>,                <comment type="line">// indexed label id</comment>
	<parameter><decl><type><name>IndexType</name></type> <name>type</name></decl></parameter>,              <comment type="line">// exact match or full text</comment>
	<parameter><decl><type><name>GraphEntityType</name></type> <name>entity_type</name></decl></parameter>  <comment type="line">// entity type been indexed</comment>
)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>rm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name>           <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>type</name></name>          <operator>=</operator>  <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>label</name></name>         <operator>=</operator>  <call><name>rm_strdup</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name>        <operator>=</operator>  <call><name>array_new</name><argument_list>(<argument><expr><name>IndexField</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>label_id</name></name>      <operator>=</operator>  <name>label_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>language</name></name>      <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name>     <operator>=</operator>  <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>entity_type</name></name>   <operator>=</operator>  <name>entity_type</name></expr>;</expr_stmt>

	<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// adds field to index</comment>
<function><type><name>void</name></type> <name>Index_AddField</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>IndexField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>Index_ContainsAttribute</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>IndexField_Free</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>array_append</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><operator>*</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// removes fields from index</comment>
<function><type><name>void</name></type> <name>Index_RemoveField</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>field</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GraphContext</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>QueryCtx_GetGraphCtx</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Attribute_ID</name></type> <name>attribute_id</name> <init>= <expr><call><name>GraphContext_GetAttributeID</name><argument_list>(<argument><expr><name>gc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>attribute_id</name> <operator>!=</operator> <name>ATTRIBUTE_ID_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>fields_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>IndexField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>attribute_id</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// free field</comment>
			<expr_stmt><expr><call><name>IndexField_Free</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>array_del_fast</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// constructs index</comment>
<function><type><name>void</name></type> <name>Index_Construct</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// RediSearch index already exists, re-construct</comment>
	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RediSearch_DropIndex</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>RSIndex</name> <modifier>*</modifier></type><name>rsIdx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSIndexOptions</name> <modifier>*</modifier></type><name>idx_options</name> <init>= <expr><call><name>RediSearch_CreateIndexOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RediSearch_IndexOptionsSetLanguage</name><argument_list>(<argument><expr><name>idx_options</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// TODO: Remove this comment when https://github.com/RediSearch/RediSearch/issues/1100 is closed</comment>
	<comment type="line">// RediSearch_IndexOptionsSetGetValueCallback(idx_options, _getNodeAttribute, gc);</comment>

	<comment type="line">// enable GC, every 30 seconds gc will check if there's garbage</comment>
	<comment type="line">// if there are over 100 docs to remove GC will perform clean up</comment>
	<expr_stmt><expr><call><name>RediSearch_IndexOptionsSetGCPolicy</name><argument_list>(<argument><expr><name>idx_options</name></expr></argument>, <argument><expr><name>GC_POLICY_FORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RediSearch_IndexOptionsSetStopwords</name><argument_list>(<argument><expr><name>idx_options</name></expr></argument>,
				<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name></expr></argument>, <argument><expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IDX_EXACT_MATCH</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RediSearch_IndexOptionsSetStopwords</name><argument_list>(<argument><expr><name>idx_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rsIdx</name> <operator>=</operator> <call><name>RediSearch_CreateIndex</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>idx_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RediSearch_FreeIndexOptions</name><argument_list>(<argument><expr><name>idx_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// create indexed fields</comment>
	<decl_stmt><decl><type><name>uint</name></type> <name>fields_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IDX_FULLTEXT</name></expr>)</condition> <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>IndexField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<comment type="line">// introduce text field</comment>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>options</name> <init>= <expr><name>RSFLDOPT_NONE</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>nostem</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>options</name> <operator>|=</operator> <name>RSFLDOPT_TXTNOSTEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>phonetic</name></name></expr></argument>, <argument><expr><name>INDEX_FIELD_DEFAULT_PHONETIC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>RSFLDOPT_TXTPHONETIC</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>RSFieldID</name></type> <name>fieldID</name> <init>= <expr><call><name>RediSearch_CreateField</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
					<argument><expr><name>RSFLDTYPE_FULLTEXT</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>RediSearch_TextFieldSetWeight</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>IndexField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>
			<comment type="line">// introduce both text, numeric and geo fields</comment>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>types</name> <init>= <expr><name>RSFLDTYPE_NUMERIC</name> <operator>|</operator> <name>RSFLDTYPE_GEO</name> <operator>|</operator> <name>RSFLDTYPE_TAG</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>RSFieldID</name></type> <name>fieldID</name> <init>= <expr><call><name>RediSearch_CreateField</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
					<argument><expr><name>types</name></expr></argument>, <argument><expr><name>RSFLDOPT_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>RediSearch_TagFieldSetSeparator</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>INDEX_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RediSearch_TagFieldSetCaseSensitive</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// for none indexable types e.g. Array introduce an additional field</comment>
		<comment type="line">// "none_indexable_fields" which will hold a list of attribute names</comment>
		<comment type="line">// that were not indexed</comment>
		<decl_stmt><decl><type><name>RSFieldID</name></type> <name>fieldID</name> <init>= <expr><call><name>RediSearch_CreateField</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>,
				<argument><expr><name>INDEX_FIELD_NONE_INDEXED</name></expr></argument>, <argument><expr><name>RSFLDTYPE_TAG</name></expr></argument>, <argument><expr><name>RSFLDOPT_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>RediSearch_TagFieldSetSeparator</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><name>INDEX_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RediSearch_TagFieldSetCaseSensitive</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name>fieldID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>rsIdx</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>entity_type</name></name> <operator>==</operator> <name>GETYPE_NODE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>populateNodeIndex</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>populateEdgeIndex</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// query index</comment>
<function><type><name>RSResultsIterator</name> <modifier>*</modifier></type><name>Index_Query</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>err</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>query</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>RediSearch_IterateQuery</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns number of fields indexed</comment>
<function><type><name>uint</name></type> <name>Index_FieldsCount</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// returns indexed fields</comment>
<function><type><specifier>const</specifier> <name>IndexField</name> <modifier>*</modifier></type><name>Index_GetFields</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><specifier>const</specifier> <name>IndexField</name> <operator>*</operator><operator>)</operator><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Index_ContainsAttribute</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>Attribute_ID</name></type> <name>attribute_id</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>attribute_id</name> <operator>==</operator> <name>ATTRIBUTE_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	
	<decl_stmt><decl><type><name>uint</name></type> <name>fields_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>IndexField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>attribute_id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Index_GetLabelID</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>idx</name><operator>-&gt;</operator><name>label_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Index_GetLanguage</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>RediSearch_IndexGetLanguage</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>Index_GetStopwords</name>
<parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>IDX_FULLTEXT</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>RediSearch_IndexGetStopwords</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// set indexed language</comment>
<function><type><name>void</name></type> <name>Index_SetLanguage</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>language</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>language</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>language</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>language</name></name> <operator>=</operator> <call><name>rm_strdup</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// set indexed stopwords</comment>
<function><type><name>void</name></type> <name>Index_SetStopwords</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>stopwords</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stopwords</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>array_clone_with_cb</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name></expr></argument>, <argument><expr><name>stopwords</name></expr></argument>, <argument><expr><name>rm_strdup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// free index</comment>
<function><type><name>void</name></type> <name>Index_Free</name><parameter_list>(<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RediSearch_DropIndex</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>language</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>fields_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fields_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>IndexField_Free</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint</name></type> <name>stopwords_count</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stopwords_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>array_free</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>stopwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rm_free</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
