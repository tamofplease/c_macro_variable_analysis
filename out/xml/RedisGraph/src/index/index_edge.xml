<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/src/index/index_edge.c"><comment type="block">/*
 * Copyright Redis Ltd. 2018 - present
 * Licensed under your choice of the Redis Source Available License 2.0 (RSALv2) or
 * the Server Side Public License v1 (SSPLv1).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../query_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/graphcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/entities/edge.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../graph/rg_matrix/rg_matrix_iter.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>RSDoc</name> <modifier>*</modifier></type><name>Index_IndexGraphEntity</name><parameter_list>(<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GraphEntity</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>, <parameter><decl><type><name>uint</name> <modifier>*</modifier></type><name>doc_field_count</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>Index_IndexEdge</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name>  <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name>    <operator>!=</operator>  <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>RSIndex</name>   <modifier>*</modifier></type><name>rsIdx</name>   <init>=  <expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>src_id</name>   <init>=  <expr><call><name>Edge_GetSrcNodeID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>dest_id</name>  <init>=  <expr><call><name>Edge_GetDestNodeID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>edge_id</name>  <init>=  <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>EdgeIndexKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>src_id</name> <operator>=</operator> <name>src_id</name></expr>, <expr><operator>.</operator><name>dest_id</name> <operator>=</operator> <name>dest_id</name></expr>, <expr><operator>.</operator><name>edge_id</name> <operator>=</operator> <name>edge_id</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>EdgeIndexKey</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>doc_field_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RSDoc</name> <modifier>*</modifier></type><name>doc</name> <init>= <expr><call><name>Index_IndexGraphEntity</name><argument_list>(
			<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>GraphEntity</name> <operator>*</operator><operator>)</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>doc_field_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>doc_field_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// add src_node and dest_node fields</comment>
		<expr_stmt><expr><call><name>RediSearch_DocumentAddFieldNumber</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"_src_id"</literal></expr></argument>, <argument><expr><name>src_id</name></expr></argument>,
				<argument><expr><name>RSFLDTYPE_NUMERIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>RediSearch_DocumentAddFieldNumber</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><literal type="string">"_dest_id"</literal></expr></argument>, <argument><expr><name>dest_id</name></expr></argument>,
				<argument><expr><name>RSFLDTYPE_NUMERIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>RediSearch_SpecAddDocument</name><argument_list>(<argument><expr><name>rsIdx</name></expr></argument>, <argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="line">// entity doesn't possess any attributes which are indexed</comment>
		<comment type="line">// remove entity from index and delete document</comment>
		<expr_stmt><expr><call><name>Index_RemoveEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RediSearch_FreeDocument</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>populateEdgeIndex</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
	<parameter><decl><type><name>Graph</name> <modifier>*</modifier></type><name>g</name></decl></parameter>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>g</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>RG_Matrix</name></type> <name>m</name> <init>= <expr><call><name>Graph_GetRelationMatrix</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>label_id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>RG_MatrixTupleIter</name></type> <name>it</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RG_MatrixTupleIter_attach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// iterate over each graph entity</comment>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>src_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>dest_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>edge_id</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><call><name>RG_MatrixTupleIter_next_UINT64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edge_id</name></expr></argument>)</argument_list></call>
			<operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>Edge</name></type> <name>e</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>relationID</name></name>  <operator>=</operator>  <name><name>idx</name><operator>-&gt;</operator><name>label_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>srcNodeID</name></name>   <operator>=</operator>  <name>src_id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>destNodeID</name></name>  <operator>=</operator>  <name>dest_id</name></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><call><name>SINGLE_EDGE</name><argument_list>(<argument><expr><name>edge_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>Graph_GetEdge</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>edge_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Index_IndexEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>EdgeID</name> <modifier>*</modifier></type><name>edgeIds</name> <init>= <expr><operator>(</operator><name>EdgeID</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>CLEAR_MSB</name><argument_list>(<argument><expr><name>edge_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint</name></type> <name>edgeCount</name> <init>= <expr><call><name>array_len</name><argument_list>(<argument><expr><name>edgeIds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<for>for<control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>edgeCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>edge_id</name>       <operator>=</operator> <name><name>edgeIds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Graph_GetEdge</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>edge_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Index_IndexEdge</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>RG_MatrixTupleIter_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Index_RemoveEdge</name>
<parameter_list>(
	<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,    <comment type="line">// index to update</comment>
	<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>*</modifier></type><name>e</name></decl></parameter>  <comment type="line">// edge to remove from index</comment>
)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>e</name>   <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>EntityID</name></type>  <name>src_id</name>   <init>=  <expr><call><name>Edge_GetSrcNodeID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>dest_id</name>  <init>=  <expr><call><name>Edge_GetDestNodeID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EntityID</name></type>  <name>edge_id</name>  <init>=  <expr><call><name>ENTITY_GET_ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>EdgeIndexKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>src_id</name> <operator>=</operator> <name>src_id</name></expr>, <expr><operator>.</operator><name>dest_id</name> <operator>=</operator> <name>dest_id</name></expr>, <expr><operator>.</operator><name>edge_id</name> <operator>=</operator> <name>edge_id</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>key_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>EdgeIndexKey</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RediSearch_DeleteDocument</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
