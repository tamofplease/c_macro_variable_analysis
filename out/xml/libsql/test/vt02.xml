<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/test/vt02.c"><comment type="block">/*
** This file implements an eponymous, read-only table-valued function
** (a virtual table) designed to be used for testing.  We are not aware
** of any practical real-world use case for the virtual table.
**
** This virtual table originated in the TH3 test suite.  It is still used
** there, but has now been copied into the public SQLite source tree and
** reused for a variety of testing purpose.  The name "vt02" comes from the
** fact that there are many different testing virtual tables in TH3, of which
** this one is the second.
**
** ## SUBJECT TO CHANGE
**
** Because this virtual table is intended for testing, its interface is not
** guaranteed to be stable across releases.  Future releases may contain
** changes in the vt02 design and interface.
**
** ## OVERVIEW
**
** The vt02 table-valued function has 10000 rows with 5 data columns.
** Column X contains all integer values between 0 and 9999 inclusive.
** Columns A, B, C, and D contain the individual base-10 digits associated
** with each X value:
**
**      X     A  B  C  D
**      ----  -  -  -  -
**      0     0  0  0  0
**      1     0  0  0  1
**      2     0  0  0  2
**              ...
**      4998  4  9  9  8
**      4999  4  9  9  9
**      5000  5  0  0  0
**              ...
**      9995  9  9  9  5
**      9996  9  9  9  6
**      9997  9  9  9  7
**
** The xBestIndex method recognizes a variety of equality constraints
** and attempts to optimize its output accordingly.
**
**      x=...
**      a=...
**      a=... AND b=...
**      a=... AND b=... AND c=...
**      a=... AND b=... AND c=... AND d=...
**
** Various ORDER BY constraints are also recognized and consumed.  The
** OFFSET constraint is recognized and consumed.
**
** ## TABLE-VALUED FUNCTION
**
** The vt02 virtual table is eponymous and has two hidden columns, meaning
** that it can functions a table-valued function.  The two hidden columns
** are "flags" and "logtab", in that order.  The "flags" column can be set
** to an integer where various bits enable or disable behaviors of the
** virtual table.  The "logtab" can set to the name of an ordinary SQLite
** table into which is written information about each call to xBestIndex.
**
** The bits of "flags" are as follows:
**
**       0x01           Ignore the aConstraint[].usable flag.  This might
**                      result in the xBestIndex method incorrectly using
**                      unusable entries in the aConstraint[] array, which
**                      should result in the SQLite core detecting and
**                      reporting that the virtual table is not behaving
**                      to spec.
**
**       0x02           Do not set the orderByConsumed flag, even if it
**                      could be set.
**
**       0x04           Do not consume the OFFSET constraint, if there is
**                      one.  Instead, let the generated byte-code visit
**                      and ignore the first few columns of output.
**
**       0x08           Use sqlite3_mprintf() to allocate an idxStr string.
**                      The string is never used, but allocating it does
**                      test the idxStr deallocation logic inside of the
**                      SQLite core.
**
**       0x10           Cause the xBestIndex method to generate an idxNum
**                      that xFilter does not understand, thus causing
**                      the OP_VFilter opcode to raise an error.
**
**       0x20           Set the omit flag for all equality constraints on
**                      columns X, A, B, C, and D that are used to limit
**                      the search.
**
**       0x40           Add all constraints against X,A,B,C,D to the
**                      vector of results sent to xFilter.  Only the first
**                      few are used, as required by idxNum.
**
** Because these flags take effect during xBestIndex, the RHS of the
** flag= constraint must be accessible.  In other words, the RHS of flag=
** needs to be an integer literal, not another column of a join or a
** bound parameter.
**
** ## LOGGING OUTPUT
**
** If the "logtab" columns is set, then each call to the xBestIndex method
** inserts multiple rows into the table identified by "logtab".  These
** rows collectively show the content of the sqlite3_index_info object and
** other context associated with the xBestIndex call.
**
** If the table named by "logtab" does not previously exist, it is created
** automatically.  The schema for the logtab table is like this:
**
**   CREATE TEMP TABLE vt02_log(
**     bi INT,         -- BestIndex call counter
**     vn TEXT,        -- Variable Name
**     ix INT,         -- Index or value
**     cn TEXT,        -- Column Name
**     op INT,         -- Opcode or "DESC" value
**     ux INT,         -- "Usable" flag
**     ra BOOLEAN,     -- Right-hand side Available.
**     rhs ANY,        -- Right-Hand Side value
**     cs TEXT         -- Collating Sequence for this constraint
**  );
**
** Because logging happens during xBestIindex, the RHS value of "logtab" must
** be known to xBestIndex, which means it must be a string literal, not a
** column in a join, or a bound parameter.
** 
** ## VIRTUAL TABLE SCHEMA
**
**    CREATE TABLE vt02(
**      x INT,              -- integer between 0 and 9999 inclusive
**      a INT,              -- The 1000s digit
**      b INT,              -- The 100s digit
**      c INT,              -- The 10s digit
**      d INT,              -- The 1s digit
**      flags INT HIDDEN,   -- Option flags
**      logtab TEXT HIDDEN, -- Name of table into which to log xBestIndex
**    );
**
** ## COMPILING AND RUNNING
**
** This file can also be compiled separately as a loadable extension
** for SQLite (as long as the -DTH3_VERSION is not defined).  To compile as a
** loadable extension do his:
**
**    gcc -Wall -g -shared -fPIC -I. -DSQLITE_DEBUG vt02.c -o vt02.so
**
** Or on Windows:
**
**    cl vt02.c -link -dll -out:vt02.dll
**
** Then load into the CLI using:
**
**    .load ./vt02 sqlite3_vt02_init
**
** ## IDXNUM SUMMARY
**
** The xBestIndex method communicates the query plan to xFilter using
** the idxNum value, as follows:
**
**     0           unconstrained
**     1           X=argv[0]
**     2           A=argv[0]
**     3           A=argv[0], B=argv[1]
**     4           A=argv[0], B=argv[1], C=argv[2]
**     5           A=argv[0], B=argv[1], C=argv[2], D=argv[3]
**     6           A=argv[0], D IN argv[2]
**     7           A=argv[0], B=argv[2], D IN argv[3]
**     8           A=argv[0], B=argv[2], C=argv[3], D IN argv[4]
**    1x           increment by 10
**    2x           increment by 100
**    3x           increment by 1000
**   1xx           Use offset provided by argv[N]
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TH3_VERSION</name></cpp:ifndef>
  <comment type="block">/* These bits for separate compilation as a loadable extension, only */</comment>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
  <macro><name>SQLITE_EXTENSION_INIT1</name></macro>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Forward declarations */</comment>
<typedef>typedef <type><name><name>struct</name> <name>vt02_vtab</name></name></type> <name>vt02_vtab</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vt02_cur</name></name></type> <name>vt02_cur</name>;</typedef>

<comment type="block">/*
** The complete virtual table
*/</comment>
<struct>struct <name>vt02_vtab</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>parent</name></decl>;</decl_stmt>        <comment type="block">/* Base clase.  Must be first. */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                <comment type="block">/* Database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>busy</name></decl>;</decl_stmt>                   <comment type="block">/* Currently running xBestIndex */</comment>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_IGNORE_USABLE</name></cpp:macro>  <cpp:value>0x0001</cpp:value></cpp:define>  <comment type="block">/* Ignore usable flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_NO_SORT_OPT</name></cpp:macro>    <cpp:value>0x0002</cpp:value></cpp:define>  <comment type="block">/* Do not do any sorting optimizations */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_NO_OFFSET</name></cpp:macro>      <cpp:value>0x0004</cpp:value></cpp:define>  <comment type="block">/* Omit the offset optimization */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_ALLOC_IDXSTR</name></cpp:macro>   <cpp:value>0x0008</cpp:value></cpp:define>  <comment type="block">/* Alloate an idxStr */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_BAD_IDXNUM</name></cpp:macro>     <cpp:value>0x0010</cpp:value></cpp:define>  <comment type="block">/* Generate an invalid idxNum */</comment>

<comment type="block">/*
** A cursor
*/</comment>
<struct>struct <name>vt02_cur</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>parent</name></decl>;</decl_stmt> <comment type="block">/* Base class.  Must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>i</name></decl>;</decl_stmt>            <comment type="block">/* Current entry */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iEof</name></decl>;</decl_stmt>         <comment type="block">/* Indicate EOF when reaching this value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iIncr</name></decl>;</decl_stmt>                  <comment type="block">/* Amount by which to increment */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mD</name></decl>;</decl_stmt>            <comment type="block">/* Mask of allowed D-column values */</comment>
}</block>;</struct>

<comment type="block">/* The xConnect method */</comment>
<function><type><name>int</name></type> <name>vt02Connect</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                <comment type="block">/* The database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,                 <comment type="block">/* Pointer to an alternative schema */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                   <comment type="block">/* Number of arguments */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,     <comment type="block">/* Text of the arguments */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVTab</name></decl></parameter>,      <comment type="block">/* Write the new vtab here */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                <comment type="block">/* Error message written here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vt02_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSchema</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pAux</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zDefaultSchema</name><index>[]</index></name> <init>= 
    <expr><literal type="string">"CREATE TABLE x(x INT, a INT, b INT, c INT, d INT,"</literal>
    <literal type="string">" flags INT HIDDEN, logtab TEXT HIDDEN);"</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_COL_X</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_COL_A</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_COL_B</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_COL_C</name></cpp:macro>       <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_COL_D</name></cpp:macro>       <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_COL_FLAGS</name></cpp:macro>   <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_COL_LOGTAB</name></cpp:macro>  <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT02_COL_NONE</name></cpp:macro>    <cpp:value>7</cpp:value></cpp:define>

  <expr_stmt><expr><name>pVtab</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pVtab</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pVtab</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pVtab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVtab</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_declare_vtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><ternary><condition><expr><name>zSchema</name></expr> ?</condition><then> <expr><name>zSchema</name></expr> </then><else>: <expr><name>zDefaultSchema</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppVTab</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVtab</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* the xDisconnect method
*/</comment>
<function><type><name>int</name></type> <name>vt02Disconnect</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Put an error message into the zErrMsg string of the virtual table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vt02ErrMsg</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>zErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVtab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Open a cursor for scanning
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vt02Open</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vt02_cur</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pCur</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCur</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCur</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>vt02ErrMsg</name><argument_list>(<argument><expr><name>pVTab</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Close a cursor
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vt02Close</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vt02_cur</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vt02_cur</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return TRUE if we are at the end of the BVS and there are
** no more entries.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vt02Eof</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vt02_cur</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vt02_cur</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>&gt;=</operator><name><name>pCur</name><operator>-&gt;</operator><name>iEof</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Advance the cursor to the next row in the table
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vt02Next</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vt02_cur</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vt02_cur</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <do>do<block>{<block_content>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>iIncr</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>iEof</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block>while<condition>( <expr><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>mD</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>%</operator><literal type="number">10</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>&lt;</operator><name><name>pCur</name><operator>-&gt;</operator><name>iEof</name></name></expr> )</condition>;</do>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Rewind a cursor back to the beginning of its scan.
**
** Scanning is always increasing.
**
**   idxNum
**     0           unconstrained
**     1           X=argv[0]
**     2           A=argv[0]
**     3           A=argv[0], B=argv[1]
**     4           A=argv[0], B=argv[1], C=argv[2]
**     5           A=argv[0], B=argv[1], C=argv[2], D=argv[3]
**     6           A=argv[0], D IN argv[2]
**     7           A=argv[0], B=argv[2], D IN argv[3]
**     8           A=argv[0], B=argv[2], C=argv[3], D IN argv[4]
**    1x           increment by 10
**    2x           increment by 100
**    3x           increment by 1000
**   1xx           Use offset provided by argv[N]
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vt02Filter</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, <comment type="block">/* The cursor to rewind */</comment>
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>,                   <comment type="block">/* Search strategy */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idxStr</name></decl></parameter>,           <comment type="block">/* Not used */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                     <comment type="block">/* Not used */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>          <comment type="block">/* Not used */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vt02_cur</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vt02_cur</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt> <comment type="block">/* The vt02 cursor */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bUseOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* True to use OFFSET value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                        <comment type="block">/* argv[] values used so far */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOrigIdxNum</name> <init>= <expr><name>idxNum</name></expr></init></decl>;</decl_stmt>            <comment type="block">/* Original value for idxNum */</comment>

  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iIncr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>mD</name></name> <operator>=</operator> <literal type="number">0x3ff</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>idxNum</name><operator>&gt;=</operator><literal type="number">100</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>bUseOffset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>idxNum</name> <operator>-=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>idxNum</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>idxNum</name></expr></argument>&gt;</argument_list></name><literal type="number">38</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>vt02_bad_idxnum</name>;</goto></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><name>idxNum</name><operator>&gt;=</operator><literal type="number">10</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iIncr</name></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>idxNum</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>idxNum</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iEof</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>idxNum</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>&gt;</operator><literal type="number">9999</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iEof</name></name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>&gt;</operator><literal type="number">9999</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>iEof</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>idxNum</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>idxNum</name><operator>&lt;=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <name>idxNum</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>e</name><operator>&lt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>m</name><operator>=</operator><literal type="number">1000</literal></expr><operator>,</operator> <expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>e</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>m</name> <operator>/=</operator> <literal type="number">10</literal></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name> <init>= <expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>iArg</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>v</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;</operator><literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <name>m</name><operator>*</operator><name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iEof</name></name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>+</operator><name>m</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>idxNum</name><operator>&gt;=</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>idxNum</name><operator>&lt;=</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pIn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <name>idxNum</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>e</name><operator>&lt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>m</name><operator>=</operator><literal type="number">1000</literal></expr><operator>,</operator> <expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>e</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>m</name> <operator>/=</operator> <literal type="number">10</literal></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_vtab_in_first</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_MISUSE</name>
       <operator>||</operator> <call><name>sqlite3_vtab_in_first</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_MISUSE</name></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>vt02ErrMsg</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></argument>, 
                <argument><expr><literal type="string">"unexpected success from sqlite3_vtab_in_first()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>iArg</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>v</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;</operator><literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name> <operator>+=</operator> <name>m</name><operator>*</operator><name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iEof</name></name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>+</operator><name>m</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>mD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIn</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>iArg</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_vtab_in_first</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>pVal</name><operator>!=</operator><literal type="number">0</literal></expr>;</condition>
         <incr><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_vtab_in_next</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call></expr></incr>
    )</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><call><name>sqlite3_value_numeric_type</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>SQLITE_FLOAT</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>sqlite3_value_double</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>r</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0.0</literal> <operator>||</operator> <name>r</name></expr></argument>&gt;</argument_list></name><literal type="number">9.0</literal> <operator>||</operator> <name>r</name><operator>!=</operator><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eType</name><operator>!=</operator><name>SQLITE_INTEGER</name></expr> )</condition><block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i</name></expr></argument>&gt;</argument_list></name><literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>mD</name></name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>!=</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>vt02ErrMsg</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></argument>, <argument><expr><literal type="string">"Error from sqlite3_vtab_in_first/next()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <goto>goto <name>vt02_bad_idxnum</name>;</goto>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>bUseOffset</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nSkip</name> <init>= <expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>nSkip</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vt02Next</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>

<label><name>vt02_bad_idxnum</name>:</label>
  <expr_stmt><expr><call><name>vt02ErrMsg</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></argument>, <argument><expr><literal type="string">"invalid idxNum for vt02: %d"</literal></expr></argument>, <argument><expr><name>iOrigIdxNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the Nth column of the current row.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vt02Column</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vt02_cur</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vt02_cur</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>pCur</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>N</name><operator>==</operator><name>VT02_COL_X</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>N</name><operator>&gt;=</operator><name>VT02_COL_A</name> <operator>&amp;&amp;</operator> <name>N</name><operator>&lt;=</operator><name>VT02_COL_D</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>iDivisor</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>/</operator><name><name>iDivisor</name><index>[<expr><name>N</name></expr>]</index></name><operator>)</operator><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the rowid of the current row
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vt02Rowid</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vt02_cur</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vt02_cur</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>i</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************
** Logging Subsystem
**
** The sqlite3BestIndexLog() routine implements a logging system for
** xBestIndex calls.  This code is portable to any virtual table.
**
** sqlite3BestIndexLog() is the main routine,  sqlite3RunSql() is a
** helper routine used for running various SQL statements as part of
** creating the log.
**
** These two routines should be portable to other virtual tables.  Simply
** extract this code and call sqlite3BestIndexLog() near the end of the
** xBestIndex method in cases where logging is desired.
*/</comment>
<comment type="block">/*
** Run SQL on behalf of sqlite3BestIndexLog.
**
** Construct the SQL using the zFormat string and subsequent arguments.
** Or if zFormat is NULL, take the SQL as the first argument after the
** zFormat.  In either case, the dynamically allocated SQL string is
** freed after it has been run.  If something goes wrong with the SQL,
** then an error is left in pVTab-&gt;zErrMsg.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3RunSql</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,               <comment type="block">/* Run the SQL on this database connection */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>,       <comment type="block">/* Report errors to this virtual table */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,       <comment type="block">/* Format string for SQL, or NULL */</comment>
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>                        <comment type="block">/* Arguments, according to the format string */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zFormat</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zErrMsg</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s in [%s]"</literal></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Record information about each xBestIndex method call in a separate
** table:
**
**   CREATE TEMP TABLE [log-table-name] (
**     bi INT,      -- BestIndex call number
**     vn TEXT,     -- Variable Name
**     ix INT,      -- Index or value
**     cn TEXT,     -- Column Name
**     op INT,      -- Opcode or argvIndex
**     ux INT,      -- "usable" or "omit" flag
**     rx BOOLEAN,  -- True if has a RHS value
**     rhs ANY,     -- The RHS value
**     cs TEXT,     -- Collating Sequence
**     inop BOOLEAN -- True if this is a batchable IN operator
**  );
**
** If an error occurs, leave an error message in pVTab-&gt;zErrMsg.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3BestIndexLog</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>,  <comment type="block">/* The sqlite3_index_info object */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLogTab</name></decl></parameter>,        <comment type="block">/* Log into this table */</comment>
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                <comment type="block">/* Database connection containing zLogTab */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azColname</name></decl></parameter>,     <comment type="block">/* Names of columns in the virtual table */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>         <comment type="block">/* Record errors into this object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_str</name> <modifier>*</modifier></type><name>pStr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iBI</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_table_column_metadata</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>zLogTab</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <comment type="block">/* The log table does not previously exist.  Create it. */</comment>
    <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>, 
      <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS temp.\"%w\"(\n"</literal>
      <literal type="string">" bi INT,          -- BestIndex call number\n"</literal>
      <literal type="string">" vn TEXT,         -- Variable Name\n"</literal>
      <literal type="string">" ix INT,          -- Index or value\n"</literal>
      <literal type="string">" cn TEXT,         -- Column Name\n"</literal>
      <literal type="string">" op INT,          -- Opcode or argvIndex\n"</literal>
      <literal type="string">" ux INT,          -- usable for omit flag\n"</literal>
      <literal type="string">" rx BOOLEAN,      -- Right-hand side value is available\n"</literal>
      <literal type="string">" rhs ANY,         -- RHS value\n"</literal>
      <literal type="string">" cs TEXT,         -- Collating Sequence\n"</literal>
      <literal type="string">" inop BOOLEAN     -- IN operator capable of batch reads\n"</literal>
      <literal type="string">");"</literal></expr></argument>, <argument><expr><name>zLogTab</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iBI</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* The log table does already exist.  We assume that it has the
    ** correct schema and proceed to find the largest prior "bi" value.
    ** If the schema is wrong, errors might result.  The code is able
    ** to deal with this. */</comment>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT max(bi) FROM temp.\"%w\""</literal></expr></argument>,<argument><expr><name>zLogTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iBI</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iBI</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iBI</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
    <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix) VALUES(%d,'nConstraint',%d)"</literal></expr></argument>,
    <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_LIMIT</name>
     <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_OFFSET</name></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>zCol</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iCol</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zCol</name> <operator>=</operator> <literal type="string">"rowid"</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zCol</name> <operator>=</operator> <name><name>azColname</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>pStr</name> <operator>=</operator> <call><name>sqlite3_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>,
       <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix,cn,op,ux,rx,rhs,cs,inop)"</literal>
       <literal type="string">"VALUES(%d,'aConstraint',%d,%Q,%d,%d"</literal></expr></argument>,
       <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>,
       <argument><expr><name>i</name></expr></argument>,
       <argument><expr><name>zCol</name></expr></argument>,
       <argument><expr><name>op</name></expr></argument>,
       <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>usable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_vtab_rhs_value</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pVal</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>,<argument><expr><literal type="string">",1,?1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>,<argument><expr><literal type="string">",0,NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>,<argument><expr><literal type="string">",%Q,%d)"</literal></expr></argument>,
         <argument><expr><call><name>sqlite3_vtab_collation</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>sqlite3_vtab_in</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_str_finish</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>pVal</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>&amp;&amp;</operator> <name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
    <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix) VALUES(%d,'nOrderBy',%d)"</literal></expr></argument>,
    <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
      <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix,cn,op)VALUES(%d,'aOrderBy',%d,%Q,%d)"</literal></expr></argument>,
      <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>,
      <argument><expr><name>i</name></expr></argument>,
      <argument><expr><ternary><condition><expr><name>iCol</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>azColname</name><index>[<expr><name>iCol</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"rowid"</literal></expr></else></ternary></expr></argument>,
      <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
    <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix) VALUES(%d,'sqlite3_vtab_distinct',%d)"</literal></expr></argument>,
    <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><call><name>sqlite3_vtab_distinct</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
    <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix) VALUES(%d,'colUsed',%lld)"</literal></expr></argument>,
    <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colUsed</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_LIMIT</name>
     <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_OFFSET</name></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>zCol</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iCol</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zCol</name> <operator>=</operator> <literal type="string">"rowid"</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zCol</name> <operator>=</operator> <name><name>azColname</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
       <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix,cn,op,ux)"</literal>
       <literal type="string">"VALUES(%d,'aConstraintUsage',%d,%Q,%d,%d)"</literal></expr></argument>,
       <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>,
       <argument><expr><name>i</name></expr></argument>,
       <argument><expr><name>zCol</name></expr></argument>,
       <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argvIndex</name></expr></argument>,
       <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>omit</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
    <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix)VALUES(%d,'idxNum',%d)"</literal></expr></argument>,
    <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
    <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix)VALUES(%d,'estimatedCost',%f)"</literal></expr></argument>,
    <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
    <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix)VALUES(%d,'estimatedRows',%lld)"</literal></expr></argument>,
    <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedRows</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxStr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
      <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix)VALUES(%d,'idxStr',%Q)"</literal></expr></argument>,
      <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxStr</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
      <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix)VALUES(%d,'needToFreeIdxStr',%d)"</literal></expr></argument>,
      <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>needToFreeIdxStr</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3RunSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pVTab</name></expr></argument>,
      <argument><expr><literal type="string">"INSERT INTO temp.\"%w\"(bi,vn,ix)VALUES(%d,'orderByConsumed',%d)"</literal></expr></argument>,
      <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>iBI</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
** End of Logging Subsystem
*****************************************************************************/</comment>


<comment type="block">/* Find an estimated cost of running a query against vt02.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vt02BestIndex</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                      <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>isEq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>                <comment type="block">/* Equality constraints on X, A, B, C, and D */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>isUsed</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>              <comment type="block">/* Other non-== cosntraints X, A, B, C, and D */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>argvIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Next available argv[] slot */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOffset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Constraint for OFFSET */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* idxStr value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* RHS value for flags= */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLogTab</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* RHS value for logtab= */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iFlagTerm</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Constraint term for flags= */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLogTerm</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Constraint term for logtab= */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iIn</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Index of the IN constraint */</comment>
  <decl_stmt><decl><type><name>vt02_vtab</name> <modifier>*</modifier></type><name>pSelf</name></decl>;</decl_stmt>           <comment type="block">/* This virtual table */</comment>

  <expr_stmt><expr><name>pSelf</name> <operator>=</operator> <operator>(</operator><name>vt02_vtab</name><operator>*</operator><operator>)</operator><name>pVTab</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pSelf</name><operator>-&gt;</operator><name>busy</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>vt02ErrMsg</name><argument_list>(<argument><expr><name>pVTab</name></expr></argument>, <argument><expr><literal type="string">"recursive use  of vt02 prohibited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_CONSTRAINT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSelf</name><operator>-&gt;</operator><name>busy</name></name><operator>++</operator></expr>;</expr_stmt>
 

  <comment type="block">/* Do an initial scan for flags=N and logtab=TAB constraints with
  ** usable RHS values */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>usable</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name><operator>!=</operator><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <switch>switch<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>VT02_COL_FLAGS</name></expr>:</case>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3_vtab_rhs_value</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name>
         <operator>&amp;&amp;</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_INTEGER</name></expr>
        )</condition><block>{<block_content>
          <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>iFlagTerm</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>VT02_COL_LOGTAB</name></expr>:</case>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3_vtab_rhs_value</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name>
         <operator>&amp;&amp;</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_TEXT</name></expr>
        )</condition><block>{<block_content>
          <expr_stmt><expr><name>zLogTab</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>iLogTerm</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <comment type="block">/* Do a second scan to actually analyze the index information */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>isEq</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isEq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>isUsed</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isUsed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;=</operator><name>VT02_COL_FLAGS</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>usable</name><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VT02_IGNORE_USABLE</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>VT02_COL_X</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <switch>switch<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>SQLITE_INDEX_CONSTRAINT_FUNCTION</name></expr>:</case>
      <case>case <expr><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr>:</case>
        <expr_stmt><expr><name><name>isEq</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SQLITE_INDEX_CONSTRAINT_LT</name></expr>:</case>
      <case>case <expr><name>SQLITE_INDEX_CONSTRAINT_LE</name></expr>:</case>
      <case>case <expr><name>SQLITE_INDEX_CONSTRAINT_GT</name></expr>:</case>
      <case>case <expr><name>SQLITE_INDEX_CONSTRAINT_GE</name></expr>:</case>
        <expr_stmt><expr><name><name>isUsed</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SQLITE_INDEX_CONSTRAINT_OFFSET</name></expr>:</case>
        <expr_stmt><expr><name>iOffset</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <comment type="block">/* Use the analysis to find an appropriate query plan */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>isEq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* A constraint of X= takes priority */</comment>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name><name>isEq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>argvIndex</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name><name>isEq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>isEq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* If there is no X= nor A= then we have to do a full scan */</comment>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name><name>isEq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>argvIndex</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name><name>isEq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>isEq</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3_vtab_in</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>isEq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name><name>isEq</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>argvIndex</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name><name>isEq</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>v</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>isEq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3_vtab_in</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>,<argument><expr><name><name>isEq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iIn</name> <operator>=</operator> <name><name>isEq</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iIn</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>argvIndex</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iIn</name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>v</name> <operator>/=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedRows</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name></expr>;</expr_stmt>

  <comment type="block">/* Attempt to consume the ORDER BY clause.  Except, always leave
  ** orderByConsumed set to 0 for vt02_no_sort_opt.  In this way,
  ** we can compare vt02 and vt02_no_sort_opt to ensure they get
  ** the same answer.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VT02_NO_SORT_OPT</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* There will only be one row of output.  So it is always sorted. */</comment>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>&lt;=</operator><literal type="number">0</literal> 
     <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name><operator>==</operator><literal type="number">0</literal></expr>
    )</condition><block>{<block_content>
      <comment type="block">/* First column of order by is X ascending */</comment>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><call><name>sqlite3_vtab_distinct</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>x</name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>iCol</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_vtab_distinct</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0x02</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* DISTINCT A */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>+=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0x06</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* DISTINCT A,B */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0x0e</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* DISTINCT A,B,C */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* DISTINCT X */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0x1e</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* DISTINCT A,B,C,D */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0x02</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* GROUP BY A */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0x06</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* GROUP BY A,B */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0x0e</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* GROUP BY A,B,C */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* GROUP BY X */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0x1e</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* GROUP BY A,B,C,D */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>VT02_ALLOC_IDXSTR</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxStr</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>needToFreeIdxStr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>VT02_BAD_IDXNUM</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iOffset</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iOffset</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>argvIndex</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VT02_NO_OFFSET</name><operator>)</operator><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iOffset</name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>


  <comment type="block">/* Always omit flags= and logtab= constraints to prevent them from
  ** interfering with the bytecode.  Put them at the end of the argv[]
  ** array to keep them out of the way.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>iFlagTerm</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iFlagTerm</name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iFlagTerm</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>argvIndex</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iLogTerm</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iLogTerm</name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iLogTerm</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>argvIndex</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* The 0x40 flag means add all usable constraints to the output set */</comment>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>usable</name>
       <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argvIndex</name><operator>==</operator><literal type="number">0</literal></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>argvIndex</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content>  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>


  <comment type="block">/* Generate the log if requested */</comment>
  <if_stmt><if>if<condition>( <expr><name>zLogTab</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azColname</name><index>[]</index></name> <init>= <expr><block>{
       <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"logtab"</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>(</operator><operator>(</operator><name>vt02_vtab</name><operator>*</operator><operator>)</operator><name>pVTab</name><operator>)</operator><operator>-&gt;</operator><name>db</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3BestIndexLog</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>zLogTab</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>azColname</name></expr></argument>, <argument><expr><name>pVTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSelf</name><operator>-&gt;</operator><name>busy</name></name><operator>--</operator></expr>;</expr_stmt>

  <comment type="block">/* Try to do a memory allocation solely for the purpose of causing
  ** an error under OOM testing loops */</comment>
  <expr_stmt><expr><name>pX</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><literal type="number">800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pX</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>!=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>SQLITE_ERROR</name></expr> </then><else>: <expr><name>SQLITE_OK</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is the sqlite3_module definition for the the virtual table defined
** by this include file.
*/</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>sqlite3_module</name></type> <name>vt02Module</name> <init>= <expr><block>{
  <comment type="block">/* iVersion      */</comment>  <expr><literal type="number">2</literal></expr>,
  <comment type="block">/* xCreate       */</comment>  <expr><literal type="number">0</literal></expr>,   <comment type="block">/* This is an eponymous table */</comment>
  <comment type="block">/* xConnect      */</comment>  <expr><name>vt02Connect</name></expr>,
  <comment type="block">/* xBestIndex    */</comment>  <expr><name>vt02BestIndex</name></expr>,
  <comment type="block">/* xDisconnect   */</comment>  <expr><name>vt02Disconnect</name></expr>,
  <comment type="block">/* xDestroy      */</comment>  <expr><name>vt02Disconnect</name></expr>,
  <comment type="block">/* xOpen         */</comment>  <expr><name>vt02Open</name></expr>,
  <comment type="block">/* xClose        */</comment>  <expr><name>vt02Close</name></expr>,
  <comment type="block">/* xFilter       */</comment>  <expr><name>vt02Filter</name></expr>,
  <comment type="block">/* xNext         */</comment>  <expr><name>vt02Next</name></expr>,
  <comment type="block">/* xEof          */</comment>  <expr><name>vt02Eof</name></expr>,
  <comment type="block">/* xColumn       */</comment>  <expr><name>vt02Column</name></expr>,
  <comment type="block">/* xRowid        */</comment>  <expr><name>vt02Rowid</name></expr>,
  <comment type="block">/* xUpdate       */</comment>  <expr><literal type="number">0</literal></expr>,
  <comment type="block">/* xBegin        */</comment>  <expr><literal type="number">0</literal></expr>, 
  <comment type="block">/* xSync         */</comment>  <expr><literal type="number">0</literal></expr>,
  <comment type="block">/* xCommit       */</comment>  <expr><literal type="number">0</literal></expr>, 
  <comment type="block">/* xRollback     */</comment>  <expr><literal type="number">0</literal></expr>,
  <comment type="block">/* xFindFunction */</comment>  <expr><literal type="number">0</literal></expr>,
  <comment type="block">/* xRename       */</comment>  <expr><literal type="number">0</literal></expr>,
  <comment type="block">/* xSavepoint    */</comment>  <expr><literal type="number">0</literal></expr>,
  <comment type="block">/* xRelease      */</comment>  <expr><literal type="number">0</literal></expr>,
  <comment type="block">/* xRollbackTo   */</comment>  <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vt02CoreInit</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zPkXSchema</name><index>[]</index></name> <init>= 
    <expr><literal type="string">"CREATE TABLE x(x INT NOT NULL PRIMARY KEY, a INT, b INT, c INT, d INT,"</literal>
    <literal type="string">" flags INT HIDDEN, logtab TEXT HIDDEN);"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zPkABCDSchema</name><index>[]</index></name> <init>= 
    <expr><literal type="string">"CREATE TABLE x(x INT, a INT NOT NULL, b INT NOT NULL, c INT NOT NULL, "</literal>
    <literal type="string">"d INT NOT NULL, flags INT HIDDEN, logtab TEXT HIDDEN, "</literal>
    <literal type="string">"PRIMARY KEY(a,b,c,d));"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"vt02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vt02Module</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"vt02pkx"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vt02Module</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>zPkXSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"vt02pkabcd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vt02Module</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>zPkABCDSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TH3_VERSION</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vt02_init</name><parameter_list>(<parameter><decl><type><name>th3state</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>vt02CoreInit</name><argument_list>(<argument><expr><call><name>th3dbPointer</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_vt02_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vt02CoreInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TH3_VERSION */</comment>
</unit>
