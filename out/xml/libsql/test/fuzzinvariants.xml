<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/test/fuzzinvariants.c"><comment type="block">/*
** 2022-06-14
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This library is used by fuzzcheck to test query invariants.
**
** An sqlite3_stmt is passed in that has just returned SQLITE_ROW.  This
** routine does:
**
**     *   Record the output of the current row
**     *   Construct an alternative query that should return the same row
**     *   Run the alternative query and verify that it does in fact return
**         the same row
**
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Forward references */</comment>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fuzz_invariant_sql</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sameValue</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>reportInvariantFailed</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Do an invariant check on pStmt.  iCnt determines which invariant check to
** perform.  The first check is iCnt==0.
**
** *pbCorrupt is a flag that, if true, indicates that the database file
** is known to be corrupt.  A value of non-zero means "yes, the database
** is corrupt".  A zero value means "we do not know whether or not the
** database is corrupt".  The value might be set prior to entry, or this
** routine might set the value.
**
** Return values:
**
**     SQLITE_OK          This check was successful.
**
**     SQLITE_DONE        iCnt is out of range.  The caller typically sets
**                        up a loop on iCnt starting with zero, and increments
**                        iCnt until this code is returned.
**
**     SQLITE_CORRUPT     The invariant failed, but the underlying database
**                        file is indicating that it is corrupt, which might
**                        be the cause of the malfunction.  The *pCorrupt
**                        value will also be set.
**
**     SQLITE_INTERNAL    The invariant failed, and the database file is not
**                        corrupt.  (This never happens because this function
**                        will call abort() following an invariant failure.)
**
**     (other)            Some other kind of error occurred.
*/</comment>
<function><type><name>int</name></type> <name>fuzz_invariant</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,            <comment type="block">/* The database connection */</comment>
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>,    <comment type="block">/* Test statement stopped on an SQLITE_ROW */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCnt</name></decl></parameter>,               <comment type="block">/* Invariant sequence number, starting at 0 */</comment>
  <parameter><decl><type><name>int</name></type> <name>iRow</name></decl></parameter>,               <comment type="block">/* Current row number */</comment>
  <parameter><decl><type><name>int</name></type> <name>nRow</name></decl></parameter>,               <comment type="block">/* Number of output rows from pStmt */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbCorrupt</name></decl></parameter>,         <comment type="block">/* IN/OUT: Flag indicating a corrupt database file */</comment>
  <parameter><decl><type><name>int</name></type> <name>eVerbosity</name></decl></parameter>          <comment type="block">/* How much debugging output */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pTestStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nParam</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pbCorrupt</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_DONE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>nParam</name> <operator>=</operator> <call><name>sqlite3_bind_parameter_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nParam</name><operator>&gt;</operator><literal type="number">100</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_DONE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>zTest</name> <operator>=</operator> <call><name>fuzz_invariant_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>iCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zTest</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_DONE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zTest</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTestStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>eVerbosity</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"invariant compile failed: %s\n%s\n"</literal></expr></argument>,
             <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nCol</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>nParam</name></expr></argument>,<argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>!=</operator><name>SQLITE_RANGE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>eVerbosity</name><operator>&gt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_expanded_sql</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"invariant-sql #%d:\n%s\n"</literal></expr></argument>, <argument><expr><name>iCnt</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sameValue</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pTestStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>nCol</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* No matching output row found */</comment>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pCk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* This is not a fault if the database file is corrupt, because anything
    ** can happen with a corrupt database file */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA integrity_check"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name>
     <operator>||</operator> <call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
     <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pbCorrupt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_CORRUPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strlike</name><argument_list>(<argument><expr><literal type="string">"%group%by%order%by%desc%"</literal></expr></argument>,<argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* dbsqlfuzz crash-647c162051c9b23ce091b7bbbe5125ce5f00e922
      ** Original statement is:
      **
      **    SELECT a,c,d,b,'' FROM t1 GROUP BY 1 HAVING d&lt;&gt;345 ORDER BY a DESC;
      **
      ** The values of c, d, and b are indeterminate and change when the
      ** enclosed in the test query because the DESC is dropped.
      **
      **    SELECT * FROM (...) WHERE "a"==0
      */</comment>
      <goto>goto <name>not_a_fault</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strlike</name><argument_list>(<argument><expr><literal type="string">"%limit%)%order%by%"</literal></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* crash-89bd6a6f8c6166e9a4c5f47b3e70b225f69b76c6
      ** Original statement is:
      **
      **    SELECT a,b,c* FROM t1 LIMIT 1%5&lt;4
      **
      ** When running:
      **
      **    SELECT * FROM (...) ORDER BY 1
      **
      ** A different subset of the rows come out
      */</comment>
      <goto>goto <name>not_a_fault</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* The original sameValue() comparison assumed a collating sequence
    ** of "binary".  It can sometimes get an incorrect result for different
    ** collating sequences.  So rerun the test with no assumptions about
    ** collations.
    */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>,
       <argument><expr><literal type="string">"SELECT ?1=?2 OR ?1=?2 COLLATE nocase OR ?1=?2 COLLATE rtrim"</literal></expr></argument>,
       <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while<condition>( <expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sameValue</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pTestStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>nCol</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>not_a_fault</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Invariants do not necessarily work if there are virtual tables
    ** involved in the query */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
            <argument><expr><literal type="string">"SELECT 1 FROM bytecode(?1) WHERE opcode='VOpen'"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_pointer</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="string">"stmt-pointer"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pCk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>reportInvariantFailed</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pTestStmt</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_INTERNAL</name></expr>;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eVerbosity</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"invariant-error ignored due to the use of virtual tables\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>not_a_fault</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pTestStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Generate SQL used to test a statement invariant.
**
** Return 0 if the iCnt is out of range.
**
** iCnt meanings:
**
**   0     SELECT * FROM (&lt;query&gt;)
**   1     SELECT DISTINCT * FROM (&lt;query&gt;)
**   2     SELECT * FROM (&lt;query&gt;) WHERE ORDER BY 1
**   3     SELECT DISTINCT * FROM (&lt;query&gt;) ORDER BY 1
**   4     SELECT * FROM (&lt;query&gt;) WHERE &lt;all-columns&gt;=&lt;all-values&gt;
**   5     SELECT DISTINCT * FROM (&lt;query&gt;) WHERE &lt;all-columns=&lt;all-values
**   6     SELECT * FROM (&lt;query&gt;) WHERE &lt;all-column&gt;=&lt;all-value&gt; ORDER BY 1
**   7     SELECT DISTINCT * FROM (&lt;query&gt;) WHERE &lt;all-column&gt;=&lt;all-value&gt;
**                           ORDER BY 1
**   N+0   SELECT * FROM (&lt;query&gt;) WHERE &lt;nth-column&gt;=&lt;value&gt;
**   N+1   SELECT DISTINCT * FROM (&lt;query&gt;) WHERE &lt;Nth-column&gt;=&lt;value&gt;
**   N+2   SELECT * FROM (&lt;query&gt;) WHERE &lt;Nth-column&gt;=&lt;value&gt; ORDER BY 1
**   N+3   SELECT DISTINCT * FROM (&lt;query&gt;) WHERE &lt;Nth-column&gt;=&lt;value&gt;
**                           ORDER BY N
**
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fuzz_invariant_sql</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCnt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nIn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zAnd</name> <init>= <expr><literal type="string">"WHERE"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_str</name> <modifier>*</modifier></type><name>pTest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pBase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_db_handle</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mxCnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bDistinct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bOrderBy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nParam</name> <init>= <expr><call><name>sqlite3_bind_parameter_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <switch>switch<condition>( <expr><name>iCnt</name> <operator>%</operator> <literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><name>bDistinct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>              <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>bOrderBy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>               <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><name>bDistinct</name> <operator>=</operator> <name>bOrderBy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>   <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><name>iCnt</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>mxCnt</name> <operator>=</operator> <name>nCol</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>iCnt</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>iCnt</name></expr></argument>&gt;</argument_list></name><name>mxCnt</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>zIn</name> <operator>=</operator> <call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zIn</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>nIn</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>nIn</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><name>nIn</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>zIn</name><index>[<expr><name>nIn</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">';'</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nIn</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
  <if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pTest</name> <operator>=</operator> <call><name>sqlite3_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>, <argument><expr><literal type="string">"SELECT %s* FROM ("</literal></expr></argument>,  
                      <argument><expr><ternary><condition><expr><name>bDistinct</name></expr> ?</condition><then> <expr><literal type="string">"DISTINCT "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>, <argument><expr><name>zIn</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3_str_value</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBase</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pBase</name> <operator>=</operator> <name>pStmt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zColName</name> <init>= <expr><call><name>sqlite3_column_name</name><argument_list>(<argument><expr><name>pBase</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSuffix</name> <init>= <expr><ternary><condition><expr><name>zColName</name></expr> ?</condition><then> <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>zColName</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zSuffix</name> 
     <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>zSuffix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zSuffix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><literal type="char">'3'</literal> <operator>||</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>zSuffix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <comment type="block">/* This is a randomized column name and so cannot be used in the
      ** WHERE clause. */</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iCnt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iCnt</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>+</operator><literal type="number">2</literal><operator>!=</operator><name>iCnt</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>zColName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>, <argument><expr><literal type="string">" %s \"%w\" ISNULL"</literal></expr></argument>, <argument><expr><name>zAnd</name></expr></argument>, <argument><expr><name>zColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>, <argument><expr><literal type="string">" %s \"%w\"=?%d"</literal></expr></argument>, <argument><expr><name>zAnd</name></expr></argument>, <argument><expr><name>zColName</name></expr></argument>, 
                          <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>nParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>zAnd</name> <operator>=</operator> <literal type="string">"AND"</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>pBase</name><operator>!=</operator><name>pStmt</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>bOrderBy</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>, <argument><expr><literal type="string">" ORDER BY %d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>iCnt</name><operator>&gt;</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><name>iCnt</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3_str_finish</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if and only if v1 and is the same as v2.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sameValue</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pS1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i1</name></decl></parameter>,       <comment type="block">/* Value to text on the left */</comment>
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pS2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i2</name></decl></parameter>,       <comment type="block">/* Value to test on the right */</comment>
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pTestCompare</name></decl></parameter>       <comment type="block">/* COLLATE comparison statement or NULL */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>t1</name><operator>!=</operator><name>t2</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>t1</name><operator>==</operator><name>SQLITE_INTEGER</name> <operator>&amp;&amp;</operator> <name>t2</name><operator>==</operator><name>SQLITE_FLOAT</name><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>t1</name><operator>==</operator><name>SQLITE_FLOAT</name> <operator>&amp;&amp;</operator> <name>t2</name><operator>==</operator><name>SQLITE_INTEGER</name><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <comment type="block">/* Comparison of numerics is ok */</comment>
    </block_content>}</block></if><else>else<block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <switch>switch<condition>( <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_INTEGER</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>x</name> <operator>=</operator>  <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>SQLITE_FLOAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>SQLITE_TEXT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>e1</name> <init>= <expr><call><name>sqlite3_value_encoding</name><argument_list>(<argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>e2</name> <init>= <expr><call><name>sqlite3_value_encoding</name><argument_list>(<argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>e1</name><operator>!=</operator><name>e2</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>z1</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>z2</name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>z1</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>z2</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z1</name></expr></argument>,<argument><expr><name>z1</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Encodings differ.  %d on left and %d on right\n"</literal></expr></argument>, <argument><expr><name>e1</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>pTestCompare</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pTestCompare</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pTestCompare</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pTestCompare</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name>
                      <operator>&amp;&amp;</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pTestCompare</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pTestCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>e1</name><operator>!=</operator><name>SQLITE_UTF8</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>sqlite3_column_bytes16</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><call><name>sqlite3_column_bytes16</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>len1</name><operator>!=</operator><name>len2</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>len1</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>b1</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b2</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>b1</name></expr></argument>,<argument><expr><name>b2</name></expr></argument>,<argument><expr><name>len1</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Fall through into the SQLITE_BLOB case */</comment>
    </block_content>}</block>
    <case>case <expr><name>SQLITE_BLOB</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pS1</name></expr></argument>,<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pS2</name></expr></argument>,<argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>len1</name><operator>!=</operator><name>len2</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>len1</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>b1</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b2</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>b1</name></expr></argument>,<argument><expr><name>b2</name></expr></argument>,<argument><expr><name>len1</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Print binary data as hex
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printHex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>mx</name> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>j</name><operator>&lt;</operator><name>n</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Print a single row from the prepared statement
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printRow</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iRow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>nCol</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"row%d.col%d = "</literal></expr></argument>, <argument><expr><name>iRow</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>( <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <case>case <expr><name>SQLITE_NULL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>SQLITE_INTEGER</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(integer) %lld\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>SQLITE_FLOAT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(float) %f\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>SQLITE_TEXT</name></expr>:</case> <block>{<block_content>
        <switch>switch<condition>( <expr><call><name>sqlite3_value_encoding</name><argument_list>(<argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <case>case <expr><name>SQLITE_UTF8</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(utf8) x'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printHex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><name>SQLITE_UTF16BE</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(utf16be) x'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_column_bytes16</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printHex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><name>SQLITE_UTF16LE</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(utf16le) x'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_column_bytes16</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printHex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <default>default:</default> <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Illegal return from sqlite3_value_encoding(): %d\n"</literal></expr></argument>,
                <argument><expr><call><name>sqlite3_value_encoding</name><argument_list>(<argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block>
        </block_content>}</block></switch>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>SQLITE_BLOB</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(blob %d bytes) x'"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printHex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Report a failure of the invariant:  The current output row of pOrig
** does not appear in any row of the output from pTest.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>reportInvariantFailed</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pOrig</name></decl></parameter>,   <comment type="block">/* The original query */</comment>
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pTest</name></decl></parameter>,   <comment type="block">/* The alternative test query with a missing row */</comment>
  <parameter><decl><type><name>int</name></type> <name>iRow</name></decl></parameter>               <comment type="block">/* Row number in pOrig */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iTestRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invariant check failed on row %d.\n"</literal></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Original query --------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_expanded_sql</name><argument_list>(<argument><expr><name>pOrig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Alternative query -----------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_expanded_sql</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Result row that is missing from the alternative -----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printRow</name><argument_list>(<argument><expr><name>pOrig</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Complete results from the alternative query ---------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iTestRow</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printRow</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>, <argument><expr><name>iTestRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
