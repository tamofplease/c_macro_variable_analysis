<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/test/ossfuzz.c"><comment type="block">/*
** This module interfaces SQLite to the Google OSS-Fuzz, fuzzer as a service.
** (https://github.com/google/oss-fuzz)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uint8_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Global debugging settings.  OSS-Fuzz will have all debugging turned
** off.  But if LLVMFuzzerTestOneInput() is called interactively from
** the ossshell utility program, then these flags might be set.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>mDebug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUZZ_SQL_TRACE</name></cpp:macro>       <cpp:value>0x0001</cpp:value></cpp:define>   <comment type="block">/* Set an sqlite3_trace() callback */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUZZ_SHOW_MAX_DELAY</name></cpp:macro>  <cpp:value>0x0002</cpp:value></cpp:define>   <comment type="block">/* Show maximum progress callback delay */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUZZ_SHOW_ERRORS</name></cpp:macro>     <cpp:value>0x0004</cpp:value></cpp:define>   <comment type="block">/* Print error messages from SQLite */</comment>

<comment type="block">/* The ossshell utility program invokes this interface to see the
** debugging flags.  Unused by OSS-Fuzz.
*/</comment>
<function><type><name>void</name></type> <name>ossfuzz_set_debug_flags</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>mDebug</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return the current real-world time in milliseconds since the
** Julian epoch (-4714-11-24).
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_int64</name></type> <name>timeOfDay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name> <modifier>*</modifier></type><name>clockVfs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>t</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>clockVfs</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>clockVfs</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>clockVfs</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>clockVfs</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><argument_list>(<argument><expr><name>clockVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>clockVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">86400000.0</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* An instance of the following object is passed by pointer as the
** client data to various callbacks.
*/</comment>
<typedef>typedef <type><struct>struct <name>FuzzCtx</name> <block>{
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>               <comment type="block">/* The database connection */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iCutoffTime</name></decl>;</decl_stmt> <comment type="block">/* Stop processing at this time. */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iLastCb</name></decl>;</decl_stmt>     <comment type="block">/* Time recorded for previous progress callback */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>mxInterval</name></decl>;</decl_stmt>  <comment type="block">/* Longest interval between two progress calls */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nCb</name></decl>;</decl_stmt>              <comment type="block">/* Number of progress callbacks */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>execCnt</name></decl>;</decl_stmt>          <comment type="block">/* Number of calls to the sqlite3_exec callback */</comment>
}</block></struct></type> <name>FuzzCtx</name>;</typedef>

<comment type="block">/*
** Progress handler callback.
**
** The argument is the cutoff-time after which all processing should
** stop.  So return non-zero if the cut-off time is exceeded.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>progress_handler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pClientData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FuzzCtx</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>FuzzCtx</name><operator>*</operator><operator>)</operator><name>pClientData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iNow</name> <init>= <expr><call><name>timeOfDay</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>iNow</name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>iCutoffTime</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iDiff</name> <init>= <expr><name>iNow</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iLastCb</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>iDiff</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>mxInterval</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mxInterval</name></name> <operator>=</operator> <name>iDiff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nCb</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Disallow debugging pragmas such as "PRAGMA vdbe_debug" and
** "PRAGMA parser_trace" since they can dramatically increase the
** amount of output without actually testing anything useful.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>block_debug_pragmas</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Notused</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>eCode</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg1</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg2</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg3</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg4</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>eCode</name><operator>==</operator><name>SQLITE_PRAGMA</name>
   <operator>&amp;&amp;</operator> <operator>(</operator><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><literal type="string">"vdbe_"</literal></expr></argument>, <argument><expr><name>zArg1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
        <operator>||</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"parser_trace"</literal></expr></argument>, <argument><expr><name>zArg1</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>
  )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_DENY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Callback for sqlite3_exec().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>exec_handler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pClientData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>namev</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FuzzCtx</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>FuzzCtx</name><operator>*</operator><operator>)</operator><name>pClientData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>argv</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>execCnt</name></name><operator>--</operator><operator>)</operator><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <call><name>progress_handler</name><argument_list>(<argument><expr><name>pClientData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Main entry point.  The fuzzer invokes this function with each
** fuzzed input.
*/</comment>
<function><type><name>int</name></type> <name>LLVMFuzzerTestOneInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Error message returned by sqlite_exec() */</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>uSelector</name></decl>;</decl_stmt>       <comment type="block">/* First byte of input data[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                  <comment type="block">/* Return code from various interfaces */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>              <comment type="block">/* Zero-terminated copy of data[] */</comment>
  <decl_stmt><decl><type><name>FuzzCtx</name></type> <name>cx</name></decl>;</decl_stmt>              <comment type="block">/* Fuzzing context */</comment>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>size</name><operator>&lt;</operator><literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Early out if unsufficient data */</comment>

  <comment type="block">/* Extract the selector byte from the beginning of the input.  But only
  ** do this if the second byte is a \n.  If the second byte is not \n,
  ** then use a default selector */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>uSelector</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>uSelector</name> <operator>=</operator> <literal type="number">0xfd</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Open the database connection.  Only use an in-memory database. */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><literal type="string">"fuzz.db"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>,
           <argument><expr><name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name> <operator>|</operator> <name>SQLITE_OPEN_MEMORY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Invoke the progress handler frequently to check to see if we
  ** are taking too long.  The progress handler will return true
  ** (which will block further processing) if more than 10 seconds have
  ** elapsed since the start of the test.
  */</comment>
  <expr_stmt><expr><name><name>cx</name><operator>.</operator><name>iLastCb</name></name> <operator>=</operator> <call><name>timeOfDay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cx</name><operator>.</operator><name>iCutoffTime</name></name> <operator>=</operator> <name><name>cx</name><operator>.</operator><name>iLastCb</name></name> <operator>+</operator> <literal type="number">10000</literal></expr>;</expr_stmt>  <comment type="block">/* Now + 10 seconds */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PROGRESS_CALLBACK</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3_progress_handler</name><argument_list>(<argument><expr><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>progress_handler</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Set a limit on the maximum size of a prepared statement */</comment>
  <expr_stmt><expr><call><name>sqlite3_limit</name><argument_list>(<argument><expr><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_LIMIT_VDBE_OP</name></expr></argument>, <argument><expr><literal type="number">25000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Limit total memory available to SQLite to 20MB */</comment>
  <expr_stmt><expr><call><name>sqlite3_hard_heap_limit64</name><argument_list>(<argument><expr><literal type="number">20000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set a limit on the maximum length of a string or BLOB.  Without this
  ** limit, fuzzers will invoke randomblob(N) for a large N, and the process
  ** will timeout trying to generate the huge blob */</comment>
  <expr_stmt><expr><call><name>sqlite3_limit</name><argument_list>(<argument><expr><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_LIMIT_LENGTH</name></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Bit 1 of the selector enables foreign key constraints */</comment>
  <expr_stmt><expr><call><name>sqlite3_db_config</name><argument_list>(<argument><expr><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBCONFIG_ENABLE_FKEY</name></expr></argument>, <argument><expr><name>uSelector</name><operator>&amp;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>uSelector</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/* Do not allow debugging pragma statements that might cause excess output */</comment>
  <expr_stmt><expr><call><name>sqlite3_set_authorizer</name><argument_list>(<argument><expr><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>block_debug_pragmas</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Remaining bits of the selector determine a limit on the number of
  ** output rows */</comment>
  <expr_stmt><expr><name><name>cx</name><operator>.</operator><name>execCnt</name></name> <operator>=</operator> <name>uSelector</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/* Run the SQL.  The sqlite_exec() interface expects a zero-terminated
  ** string, so make a copy. */</comment>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_COMPLETE</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3_complete</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>exec_handler</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Show any errors */</comment>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>mDebug</name> <operator>&amp;</operator> <name>FUZZ_SHOW_ERRORS</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zErrMsg</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Cleanup and return */</comment>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA temp_store_directory=''"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>cx</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>mDebug</name> <operator>&amp;</operator> <name>FUZZ_SHOW_MAX_DELAY</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Progress callback count....... %d\n"</literal></expr></argument>, <argument><expr><name><name>cx</name><operator>.</operator><name>nCb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Max time between callbacks.... %d ms\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>cx</name><operator>.</operator><name>mxInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
