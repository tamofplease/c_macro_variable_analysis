<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/test/tt3_checkpoint.c"><comment type="block">/*
** 2011-02-02
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file is part of the test program "threadtest3". Despite being a C
** file it is not compiled separately, but included by threadtest3.c using
** the #include directive normally used with header files.
**
** This file contains the implementation of test cases:
**
**     checkpoint_starvation_1
**     checkpoint_starvation_2
*/</comment>

<comment type="block">/*
** Both test cases involve 1 writer/checkpointer thread and N reader threads.
** 
** Each reader thread performs a series of read transactions, one after 
** another. Each read transaction lasts for 100 ms.
**
** The writer writes transactions as fast as possible. It uses a callback
** registered with sqlite3_wal_hook() to try to keep the WAL-size limited to 
** around 50 pages.
**
** In test case checkpoint_starvation_1, the auto-checkpoint uses 
** SQLITE_CHECKPOINT_PASSIVE. In checkpoint_starvation_2, it uses RESTART.
** The expectation is that in the first case the WAL file will grow very 
** large, and in the second will be limited to the 50 pages or thereabouts.
** However, the overall transaction throughput will be lower for 
** checkpoint_starvation_2, as every checkpoint will block for up to 200 ms
** waiting for readers to clear.
*/</comment>

<comment type="block">/* Frame limit used by the WAL hook for these tests. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKPOINT_STARVATION_FRAMELIMIT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<comment type="block">/* Duration in ms of each read transaction */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKPOINT_STARVATION_READMS</name></cpp:macro>    <cpp:value>100</cpp:value></cpp:define>

<struct>struct <name>CheckpointStarvationCtx</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>eMode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMaxFrame</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>CheckpointStarvationCtx</name></name></type> <name>CheckpointStarvationCtx</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkpoint_starvation_walhook</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nFrame</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CheckpointStarvationCtx</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CheckpointStarvationCtx</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>nFrame</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>nMaxFrame</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nMaxFrame</name></name> <operator>=</operator> <name>nFrame</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nFrame</name><operator>&gt;=</operator><name>CHECKPOINT_STARVATION_FRAMELIMIT</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_wal_checkpoint_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eMode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>checkpoint_starvation_reader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iCount1</name></decl>, <decl><type ref="prev"/><name>iCount2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iCount1</name> <operator>=</operator> <call><name>execsql_i64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT count(x) FROM t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_sleep</name><argument_list>(<argument><expr><name>CHECKPOINT_STARVATION_READMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iCount2</name> <operator>=</operator> <call><name>execsql_i64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT count(x) FROM t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iCount1</name><operator>!=</operator><name>iCount2</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>test_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"Isolation failure - %lld %lld"</literal></expr></argument>, <argument><expr><name>iCount1</name></expr></argument>, <argument><expr><name>iCount2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkpoint_starvation_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>, <parameter><decl><type><name>CheckpointStarvationCtx</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nInsert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
      <argument><expr><literal type="string">"PRAGMA page_size = 1024;"</literal>
      <literal type="string">"PRAGMA journal_mode = WAL;"</literal>
      <literal type="string">"CREATE TABLE t1(x);"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>checkpoint_starvation_reader</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_sleep</name><argument_list>(<argument><expr><name>CHECKPOINT_STARVATION_READMS</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>sqlite3_wal_hook</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>checkpoint_starvation_walhook</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO t1 VALUES(randomblob(1200))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nInsert</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Checkpoint mode  : %s\n"</literal></expr></argument>,
      <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>eMode</name></name><operator>==</operator><name>SQLITE_CHECKPOINT_PASSIVE</name></expr> ?</condition><then> <expr><literal type="string">"PASSIVE"</literal></expr> </then><else>: <expr><literal type="string">"RESTART"</literal></expr></else></ternary></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Peak WAL         : %d frames\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nMaxFrame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Transaction count: %d transactions\n"</literal></expr></argument>, <argument><expr><name>nInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkpoint_starvation_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CheckpointStarvationCtx</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>SQLITE_CHECKPOINT_PASSIVE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>checkpoint_starvation_main</name><argument_list>(<argument><expr><name>nMs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>.</operator><name>nMaxFrame</name></name><operator>&lt;</operator><operator>(</operator><name>CHECKPOINT_STARVATION_FRAMELIMIT</name><operator>*</operator><literal type="number">10</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>test_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"WAL failed to grow - %d frames"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>nMaxFrame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkpoint_starvation_2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CheckpointStarvationCtx</name></type> <name>ctx</name> <init>= <expr><block>{ <expr><name>SQLITE_CHECKPOINT_RESTART</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>checkpoint_starvation_main</name><argument_list>(<argument><expr><name>nMs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>.</operator><name>nMaxFrame</name></name><operator>&gt;</operator><name>CHECKPOINT_STARVATION_FRAMELIMIT</name><operator>+</operator><literal type="number">10</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>test_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"WAL grew too large - %d frames"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>nMaxFrame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
