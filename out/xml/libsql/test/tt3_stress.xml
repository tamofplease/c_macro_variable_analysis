<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/test/tt3_stress.c"><comment type="block">/*
** 2014 December 9
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
**
*/</comment>


<comment type="block">/*
** Thread 1. CREATE and DROP a table.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stress_thread_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS t1(a PRIMARY KEY, b)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"DROP TABLE IF EXISTS t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Thread 2. Open and close database connections.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stress_thread_2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM sqlite_schema;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Thread 3. Attempt many small SELECT statements.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stress_thread_3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM t1 ORDER BY a;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>err</name><operator>.</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"read t1 %d/%d attempts"</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Thread 5. Attempt INSERT statements.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stress_thread_4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name> <init>= <expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iArg</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
        <argument><expr><literal type="string">"WITH loop(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM loop LIMIT 200) "</literal>
        <literal type="string">"INSERT INTO t1 VALUES(randomblob(60), randomblob(60));"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>err</name><operator>.</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"wrote t1 %d/%d attempts"</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Thread 6. Attempt DELETE operations.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stress_thread_5</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name> <init>= <expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>i1</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>iArg</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t1 WHERE (rowid % 4)==:i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>err</name><operator>.</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"deleted from t1 %d/%d attempts"</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stress1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress_thread_5</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**************************************************************************
***************************************************************************
** Start of test case "stress2"
*/</comment>



<comment type="block">/*
** 1.  CREATE TABLE statements.
** 2.  DROP TABLE statements.
** 3.  Small SELECT statements.
** 4.  Big SELECT statements.
** 5.  Small INSERT statements.
** 6.  Big INSERT statements.
** 7.  Small UPDATE statements.
** 8.  Big UPDATE statements.
** 9.  Small DELETE statements.
** 10. Big DELETE statements.
** 11. VACUUM.
** 14. Integrity-check.
** 17. Switch the journal mode from delete to wal and back again.
** 19. Open and close database connections rapidly.
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRESS2_TABCNT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>          <comment type="block">/* count1 in SDS test */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRESS2_COUNT2</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>        <comment type="block">/* count2 in SDS test */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRESS2_COUNT3</name></cpp:macro>  <cpp:value>57</cpp:value></cpp:define>        <comment type="block">/* count2 in SDS test */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload1</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iTab</name> <init>= <expr><operator>(</operator><name>i</name> <operator>%</operator> <operator>(</operator><name>STRESS2_TABCNT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sql_script_printf</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, 
      <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS t%d(x PRIMARY KEY, y, z);"</literal></expr></argument>, <argument><expr><name>iTab</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload2</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iTab</name> <init>= <expr><operator>(</operator><name>i</name> <operator>%</operator> <operator>(</operator><name>STRESS2_TABCNT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sql_script_printf</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"DROP TABLE IF EXISTS t%d;"</literal></expr></argument>, <argument><expr><name>iTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload3</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM t0 WHERE z = 'small'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload4</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM t0 WHERE z = 'big'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload5</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>,
      <argument><expr><literal type="string">"INSERT INTO t0 VALUES(hex(random()), hex(randomblob(200)), 'small');"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload6</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>,
      <argument><expr><literal type="string">"INSERT INTO t0 VALUES(hex(random()), hex(randomblob(57)), 'big');"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload7</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script_printf</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>,
      <argument><expr><literal type="string">"UPDATE t0 SET y = hex(randomblob(200)) "</literal>
      <literal type="string">"WHERE x LIKE hex((%d %% 5)) AND z='small';"</literal></expr></argument>
      ,<argument><expr><name>i</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload8</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script_printf</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>,
      <argument><expr><literal type="string">"UPDATE t0 SET y = hex(randomblob(57)) "</literal>
      <literal type="string">"WHERE x LIKE hex(%d %% 5) AND z='big';"</literal></expr></argument>
      ,<argument><expr><name>i</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload9</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script_printf</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>,
      <argument><expr><literal type="string">"DELETE FROM t0 WHERE x LIKE hex(%d %% 5) AND z='small';"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload10</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script_printf</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>,
      <argument><expr><literal type="string">"DELETE FROM t0 WHERE x LIKE hex(%d %% 5) AND z='big';"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload11</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload14</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA integrity_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_workload17</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sql_script_printf</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, 
      <argument><expr><literal type="string">"PRAGMA journal_mode = %q"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"delete"</literal></expr> </then><else>: <expr><literal type="string">"wal"</literal></expr></else></ternary></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stress2_workload19</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM sqlite_schema;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><name><name>struct</name> <name>Stress2Ctx</name></name></type> <name>Stress2Ctx</name>;</typedef>
<struct>struct <name>Stress2Ctx</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xProc</name>)<parameter_list>(<parameter><decl><type><name>Error</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Sqlite</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>stress2_thread_wrapper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Stress2Ctx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>Stress2Ctx</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>err</name><operator>.</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>cnt</name><operator>&lt;</operator><name>STRESS2_TABCNT</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name><name>pCtx</name><operator>-&gt;</operator><name>xProc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i2</name> <operator>+=</operator> <operator>(</operator><name><name>err</name><operator>.</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"ok %d/%d"</literal></expr></argument>, <argument><expr><name>i2</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2_launch_thread_loop</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Threadset</name> <modifier>*</modifier></type><name>pThreads</name></decl></parameter>,            <comment type="block">/* Thread set */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>,                <comment type="block">/* Database name */</comment>
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>x</name>)<parameter_list>(<parameter><decl><type><name>Error</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Sqlite</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>   <comment type="block">/* Run this until error or timeout */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Stress2Ctx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Stress2Ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>zDb</name></name> <operator>=</operator> <name>zDb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>xProc</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pThreads</name></expr></argument>, <argument><expr><name>stress2_thread_wrapper</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stress2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>Stress2Task</name> <block>{
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>x</name>)<parameter_list>(<parameter><decl><type><name>Error</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Sqlite</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
  }</block> <decl><name><name>aTask</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><name>stress2_workload1</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload2</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload3</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload4</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload5</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload6</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload7</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload8</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload9</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload10</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload11</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload14</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2_workload17</name></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name> <init>= <expr><literal type="string">"test.db"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* To make sure the db file is empty before commencing */</comment>
  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
      <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS t0(x PRIMARY KEY, y, z);"</literal>
      <literal type="string">"CREATE INDEX IF NOT EXISTS i0 ON t0(y);"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aTask</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aTask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>stress2_launch_thread_loop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name><name>aTask</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress2_workload19</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>stress2_workload19</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
