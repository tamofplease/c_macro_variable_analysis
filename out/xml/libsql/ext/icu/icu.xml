<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/icu/icu.c"><comment type="block">/*
** 2007 May 6
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** $Id: icu.c,v 1.7 2007/12/13 21:54:11 drh Exp $
**
** This file implements an integration between the ICU library 
** ("International Components for Unicode", an open-source library 
** for handling unicode data) and SQLite. The integration uses 
** ICU to provide the following to SQLite:
**
**   * An implementation of the SQL regexp() function (and hence REGEXP
**     operator) using the ICU uregex_XX() APIs.
**
**   * Implementations of the SQL scalar upper() and lower() functions
**     for case mapping.
**
**   * Integration of ICU and SQLite collation sequences.
**
**   * An implementation of the LIKE operator that uses ICU to 
**     provide case-independent matching.
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call>                  \
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_ICU</name></expr></argument>)</argument_list></call>             \
 <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_ICU_COLLATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Include ICU headers */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/utypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/uregex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/ustring.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/ucol.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_CORE</name></cpp:ifndef>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
  <function><type><name>SQLITE_EXTENSION_INIT1</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** This function is called when an ICU function called from within
** the implementation of an SQL scalar function returns an error.
**
** The scalar function context passed as the first argument is 
** loaded with an error message based on the following two args.
*/</comment>
<specifier>static</specifier> <name>void</name></type> <name>icuFunctionError</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,       <comment type="block">/* SQLite scalar function context */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,           <comment type="block">/* Name of ICU function that failed */</comment>
  <parameter><decl><type><name>UErrorCode</name></type> <name>e</name></decl></parameter>                 <comment type="block">/* Error code returned by ICU function */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"ICU error: %s(): %s"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>u_errorName</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zBuf</name><index>[<expr><literal type="number">127</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_ICU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
** Maximum length (in bytes) of the pattern in a LIKE or GLOB
** operator.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_LIKE_PATTERN_LENGTH</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_MAX_LIKE_PATTERN_LENGTH</name></cpp:macro> <cpp:value>50000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Version of sqlite3_free() that is always a function, never a macro.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This lookup table is used to help decode the first byte of
** a multi-byte UTF8 character. It is copied here from SQLite source
** code file utf8.c.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>icuUtf8Trans1</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
  <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
  <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_ICU_READ_UTF8</name><parameter_list>(<parameter><type><name>zIn</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>                       \
  <cpp:value>c = *(zIn++);                                            \
  if( c&gt;=0xc0 ){                                           \
    c = icuUtf8Trans1[c-0xc0];                             \
    while( (*zIn &amp; 0xc0)==0x80 ){                          \
      c = (c&lt;&lt;6) + (0x3f &amp; *(zIn++));                      \
    }                                                      \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_ICU_SKIP_UTF8</name><parameter_list>(<parameter><type><name>zIn</name></type></parameter>)</parameter_list></cpp:macro>                          \
  <cpp:value>assert( *zIn );                                          \
  if( *(zIn++)&gt;=0xc0 ){                                    \
    while( (*zIn &amp; 0xc0)==0x80 ){zIn++;}                   \
  }</cpp:value></cpp:define>


<comment type="block">/*
** Compare two UTF-8 strings for equality where the first string is
** a "LIKE" expression. Return true (1) if they are the same and 
** false (0) if they are different.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>icuLikeCompare</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,   <comment type="block">/* LIKE pattern */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>zString</name></decl></parameter>,    <comment type="block">/* The UTF-8 string to compare against */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>UChar32</name></type> <name>uEsc</name></decl></parameter>         <comment type="block">/* The escape character */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>MATCH_ONE</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="char">'_'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>MATCH_ALL</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="char">'%'</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>prevEscape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* True if the previous character was uEsc */</comment>

  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>

    <comment type="block">/* Read (and consume) the next character from the input pattern. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>uPattern</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SQLITE_ICU_READ_UTF8</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>uPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>uPattern</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <comment type="block">/* There are now 4 possibilities:
    **
    **     1. uPattern is an unescaped match-all character "%",
    **     2. uPattern is an unescaped match-one character "_",
    **     3. uPattern is an unescaped escape character, or
    **     4. uPattern is to be handled as an ordinary character
    */</comment>
    <if_stmt><if>if<condition>( <expr><name>uPattern</name><operator>==</operator><name>MATCH_ALL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>prevEscape</name> <operator>&amp;&amp;</operator> <name>uPattern</name><operator>!=</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>uEsc</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Case 1. */</comment>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name></decl>;</decl_stmt>

      <comment type="block">/* Skip any MATCH_ALL or MATCH_ONE characters that follow a
      ** MATCH_ALL. For each MATCH_ONE, skip one character in the 
      ** test string.
      */</comment>
      <while>while<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><operator>*</operator><name>zPattern</name><operator>)</operator> <operator>==</operator> <name>MATCH_ALL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>MATCH_ONE</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><name>MATCH_ONE</name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zString</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name>SQLITE_ICU_SKIP_UTF8</name><argument_list>(<argument><expr><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>zPattern</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zPattern</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <while>while<condition>( <expr><operator>*</operator><name>zString</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>icuLikeCompare</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><name>uEsc</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>SQLITE_ICU_SKIP_UTF8</name><argument_list>(<argument><expr><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <return>return <expr><literal type="number">0</literal></expr>;</return>

    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>uPattern</name><operator>==</operator><name>MATCH_ONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>prevEscape</name> <operator>&amp;&amp;</operator> <name>uPattern</name><operator>!=</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>uEsc</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Case 2. */</comment>
      <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zString</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>SQLITE_ICU_SKIP_UTF8</name><argument_list>(<argument><expr><name>zString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>uPattern</name><operator>==</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>uEsc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>prevEscape</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Case 3. */</comment>
      <expr_stmt><expr><name>prevEscape</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Case 4. */</comment>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>uString</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SQLITE_ICU_READ_UTF8</name><argument_list>(<argument><expr><name>zString</name></expr></argument>, <argument><expr><name>uString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>uString</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>u_foldCase</name><argument_list>(<argument><expr><operator>(</operator><name>UChar32</name><operator>)</operator><name>uString</name></expr></argument>, <argument><expr><name>U_FOLD_CASE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>uPattern</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>u_foldCase</name><argument_list>(<argument><expr><operator>(</operator><name>UChar32</name><operator>)</operator><name>uPattern</name></expr></argument>, <argument><expr><name>U_FOLD_CASE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>uString</name><operator>!=</operator><name>uPattern</name></expr> )</condition><block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>prevEscape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><operator>*</operator><name>zString</name><operator>==</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of the like() SQL function.  This function implements
** the build-in LIKE operator.  The first argument to the function is the
** pattern and the second argument is the string.  So, the SQL statements:
**
**       A LIKE B
**
** is implemented as like(B, A). If there is an escape character E, 
**
**       A LIKE B ESCAPE E
**
** is mapped to like(B, A, E).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>icuLikeFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zA</name> <init>= <expr><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zB</name> <init>= <expr><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UChar32</name></type> <name>uEsc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Limit the length of the LIKE or GLOB pattern to avoid problems
  ** of deep recursion and N*N behavior in patternCompare().
  */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;</operator><name>SQLITE_MAX_LIKE_PATTERN_LENGTH</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"LIKE or GLOB pattern too complex"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>


  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* The escape character string must consist of a single UTF-8 character.
    ** Otherwise, return an error.
    */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nE</name><init>= <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zE</name> <init>= <expr><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zE</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>U8_NEXT</name><argument_list>(<argument><expr><name>zE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>nE</name></expr></argument>, <argument><expr><name>uEsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>!=</operator><name>nE</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, 
          <argument><expr><literal type="string">"ESCAPE expression must be a single character"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>zA</name> <operator>&amp;&amp;</operator> <name>zB</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>icuLikeCompare</name><argument_list>(<argument><expr><name>zA</name></expr></argument>, <argument><expr><name>zB</name></expr></argument>, <argument><expr><name>uEsc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Function to delete compiled regexp objects. Registered as
** a destructor function with sqlite3_set_auxdata().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>icuRegexpDelete</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>URegularExpression</name> <modifier>*</modifier></type><name>pExpr</name> <init>= <expr><operator>(</operator><name>URegularExpression</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uregex_close</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of SQLite REGEXP operator. This scalar function takes
** two arguments. The first is a regular expression pattern to compile
** the second is a string to match against that pattern. If either 
** argument is an SQL NULL, then NULL Is returned. Otherwise, the result
** is 1 if the string matches the pattern, or 0 otherwise.
**
** SQLite maps the regexp() function to the regexp() operator such
** that the following two are equivalent:
**
**     zString REGEXP zPattern
**     regexp(zPattern, zString)
**
** Uses the following ICU regexp APIs:
**
**     uregex_open()
**     uregex_matches()
**     uregex_close()
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>icuRegexpFunc</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>UErrorCode</name></type> <name>status</name> <init>= <expr><name>U_ZERO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>URegularExpression</name> <modifier>*</modifier></type><name>pExpr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UBool</name></type> <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>zString</name> <init>= <expr><call><name>sqlite3_value_text16</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nArg</name></expr>;</expr_stmt>  <comment type="block">/* Unused parameter */</comment>

  <comment type="block">/* If the left hand side of the regexp operator is NULL, 
  ** then the result is also NULL. 
  */</comment>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zString</name></expr> )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pExpr</name> <operator>=</operator> <call><name>sqlite3_get_auxdata</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pExpr</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>zPattern</name> <init>= <expr><call><name>sqlite3_value_text16</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zPattern</name></expr> )</condition><block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pExpr</name> <operator>=</operator> <call><name>uregex_open</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>U_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_set_auxdata</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>icuRegexpDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pExpr</name> <operator>=</operator> <call><name>sqlite3_get_auxdata</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pExpr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>icuFunctionError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"uregex_open"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Configure the text that the regular expression operates on. */</comment>
  <expr_stmt><expr><call><name>uregex_setText</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>U_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>icuFunctionError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"uregex_setText"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Attempt the match */</comment>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>uregex_matches</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>U_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>icuFunctionError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"uregex_matches"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set the text that the regular expression operates on to a NULL
  ** pointer. This is not really necessary, but it is tidier than 
  ** leaving the regular expression object configured with an invalid
  ** pointer after this function returns.
  */</comment>
  <expr_stmt><expr><call><name>uregex_setText</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return 1 or 0. */</comment>
  <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Implementations of scalar functions for case mapping - upper() and 
** lower(). Function upper() converts its input to upper-case (ABC).
** Function lower() converts to lower-case (abc).
**
** ICU provides two types of case mapping, "general" case mapping and
** "language specific". Refer to ICU documentation for the differences
** between the two.
**
** To utilise "general" case mapping, the upper() or lower() scalar 
** functions are invoked with one argument:
**
**     upper('ABC') -&gt; 'abc'
**     lower('abc') -&gt; 'ABC'
**
** To access ICU "language specific" case mapping, upper() or lower()
** should be invoked with two arguments. The second argument is the name
** of the locale to use. Passing an empty string ("") or SQL NULL value
** as the second argument is the same as invoking the 1 argument version
** of upper() or lower().
**
**     lower('I', 'en_us') -&gt; 'i'
**     lower('I', 'tr_tr') -&gt; '\u131' (small dotless i)
**
** http://www.icu-project.org/userguide/posix.html#case_mappings
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>icuCaseFunc16</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>zInput</name></decl>;</decl_stmt>            <comment type="block">/* Pointer to input string */</comment>
  <decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>zOutput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Pointer to output buffer */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInput</name></decl>;</decl_stmt>                     <comment type="block">/* Size of utf-16 input string in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nOut</name></decl>;</decl_stmt>                       <comment type="block">/* Size of output buffer in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bToUpper</name></decl>;</decl_stmt>                   <comment type="block">/* True for toupper(), false for tolower() */</comment>
  <decl_stmt><decl><type><name>UErrorCode</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLocale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nArg</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>nArg</name><operator>==</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>bToUpper</name> <operator>=</operator> <operator>(</operator><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zLocale</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zInput</name> <operator>=</operator> <call><name>sqlite3_value_text16</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zInput</name></expr> )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nOut</name> <operator>=</operator> <name>nInput</name> <operator>=</operator> <call><name>sqlite3_value_bytes16</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_text16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>zNew</name> <init>= <expr><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name>zOutput</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zOutput</name> <operator>=</operator> <name>zNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>U_ZERO_ERROR</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bToUpper</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nOut</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><call><name>u_strToUpper</name><argument_list>(<argument><expr><name>zOutput</name></expr></argument>,<argument><expr><name>nOut</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>zInput</name></expr></argument>,<argument><expr><name>nInput</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>zLocale</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>nOut</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><call><name>u_strToLower</name><argument_list>(<argument><expr><name>zOutput</name></expr></argument>,<argument><expr><name>nOut</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>zInput</name></expr></argument>,<argument><expr><name>nInput</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>zLocale</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>U_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_text16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zOutput</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>xFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>status</name><operator>==</operator><name>U_BUFFER_OVERFLOW_ERROR</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>icuFunctionError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bToUpper</name></expr> ?</condition><then> <expr><literal type="string">"u_strToUpper"</literal></expr> </then><else>: <expr><literal type="string">"u_strToLower"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* Unreachable */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_ICU) */</comment>

<comment type="block">/*
** Collation sequence destructor function. The pCtx argument points to
** a UCollator structure previously allocated using ucol_open().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>icuCollationDel</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>UCollator</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>UCollator</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ucol_close</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Collation sequence comparison function. The pCtx argument points to
** a UCollator structure previously allocated using ucol_open().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>icuCollationColl</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nLeft</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zLeft</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nRight</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zRight</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>UCollationResult</name></type> <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UCollator</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>UCollator</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ucol_strcoll</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>UChar</name> <operator>*</operator><operator>)</operator><name>zLeft</name></expr></argument>, <argument><expr><name>nLeft</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>UChar</name> <operator>*</operator><operator>)</operator><name>zRight</name></expr></argument>, <argument><expr><name>nRight</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name>res</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>UCOL_LESS</name></expr>:</case>    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    <case>case <expr><name>UCOL_GREATER</name></expr>:</case> <return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return>
    <case>case <expr><name>UCOL_EQUAL</name></expr>:</case>   <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Unexpected return value from ucol_strcoll()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of the scalar function icu_load_collation().
**
** This scalar function is used to add ICU collation based collation 
** types to an SQLite database connection. It is intended to be called
** as follows:
**
**     SELECT icu_load_collation(&lt;locale&gt;, &lt;collation-name&gt;);
**
** Where &lt;locale&gt; is a string containing an ICU locale identifier (i.e.
** "en_AU", "tr_TR" etc.) and &lt;collation-name&gt; is the name of the
** collation sequence to create.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>icuLoadCollation</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>(</operator><name>sqlite3</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UErrorCode</name></type> <name>status</name> <init>= <expr><name>U_ZERO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLocale</name></decl>;</decl_stmt>      <comment type="block">/* Locale identifier - (eg. "jp_JP") */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>        <comment type="block">/* SQL Collation sequence name (eg. "japanese") */</comment>
  <decl_stmt><decl><type><name>UCollator</name> <modifier>*</modifier></type><name>pUCollator</name></decl>;</decl_stmt>    <comment type="block">/* ICU library collation object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                   <comment type="block">/* Return code from sqlite3_create_collation_x() */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nArg</name><operator>==</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nArg</name></expr>;</expr_stmt> <comment type="block">/* Unused parameter */</comment>
  <expr_stmt><expr><name>zLocale</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zName</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zLocale</name> <operator>||</operator> <operator>!</operator><name>zName</name></expr> )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pUCollator</name> <operator>=</operator> <call><name>ucol_open</name><argument_list>(<argument><expr><name>zLocale</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>U_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>icuFunctionError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ucol_open"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_collation_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>SQLITE_UTF16</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pUCollator</name></expr></argument>, 
      <argument><expr><name>icuCollationColl</name></expr></argument>, <argument><expr><name>icuCollationDel</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ucol_close</name><argument_list>(<argument><expr><name>pUCollator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Error registering collation function"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Register the ICU extension functions with database db.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3IcuInit</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITEICU_EXTRAFLAGS</name></cpp:macro> <cpp:value>(SQLITE_DETERMINISTIC|SQLITE_INNOCUOUS)</cpp:value></cpp:define>
  <struct><specifier>static</specifier> <specifier>const</specifier> struct <name>IcuScalar</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>                        <comment type="block">/* Function name */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>nArg</name></decl>;</decl_stmt>                       <comment type="block">/* Number of arguments */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>enc</name></decl>;</decl_stmt>                         <comment type="block">/* Optimal text encoding */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>iContext</name></decl>;</decl_stmt>                   <comment type="block">/* sqlite3_user_data() context */</comment>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xFunc</name>)<parameter_list>(<parameter><decl><type><name>sqlite3_context</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>sqlite3_value</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  }</block> <decl><name><name>scalars</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"icu_load_collation"</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITE_DIRECTONLY</name></expr>,<expr><literal type="number">1</literal></expr>, <expr><name>icuLoadCollation</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_ICU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{<expr><literal type="string">"regexp"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_ANY</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,         <expr><literal type="number">0</literal></expr>, <expr><name>icuRegexpFunc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lower"</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><name>SQLITE_UTF16</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><name>icuCaseFunc16</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lower"</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_UTF16</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><name>icuCaseFunc16</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"upper"</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><name>SQLITE_UTF16</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,       <expr><literal type="number">1</literal></expr>, <expr><name>icuCaseFunc16</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"upper"</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_UTF16</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,       <expr><literal type="number">1</literal></expr>, <expr><name>icuCaseFunc16</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lower"</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,        <expr><literal type="number">0</literal></expr>, <expr><name>icuCaseFunc16</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"lower"</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,        <expr><literal type="number">0</literal></expr>, <expr><name>icuCaseFunc16</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"upper"</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,        <expr><literal type="number">1</literal></expr>, <expr><name>icuCaseFunc16</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"upper"</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,        <expr><literal type="number">1</literal></expr>, <expr><name>icuCaseFunc16</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"like"</literal></expr>,   <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,        <expr><literal type="number">0</literal></expr>, <expr><name>icuLikeFunc</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"like"</literal></expr>,   <expr><literal type="number">3</literal></expr>, <expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITEICU_EXTRAFLAGS</name></expr>,        <expr><literal type="number">0</literal></expr>, <expr><name>icuLikeFunc</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_ICU) */</comment>
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>scalars</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>scalars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>IcuScalar</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>scalars</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(
        <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nArg</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, 
        <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>iContext</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>db</name></expr> </then><else>: <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></else></ternary></expr></argument>,
        <argument><expr><name><name>p</name><operator>-&gt;</operator><name>xFunc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SQLITE_CORE</name></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_icu_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <macro><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument>pApi</argument>)</argument_list></macro>
  <return>return <expr><call><name>sqlite3IcuInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
