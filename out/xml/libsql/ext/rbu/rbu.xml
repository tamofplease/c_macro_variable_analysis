<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/rbu/rbu.c"><comment type="block">/*
** 2014 August 30
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains a command-line application that uses the RBU 
** extension. See the usage() function below for an explanation.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3rbu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Print a usage message and exit.
*/</comment>
<function><type><name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArgv0</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, 
<argument><expr><literal type="string">"Usage: %s ?OPTIONS? TARGET-DB RBU-DB\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Where options are:\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"    -step NSTEP\n"</literal>
<literal type="string">"    -statstep NSTATSTEP\n"</literal>
<literal type="string">"    -vacuum\n"</literal>
<literal type="string">"    -presql SQL\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"  If the -vacuum switch is not present, argument RBU-DB must be an RBU\n"</literal>
<literal type="string">"  database containing an update suitable for target database TARGET-DB.\n"</literal>
<literal type="string">"  Or, if -vacuum is specified, then TARGET-DB is a database to vacuum using\n"</literal>
<literal type="string">"  RBU, and RBU-DB is used as the state database for the vacuum (refer to\n"</literal>
<literal type="string">"  API documentation for details).\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"  If NSTEP is set to less than or equal to zero (the default value), this \n"</literal>
<literal type="string">"  program attempts to perform the entire update or vacuum operation before\n"</literal>
<literal type="string">"  exiting\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"  If NSTEP is greater than zero, then a maximum of NSTEP calls are made\n"</literal>
<literal type="string">"  to sqlite3rbu_step(). If the RBU update has not been completely applied\n"</literal>
<literal type="string">"  after the NSTEP'th call is made, the state is saved in the database RBU-DB\n"</literal>
<literal type="string">"  and the program exits. Subsequent invocations of this (or any other RBU)\n"</literal>
<literal type="string">"  application will use this state to resume applying the RBU update to the\n"</literal>
<literal type="string">"  target db.\n"</literal>
<literal type="string">"\n"</literal></expr></argument>
, <argument><expr><name>zArgv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>report_default_vfs</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"default vfs is \"%s\"\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pVfs</name></expr> ?</condition><then> <expr><name><name>pVfs</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>report_rbu_vfs</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3rbu_db</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>db</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_VFSNAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zName</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"using vfs \"%s\"\n"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"vfs name not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl>;</decl_stmt>            <comment type="block">/* Target database to apply RBU to */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRbu</name></decl>;</decl_stmt>               <comment type="block">/* Database containing RBU */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>                 <comment type="block">/* Buffer for printf() */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrmsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Error message, if any */</comment>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl>;</decl_stmt>               <comment type="block">/* RBU handle */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nStep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Maximum number of step() calls */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nStatStep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Report stats after this many step calls */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bVacuum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPreSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nProgress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nArgc</name> <init>= <expr><name>argc</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&lt;</operator><literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nArgc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nArg</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nArg</name><operator>&lt;=</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-vacuum"</literal></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bVacuum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nArg</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nArg</name><operator>&lt;=</operator><literal type="number">7</literal> 
           <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-presql"</literal></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nArg</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>zPreSql</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nArg</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nArg</name><operator>&lt;=</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-step"</literal></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nArg</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>nStep</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nArg</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nArg</name><operator>&lt;=</operator><literal type="number">9</literal> 
           <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-statstep"</literal></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nArg</name><operator>-</operator><literal type="number">1</literal></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>nStatStep</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>zTarget</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argc</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>zRbu</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>report_default_vfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open an RBU handle. A vacuum handle if -vacuum was specified, or a
  ** regular RBU update handle otherwise.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>bVacuum</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pRbu</name> <operator>=</operator> <call><name>sqlite3rbu_vacuum</name><argument_list>(<argument><expr><name>zTarget</name></expr></argument>, <argument><expr><name>zRbu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>pRbu</name> <operator>=</operator> <call><name>sqlite3rbu_open</name><argument_list>(<argument><expr><name>zTarget</name></expr></argument>, <argument><expr><name>zRbu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>report_rbu_vfs</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>zPreSql</name> <operator>&amp;&amp;</operator> <name>pRbu</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbMain</name> <init>= <expr><call><name>sqlite3rbu_db</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>dbMain</name></expr></argument>, <argument><expr><name>zPreSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbRbu</name> <init>= <expr><call><name>sqlite3rbu_db</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>dbRbu</name></expr></argument>, <argument><expr><name>zPreSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If nStep is less than or equal to zero, call
  ** sqlite3rbu_step() until either the RBU has been completely applied
  ** or an error occurs. Or, if nStep is greater than zero, call
  ** sqlite3rbu_step() a maximum of nStep times.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>nStep</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>i</name><operator>&lt;</operator><name>nStep</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>sqlite3rbu_step</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>nStatStep</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>nStatStep</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nUsed</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nHighwater</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3_status64</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MEMORY_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nUsed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nHighwater</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"memory used=%lld highwater=%lld"</literal></expr></argument>, <argument><expr><name>nUsed</name></expr></argument>, <argument><expr><name>nHighwater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>bVacuum</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>one</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>two</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sqlite3rbu_bp_progress</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"  progress=%d/%d\n"</literal></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>nProgress</name> <operator>=</operator> <call><name>sqlite3rbu_progress</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3rbu_close</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Let the user know what happened. */</comment>
  <switch>switch<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_OK</name></expr>:</case>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>,
          <argument><expr><literal type="string">"SQLITE_OK: rbu update incomplete (%lld operations so far)\n"</literal></expr></argument>,
          <argument><expr><name>nProgress</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>SQLITE_DONE</name></expr>:</case>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>,
          <argument><expr><literal type="string">"SQLITE_DONE: rbu update completed (%lld operations)\n"</literal></expr></argument>,
          <argument><expr><name>nProgress</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error=%d: %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if<condition>( <expr><name>nStatStep</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nUsed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nHighwater</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_status64</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MEMORY_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nUsed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nHighwater</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"memory used=%lld highwater=%lld\n"</literal></expr></argument>, <argument><expr><name>nUsed</name></expr></argument>, <argument><expr><name>nHighwater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>SQLITE_DONE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
