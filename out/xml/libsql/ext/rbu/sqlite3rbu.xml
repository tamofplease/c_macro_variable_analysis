<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/rbu/sqlite3rbu.c"><comment type="block">/*
** 2014 August 30
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
**
** OVERVIEW 
**
**  The RBU extension requires that the RBU update be packaged as an
**  SQLite database. The tables it expects to find are described in
**  sqlite3rbu.h.  Essentially, for each table xyz in the target database
**  that the user wishes to write to, a corresponding data_xyz table is
**  created in the RBU database and populated with one row for each row to
**  update, insert or delete from the target table.
** 
**  The update proceeds in three stages:
** 
**  1) The database is updated. The modified database pages are written
**     to a *-oal file. A *-oal file is just like a *-wal file, except
**     that it is named "&lt;database&gt;-oal" instead of "&lt;database&gt;-wal".
**     Because regular SQLite clients do not look for file named
**     "&lt;database&gt;-oal", they go on using the original database in
**     rollback mode while the *-oal file is being generated.
** 
**     During this stage RBU does not update the database by writing
**     directly to the target tables. Instead it creates "imposter"
**     tables using the SQLITE_TESTCTRL_IMPOSTER interface that it uses
**     to update each b-tree individually. All updates required by each
**     b-tree are completed before moving on to the next, and all
**     updates are done in sorted key order.
** 
**  2) The "&lt;database&gt;-oal" file is moved to the equivalent "&lt;database&gt;-wal"
**     location using a call to rename(2). Before doing this the RBU
**     module takes an EXCLUSIVE lock on the database file, ensuring
**     that there are no other active readers.
** 
**     Once the EXCLUSIVE lock is released, any other database readers
**     detect the new *-wal file and read the database in wal mode. At
**     this point they see the new version of the database - including
**     the updates made as part of the RBU update.
** 
**  3) The new *-wal file is checkpointed. This proceeds in the same way 
**     as a regular database checkpoint, except that a single frame is
**     checkpointed each time sqlite3rbu_step() is called. If the RBU
**     handle is closed before the entire *-wal file is checkpointed,
**     the checkpoint progress is saved in the RBU database and the
**     checkpoint can be resumed by another RBU client at some point in
**     the future.
**
** POTENTIAL PROBLEMS
** 
**  The rename() call might not be portable. And RBU is not currently
**  syncing the directory after renaming the file.
**
**  When state is saved, any commit to the *-oal file and the commit to
**  the RBU update database are not atomic. So if the power fails at the
**  wrong moment they might get out of sync. As the main database will be
**  committed before the RBU update database this will likely either just
**  pass unnoticed, or result in SQLITE_CONSTRAINT errors (due to UNIQUE
**  constraint violations).
**
**  If some client does modify the target database mid RBU update, or some
**  other error occurs, the RBU extension will keep throwing errors. It's
**  not really clear how to get out of this state. The system could just
**  by delete the RBU update database and *-oal file and have the device
**  download the update again and start over.
**
**  At present, for an UPDATE, both the new.* and old.* records are
**  collected in the rbu_xyz table. And for both UPDATEs and DELETEs all
**  fields are collected.  This means we're probably writing a lot more
**  data to disk when saving the state of an ongoing update to the RBU
**  update database than is strictly necessary.
** 
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_RBU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3rbu.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Maximum number of prepared UPDATE statements held by this module */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_RBU_UPDATE_CACHESIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<comment type="block">/* Delta checksums disabled by default.  Compile with -DRBU_ENABLE_DELTA_CKSUM
** to enable checksum verification.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RBU_ENABLE_DELTA_CKSUM</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_ENABLE_DELTA_CKSUM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Swap two objects of type TYPE.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_AMALGAMATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP</name><parameter_list>(<parameter><type><name>TYPE</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{TYPE t=A; A=B; B=t;}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Name of the URI option that causes RBU to take an exclusive lock as
** part of the incremental checkpoint operation.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_EXCLUSIVE_CHECKPOINT</name></cpp:macro> <cpp:value>"rbu_exclusive_checkpoint"</cpp:value></cpp:define>


<comment type="block">/*
** The rbu_state table is used to save the state of a partially applied
** update so that it can be resumed later. The table consists of integer
** keys mapped to values as follows:
**
** RBU_STATE_STAGE:
**   May be set to integer values 1, 2, 4 or 5. As follows:
**       1: the *-rbu file is currently under construction.
**       2: the *-rbu file has been constructed, but not yet moved 
**          to the *-wal path.
**       4: the checkpoint is underway.
**       5: the rbu update has been checkpointed.
**
** RBU_STATE_TBL:
**   Only valid if STAGE==1. The target database name of the table 
**   currently being written.
**
** RBU_STATE_IDX:
**   Only valid if STAGE==1. The target database name of the index 
**   currently being written, or NULL if the main table is currently being
**   updated.
**
** RBU_STATE_ROW:
**   Only valid if STAGE==1. Number of rows already processed for the current
**   table/index.
**
** RBU_STATE_PROGRESS:
**   Trbul number of sqlite3rbu_step() calls made so far as part of this
**   rbu update.
**
** RBU_STATE_CKPT:
**   Valid if STAGE==4. The 64-bit checksum associated with the wal-index
**   header created by recovering the *-wal file. This is used to detect
**   cases when another client appends frames to the *-wal file in the
**   middle of an incremental checkpoint (an incremental checkpoint cannot
**   be continued if this happens).
**
** RBU_STATE_COOKIE:
**   Valid if STAGE==1. The current change-counter cookie value in the 
**   target db file.
**
** RBU_STATE_OALSZ:
**   Valid if STAGE==1. The size in bytes of the *-oal file.
**
** RBU_STATE_DATATBL:
**   Only valid if STAGE==1. The RBU database name of the table 
**   currently being read.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_STAGE</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_TBL</name></cpp:macro>          <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_IDX</name></cpp:macro>          <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_ROW</name></cpp:macro>          <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_PROGRESS</name></cpp:macro>     <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_CKPT</name></cpp:macro>         <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_COOKIE</name></cpp:macro>       <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_OALSZ</name></cpp:macro>        <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_PHASEONESTEP</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STATE_DATATBL</name></cpp:macro>     <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STAGE_OAL</name></cpp:macro>         <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STAGE_MOVE</name></cpp:macro>        <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STAGE_CAPTURE</name></cpp:macro>     <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STAGE_CKPT</name></cpp:macro>        <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_STAGE_DONE</name></cpp:macro>        <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_CREATE_STATE</name></cpp:macro> \
  <cpp:value>"CREATE TABLE IF NOT EXISTS %s.rbu_state(k INTEGER PRIMARY KEY, v)"</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>RbuFrame</name></name></type> <name>RbuFrame</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RbuObjIter</name></name></type> <name>RbuObjIter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RbuState</name></name></type> <name>RbuState</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RbuSpan</name></name></type> <name>RbuSpan</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>rbu_vfs</name></name></type> <name>rbu_vfs</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>rbu_file</name></name></type> <name>rbu_file</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>RbuUpdateStmt</name></name></type> <name>RbuUpdateStmt</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_AMALGAMATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>u16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<typedef>typedef <type><name>sqlite3_int64</name></type> <name>i64</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** These values must match the values defined in wal.c for the equivalent
** locks. These are not magic numbers as they are part of the SQLite file
** format.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAL_LOCK_WRITE</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAL_LOCK_CKPT</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAL_LOCK_READ0</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_FCNTL_RBUCNT</name></cpp:macro>    <cpp:value>5149216</cpp:value></cpp:define>

<comment type="block">/*
** A structure to store values read from the rbu_state table in memory.
*/</comment>
<struct>struct <name>RbuState</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>eStage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDataTbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iWalCksum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nProgress</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>iCookie</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOalSz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nPhaseOneStep</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>RbuUpdateStmt</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMask</name></decl>;</decl_stmt>                    <comment type="block">/* Copy of update mask used with pUpdate */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pUpdate</name></decl>;</decl_stmt>          <comment type="block">/* Last update statement (or NULL) */</comment>
  <decl_stmt><decl><type><name>RbuUpdateStmt</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>RbuSpan</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSpan</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSpan</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** An iterator of this type is used to iterate through all objects in
** the target database that require updating. For each such table, the
** iterator visits, in order:
**
**     * the table itself, 
**     * each index of the table (zero or more points to visit), and
**     * a special "cleanup table" state.
**
** abIndexed:
**   If the table has no indexes on it, abIndexed is set to NULL. Otherwise,
**   it points to an array of flags nTblCol elements in size. The flag is
**   set for each column that is either a part of the PK or a part of an
**   index. Or clear otherwise.
**
**   If there are one or more partial indexes on the table, all fields of
**   this array set set to 1. This is because in that case, the module has
**   no way to tell which fields will be required to add and remove entries
**   from the partial indexes.
**   
*/</comment>
<struct>struct <name>RbuObjIter</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pTblIter</name></decl>;</decl_stmt>         <comment type="block">/* Iterate through tables */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pIdxIter</name></decl>;</decl_stmt>         <comment type="block">/* Index iterator */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTblCol</name></decl>;</decl_stmt>                    <comment type="block">/* Size of azTblCol[] array */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azTblCol</name></decl>;</decl_stmt>                <comment type="block">/* Array of unquoted target column names */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azTblType</name></decl>;</decl_stmt>               <comment type="block">/* Array of target column types */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aiSrcOrder</name></decl>;</decl_stmt>                <comment type="block">/* src table col -&gt; target table col */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>abTblPk</name></decl>;</decl_stmt>                    <comment type="block">/* Array of flags, set on target PK columns */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>abNotNull</name></decl>;</decl_stmt>                  <comment type="block">/* Array of flags, set on NOT NULL columns */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>abIndexed</name></decl>;</decl_stmt>                  <comment type="block">/* Array of flags, set on indexed &amp; PK cols */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>                      <comment type="block">/* Table type - an RBU_PK_XXX value */</comment>

  <comment type="block">/* Output variables. zTbl==0 implies EOF. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bCleanup</name></decl>;</decl_stmt>                   <comment type="block">/* True in "cleanup" state */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTbl</name></decl>;</decl_stmt>               <comment type="block">/* Name of target db table */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDataTbl</name></decl>;</decl_stmt>           <comment type="block">/* Name of rbu db table (or null) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIdx</name></decl>;</decl_stmt>               <comment type="block">/* Name of target db index (or null) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iTnum</name></decl>;</decl_stmt>                      <comment type="block">/* Root page of current object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iPkTnum</name></decl>;</decl_stmt>                    <comment type="block">/* If eType==EXTERNAL, root of PK index */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bUnique</name></decl>;</decl_stmt>                    <comment type="block">/* Current index is unique */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIndex</name></decl>;</decl_stmt>                     <comment type="block">/* Number of aux. indexes on table zTbl */</comment>

  <comment type="block">/* Statements created by rbuObjIterPrepareAll() */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                       <comment type="block">/* Number of columns in current object */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pSelect</name></decl>;</decl_stmt>          <comment type="block">/* Source data */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pInsert</name></decl>;</decl_stmt>          <comment type="block">/* Statement for INSERT operations */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pDelete</name></decl>;</decl_stmt>          <comment type="block">/* Statement for DELETE ops */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pTmpInsert</name></decl>;</decl_stmt>       <comment type="block">/* Insert into rbu_tmp_$zDataTbl */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIdxCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RbuSpan</name> <modifier>*</modifier></type><name>aIdxCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zIdxSql</name></decl>;</decl_stmt>

  <comment type="block">/* Last UPDATE used (for PK b-tree updates only), or NULL. */</comment>
  <decl_stmt><decl><type><name>RbuUpdateStmt</name> <modifier>*</modifier></type><name>pRbuUpdate</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** Values for RbuObjIter.eType
**
**     0: Table does not exist (error)
**     1: Table has an implicit rowid.
**     2: Table has an explicit IPK column.
**     3: Table has an external PK index.
**     4: Table is WITHOUT ROWID.
**     5: Table is a virtual table.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_PK_NOTABLE</name></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_PK_NONE</name></cpp:macro>           <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_PK_IPK</name></cpp:macro>            <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_PK_EXTERNAL</name></cpp:macro>       <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_PK_WITHOUT_ROWID</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_PK_VTAB</name></cpp:macro>           <cpp:value>5</cpp:value></cpp:define>


<comment type="block">/*
** Within the RBU_STAGE_OAL stage, each call to sqlite3rbu_step() performs
** one of the following operations.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_INSERT</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>          <comment type="block">/* Insert on a main table b-tree */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_DELETE</name></cpp:macro>     <cpp:value>2</cpp:value></cpp:define>          <comment type="block">/* Delete a row from a main table b-tree */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_REPLACE</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>          <comment type="block">/* Delete and then insert a row */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_IDX_DELETE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>          <comment type="block">/* Delete a row from an aux. index b-tree */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_IDX_INSERT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>          <comment type="block">/* Insert on an aux. index b-tree */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBU_UPDATE</name></cpp:macro>     <cpp:value>6</cpp:value></cpp:define>          <comment type="block">/* Update a row in a main table b-tree */</comment>

<comment type="block">/*
** A single step of an incremental checkpoint - frame iWalFrame of the wal
** file should be copied to page iDbPage of the database file.
*/</comment>
<struct>struct <name>RbuFrame</name> <block>{
  <decl_stmt><decl><type><name>u32</name></type> <name>iDbPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>iWalFrame</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** RBU handle.
**
** nPhaseOneStep:
**   If the RBU database contains an rbu_count table, this value is set to
**   a running estimate of the number of b-tree operations required to 
**   finish populating the *-oal file. This allows the sqlite3_bp_progress()
**   API to calculate the permyriadage progress of populating the *-oal file
**   using the formula:
**
**     permyriadage = (10000 * nProgress) / nPhaseOneStep
**
**   nPhaseOneStep is initialized to the sum of:
**
**     nRow * (nIndex + 1)
**
**   for all source tables in the RBU database, where nRow is the number
**   of rows in the source table and nIndex the number of indexes on the
**   corresponding target database table.
**
**   This estimate is accurate if the RBU update consists entirely of
**   INSERT operations. However, it is inaccurate if:
**
**     * the RBU update contains any UPDATE operations. If the PK specified
**       for an UPDATE operation does not exist in the target table, then
**       no b-tree operations are required on index b-trees. Or if the 
**       specified PK does exist, then (nIndex*2) such operations are
**       required (one delete and one insert on each index b-tree).
**
**     * the RBU update contains any DELETE operations for which the specified
**       PK does not exist. In this case no operations are required on index
**       b-trees.
**
**     * the RBU update contains REPLACE operations. These are similar to
**       UPDATE operations.
**
**   nPhaseOneStep is updated to account for the conditions above during the
**   first pass of each source table. The updated nPhaseOneStep value is
**   stored in the rbu_state table if the RBU update is suspended.
*/</comment>
<struct>struct <name>sqlite3rbu</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>eStage</name></decl>;</decl_stmt>                     <comment type="block">/* Value of RBU_STATE_STAGE field */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbMain</name></decl>;</decl_stmt>                <comment type="block">/* target database handle */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbRbu</name></decl>;</decl_stmt>                 <comment type="block">/* rbu database handle */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl>;</decl_stmt>                  <comment type="block">/* Path to target db */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRbu</name></decl>;</decl_stmt>                     <comment type="block">/* Path to rbu db */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zState</name></decl>;</decl_stmt>                   <comment type="block">/* Path to state db (or NULL if zRbu) */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zStateDb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>               <comment type="block">/* Db name for state ("stat" or "main") */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Value returned by last rbu_step() call */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrmsg</name></decl>;</decl_stmt>                  <comment type="block">/* Error message if rc!=SQLITE_OK */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nStep</name></decl>;</decl_stmt>                      <comment type="block">/* Rows processed for current object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nProgress</name></decl>;</decl_stmt>                  <comment type="block">/* Rows processed for all objects */</comment>
  <decl_stmt><decl><type><name>RbuObjIter</name></type> <name>objiter</name></decl>;</decl_stmt>             <comment type="block">/* Iterator for skipping through tbl/idx */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVfsName</name></decl>;</decl_stmt>           <comment type="block">/* Name of automatically created rbu vfs */</comment>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pTargetFd</name></decl>;</decl_stmt>            <comment type="block">/* File handle open on target db */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPagePerSector</name></decl>;</decl_stmt>             <comment type="block">/* Pages per sector for pTargetFd */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOalSz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nPhaseOneStep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRenameArg</name></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xRename</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block">/* The following state variables are used as part of the incremental
  ** checkpoint stage (eStage==RBU_STAGE_CKPT). See comments surrounding
  ** function rbuSetupCheckpoint() for details.  */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iMaxFrame</name></decl>;</decl_stmt>                  <comment type="block">/* Largest iWalFrame value in aFrame[] */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>mLock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nFrame</name></decl>;</decl_stmt>                     <comment type="block">/* Entries in aFrame[] array */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFrameAlloc</name></decl>;</decl_stmt>                <comment type="block">/* Allocated size of aFrame[] array */</comment>
  <decl_stmt><decl><type><name>RbuFrame</name> <modifier>*</modifier></type><name>aFrame</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pgsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iWalCksum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>szTemp</name></decl>;</decl_stmt>                     <comment type="block">/* Current size of all temp files in use */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>szTempLimit</name></decl>;</decl_stmt>                <comment type="block">/* Total size limit for temp files */</comment>

  <comment type="block">/* Used in RBU vacuum mode only */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRbu</name></decl>;</decl_stmt>                       <comment type="block">/* Number of RBU VFS in the stack */</comment>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pRbuFd</name></decl>;</decl_stmt>               <comment type="block">/* Fd for main db of dbRbu */</comment>
}</block>;</struct>

<comment type="block">/*
** An rbu VFS is implemented using an instance of this structure.
**
** Variable pRbu is only non-NULL for automatically created RBU VFS objects.
** It is NULL for RBU VFS objects created explicitly using
** sqlite3rbu_create_vfs(). It is used to track the total amount of temp
** space used by the RBU handle.
*/</comment>
<struct>struct <name>rbu_vfs</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name></type> <name>base</name></decl>;</decl_stmt>               <comment type="block">/* rbu VFS shim methods */</comment>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name></decl>;</decl_stmt>          <comment type="block">/* Underlying VFS */</comment>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>           <comment type="block">/* Mutex to protect pMain */</comment>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl>;</decl_stmt>               <comment type="block">/* Owner RBU object */</comment>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pMain</name></decl>;</decl_stmt>                <comment type="block">/* List of main db files */</comment>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pMainRbu</name></decl>;</decl_stmt>             <comment type="block">/* List of main db files with pRbu!=0 */</comment>
}</block>;</struct>

<comment type="block">/*
** Each file opened by an rbu VFS is represented by an instance of
** the following structure.
**
** If this is a temporary file (pRbu!=0 &amp;&amp; flags&amp;DELETE_ON_CLOSE), variable
** "sz" is set to the current size of the database file.
*/</comment>
<struct>struct <name>rbu_file</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* sqlite3_file methods */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name></decl>;</decl_stmt>            <comment type="block">/* Underlying file handle */</comment>
  <decl_stmt><decl><type><name>rbu_vfs</name> <modifier>*</modifier></type><name>pRbuVfs</name></decl>;</decl_stmt>               <comment type="block">/* Pointer to the rbu_vfs object */</comment>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl>;</decl_stmt>               <comment type="block">/* Pointer to rbu object (rbu target only) */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>sz</name></decl>;</decl_stmt>                         <comment type="block">/* Size of file in bytes (temp only) */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>openFlags</name></decl>;</decl_stmt>                  <comment type="block">/* Flags this file was opened with */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iCookie</name></decl>;</decl_stmt>                    <comment type="block">/* Cookie value for main db files */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>iWriteVer</name></decl>;</decl_stmt>                   <comment type="block">/* "write-version" value for main db files */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bNolock</name></decl>;</decl_stmt>                     <comment type="block">/* True to fail EXCLUSIVE locks */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>nShm</name></decl>;</decl_stmt>                       <comment type="block">/* Number of entries in apShm[] array */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>apShm</name></decl>;</decl_stmt>                   <comment type="block">/* Array of mmap'd *-shm regions */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDel</name></decl>;</decl_stmt>                     <comment type="block">/* Delete this when closing file */</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zWal</name></decl>;</decl_stmt>               <comment type="block">/* Wal filename for this main db file */</comment>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pWalFd</name></decl>;</decl_stmt>               <comment type="block">/* Wal file descriptor for this main db */</comment>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pMainNext</name></decl>;</decl_stmt>            <comment type="block">/* Next MAIN_DB file */</comment>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pMainRbuNext</name></decl>;</decl_stmt>         <comment type="block">/* Next MAIN_DB file with pRbu!=0 */</comment>
}</block>;</struct>

<comment type="block">/*
** True for an RBU vacuum handle, or false otherwise.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rbuIsVacuum</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;zTarget==0)</cpp:value></cpp:define>


<comment type="block" format="doxygen">/*************************************************************************
** The following three functions, found below:
**
**   rbuDeltaGetInt()
**   rbuDeltaChecksum()
**   rbuDeltaApply()
**
** are lifted from the fossil source code (http://fossil-scm.org). They
** are used to implement the scalar SQL function rbu_fossil_delta().
*/</comment>

<comment type="block">/*
** Read bytes from *pz and convert them into a positive integer.  When
** finished, leave *pz pointing to the first character past the end of
** the integer.  The *pLen parameter holds the length of the string
** in *pz and is decremented once for each character in the integer.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>rbuDeltaGetInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pz</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>zValue</name><index>[]</index></name> <init>= <expr><block>{
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
     <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,
    <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>,   <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">36</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>,
    <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>,   <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zStart</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>zValue</name><index>[<expr><literal type="number">0x7f</literal><operator>&amp;</operator><operator>*</operator><operator>(</operator><name>z</name><operator>++</operator><operator>)</operator></expr>]</index></name><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
     <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>z</name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>-=</operator> <name>z</name> <operator>-</operator> <name>zStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pz</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr>;</expr_stmt>
  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RBU_ENABLE_DELTA_CKSUM</name></expr></cpp:if>
<comment type="block">/*
** Compute a 32-bit checksum on the N-byte buffer.  Return the result.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>rbuDeltaChecksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>sum0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>sum1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>sum2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>sum3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>N</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>sum0</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum3</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>N</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <while>while<condition>(<expr><name>N</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>sum0</name> <operator>+=</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum1</name> <operator>+=</operator> <name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum2</name> <operator>+=</operator> <name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum3</name> <operator>+=</operator> <name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>N</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>sum3</name> <operator>+=</operator> <operator>(</operator><name>sum2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum0</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
  <switch>switch<condition>(<expr><name>N</name></expr>)</condition><block>{<block_content>
    <case>case <expr><literal type="number">3</literal></expr>:</case>   <expr_stmt><expr><name>sum3</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    <case>case <expr><literal type="number">2</literal></expr>:</case>   <expr_stmt><expr><name>sum3</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
    <case>case <expr><literal type="number">1</literal></expr>:</case>   <expr_stmt><expr><name>sum3</name> <operator>+=</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <default>default:</default>  <empty_stmt>;</empty_stmt>
  </block_content>}</block></switch>
  <return>return <expr><name>sum3</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Apply a delta.
**
** The output buffer should be big enough to hold the whole output
** file and a NUL terminator at the end.  The delta_output_size()
** routine will determine this size for you.
**
** The delta string should be null-terminated.  But the delta string
** may contain embedded NUL characters (if the input and output are
** binary files) so we also have to pass in the length of the delta in
** the lenDelta parameter.
**
** This function returns the size of the output file in bytes (excluding
** the final NUL terminator character).  Except, if the delta string is
** malformed or intended for use with a source file other than zSrc,
** then this routine returns -1.
**
** Refer to the delta_create() documentation above for a description
** of the delta file format.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuDeltaApply</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSrc</name></decl></parameter>,      <comment type="block">/* The source or pattern file */</comment>
  <parameter><decl><type><name>int</name></type> <name>lenSrc</name></decl></parameter>,            <comment type="block">/* Length of the source file */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDelta</name></decl></parameter>,    <comment type="block">/* Delta to apply to the pattern */</comment>
  <parameter><decl><type><name>int</name></type> <name>lenDelta</name></decl></parameter>,          <comment type="block">/* Length of the delta */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>             <comment type="block">/* Write the output into this preallocated buffer */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RBU_ENABLE_DELTA_CKSUM</name></expr></cpp:if>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOrigOut</name> <init>= <expr><name>zOut</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>rbuDeltaGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zDelta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lenDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zDelta</name><operator>!=</operator><literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* ERROR: size integer not terminated by "\n" */</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zDelta</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>lenDelta</name><operator>--</operator></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>*</operator><name>zDelta</name> <operator>&amp;&amp;</operator> <name>lenDelta</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>ofst</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>rbuDeltaGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zDelta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lenDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>( <expr><name><name>zDelta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="char">'@'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>zDelta</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>lenDelta</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ofst</name> <operator>=</operator> <call><name>rbuDeltaGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zDelta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lenDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>lenDelta</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>zDelta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">','</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* ERROR: copy command not terminated by ',' */</comment>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>zDelta</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>lenDelta</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>total</name><operator>&gt;</operator><name>limit</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* ERROR: copy exceeds output file size */</comment>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ofst</name><operator>+</operator><name>cnt</name><operator>)</operator> <operator>&gt;</operator> <name>lenSrc</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* ERROR: copy extends past end of input */</comment>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zSrc</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zOut</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">':'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>zDelta</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>lenDelta</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>total</name><operator>&gt;</operator><name>limit</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* ERROR:  insert command gives an output larger than predicted */</comment>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name>cnt</name><operator>&gt;</operator><name>lenDelta</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* ERROR: insert count exceeds size of delta */</comment>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>zDelta</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zOut</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>zDelta</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenDelta</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">';'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>zDelta</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>lenDelta</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>zOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RBU_ENABLE_DELTA_CKSUM</name></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>cnt</name><operator>!=</operator><call><name>rbuDeltaChecksum</name><argument_list>(<argument><expr><name>zOrigOut</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <comment type="block">/* ERROR:  bad checksum */</comment>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if<condition>( <expr><name>total</name><operator>!=</operator><name>limit</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* ERROR: generated size does not match predicted size */</comment>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>total</name></expr>;</return>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <comment type="block">/* ERROR: unknown delta operator */</comment>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <comment type="block">/* ERROR: unterminated delta */</comment>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuDeltaOutputSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDelta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenDelta</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>rbuDeltaGetInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zDelta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lenDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zDelta</name><operator>!=</operator><literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* ERROR: size integer not terminated by "\n" */</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** End of code taken from fossil.
*************************************************************************/</comment>

<comment type="block">/*
** Implementation of SQL scalar function rbu_fossil_delta().
**
** This function applies a fossil delta patch to a blob. Exactly two
** arguments must be passed to this function. The first is the blob to
** patch and the second the patch to apply. If no error occurs, this
** function returns the patched blob.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuFossilDeltaFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aDelta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nDelta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aOrig</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nOrig</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>nOut</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nOut2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aOut</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nOrig</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aOrig</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nDelta</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aDelta</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Figure out the size of the output */</comment>
  <expr_stmt><expr><name>nOut</name> <operator>=</operator> <call><name>rbuDeltaOutputSize</name><argument_list>(<argument><expr><name>aDelta</name></expr></argument>, <argument><expr><name>nDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nOut</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"corrupt fossil delta"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>aOut</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nOut</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nOut2</name> <operator>=</operator> <call><name>rbuDeltaApply</name><argument_list>(<argument><expr><name>aOrig</name></expr></argument>, <argument><expr><name>nOrig</name></expr></argument>, <argument><expr><name>aDelta</name></expr></argument>, <argument><expr><name>nDelta</name></expr></argument>, <argument><expr><name>aOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nOut2</name><operator>!=</operator><name>nOut</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"corrupt fossil delta"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>aOut</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Prepare the SQL statement in buffer zSql against database handle db.
** If successful, set *ppStmt to point to the new statement and return
** SQLITE_OK. 
**
** Otherwise, if an error does occur, set *ppStmt to NULL and return
** an SQLite error code. Additionally, set output variable *pzErrmsg to
** point to a buffer containing an error message. It is the responsibility
** of the caller to (eventually) free this buffer using sqlite3_free().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>prepareAndCollectError</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStmt</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrmsg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ppStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pzErrmsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppStmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Reset the SQL statement passed as the first argument. Return a copy
** of the value returned by sqlite3_reset().
**
** If an error has occurred, then set *pzErrmsg to point to a buffer
** containing an error message. It is the responsibility of the caller
** to eventually free this buffer using sqlite3_free().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>resetAndCollectError</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrmsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pzErrmsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><call><name>sqlite3_db_handle</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unless it is NULL, argument zSql points to a buffer allocated using
** sqlite3_malloc containing an SQL statement. This function prepares the SQL
** statement against database db and frees the buffer. If statement 
** compilation is successful, *ppStmt is set to point to the new statement 
** handle and SQLITE_OK is returned. 
**
** Otherwise, if an error occurs, *ppStmt is set to NULL and an error code
** returned. In this case, *pzErrmsg may also be set to point to an error
** message. It is the responsibility of the caller to free this error message
** buffer using sqlite3_free().
**
** If argument zSql is NULL, this function assumes that an OOM has occurred.
** In this case SQLITE_NOMEM is returned and *ppStmt set to NULL.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>prepareFreeAndCollectError</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStmt</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrmsg</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>*</operator><name>pzErrmsg</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppStmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ppStmt</name></expr></argument>, <argument><expr><name>pzErrmsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free the RbuObjIter.azTblCol[] and RbuObjIter.abTblPk[] arrays allocated
** by an earlier call to rbuObjIterCacheTableInfo().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuObjIterFreeCols</name><parameter_list>(<parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblType</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aiSrcOrder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abNotNull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>               <comment type="block">/* Invalid value */</comment>
</block_content>}</block></function>

<comment type="block">/*
** Finalize all statements and free all allocations that are specific to
** the current object (table/index pair).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuObjIterClearStatements</name><parameter_list>(<parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>RbuUpdateStmt</name> <modifier>*</modifier></type><name>pUp</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pInsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDelete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTmpInsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pUp</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pRbuUpdate</name></name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>pUp</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>RbuUpdateStmt</name> <modifier>*</modifier></type><name>pTmp</name> <init>= <expr><name><name>pUp</name><operator>-&gt;</operator><name>pNext</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pUp</name><operator>-&gt;</operator><name>pUpdate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pUp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pUp</name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdxSql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pInsert</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDelete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRbuUpdate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTmpInsert</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nIdxCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdxSql</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Clean up any resources allocated as part of the iterator object passed
** as the only argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuObjIterFinalize</name><parameter_list>(<parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>rbuObjIterClearStatements</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTblIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIdxIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rbuObjIterFreeCols</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RbuObjIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Advance the iterator to the next position.
**
** If no error occurs, SQLITE_OK is returned and the iterator is left 
** pointing to the next entry. Otherwise, an error code and message is 
** left in the RBU handle passed as the first argument. A copy of the 
** error code is returned.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuObjIterNext</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>

    <comment type="block">/* Free any SQLite statements used while processing the previous object */</comment> 
    <expr_stmt><expr><call><name>rbuObjIterClearStatements</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>,
          <argument><expr><literal type="string">"DROP TRIGGER IF EXISTS temp.rbu_insert_tr;"</literal>
          <literal type="string">"DROP TRIGGER IF EXISTS temp.rbu_update1_tr;"</literal>
          <literal type="string">"DROP TRIGGER IF EXISTS temp.rbu_update2_tr;"</literal>
          <literal type="string">"DROP TRIGGER IF EXISTS temp.rbu_delete_tr;"</literal></expr></argument>
          , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>bCleanup</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>rbuObjIterFreeCols</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bCleanup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTblIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>resetAndCollectError</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTblIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTblIter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTblIter</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_OK</name></expr> </then><else>: <expr><name>SQLITE_NOMEM</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pIdx</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pIdxIter</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIdxIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>resetAndCollectError</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIdxIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bCleanup</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIdxIter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTnum</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIdxIter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bUnique</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIdxIter</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name></expr> ?</condition><then> <expr><name>SQLITE_OK</name></expr> </then><else>: <expr><name>SQLITE_NOMEM</name></expr></else></ternary></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>rbuObjIterFinalize</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** The implementation of the rbu_target_name() SQL function. This function
** accepts one or two arguments. The first argument is the name of a table -
** the name of a table in the RBU database.  The second, if it is present, is 1
** for a view or 0 for a table. 
**
** For a non-vacuum RBU handle, if the table name matches the pattern:
**
**     data[0-9]_&lt;name&gt;
**
** where &lt;name&gt; is any sequence of 1 or more characters, &lt;name&gt; is returned.
** Otherwise, if the only argument does not match the above pattern, an SQL
** NULL is returned.
**
**     "data_t1"     -&gt; "t1"
**     "data0123_t2" -&gt; "t2"
**     "dataAB_t3"   -&gt; NULL
**
** For an rbu vacuum handle, a copy of the first argument is returned if
** the second argument is either missing or 0 (not a view).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuTargetNameFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>argc</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>zIn</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zIn</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name>argc</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zIn</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>zIn</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Initialize the iterator structure passed as the second argument.
**
** If no error occurs, SQLITE_OK is returned and the iterator is left 
** pointing to the first entry. Otherwise, an error code and message is 
** left in the RBU handle passed as the first argument. A copy of the 
** error code is returned.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuObjIterFirst</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RbuObjIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pTblIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
    <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
      <argument><expr><literal type="string">"SELECT rbu_target_name(name, type='view') AS target, name "</literal>
      <literal type="string">"FROM sqlite_schema "</literal>
      <literal type="string">"WHERE type IN ('table', 'view') AND target IS NOT NULL "</literal>
      <literal type="string">" %s "</literal>
      <literal type="string">"ORDER BY name"</literal></expr></argument>
  , <argument><expr><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"AND rootpage!=0 AND rootpage IS NOT NULL"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pIdxIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
        <argument><expr><literal type="string">"SELECT name, rootpage, sql IS NULL OR substr(8, 6)=='UNIQUE' "</literal>
        <literal type="string">"  FROM main.sqlite_schema "</literal>
        <literal type="string">"  WHERE type='index' AND tbl_name = ?"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bCleanup</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><call><name>rbuObjIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This is a wrapper around "sqlite3_mprintf(zFmt, ...)". If an OOM occurs,
** an error code is stored in the RBU handle passed as the first argument.
**
** If an error has already occurred (p-&gt;rc is already set to something other
** than SQLITE_OK), then this function returns NULL without modifying the
** stored error code. In this case it still calls sqlite3_free() on any 
** printf() parameters associated with %z conversions.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuMPrintf</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zSql</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Argument zFmt is a sqlite3_mprintf() style format string. The trailing
** arguments are the usual subsitution values. This function performs
** the printf() style substitutions and executes the result as an SQL
** statement on the RBU handles database.
**
** If an error occurs, an error code and error message is stored in the
** RBU handle. If an error has already occurred when this function is
** called, it is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuMPrintfExec</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Attempt to allocate and return a pointer to a zeroed block of nByte 
** bytes. 
**
** If an error (i.e. an OOM condition) occurs, return NULL and leave an 
** error code in the rbu handle passed as the first argument. Or, if an 
** error has already occurred when this function is called, return NULL 
** immediately without attempting the allocation or modifying the stored
** error code.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rbuMalloc</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nByte</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Allocate and zero the pIter-&gt;azTblCol[] and abTblPk[] arrays so that
** there is room for at least nCol elements. If an OOM occurs, store an
** error code in the RBU handle passed as the first argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuAllocateIterArrays</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nCol</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name> <init>= <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>u8</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>*</operator> <name>nCol</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azNew</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>azNew</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>rbuMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>azNew</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name></name> <operator>=</operator> <name>azNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblType</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>azNew</name><index>[<expr><name>nCol</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aiSrcOrder</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>azTblType</name><index>[<expr><name>nCol</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aiSrcOrder</name><index>[<expr><name>nCol</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abNotNull</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>nCol</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>abNotNull</name><index>[<expr><name>nCol</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The first argument must be a nul-terminated string. This function
** returns a copy of the string in memory obtained from sqlite3_malloc().
** It is the responsibility of the caller to eventually free this memory
** using sqlite3_free().
**
** If an OOM condition is encountered when attempting to allocate memory,
** output variable (*pRc) is set to SQLITE_NOMEM before returning. Otherwise,
** if the allocation succeeds, (*pRc) is left unchanged.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuStrndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zStr</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>nCopy</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zStr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><name>zStr</name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Finalize the statement passed as the second argument.
**
** If the sqlite3_finalize() call indicates that an error occurs, and the
** rbu handle error code is not already set, set the error code and error
** message accordingly.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuFinalize</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_db_handle</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Determine the type of a table.
**
**   peType is of type (int*), a pointer to an output parameter of type
**   (int). This call sets the output parameter as follows, depending
**   on the type of the table specified by parameters dbName and zTbl.
**
**     RBU_PK_NOTABLE:       No such table.
**     RBU_PK_NONE:          Table has an implicit rowid.
**     RBU_PK_IPK:           Table has an explicit IPK column.
**     RBU_PK_EXTERNAL:      Table has an external PK index.
**     RBU_PK_WITHOUT_ROWID: Table is WITHOUT ROWID.
**     RBU_PK_VTAB:          Table is a virtual table.
**
**   Argument *piPk is also of type (int*), and also points to an output
**   parameter. Unless the table has an external primary key index 
**   (i.e. unless *peType is set to 3), then *piPk is set to zero. Or,
**   if the table does have an external primary key index, then *piPk
**   is set to the root page number of the primary key index before
**   returning.
**
** ALGORITHM:
**
**   if( no entry exists in sqlite_schema ){
**     return RBU_PK_NOTABLE
**   }else if( sql for the entry starts with "CREATE VIRTUAL" ){
**     return RBU_PK_VTAB
**   }else if( "PRAGMA index_list()" for the table contains a "pk" index ){
**     if( the index that is the pk exists in sqlite_schema ){
**       *piPK = rootpage of that index.
**       return RBU_PK_EXTERNAL
**     }else{
**       return RBU_PK_WITHOUT_ROWID
**     }
**   }else if( "PRAGMA table_info()" lists one or more "pk" columns ){
**     return RBU_PK_IPK
**   }else{
**     return RBU_PK_NONE
**   }
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuTableType</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTab</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>peType</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piTnum</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piPk</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <comment type="block">/*
  ** 0) SELECT count(*) FROM sqlite_schema where name=%Q AND IsVirtual(%Q)
  ** 1) PRAGMA index_list = ?
  ** 2) SELECT count(*) FROM sqlite_schema where name=%Q 
  ** 3) PRAGMA table_info = ?
  */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name><name>aStmt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>RBU_PK_NOTABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piPk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aStmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
    <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"SELECT "</literal>
          <literal type="string">" (sql COLLATE nocase BETWEEN 'CREATE VIRTUAL' AND 'CREATE VIRTUAM'),"</literal>
          <literal type="string">" rootpage"</literal>
          <literal type="string">"  FROM sqlite_schema"</literal>
          <literal type="string">" WHERE name=%Q"</literal></expr></argument>, <argument><expr><name>zTab</name></expr></argument>
  )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* Either an error, or no such table. */</comment>
    <goto>goto <name>rbuTableType_end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>RBU_PK_VTAB</name></expr>;</expr_stmt>                     <comment type="block">/* virtual table */</comment>
    <goto>goto <name>rbuTableType_end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>piTnum</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aStmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
    <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA index_list=%Q"</literal></expr></argument>,<argument><expr><name>zTab</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>rbuTableType_end</name>;</goto></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>zOrig</name> <init>= <expr><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>zIdx</name> <init>= <expr><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zOrig</name> <operator>&amp;&amp;</operator> <name>zIdx</name> <operator>&amp;&amp;</operator> <name><name>zOrig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'p'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aStmt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
          <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
            <argument><expr><literal type="string">"SELECT rootpage FROM sqlite_schema WHERE name = %Q"</literal></expr></argument>, <argument><expr><name>zIdx</name></expr></argument>
      )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>piPk</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>RBU_PK_EXTERNAL</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>RBU_PK_WITHOUT_ROWID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>rbuTableType_end</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aStmt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
    <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA table_info=%Q"</literal></expr></argument>,<argument><expr><name>zTab</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>RBU_PK_IPK</name></expr>;</expr_stmt>                <comment type="block">/* explicit IPK column */</comment>
        <goto>goto <name>rbuTableType_end</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>RBU_PK_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>rbuTableType_end</name>:</label> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aStmt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aStmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>aStmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
** This is a helper function for rbuObjIterCacheTableInfo(). It populates
** the pIter-&gt;abIndexed[] array.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuObjIterCacheIndexedCols</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u8</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA main.index_list = %Q"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIdx</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bPartial</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pXInfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zIdx</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>bPartial</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u8</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pXInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA main.index_xinfo = %Q"</literal></expr></argument>, <argument><expr><name>zIdx</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iCid</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>iCid</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name><index>[<expr><name>iCid</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>iCid</name><operator>==</operator><operator>-</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u8</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nIndex</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_WITHOUT_ROWID</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* "PRAGMA index_list" includes the main PK b-tree */</comment>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nIndex</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>bIndex</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** If they are not already populated, populate the pIter-&gt;azTblCol[],
** pIter-&gt;abTblPk[], pIter-&gt;nTblCol and pIter-&gt;bRowid variables according to
** the table (not index) that the iterator currently points to.
**
** Return SQLITE_OK if successful, or an SQLite error code otherwise. If
** an error does occur, an error code and error message are also left in 
** the RBU handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuObjIterCacheTableInfo</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* for() loop iterator variable */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bRbuRowid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* If input table has column "rbu_rowid" */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iOrder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iTnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Figure out the type of table this step will deal with. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuTableType</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iTnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iPkTnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NOTABLE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"no such table: %s"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTnum</name></name> <operator>=</operator> <name>iTnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_IPK</name> 
         <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_WITHOUT_ROWID</name>
         <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_VTAB</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Populate the azTblCol[] and nTblCol variables based on the columns
    ** of the input table. Ignore any input table columns that begin with
    ** "rbu_".  */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM '%q'"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nCol</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rbuAllocateIterArrays</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>nCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_name</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><literal type="string">"rbu_"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zCopy</name> <init>= <expr><call><name>rbuStrndup</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aiSrcOrder</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>]</index></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>zCopy</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"rbu_rowid"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>bRbuRowid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name>
     <operator>&amp;&amp;</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <name>bRbuRowid</name><operator>!=</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_VTAB</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"table %q %s rbu_rowid column"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>,
          <argument><expr><operator>(</operator><ternary><condition><expr><name>bRbuRowid</name></expr> ?</condition><then> <expr><literal type="string">"may not have"</literal></expr> </then><else>: <expr><literal type="string">"requires"</literal></expr></else></ternary><operator>)</operator></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check that all non-HIDDEN columns in the destination table are also
    ** present in the input table. Populate the abTblPk[], azTblType[] and
    ** aiTblOrder[] arrays at the same time.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
          <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA table_info(%Q)"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>  <comment type="block">/* An OOM - finalize() below returns S_NOMEM */</comment>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>iOrder</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"column missing from %q: %s"</literal></expr></argument>,
            <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iPk</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bNotNull</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>i</name><operator>!=</operator><name>iOrder</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aiSrcOrder</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aiSrcOrder</name><index>[<expr><name>iOrder</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>iOrder</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblType</name><index>[<expr><name>iOrder</name></expr>]</index></name> <operator>=</operator> <call><name>rbuStrndup</name><argument_list>(<argument><expr><name>zType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iPk</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>iOrder</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>iPk</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>abNotNull</name><index>[<expr><name>iOrder</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>bNotNull</name> <operator>||</operator> <operator>(</operator><name>iPk</name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>iOrder</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuObjIterCacheIndexedCols</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>!=</operator><name>RBU_PK_VTAB</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>!=</operator><name>RBU_PK_VTAB</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nIndex</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function constructs and returns a pointer to a nul-terminated 
** string containing some SQL clause or list based on one or more of the 
** column names currently stored in the pIter-&gt;azTblCol[] array.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuObjIterGetCollist</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                  <comment type="block">/* RBU object */</comment>
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>               <comment type="block">/* Object iterator for column names */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s\"%w\""</literal></expr></argument>, <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>zList</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a comma separated list of the quoted PRIMARY KEY column names,
** in order, for the current table. Before each column name, add the text
** zPre. After each column name, add the zPost text. Use zSeparator as
** the separator text (usually ", ").
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuObjIterGetPkList</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                  <comment type="block">/* RBU object */</comment>
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,              <comment type="block">/* Object iterator for column names */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPre</name></decl></parameter>,               <comment type="block">/* Before each quoted column name */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSeparator</name></decl></parameter>,         <comment type="block">/* Separator to use between columns */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPost</name></decl></parameter>               <comment type="block">/* After each quoted column name */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iPk</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>iPk</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s%s\"%w\"%s"</literal></expr></argument>, <argument><expr><name>zRet</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>zPre</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><name>zPost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zSep</name> <operator>=</operator> <name>zSeparator</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iPk</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is called as part of restarting an RBU vacuum within 
** stage 1 of the process (while the *-oal file is being built) while
** updating a table (not an index). The table may be a rowid table or
** a WITHOUT ROWID table. It queries the target database to find the 
** largest key that has already been written to the target table and
** constructs a WHERE clause that can be used to extract the remaining
** rows from the source table. For a rowid table, the WHERE clause
** is of the form:
**
**     "WHERE _rowid_ &gt; ?"
**
** and for WITHOUT ROWID tables:
**
**     "WHERE (key1, key2) &gt; (?, ?)"
**
** Instead of "?" placeholders, the actual WHERE clauses created by
** this function contain literal SQL values.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuVacuumTableStart</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                  <comment type="block">/* RBU handle */</comment>
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,              <comment type="block">/* RBU iterator object */</comment>
  <parameter><decl><type><name>int</name></type> <name>bRowid</name></decl></parameter>,                     <comment type="block">/* True for a rowid table */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zWrite</name></decl></parameter>              <comment type="block">/* Target table name prefix */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>bRowid</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"SELECT max(_rowid_) FROM \"%s%w\""</literal></expr></argument>, <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>
        )</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pMax</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iMax</name> <init>= <expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pMax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" WHERE _rowid_ &gt; %lld "</literal></expr></argument>, <argument><expr><name>iMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOrder</name> <init>= <expr><call><name>rbuObjIterGetPkList</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="string">" DESC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSelect</name> <init>= <expr><call><name>rbuObjIterGetPkList</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="string">"quote("</literal></expr></argument>, <argument><expr><literal type="string">"||','||"</literal></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zList</name> <init>= <expr><call><name>rbuObjIterGetPkList</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
          <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
            <argument><expr><literal type="string">"SELECT %s FROM \"%s%w\" ORDER BY %s LIMIT 1"</literal></expr></argument>, 
                <argument><expr><name>zSelect</name></expr></argument>, <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>, <argument><expr><name>zOrder</name></expr></argument>
          )</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pMax</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVal</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pMax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" WHERE (%s) &gt; (%s) "</literal></expr></argument>, <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is called as part of restating an RBU vacuum when the
** current operation is writing content to an index. If possible, it
** queries the target index b-tree for the largest key already written to
** it, then composes and returns an expression that can be used in a WHERE 
** clause to select the remaining required rows from the source table. 
** It is only possible to return such an expression if:
**
**   * The index contains no DESC columns, and
**   * The last key written to the index before the operation was 
**     suspended does not contain any NULL values.
**
** The expression is of the form:
**
**   (index-field1, index-field2, ...) &gt; (?, ?, ...)
**
** except that the "?" placeholders are replaced with literal values.
**
** If the expression cannot be created, NULL is returned. In this case,
** the caller has to use an OFFSET clause to extract only the required 
** rows from the sourct table, just as it does for an RBU update operation.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuVacuumIndexStart</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                  <comment type="block">/* RBU handle */</comment>
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>               <comment type="block">/* RBU iterator object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOrder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLhs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSelect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zVector</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bFailed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pXInfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pXInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
      <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA main.index_xinfo = %Q"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iCid</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCollate</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bFailed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>iCid</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_IPK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zCol</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>zCol</name> <operator>=</operator> <literal type="string">"_rowid_"</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zCol</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>iCid</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>zLhs</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s \"%w\" COLLATE %Q"</literal></expr></argument>,
        <argument><expr><name>zLhs</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><name>zCollate</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zOrder</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s \"rbu_imp_%d%w\" COLLATE %Q DESC"</literal></expr></argument>,
        <argument><expr><name>zOrder</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><name>zCollate</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zSelect</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s quote(\"rbu_imp_%d%w\")"</literal></expr></argument>,
        <argument><expr><name>zSelect</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>iCol</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>bFailed</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>index_start_out</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pSel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT %s FROM \"rbu_imp_%w\" ORDER BY %s LIMIT 1"</literal></expr></argument>,
          <argument><expr><name>zSelect</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>, <argument><expr><name>zOrder</name></expr></argument>
        )</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pSel</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>iCol</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iCol</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zQuoted</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pSel</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>zQuoted</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zQuoted</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'N'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>bFailed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>zVector</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s%s"</literal></expr></argument>, <argument><expr><name>zVector</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>zQuoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>bFailed</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"(%s) &gt; (%s)"</literal></expr></argument>, <argument><expr><name>zLhs</name></expr></argument>, <argument><expr><name>zVector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

 <label><name>index_start_out</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zVector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zLhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is used to create a SELECT list (the list of SQL 
** expressions that follows a SELECT keyword) for a SELECT statement 
** used to read from an data_xxx or rbu_tmp_xxx table while updating the 
** index object currently indicated by the iterator object passed as the 
** second argument. A "PRAGMA index_xinfo = &lt;idxname&gt;" statement is used 
** to obtain the required information.
**
** If the index is of the following form:
**
**   CREATE INDEX i1 ON t1(c, b COLLATE nocase);
**
** and "t1" is a table with an explicit INTEGER PRIMARY KEY column 
** "ipk", the returned string is:
**
**   "`c` COLLATE 'BINARY', `b` COLLATE 'NOCASE', `ipk` COLLATE 'BINARY'"
**
** As well as the returned string, three other malloc'd strings are 
** returned via output parameters. As follows:
**
**   pzImposterCols: ...
**   pzImposterPk: ...
**   pzWhere: ...
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuObjIterGetIndexCols</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                  <comment type="block">/* RBU object */</comment>
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,              <comment type="block">/* Object iterator for column names */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzImposterCols</name></decl></parameter>,          <comment type="block">/* OUT: Columns for imposter table */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzImposterPk</name></decl></parameter>,            <comment type="block">/* OUT: Imposter PK clause */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzWhere</name></decl></parameter>,                 <comment type="block">/* OUT: WHERE clause */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBind</name></decl></parameter>                     <comment type="block">/* OUT: Trbul number of columns */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Error code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc2</name></decl>;</decl_stmt>                        <comment type="block">/* sqlite3_finalize() return code */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* String to return */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zImpCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* String to return via *pzImposterCols */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zImpPK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* String to return via *pzImposterPK */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zWhere</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* String to return via *pzWhere */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Value to return via *pnBind */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCom</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Set to ", " later on */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zAnd</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Set to " AND " later on */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pXInfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* PRAGMA index_xinfo = ? */</comment>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pXInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA main.index_xinfo = %Q"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iCid</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bDesc</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCollate</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>iCid</name><operator>==</operator><operator>-</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iSeq</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%z%s(%.*s) COLLATE %Q"</literal></expr></argument>, <argument><expr><name>zRet</name></expr></argument>, <argument><expr><name>zCom</name></expr></argument>,
          <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name><index>[<expr><name>iSeq</name></expr>]</index></name><operator>.</operator><name>nSpan</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name><index>[<expr><name>iSeq</name></expr>]</index></name><operator>.</operator><name>zSpan</name></expr></argument>, <argument><expr><name>zCollate</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>iCid</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* An integer primary key. If the table has an explicit IPK, use
        ** its name. Otherwise, use "rbu_rowid".  */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_IPK</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
          <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>zCol</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zCol</name> <operator>=</operator> <literal type="string">"_rowid_"</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>zCol</name> <operator>=</operator> <literal type="string">"rbu_rowid"</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"INTEGER"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>zCol</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>iCid</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>zType</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>azTblType</name><index>[<expr><name>iCid</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%z%s\"%w\" COLLATE %Q"</literal></expr></argument>, <argument><expr><name>zRet</name></expr></argument>, <argument><expr><name>zCom</name></expr></argument>,<argument><expr><name>zCol</name></expr></argument>,<argument><expr><name>zCollate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>bUnique</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOrder</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>bDesc</name></expr> ?</condition><then> <expr><literal type="string">" DESC"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>zImpPK</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%z%s\"rbu_imp_%d%w\"%s"</literal></expr></argument>, 
          <argument><expr><name>zImpPK</name></expr></argument>, <argument><expr><name>zCom</name></expr></argument>, <argument><expr><name>nBind</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><name>zOrder</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zImpCols</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%z%s\"rbu_imp_%d%w\" %s COLLATE %Q"</literal></expr></argument>, 
        <argument><expr><name>zImpCols</name></expr></argument>, <argument><expr><name>zCom</name></expr></argument>, <argument><expr><name>nBind</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><name>zCollate</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zWhere</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
        <argument><expr><literal type="string">"%z%s\"rbu_imp_%d%w\" IS ?"</literal></expr></argument>, <argument><expr><name>zWhere</name></expr></argument>, <argument><expr><name>zAnd</name></expr></argument>, <argument><expr><name>nBind</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>zImpPK</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>zImpCols</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>zWhere</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>zCom</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zAnd</name> <operator>=</operator> <literal type="string">" AND "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nBind</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zImpCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zImpPK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zImpCols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zImpPK</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zWhere</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pzImposterCols</name> <operator>=</operator> <name>zImpCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzImposterPk</name> <operator>=</operator> <name>zImpPK</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzWhere</name> <operator>=</operator> <name>zWhere</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnBind</name> <operator>=</operator> <name>nBind</name></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Assuming the current table columns are "a", "b" and "c", and the zObj
** paramter is passed "old", return a string of the form:
**
**     "old.a, old.b, old.b"
**
** With the column names escaped.
**
** For tables with implicit rowids - RBU_PK_EXTERNAL and RBU_PK_NONE, append
** the text ", old._rowid_" to the returned value.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuObjIterGetOldlist</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zObj</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zS</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%z%s%s.\"%w\""</literal></expr></argument>, <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zS</name></expr></argument>, <argument><expr><name>zObj</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%z%sNULL"</literal></expr></argument>, <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>zS</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zList</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* For a table with implicit rowids, append "old._rowid_" to the list. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z, %s._rowid_"</literal></expr></argument>, <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zList</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return an expression that can be used in a WHERE clause to match the
** primary key of the current table. For example, if the table is:
**
**   CREATE TABLE t1(a, b, c, PRIMARY KEY(b, c));
**
** Return the string:
**
**   "b = ?1 AND c = ?2"
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuObjIterGetWhere</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_VTAB</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"_rowid_ = ?%d"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%sc%d=?%d"</literal></expr></argument>, <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">" AND "</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
        <argument><expr><literal type="string">"_rowid_ = (SELECT id FROM rbu_imposter2 WHERE %z)"</literal></expr></argument>, <argument><expr><name>zList</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s\"%w\"=?%d"</literal></expr></argument>, <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">" AND "</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>zList</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The SELECT statement iterating through the keys for the current object
** (p-&gt;objiter.pSelect) currently points to a valid row. However, there
** is something wrong with the rbu_control value in the rbu_control value
** stored in the (p-&gt;nCol+1)'th column. Set the error code and error message
** of the RBU handle to something reflecting this.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuBadControlError</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"invalid rbu_control value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Return a nul-terminated string containing the comma separated list of
** assignments that should be included following the "SET" keyword of
** an UPDATE statement used to update the table object that the iterator
** passed as the second argument currently points to if the rbu_control
** column of the data_xxx table entry is set to zMask.
**
** The memory for the returned string is obtained from sqlite3_malloc().
** It is the responsibility of the caller to eventually free it using
** sqlite3_free(). 
**
** If an OOM error is encountered when allocating space for the new
** string, an error code is left in the rbu handle passed as the first
** argument and NULL is returned. Or, if an error has already occurred
** when this function is called, NULL is returned immediately, without
** attempting the allocation or modifying the stored error code.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuObjIterGetSetlist</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMask</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zMask</name></expr></argument>)</argument_list></call><operator>!=</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>rbuBadControlError</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>zMask</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>aiSrcOrder</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'x'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s\"%w\"=?%d"</literal></expr></argument>, 
              <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'d'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s\"%w\"=rbu_delta(\"%w\", ?%d)"</literal></expr></argument>, 
              <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'f'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zList</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s\"%w\"=rbu_fossil_delta(\"%w\", ?%d)"</literal></expr></argument>, 
              <argument><expr><name>zList</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zList</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a nul-terminated string consisting of nByte comma separated
** "?" expressions. For example, if nByte is 3, return a pointer to
** a buffer containing the string "?,?,?".
**
** The memory for the returned string is obtained from sqlite3_malloc().
** It is the responsibility of the caller to eventually free it using
** sqlite3_free(). 
**
** If an OOM error is encountered when allocating space for the new
** string, an error code is left in the rbu handle passed as the first
** argument and NULL is returned. Or, if an error has already occurred
** when this function is called, NULL is returned immediately, without
** attempting the allocation or modifying the stored error code.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuObjIterGetBindlist</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBind</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>nBind</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>zRet</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>rbuMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zRet</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nBind</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>zRet</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zRet</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>nBind</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'\0'</literal></expr> </then><else>: <expr><literal type="char">','</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The iterator currently points to a table (not index) of type 
** RBU_PK_WITHOUT_ROWID. This function creates the PRIMARY KEY 
** declaration for the corresponding imposter table. For example,
** if the iterator points to a table created as:
**
**   CREATE TABLE t1(a, b, c, PRIMARY KEY(b, a DESC)) WITHOUT ROWID
**
** this function returns:
**
**   PRIMARY KEY("b", "a" DESC)
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuWithoutRowidPK</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name> <init>= <expr><literal type="string">"PRIMARY KEY("</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pXList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* PRAGMA index_list = (pIter-&gt;zTbl) */</comment>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pXInfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* PRAGMA index_xinfo = &lt;pk-index&gt; */</comment>
   
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pXList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA main.index_list = %Q"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pXList</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOrig</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pXList</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zOrig</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zOrig</name></expr></argument>, <argument><expr><literal type="string">"pk"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIdx</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pXList</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>zIdx</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pXInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
              <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA main.index_xinfo = %Q"</literal></expr></argument>, <argument><expr><name>zIdx</name></expr></argument>)</argument_list></call></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pXList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <comment type="block">/* int iCid = sqlite3_column_int(pXInfo, 0); */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDesc</name> <init>= <expr><ternary><condition><expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" DESC"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s\"%w\"%s"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z)"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function creates the second imposter table used when writing to
** a table b-tree where the table has an external primary key. If the
** iterator passed as the second argument does not currently point to
** a table (not index) with an external primary key, this function is a
** no-op. 
**
** Assuming the iterator does point to a table with an external PK, this
** function creates a WITHOUT ROWID imposter table named "rbu_imposter2"
** used to access that PK index. For example, if the target table is
** declared as follows:
**
**   CREATE TABLE t1(a, b TEXT, c REAL, PRIMARY KEY(b, c));
**
** then the imposter table schema is:
**
**   CREATE TABLE rbu_imposter2(c1 TEXT, c2 REAL, id INTEGER) WITHOUT ROWID;
**
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuCreateImposterTable2</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>tnum</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iPkTnum</name></name></expr></init></decl>;</decl_stmt>    <comment type="block">/* Root page of PK index */</comment>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pQuery</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* SELECT name ... WHERE rootpage = $tnum */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Name of PK index */</comment>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pXInfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* PRAGMA main.index_xinfo = $zIdx */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zComma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Used to build up list of table cols */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                <comment type="block">/* Used to build up table PK declaration */</comment>

    <comment type="block">/* Figure out the name of the primary key index for the current table.
    ** This is needed for the argument to "PRAGMA index_xinfo". Set
    ** zIdx to point to a nul-terminated string containing this name. */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pQuery</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
        <argument><expr><literal type="string">"SELECT name FROM sqlite_schema WHERE rootpage = ?"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zIdx</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>zIdx</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pXInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
          <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA main.index_xinfo = %Q"</literal></expr></argument>, <argument><expr><name>zIdx</name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>bKey</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>bKey</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iCid</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bDesc</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCollate</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pXInfo</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zCols</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%sc%d %s COLLATE %Q"</literal></expr></argument>, <argument><expr><name>zCols</name></expr></argument>, <argument><expr><name>zComma</name></expr></argument>, 
            <argument><expr><name>iCid</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblType</name><index>[<expr><name>iCid</name></expr>]</index></name></expr></argument>, <argument><expr><name>zCollate</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zPk</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%sc%d%s"</literal></expr></argument>, <argument><expr><name>zPk</name></expr></argument>, <argument><expr><name>zComma</name></expr></argument>, <argument><expr><name>iCid</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bDesc</name></expr>?</condition><then><expr><literal type="string">" DESC"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zComma</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>zCols</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z, id INTEGER"</literal></expr></argument>, <argument><expr><name>zCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pXInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_IMPOSTER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>,
        <argument><expr><literal type="string">"CREATE TABLE rbu_imposter2(%z, PRIMARY KEY(%z)) WITHOUT ROWID"</literal></expr></argument>, 
        <argument><expr><name>zCols</name></expr></argument>, <argument><expr><name>zPk</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_IMPOSTER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** If an error has already occurred when this function is called, it 
** immediately returns zero (without doing any work). Or, if an error
** occurs during the execution of this function, it sets the error code
** in the sqlite3rbu object indicated by the first argument and returns
** zero.
**
** The iterator passed as the second argument is guaranteed to point to
** a table (not an index) when this function is called. This function
** attempts to create any imposter table required to write to the main
** table b-tree of the table before returning. Non-zero is returned if
** an imposter table are created, or zero otherwise.
**
** An imposter table is required in all cases except RBU_PK_VTAB. Only
** virtual tables are written to directly. The imposter table has the 
** same schema as the actual target table (less any UNIQUE constraints). 
** More precisely, the "same schema" means the same columns, types, 
** collation sequences. For tables that do not have an external PRIMARY
** KEY, it also means the same PRIMARY KEY declaration.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuCreateImposterTable</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>!=</operator><name>RBU_PK_VTAB</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>tnum</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iTnum</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zComma</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_IMPOSTER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>iCol</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iCol</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPk</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblCol</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zColl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_table_column_metadata</name><argument_list>(
          <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zColl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_IPK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>iCol</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <comment type="block">/* If the target table column is an "INTEGER PRIMARY KEY", add
        ** "PRIMARY KEY" to the imposter table column declaration. */</comment>
        <expr_stmt><expr><name>zPk</name> <operator>=</operator> <literal type="string">"PRIMARY KEY "</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z%s\"%w\" %s %sCOLLATE %Q%s"</literal></expr></argument>, 
          <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>zComma</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>azTblType</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></argument>, <argument><expr><name>zPk</name></expr></argument>, <argument><expr><name>zColl</name></expr></argument>,
          <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>abNotNull</name><index>[<expr><name>iCol</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">" NOT NULL"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zComma</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_WITHOUT_ROWID</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPk</name> <init>= <expr><call><name>rbuWithoutRowidPK</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zPk</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%z, %z"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>zPk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_IMPOSTER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE \"rbu_imp_%w\"(%z)%s"</literal></expr></argument>, 
        <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, 
        <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_WITHOUT_ROWID</name></expr> ?</condition><then> <expr><literal type="string">" WITHOUT ROWID"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_IMPOSTER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Prepare a statement used to insert rows into the "rbu_tmp_xxx" table.
** Specifically a statement of the form:
**
**     INSERT INTO rbu_tmp_xxx VALUES(?, ?, ? ...);
**
** The number of bound variables is equal to the number of columns in
** the target table, plus one (for the rbu_control column), plus one more 
** (for the rbu_rowid column) if the target table is an implicit IPK or 
** virtual table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuObjIterPrepareTmpInsert</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCollist</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRbuRowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>bRbuRowid</name> <init>= <expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBind</name> <init>= <expr><call><name>rbuObjIterGetBindlist</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>bRbuRowid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>zBind</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTmpInsert</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(
        <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pTmpInsert</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"INSERT INTO %s.'rbu_tmp_%q'(rbu_control,%s%s) VALUES(%z)"</literal></expr></argument>, 
          <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>, <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><name>zRbuRowid</name></expr></argument>, <argument><expr><name>zBind</name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuTmpInsertFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal>
      <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> 
      <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>nIndex</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nVal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>pTmpInsert</name></name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>apVal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>pTmpInsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>pTmpInsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>rbuObjIterGetIndexWhere</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdxSql</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nIdxCol</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
        <argument><expr><literal type="string">"SELECT trim(sql) FROM sqlite_schema WHERE type='index' AND name=?"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zSql</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdxSql</name></name> <operator>=</operator> <name>zSql</name> <operator>=</operator> <call><name>rbuStrndup</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>zSql</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nParen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Number of open parenthesis */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iIdxCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nIdxAlloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

          <comment type="block">/* If necessary, grow the pIter-&gt;aIdxCol[] array */</comment>
          <if_stmt><if>if<condition>( <expr><name>iIdxCol</name><operator>==</operator><name>nIdxAlloc</name></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>RbuSpan</name> <modifier>*</modifier></type><name>aIdxCol</name> <init>= <expr><operator>(</operator><name>RbuSpan</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc</name><argument_list>(
                <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name></name></expr></argument>, <argument><expr><operator>(</operator><name>nIdxAlloc</name><operator>+</operator><literal type="number">16</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>RbuSpan</name></expr></argument>)</argument_list></sizeof></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>( <expr><name>aIdxCol</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name></name> <operator>=</operator> <name>aIdxCol</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nIdxAlloc</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'('</literal></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>nParen</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iIdxCol</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zSpan</name> <operator>=</operator> <operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>nParen</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if>
          <if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">')'</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>nParen</name><operator>--</operator></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>nParen</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>nSpan</name> <init>= <expr><operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name><index>[<expr><name>iIdxCol</name></expr>]</index></name><operator>.</operator><name>zSpan</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name><index>[<expr><name>iIdxCol</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>nSpan</name> <operator>=</operator> <name>nSpan</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">','</literal> <operator>&amp;&amp;</operator> <name>nParen</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nSpan</name> <init>= <expr><operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name><index>[<expr><name>iIdxCol</name></expr>]</index></name><operator>.</operator><name>zSpan</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name><index>[<expr><name>iIdxCol</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>nSpan</name> <operator>=</operator> <name>nSpan</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aIdxCol</name><index>[<expr><name>iIdxCol</name></expr>]</index></name><operator>.</operator><name>zSpan</name> <operator>=</operator> <operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
          </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'"'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\''</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'`'</literal></expr> )</condition><block>{<block_content>
            <for>for<control>(<init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
              <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>c</name></expr> )</condition><block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><name>c</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
          </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'['</literal></expr> )</condition><block>{<block_content>
            <for>for<control>(<init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
              <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">']'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
          </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>zSql</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
            <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
          </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>zSql</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'*'</literal></expr> )</condition><block>{<block_content>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'*'</literal> <operator>||</operator> <name><name>zSql</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'/'</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
            <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>rbuStrndup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nIdxCol</name></name> <operator>=</operator> <name>iIdxCol</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Ensure that the SQLite statement handles required to update the 
** target database object currently indicated by the iterator passed 
** as the second argument are available.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuObjIterPrepareAll</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nOffset</name></decl></parameter>                     <comment type="block">/* Add "LIMIT -1 OFFSET $nOffset" to SELECT */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>bCleanup</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>rbuObjIterCacheTableInfo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tnum</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iTnum</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zCollist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* List of indexed columns */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pz</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIdx</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLimit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>nOffset</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zLimit</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">" LIMIT -1 OFFSET %d"</literal></expr></argument>, <argument><expr><name>nOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zLimit</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>zIdx</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTbl</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zImposterCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* Columns for imposter table */</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zImposterPK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Primary key declaration for imposter */</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zWhere</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* WHERE clause on PK columns */</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nBind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>!=</operator><name>RBU_PK_VTAB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zPart</name> <operator>=</operator> <call><name>rbuObjIterGetIndexWhere</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zCollist</name> <operator>=</operator> <call><name>rbuObjIterGetIndexCols</name><argument_list>(
          <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zImposterCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zImposterPK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zWhere</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBind</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zBind</name> <operator>=</operator> <call><name>rbuObjIterGetBindlist</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Create the imposter table used to write to this index. */</comment>
      <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_IMPOSTER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_IMPOSTER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>tnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>,
          <argument><expr><literal type="string">"CREATE TABLE \"rbu_imp_%w\"( %s, PRIMARY KEY( %s ) ) WITHOUT ROWID"</literal></expr></argument>,
          <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zImposterCols</name></expr></argument>, <argument><expr><name>zImposterPK</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_IMPOSTER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Create the statement to insert index entries */</comment>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <name>nBind</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(
            <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pInsert</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
          <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO \"rbu_imp_%w\" VALUES(%s)"</literal></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zBind</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* And to delete index entries */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(
            <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pDelete</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
          <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM \"rbu_imp_%w\" WHERE %s"</literal></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zWhere</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Create the SELECT statement to read keys in sorted order */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>nOffset</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>zStart</name> <operator>=</operator> <call><name>rbuVacuumIndexStart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>zStart</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>zLimit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
              <argument><expr><literal type="string">"SELECT %s, 0 AS rbu_control FROM '%q' %s %s %s ORDER BY %s%s"</literal></expr></argument>,
              <argument><expr><name>zCollist</name></expr></argument>, 
              <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>,
              <argument><expr><name>zPart</name></expr></argument>, 
              <argument><expr><operator>(</operator><ternary><condition><expr><name>zStart</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>zPart</name></expr> ?</condition><then> <expr><literal type="string">"AND"</literal></expr> </then><else>: <expr><literal type="string">"WHERE"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>zStart</name></expr></argument>,
              <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><name>zLimit</name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else

        if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
              <argument><expr><literal type="string">"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s ORDER BY %s%s"</literal></expr></argument>,
              <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>,
              <argument><expr><name>zPart</name></expr></argument>, <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><name>zLimit</name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
              <argument><expr><literal type="string">"SELECT %s, rbu_control FROM %s.'rbu_tmp_%q' %s "</literal>
              <literal type="string">"UNION ALL "</literal>
              <literal type="string">"SELECT %s, rbu_control FROM '%q' "</literal>
              <literal type="string">"%s %s typeof(rbu_control)='integer' AND rbu_control!=1 "</literal>
              <literal type="string">"ORDER BY %s%s"</literal></expr></argument>,
              <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>, <argument><expr><name>zPart</name></expr></argument>,
              <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>, 
              <argument><expr><name>zPart</name></expr></argument>,
              <argument><expr><operator>(</operator><ternary><condition><expr><name>zPart</name></expr> ?</condition><then> <expr><literal type="string">"AND"</literal></expr> </then><else>: <expr><literal type="string">"WHERE"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
              <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><name>zLimit</name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>,<argument><expr><name>pz</name></expr></argument>,<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zImposterCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zImposterPK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>bRbuRowid</name> <init>= <expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_VTAB</name><operator>)</operator>
                    <operator>||</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name><operator>)</operator>
                    <operator>||</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> <operator>&amp;&amp;</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTbl</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></init></decl>;</decl_stmt>       <comment type="block">/* Table this step applies to */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zWrite</name></decl>;</decl_stmt>                   <comment type="block">/* Imposter table name */</comment>

      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBindings</name> <init>= <expr><call><name>rbuObjIterGetBindlist</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name> <operator>+</operator> <name>bRbuRowid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zWhere</name> <init>= <expr><call><name>rbuObjIterGetWhere</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOldlist</name> <init>= <expr><call><name>rbuObjIterGetOldlist</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="string">"old"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNewlist</name> <init>= <expr><call><name>rbuObjIterGetOldlist</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>zCollist</name> <operator>=</operator> <call><name>rbuObjIterGetCollist</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr>;</expr_stmt>

      <comment type="block">/* Create the imposter table or tables (if required). */</comment>
      <expr_stmt><expr><call><name>rbuCreateImposterTable</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rbuCreateImposterTable2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zWrite</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_VTAB</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"rbu_imp_"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

      <comment type="block">/* Create the INSERT statement to write to the target PK b-tree */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pInsert</name></name></expr></argument>, <argument><expr><name>pz</name></expr></argument>,
            <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
              <argument><expr><literal type="string">"INSERT INTO \"%s%w\"(%s%s) VALUES(%s)"</literal></expr></argument>, 
              <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>bRbuRowid</name></expr> ?</condition><then> <expr><literal type="string">", _rowid_"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>zBindings</name></expr></argument>
            )</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Create the DELETE statement to write to the target PK b-tree.
      ** Because it only performs INSERT operations, this is not required for
      ** an rbu vacuum handle.  */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pDelete</name></name></expr></argument>, <argument><expr><name>pz</name></expr></argument>,
            <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
              <argument><expr><literal type="string">"DELETE FROM \"%s%w\" WHERE %s"</literal></expr></argument>, <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zWhere</name></expr></argument>
            )</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRbuRowid</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zRbuRowid</name> <operator>=</operator> <literal type="string">", rbu_rowid"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Create the rbu_tmp_xxx table and the triggers to populate it. */</comment>
        <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>,
            <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS %s.'rbu_tmp_%q' AS "</literal>
            <literal type="string">"SELECT *%s FROM '%q' WHERE 0;"</literal></expr></argument>
            , <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>
            , <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name></expr> ?</condition><then> <expr><literal type="string">", 0 AS rbu_rowid"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>
            , <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>,
            <argument><expr><literal type="string">"CREATE TEMP TRIGGER rbu_delete_tr BEFORE DELETE ON \"%s%w\" "</literal>
            <literal type="string">"BEGIN "</literal>
            <literal type="string">"  SELECT rbu_tmp_insert(3, %s);"</literal>
            <literal type="string">"END;"</literal>

            <literal type="string">"CREATE TEMP TRIGGER rbu_update1_tr BEFORE UPDATE ON \"%s%w\" "</literal>
            <literal type="string">"BEGIN "</literal>
            <literal type="string">"  SELECT rbu_tmp_insert(3, %s);"</literal>
            <literal type="string">"END;"</literal>

            <literal type="string">"CREATE TEMP TRIGGER rbu_update2_tr AFTER UPDATE ON \"%s%w\" "</literal>
            <literal type="string">"BEGIN "</literal>
            <literal type="string">"  SELECT rbu_tmp_insert(4, %s);"</literal>
            <literal type="string">"END;"</literal></expr></argument>,
            <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zOldlist</name></expr></argument>,
            <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zOldlist</name></expr></argument>,
            <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zNewlist</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>,
              <argument><expr><literal type="string">"CREATE TEMP TRIGGER rbu_insert_tr AFTER INSERT ON \"%s%w\" "</literal>
              <literal type="string">"BEGIN "</literal>
              <literal type="string">"  SELECT rbu_tmp_insert(0, %s);"</literal>
              <literal type="string">"END;"</literal></expr></argument>,
              <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zNewlist</name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>rbuObjIterPrepareTmpInsert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>zCollist</name></expr></argument>, <argument><expr><name>zRbuRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Create the SELECT statement to read keys from data_xxx */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRbuRowid</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOrder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>bRbuRowid</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zRbuRowid</name> <operator>=</operator> <ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">",_rowid_ "</literal></expr> </then><else>: <expr><literal type="string">",rbu_rowid"</literal></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>nOffset</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>zStart</name> <operator>=</operator> <call><name>rbuVacuumTableStart</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>bRbuRowid</name></expr></argument>, <argument><expr><name>zWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>zStart</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>zLimit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name>bRbuRowid</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>zOrder</name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"_rowid_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>zOrder</name> <operator>=</operator> <call><name>rbuObjIterGetPkList</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name>pz</name></expr></argument>,
              <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
                <argument><expr><literal type="string">"SELECT %s,%s rbu_control%s FROM '%q'%s %s %s %s"</literal></expr></argument>,
                <argument><expr><name>zCollist</name></expr></argument>, 
                <argument><expr><operator>(</operator><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"0 AS "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                <argument><expr><name>zRbuRowid</name></expr></argument>,
                <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>zStart</name></expr> ?</condition><then> <expr><name>zStart</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, 
                <argument><expr><operator>(</operator><ternary><condition><expr><name>zOrder</name></expr> ?</condition><then> <expr><literal type="string">"ORDER BY"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>zOrder</name></expr></argument>,
                <argument><expr><name>zLimit</name></expr></argument>
              )</argument_list></call></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOldlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zNewlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zBindings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zCollist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set output variable *ppStmt to point to an UPDATE statement that may
** be used to update the imposter table for the main table b-tree of the
** table object that pIter currently points to, assuming that the 
** rbu_control column of the data_xyz table contains zMask.
** 
** If the zMask string does not specify any columns to update, then this
** is not an error. Output variable *ppStmt is set to NULL in this case.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuGetUpdateStmt</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                  <comment type="block">/* RBU handle */</comment>
  <parameter><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,              <comment type="block">/* Object iterator */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMask</name></decl></parameter>,              <comment type="block">/* rbu_control value ('x.x.') */</comment>
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStmt</name></decl></parameter>           <comment type="block">/* OUT: UPDATE statement handle */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>RbuUpdateStmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RbuUpdateStmt</name> <modifier>*</modifier></type><name>pUp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nUp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* In case an error occurs */</comment>
  <expr_stmt><expr><operator>*</operator><name>ppStmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Search for an existing statement. If one is found, shift it to the front
  ** of the LRU queue and return immediately. Otherwise, leave nUp pointing
  ** to the number of statements currently in the cache and pUp to the
  ** last object in the list.  */</comment>
  <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pRbuUpdate</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pUp</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pUp</name><operator>-&gt;</operator><name>zMask</name></name></expr></argument>, <argument><expr><name>zMask</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>pUp</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pUp</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pRbuUpdate</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRbuUpdate</name></name> <operator>=</operator> <name>pUp</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ppStmt</name> <operator>=</operator> <name><name>pUp</name><operator>-&gt;</operator><name>pUpdate</name></name></expr>;</expr_stmt> 
      <return>return <expr><name>SQLITE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nUp</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pUp</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pUp</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>nUp</name><operator>&gt;=</operator><name>SQLITE_RBU_UPDATE_CACHESIZE</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pRbuUpdate</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name><operator>!=</operator><name>pUp</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pUp</name><operator>-&gt;</operator><name>pUpdate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pUp</name><operator>-&gt;</operator><name>pUpdate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>pUp</name> <operator>=</operator> <operator>(</operator><name>RbuUpdateStmt</name><operator>*</operator><operator>)</operator><call><name>rbuMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RbuUpdateStmt</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pUp</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zWhere</name> <init>= <expr><call><name>rbuObjIterGetWhere</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSet</name> <init>= <expr><call><name>rbuObjIterGetSetlist</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>zMask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zUpdate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pUp</name><operator>-&gt;</operator><name>zMask</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pUp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pUp</name><operator>-&gt;</operator><name>zMask</name></name></expr></argument>, <argument><expr><name>zMask</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nTblCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pUp</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pRbuUpdate</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRbuUpdate</name></name> <operator>=</operator> <name>pUp</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>zSet</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>!=</operator><name>RBU_PK_VTAB</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zPrefix</name> <operator>=</operator> <literal type="string">"rbu_imp_"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>zUpdate</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"UPDATE \"%s%w\" SET %s WHERE %s"</literal></expr></argument>, 
          <argument><expr><name>zPrefix</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>, <argument><expr><name>zSet</name></expr></argument>, <argument><expr><name>zWhere</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(
          <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pUp</name><operator>-&gt;</operator><name>pUpdate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, <argument><expr><name>zUpdate</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ppStmt</name> <operator>=</operator> <name><name>pUp</name><operator>-&gt;</operator><name>pUpdate</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sqlite3</name> <modifier>*</modifier></type><name>rbuOpenDbhandle</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bUseVfs</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><name>SQLITE_OPEN_READWRITE</name><operator>|</operator><name>SQLITE_OPEN_CREATE</name><operator>|</operator><name>SQLITE_OPEN_URI</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bUseVfs</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>zVfsName</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free an RbuState object allocated by rbuLoadState().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuFreeState</name><parameter_list>(<parameter><decl><type><name>RbuState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Allocate an RbuState object and load the contents of the rbu_state 
** table into it. Return a pointer to the new object. It is the 
** responsibility of the caller to eventually free the object using
** sqlite3_free().
**
** If an error occurs, leave an error code and message in the rbu handle
** and return NULL.
*/</comment>
<function><type><specifier>static</specifier> <name>RbuState</name> <modifier>*</modifier></type><name>rbuLoadState</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>RbuState</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc2</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pRet</name> <operator>=</operator> <operator>(</operator><name>RbuState</name><operator>*</operator><operator>)</operator><call><name>rbuMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RbuState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
      <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT k, v FROM %s.rbu_state"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <case>case <expr><name>RBU_STATE_STAGE</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pRet</name><operator>-&gt;</operator><name>eStage</name></name><operator>!=</operator><name>RBU_STAGE_OAL</name>
         <operator>&amp;&amp;</operator> <name><name>pRet</name><operator>-&gt;</operator><name>eStage</name></name><operator>!=</operator><name>RBU_STAGE_MOVE</name>
         <operator>&amp;&amp;</operator> <name><name>pRet</name><operator>-&gt;</operator><name>eStage</name></name><operator>!=</operator><name>RBU_STAGE_CKPT</name></expr>
        )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_CORRUPT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_TBL</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>zTbl</name></name> <operator>=</operator> <call><name>rbuStrndup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_IDX</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>zIdx</name></name> <operator>=</operator> <call><name>rbuStrndup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_ROW</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_PROGRESS</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nProgress</name></name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_CKPT</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>iWalCksum</name></name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_COOKIE</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>iCookie</name></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_OALSZ</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>iOalSz</name></name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_PHASEONESTEP</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>RBU_STATE_DATATBL</name></expr>:</case>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>zDataTbl</name></name> <operator>=</operator> <call><name>rbuStrndup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <default>default:</default>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_CORRUPT</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Open the database handle and attach the RBU database as "rbu". If an
** error occurs, leave an error code and message in the RBU handle.
**
** If argument dbMain is not NULL, then it is a database handle already
** open on the target database. Use this handle instead of opening a new
** one.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuOpenDatabase</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbMain</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbRetry</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>zTarget</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>dbMain</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open the RBU database */</comment>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name> <operator>=</operator> <call><name>rbuOpenDbhandle</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zRbu</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name> <operator>=</operator> <name>dbMain</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_RBUCNT</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zState</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name> <init>= <expr><call><name>sqlite3_db_filename</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zState</name></name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"file:///%s-vacuum?modeof=%s"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If using separate RBU and state databases, attach the state database to
  ** the RBU db handle now.  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zState</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"ATTACH %Q AS stat"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>, <argument><expr><literal type="string">"stat"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if( p-&gt;rc==SQLITE_OK &amp;&amp; rbuIsVacuum(p) ){
    p-&gt;rc = sqlite3_exec(p-&gt;dbRbu, "BEGIN", 0, 0, 0);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* If it has not already been created, create the rbu_state table */</comment>
  <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><name>RBU_CREATE_STATE</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if( rbuIsVacuum(p) ){
    if( p-&gt;rc==SQLITE_OK ){
      int rc2;
      int bOk = 0;
      sqlite3_stmt *pCnt = 0;
      p-&gt;rc = prepareAndCollectError(p-&gt;dbRbu, &amp;pCnt, &amp;p-&gt;zErrmsg,
          "SELECT count(*) FROM stat.sqlite_schema"
      );
      if( p-&gt;rc==SQLITE_OK 
       &amp;&amp; sqlite3_step(pCnt)==SQLITE_ROW
       &amp;&amp; 1==sqlite3_column_int(pCnt, 0)
      ){
        bOk = 1;
      }
      rc2 = sqlite3_finalize(pCnt);
      if( p-&gt;rc==SQLITE_OK ) p-&gt;rc = rc2;

      if( p-&gt;rc==SQLITE_OK &amp;&amp; bOk==0 ){
        p-&gt;rc = SQLITE_ERROR;
        p-&gt;zErrmsg = sqlite3_mprintf("invalid state database");
      }
    
      if( p-&gt;rc==SQLITE_OK ){
        p-&gt;rc = sqlite3_exec(p-&gt;dbRbu, "COMMIT", 0, 0, 0);
      }
    }
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bOpen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRbu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pRbuFd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_RBUCNT</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_NOTFOUND</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>&gt;=</operator><name>RBU_STAGE_MOVE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bOpen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>RbuState</name> <modifier>*</modifier></type><name>pState</name> <init>= <expr><call><name>rbuLoadState</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>pState</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>bOpen</name> <operator>=</operator> <operator>(</operator><name><name>pState</name><operator>-&gt;</operator><name>eStage</name></name><operator>&gt;=</operator><name>RBU_STAGE_MOVE</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rbuFreeState</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>bOpen</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name> <operator>=</operator> <call><name>rbuOpenDbhandle</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zRbu</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRbu</name></name><operator>&lt;=</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name> <operator>=</operator> <call><name>rbuOpenDbhandle</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zTarget</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pRbuFd</name><operator>-&gt;</operator><name>pWalFd</name></name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>pbRetry</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pRbuFd</name><operator>-&gt;</operator><name>bNolock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pbRetry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"cannot vacuum wal mode database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zExtra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zRbu</name></name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"file:"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zRbu</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zExtra</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zRbu</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
        <while>while<condition>( <expr><operator>*</operator><name>zExtra</name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zExtra</name><operator>++</operator><operator>==</operator><literal type="char">'?'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zExtra</name><operator>==</operator><literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zExtra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>zTarget</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"file:%s-vactmp?rbu_memory=1%s%s"</literal></expr></argument>, 
          <argument><expr><call><name>sqlite3_db_filename</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><operator>(</operator><ternary><condition><expr><name>zExtra</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"&amp;"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>zExtra</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>zExtra</name></expr></else></ternary><operator>)</operator></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name>zTarget</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name> <operator>=</operator> <call><name>rbuOpenDbhandle</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zTarget</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRbu</name></name><operator>&lt;=</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, 
        <argument><expr><literal type="string">"rbu_tmp_insert"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>rbuTmpInsertFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, 
        <argument><expr><literal type="string">"rbu_fossil_delta"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rbuFossilDeltaFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, 
        <argument><expr><literal type="string">"rbu_target_name"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>rbuTargetNameFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_RBU</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM sqlite_schema"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Mark the database file just opened as an RBU target database. If 
  ** this call returns SQLITE_NOTFOUND, then the RBU vfs is not in use.
  ** This is an error.  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_RBU</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_NOTFOUND</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"rbu vfs not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This routine is a copy of the sqlite3FileSuffix3() routine from the core.
** It is a no-op unless SQLITE_ENABLE_8_3_NAMES is defined.
**
** If SQLITE_ENABLE_8_3_NAMES is set at compile-time and if the database
** filename in zBaseFilename is a URI with the "8_3_names=1" parameter and
** if filename in z[] has a suffix (a.k.a. "extension") that is longer than
** three characters, then shorten the suffix on z[] to be the last three
** characters of the original suffix.
**
** If SQLITE_ENABLE_8_3_NAMES is set to 2 at compile-time, then always
** do the suffix shortening regardless of URI parameter.
**
** Examples:
**
**     test.db-journal    =&gt;   test.nal
**     test.db-wal        =&gt;   test.wal
**     test.db-shm        =&gt;   test.shm
**     test.db-mj7f3319fa =&gt;   test.9fa
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuFileSuffix3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBase</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_8_3_NAMES</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_ENABLE_8_3_NAMES</name><operator>&lt;</operator><literal type="number">2</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_uri_boolean</name><argument_list>(<argument><expr><name>zBase</name></expr></argument>, <argument><expr><literal type="string">"8_3_names"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">0xffffff</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>sz</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
    <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>sz</name><operator>&gt;</operator><name>i</name><operator>+</operator><literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>sz</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** Return the current wal-index header checksum for the target database 
** as a 64-bit integer.
**
** The checksum is store in the first page of xShmMap memory as an 8-byte 
** blob starting at byte offset 40.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>rbuShmChecksum</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u32</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <specifier>volatile</specifier><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iRet</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name><name>ptr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>iRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is called as part of initializing or reinitializing an
** incremental checkpoint. 
**
** It populates the sqlite3rbu.aFrame[] array with the set of 
** (wal frame -&gt; db page) copy operations required to checkpoint the 
** current wal file, and obtains the set of shm locks required to safely 
** perform the copy operations directly on the file-system.
**
** If argument pState is not NULL, then the incremental checkpoint is
** being resumed. In this case, if the checksum of the wal-index-header
** following recovery is not the same as the checksum saved in the RbuState
** object, then the rbu handle is set to DONE state. This occurs if some
** other client appends a transaction to the wal file in the middle of
** an incremental checkpoint.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuSetupCheckpoint</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuState</name> <modifier>*</modifier></type><name>pState</name></decl></parameter>)</parameter_list><block>{<block_content>

  <comment type="block">/* If pState is NULL, then the wal file may not have been opened and
  ** recovered. Running a read-statement here to ensure that doing so
  ** does not interfere with the "capture" process below.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>pState</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM sqlite_schema"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Assuming no error has occurred, run a "restart" checkpoint with the
  ** sqlite3rbu.eStage variable set to CAPTURE. This turns on the following
  ** special behaviour in the rbu VFS:
  **
  **   * If the exclusive shm WRITER or READ0 lock cannot be obtained,
  **     the checkpoint fails with SQLITE_BUSY (normally SQLite would
  **     proceed with running a passive checkpoint instead of failing).
  **
  **   * Attempts to read from the *-wal file or write to the database file
  **     do not perform any IO. Instead, the frame/page combinations that
  **     would be read/written are recorded in the sqlite3rbu.aFrame[]
  **     array.
  **
  **   * Calls to xShmLock(UNLOCK) to release the exclusive shm WRITER, 
  **     READ0 and CHECKPOINT locks taken as part of the checkpoint are
  **     no-ops. These locks will not be released until the connection
  **     is closed.
  **
  **   * Attempting to xSync() the database file causes an SQLITE_INTERNAL 
  **     error.
  **
  ** As a result, unless an error (i.e. OOM or SQLITE_BUSY) occurs, the
  ** checkpoint below fails with SQLITE_INTERNAL, and leaves the aFrame[]
  ** array populated with a set of (frame -&gt; page) mappings. Because the 
  ** WRITER, CHECKPOINT and READ0 locks are still held, it is safe to copy 
  ** data from the wal file into the database file according to the 
  ** contents of aFrame[].
  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_CAPTURE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA main.wal_checkpoint=restart"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc2</name><operator>!=</operator><name>SQLITE_INTERNAL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nFrame</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_CKPT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>pState</name></expr> ?</condition><then> <expr><name><name>pState</name><operator>-&gt;</operator><name>nRow</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aBuf</name></name> <operator>=</operator> <call><name>rbuMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pgsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iWalCksum</name></name> <operator>=</operator> <call><name>rbuShmChecksum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nFrame</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>pState</name> <operator>&amp;&amp;</operator> <name><name>pState</name><operator>-&gt;</operator><name>iWalCksum</name></name><operator>!=</operator><name><name>p</name><operator>-&gt;</operator><name>iWalCksum</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_DONE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_DONE</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nSectorSize</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pWal</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pWalFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nPagePerSector</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nSectorSize</name> <operator>=</operator> <call><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nSectorSize</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>pgsz</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPagePerSector</name></name> <operator>=</operator> <name>nSectorSize</name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>pgsz</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPagePerSector</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* Call xSync() on the wal file. This causes SQLite to sync the 
      ** directory in which the target database and the wal file reside, in 
      ** case it has not been synced since the rename() call in 
      ** rbuMoveOalFile(). */</comment>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name><name>pWal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name>SQLITE_SYNC_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Called when iAmt bytes are read from offset iOff of the wal file while
** the rbu object is in capture mode. Record the frame number of the frame
** being read in the aFrame[] array.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuCaptureWalRead</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iOff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u32</name></type> <name>mReq</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>WAL_LOCK_WRITE</name><operator>)</operator><operator>|</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>WAL_LOCK_CKPT</name><operator>)</operator><operator>|</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>WAL_LOCK_READ0</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>iFrame</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pRbu</name><operator>-&gt;</operator><name>mLock</name></name><operator>!=</operator><name>mReq</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_BUSY</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_INTERNAL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>pgsz</name></name> <operator>=</operator> <name>iAmt</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pRbu</name><operator>-&gt;</operator><name>nFrame</name></name><operator>==</operator><name><name>pRbu</name><operator>-&gt;</operator><name>nFrameAlloc</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pRbu</name><operator>-&gt;</operator><name>nFrameAlloc</name></name></expr> ?</condition><then> <expr><name><name>pRbu</name><operator>-&gt;</operator><name>nFrameAlloc</name></name></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RbuFrame</name> <modifier>*</modifier></type><name>aNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>aNew</name> <operator>=</operator> <operator>(</operator><name>RbuFrame</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>pRbu</name><operator>-&gt;</operator><name>aFrame</name></name></expr></argument>, <argument><expr><name>nNew</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RbuFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>aFrame</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>nFrameAlloc</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>iFrame</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>iOff</name><operator>-</operator><literal type="number">32</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name>iAmt</name><operator>+</operator><literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pRbu</name><operator>-&gt;</operator><name>iMaxFrame</name></name><operator>&lt;</operator><name>iFrame</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>iMaxFrame</name></name> <operator>=</operator> <name>iFrame</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>aFrame</name><index>[<expr><name><name>pRbu</name><operator>-&gt;</operator><name>nFrame</name></name></expr>]</index></name><operator>.</operator><name>iWalFrame</name> <operator>=</operator> <name>iFrame</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>aFrame</name><index>[<expr><name><name>pRbu</name><operator>-&gt;</operator><name>nFrame</name></name></expr>]</index></name><operator>.</operator><name>iDbPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>nFrame</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Called when a page of data is written to offset iOff of the database
** file while the rbu handle is in capture mode. Record the page number 
** of the page being written in the aFrame[] array.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuCaptureDbWrite</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iOff</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>aFrame</name><index>[<expr><name><name>pRbu</name><operator>-&gt;</operator><name>nFrame</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iDbPage</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name>iOff</name> <operator>/</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>pgsz</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This is called as part of an incremental checkpoint operation. Copy
** a single frame of data from the wal file into the database file, as
** indicated by the RbuFrame object.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuCheckpointFrame</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuFrame</name> <modifier>*</modifier></type><name>pFrame</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pWal</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pWalFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name><name>pFrame</name><operator>-&gt;</operator><name>iWalFrame</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pgsz</name></name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name><name>pWal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pWal</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pgsz</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name><name>pFrame</name><operator>-&gt;</operator><name>iDbPage</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>pgsz</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pgsz</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Take an EXCLUSIVE lock on the database file. Return SQLITE_OK if
** successful, or an SQLite error code otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuLockDatabase</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_FILE_POINTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>fd</name><operator>-&gt;</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SQLITE_LOCK_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SQLITE_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if the database handle passed as the only argument
** was opened with the rbu_exclusive_checkpoint=1 URI parameter
** specified. Or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuExclusiveCheckpoint</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUri</name> <init>= <expr><call><name>sqlite3_db_filename</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3_uri_boolean</name><argument_list>(<argument><expr><name>zUri</name></expr></argument>, <argument><expr><name>RBU_EXCLUSIVE_CHECKPOINT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>LPWSTR</name></type> <name>rbuWinUtf8ToUnicode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nChar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LPWSTR</name></type> <name>zWideFilename</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nChar</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nChar</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zWideFilename</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><name>nChar</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>zWideFilename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zWideFilename</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zWideFilename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nChar</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>zWideFilename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nChar</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zWideFilename</name></expr></argument>,
                                <argument><expr><name>nChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nChar</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zWideFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zWideFilename</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zWideFilename</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The RBU handle is currently in RBU_STAGE_OAL state, with a SHARED lock
** on the database file. This proc moves the *-oal file to the *-wal path,
** then reopens the database file (this time in vanilla, non-oal, WAL mode).
** If an error occurs, leave an error code and error message in the rbu 
** handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuMoveOalFile</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBase</name> <init>= <expr><call><name>sqlite3_db_filename</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMove</name> <init>= <expr><name>zBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zWal</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zMove</name> <operator>=</operator> <call><name>sqlite3_db_filename</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zOal</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s-oal"</literal></expr></argument>, <argument><expr><name>zMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zWal</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s-wal"</literal></expr></argument>, <argument><expr><name>zMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_MOVE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zWal</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>zOal</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Move the *-oal file to *-wal. At this point connection p-&gt;db is
    ** holding a SHARED lock on the target database file (because it is
    ** in WAL mode). So no other connection may be writing the db. 
    **
    ** In order to ensure that there are no database readers, an EXCLUSIVE
    ** lock is obtained here before the *-oal is moved to *-wal.
    */</comment>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbMain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rbuFileSuffix3</name><argument_list>(<argument><expr><name>zBase</name></expr></argument>, <argument><expr><name>zWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuFileSuffix3</name><argument_list>(<argument><expr><name>zBase</name></expr></argument>, <argument><expr><name>zOal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Re-open the databases. */</comment>
    <expr_stmt><expr><call><name>rbuObjIterFinalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>objiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>dbMain</name> <operator>=</operator> <call><name>rbuOpenDbhandle</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zTarget</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>dbMain</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>rbuLockDatabase</name><argument_list>(<argument><expr><name>dbMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>xRename</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRenameArg</name></name></expr></argument>, <argument><expr><name>zOal</name></expr></argument>, <argument><expr><name>zWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> 
     <operator>||</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> 
     <operator>||</operator> <call><name>rbuExclusiveCheckpoint</name><argument_list>(<argument><expr><name>dbMain</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>dbMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dbMain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>rbuOpenDatabase</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dbMain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rbuSetupCheckpoint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The SELECT statement iterating through the keys for the current object
** (p-&gt;objiter.pSelect) currently points to a valid row. This function
** determines the type of operation requested by this row and returns
** one of the following values to indicate the result:
**
**     * RBU_INSERT
**     * RBU_DELETE
**     * RBU_IDX_DELETE
**     * RBU_UPDATE
**
** If RBU_UPDATE is returned, then output variable *pzMask is set to
** point to the text value indicating the columns to update.
**
** If the rbu_control field contains an invalid value, an error code and
** message are left in the RBU handle and zero returned.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuStepType</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzMask</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>nCol</name></name></expr></init></decl>;</decl_stmt>     <comment type="block">/* Index of rbu_control column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                    <comment type="block">/* Return value */</comment>

  <switch>switch<condition>( <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_INTEGER</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iVal</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <switch>switch<condition>( <expr><name>iVal</name></expr> )</condition><block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>RBU_INSERT</name></expr>;</expr_stmt>     <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>RBU_DELETE</name></expr>;</expr_stmt>     <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>RBU_REPLACE</name></expr>;</expr_stmt>    <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>RBU_IDX_DELETE</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>RBU_IDX_INSERT</name></expr>;</expr_stmt> <break>break;</break>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>SQLITE_TEXT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pzMask</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <name>RBU_UPDATE</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if<condition>( <expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>rbuBadControlError</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<comment type="block">/*
** Assert that column iCol of statement pStmt is named zName.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>assertColumnName</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name> <init>= <expr><call><name>sqlite3_column_name</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>assertColumnName</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Argument eType must be one of RBU_INSERT, RBU_DELETE, RBU_IDX_INSERT or
** RBU_IDX_DELETE. This function performs the work of a single
** sqlite3rbu_step() call for the type of operation specified by eType.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuStepOneOp</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>objiter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pWriter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>!=</operator><name>RBU_DELETE</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>==</operator><name>RBU_DELETE</name> <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_IDX_DELETE</name>
       <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_INSERT</name> <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_IDX_INSERT</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If this is a delete, decrement nPhaseOneStep by nIndex. If the DELETE
  ** statement below does actually delete a row, nPhaseOneStep will be
  ** incremented by the same amount when SQL function rbu_tmp_insert()
  ** is invoked by the trigger.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>RBU_DELETE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>nIndex</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>RBU_IDX_DELETE</name> <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_DELETE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pWriter</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pDelete</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>pWriter</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pInsert</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <comment type="block">/* If this is an INSERT into a table b-tree and the table has an
    ** explicit INTEGER PRIMARY KEY, check that this is not an attempt
    ** to write a NULL into the IPK column. That is not permitted.  */</comment>
    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>RBU_INSERT</name> 
     <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_IPK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>i</name></expr>]</index></name> 
     <operator>&amp;&amp;</operator> <call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_MISMATCH</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"datatype mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>RBU_DELETE</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_VTAB</name> 
     <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name> 
     <operator>||</operator> <operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_EXTERNAL</name> <operator>&amp;&amp;</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr> 
    )</condition><block>{<block_content>
      <comment type="block">/* For a virtual table, or a table with no primary key, the 
      ** SELECT statement is:
      **
      **   SELECT &lt;cols&gt;, rbu_control, rbu_rowid FROM ....
      **
      ** Hence column_value(pIter-&gt;nCol+1).
      */</comment>
      <expr_stmt><expr><call><name>assertColumnName</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, 
          <argument><expr><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"rowid"</literal></expr> </then><else>: <expr><literal type="string">"rbu_rowid"</literal></expr></else></ternary></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>resetAndCollectError</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function does the work for an sqlite3rbu_step() call.
**
** The object-iterator (p-&gt;objiter) currently points to a valid object,
** and the input cursor (p-&gt;objiter.pSelect) currently points to a valid
** input row. Perform whatever processing is required and return.
**
** If no  error occurs, SQLITE_OK is returned. Otherwise, an error code
** and message is left in the RBU handle and a copy of the error code
** returned.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuStep</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>objiter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><call><name>rbuStepType</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zMask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>eType</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>==</operator><name>RBU_INSERT</name>     <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_DELETE</name>
         <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_REPLACE</name>    <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_IDX_DELETE</name>
         <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_IDX_INSERT</name> <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_UPDATE</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>!=</operator><name>RBU_UPDATE</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>eType</name><operator>==</operator><name>RBU_IDX_DELETE</name> <operator>||</operator> <name>eType</name><operator>==</operator><name>RBU_IDX_INSERT</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>rbuBadControlError</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>eType</name><operator>==</operator><name>RBU_REPLACE</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>nIndex</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rbuStepOneOp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RBU_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rbuStepOneOp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RBU_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>eType</name><operator>!=</operator><name>RBU_UPDATE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>rbuStepOneOp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>eType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pUpdate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>==</operator><name>RBU_UPDATE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>nIndex</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rbuGetUpdateStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>zMask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pUpdate</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>zMask</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>aiSrcOrder</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>abTblPk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>c</name><operator>!=</operator><literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pUpdate</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> 
         <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_VTAB</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>RBU_PK_NONE</name><operator>)</operator></expr> 
        )</condition><block>{<block_content>
          <comment type="block">/* Bind the rbu_rowid value to column _rowid_ */</comment>
          <expr_stmt><expr><call><name>assertColumnName</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"rbu_rowid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pUpdate</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>resetAndCollectError</name><argument_list>(<argument><expr><name>pUpdate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Increment the schema cookie of the main database opened by p-&gt;dbMain.
**
** Or, if this is an RBU vacuum, set the schema cookie of the main db
** opened by p-&gt;dbMain to one more than the schema cookie of the main
** db opened by p-&gt;dbRbu.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuIncrSchemaCookie</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbread</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iCookie</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name>dbread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
        <argument><expr><literal type="string">"PRAGMA schema_version"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Coverage: it may be that this sqlite3_step() cannot fail. There
      ** is already a transaction open, so the prepared statement cannot
      ** throw an SQLITE_SCHEMA exception. The only database page the
      ** statement reads is page 1, which is guaranteed to be in the cache.
      ** And no memory allocations are required.  */</comment>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iCookie</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA schema_version = %d"</literal></expr></argument>, <argument><expr><name>iCookie</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Update the contents of the rbu_state table within the rbu database. The
** value stored in the RBU_STATE_STAGE column is eStage. All other values
** are determined by inspecting the rbu handle passed as the first argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuSaveState</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eStage</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pInsert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>pRbuFd</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInsert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"INSERT OR REPLACE INTO %s.rbu_state(k, v) VALUES "</literal>
          <literal type="string">"(%d, %d), "</literal>
          <literal type="string">"(%d, %Q), "</literal>
          <literal type="string">"(%d, %Q), "</literal>
          <literal type="string">"(%d, %d), "</literal>
          <literal type="string">"(%d, %d), "</literal>
          <literal type="string">"(%d, %lld), "</literal>
          <literal type="string">"(%d, %lld), "</literal>
          <literal type="string">"(%d, %lld), "</literal>
          <literal type="string">"(%d, %lld), "</literal>
          <literal type="string">"(%d, %Q)  "</literal></expr></argument>,
          <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>,
          <argument><expr><name>RBU_STATE_STAGE</name></expr></argument>, <argument><expr><name>eStage</name></expr></argument>,
          <argument><expr><name>RBU_STATE_TBL</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>zTbl</name></name></expr></argument>, 
          <argument><expr><name>RBU_STATE_IDX</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>zIdx</name></name></expr></argument>, 
          <argument><expr><name>RBU_STATE_ROW</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name></expr></argument>, 
          <argument><expr><name>RBU_STATE_PROGRESS</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nProgress</name></name></expr></argument>,
          <argument><expr><name>RBU_STATE_CKPT</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iWalCksum</name></name></expr></argument>,
          <argument><expr><name>RBU_STATE_COOKIE</name></expr></argument>, <argument><expr><operator>(</operator><name>i64</name><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>iCookie</name></name></expr></argument>,
          <argument><expr><name>RBU_STATE_OALSZ</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iOalSz</name></name></expr></argument>,
          <argument><expr><name>RBU_STATE_PHASEONESTEP</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name></expr></argument>,
          <argument><expr><name>RBU_STATE_DATATBL</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>zDataTbl</name></name></expr></argument>
      )</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pInsert</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** The second argument passed to this function is the name of a PRAGMA 
** setting - "page_size", "auto_vacuum", "user_version" or "application_id".
** This function executes the following on sqlite3rbu.dbRbu:
**
**   "PRAGMA main.$zPragma"
**
** where $zPragma is the string passed as the second argument, then
** on sqlite3rbu.dbMain:
**
**   "PRAGMA main.$zPragma = $val"
**
** where $val is the value returned by the first PRAGMA invocation.
**
** In short, it copies the value  of the specified PRAGMA setting from
** dbRbu to dbMain.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuCopyPragma</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPragma</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pPragma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPragma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
        <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA main.%s"</literal></expr></argument>, <argument><expr><name>zPragma</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pPragma</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA main.%s = %d"</literal></expr></argument>,
          <argument><expr><name>zPragma</name></expr></argument>, <argument><expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pPragma</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pPragma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The RBU handle passed as the only argument has just been opened and 
** the state database is empty. If this RBU handle was opened for an
** RBU vacuum operation, create the schema in the target db.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuCreateTargetSchema</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pInsert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema=1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
      <argument><expr><literal type="string">"SELECT sql FROM sqlite_schema WHERE sql!='' AND rootpage!=0"</literal>
      <literal type="string">" AND name!='sqlite_sequence' "</literal>
      <literal type="string">" ORDER BY type DESC"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
        <argument><expr><literal type="string">"SELECT * FROM sqlite_schema WHERE rootpage=0 OR rootpage IS NULL"</literal></expr></argument> 
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInsert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>, 
        <argument><expr><literal type="string">"INSERT INTO sqlite_schema VALUES(?,?,?,?,?)"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pInsert</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema=0"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rbuFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Step the RBU object.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3rbu_step</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>RBU_STAGE_OAL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>objiter</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* If this is an RBU vacuum operation and the state table was empty
        ** when this handle was opened, create the target database schema. */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nProgress</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>rbuCreateTargetSchema</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>rbuCopyPragma</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"user_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>rbuCopyPragma</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"application_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr> )</condition><block>{<block_content>

          <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>bCleanup</name></name></expr> )</condition><block>{<block_content>
            <comment type="block">/* Clean up the rbu_tmp_xxx table for the previous table. It 
            ** cannot be dropped as there are currently active SQL statements.
            ** But the contents can be deleted.  */</comment>
            <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>abIndexed</name></name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><call><name>rbuMPrintfExec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, 
                  <argument><expr><literal type="string">"DELETE FROM %s.'rbu_tmp_%q'"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zStateDb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><call><name>rbuObjIterPrepareAll</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Advance to the next row to process. */</comment>
            <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nProgress</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name><operator>++</operator></expr>;</expr_stmt>
                <return>return <expr><call><name>rbuStep</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
              </block_content>}</block></if></if_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>

          <expr_stmt><expr><call><name>rbuObjIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>rbuSaveState</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RBU_STAGE_MOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>rbuIncrSchemaCookie</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_MOVE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>RBU_STAGE_MOVE</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>rbuMoveOalFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nProgress</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>RBU_STAGE_CKPT</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nFrame</name></name></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
  
            <comment type="block">/* Sync the db file */</comment>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>SQLITE_SYNC_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
            <comment type="block">/* Update nBackfill */</comment>
            <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
              <decl_stmt><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>u32</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><index>[<expr><literal type="number">24</literal></expr>]</index> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iMaxFrame</name></name></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
  
            <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_DONE</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_DONE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <comment type="block">/* At one point the following block copied a single frame from the
            ** wal file to the database file. So that one call to sqlite3rbu_step()
            ** checkpointed a single frame. 
            **
            ** However, if the sector-size is larger than the page-size, and the
            ** application calls sqlite3rbu_savestate() or close() immediately
            ** after this step, then rbu_step() again, then a power failure occurs,
            ** then the database page written here may be damaged. Work around
            ** this by checkpointing frames until the next page in the aFrame[]
            ** lies on a different disk sector to the current one. */</comment>
            <decl_stmt><decl><type><name>u32</name></type> <name>iSector</name></decl>;</decl_stmt>
            <do>do<block>{<block_content>
              <decl_stmt><decl><type><name>RbuFrame</name> <modifier>*</modifier></type><name>pFrame</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aFrame</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>iSector</name> <operator>=</operator> <operator>(</operator><name><name>pFrame</name><operator>-&gt;</operator><name>iDbPage</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nPagePerSector</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>rbuCheckpointFrame</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nFrame</name></name> 
                 <operator>&amp;&amp;</operator> <name>iSector</name><operator>==</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>aFrame</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name></expr>]</index></name><operator>.</operator><name>iDbPage</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nPagePerSector</name></name><operator>)</operator>
                 <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr>
            )</condition>;</do>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nProgress</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Compare strings z1 and z2, returning 0 if they are identical, or non-zero
** otherwise. Either or both argument may be NULL. Two NULL values are
** considered equal, and NULL is considered distinct from all other values.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuStrCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>z1</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>z2</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>z1</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>z2</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is called as part of sqlite3rbu_open() when initializing
** an rbu handle in OAL stage. If the rbu update has not started (i.e.
** the rbu_state table was empty) it is a no-op. Otherwise, it arranges
** things so that the next call to sqlite3rbu_step() continues on from
** where the previous rbu handle left off.
**
** If an error occurs, an error code and error message are left in the
** rbu handle passed as the first argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuSetupOal</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>RbuState</name> <modifier>*</modifier></type><name>pState</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pState</name><operator>-&gt;</operator><name>zTbl</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>RbuObjIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>objiter</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>bCleanup</name></name> 
       <operator>||</operator> <call><name>rbuStrCompare</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zIdx</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>zIdx</name></name></expr></argument>)</argument_list></call>
       <operator>||</operator> <operator>(</operator><name><name>pState</name><operator>-&gt;</operator><name>zDataTbl</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>rbuStrCompare</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>zTbl</name></name></expr></argument>)</argument_list></call><operator>)</operator>
       <operator>||</operator> <operator>(</operator><name><name>pState</name><operator>-&gt;</operator><name>zDataTbl</name></name> <operator>&amp;&amp;</operator> <call><name>rbuStrCompare</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>)</argument_list></call><operator>)</operator>
    <operator>)</operator></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rbuObjIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>zTbl</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"rbu_state mismatch error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rbuObjIterPrepareAll</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>objiter</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** If there is a "*-oal" file in the file-system corresponding to the
** target database in the file-system, delete it. If an error occurs,
** leave an error code and error message in the rbu handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuDeleteOalFile</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOal</name> <init>= <expr><call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s-oal"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zTarget</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>zOal</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pVfs</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zOal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Allocate a private rbu VFS for the rbu handle passed as the only
** argument. This VFS will be used unless the call to sqlite3rbu_open()
** specified a URI with a vfs=? option in place of a target database
** file name.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuCreateVfs</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rnd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zRnd</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_randomness</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zRnd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zRnd</name></expr></argument>, <argument><expr><literal type="string">"rbu_vfs_%d"</literal></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3rbu_create_vfs</name><argument_list>(<argument><expr><name>zRnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name>zRnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pVfs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zVfsName</name></name> <operator>=</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRbu</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Destroy the private VFS created for the rbu handle passed as the only
** argument by an earlier call to rbuCreateVfs().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuDeleteVfs</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zVfsName</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3rbu_destroy_vfs</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zVfsName</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This user-defined SQL function is invoked with a single argument - the
** name of a table expected to appear in the target database. It returns
** the number of auxilliary indexes on the table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuIndexCntFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>sqlite3rbu</name><operator>*</operator><operator>)</operator><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrmsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nVal</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>prepareFreeAndCollectError</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrmsg</name></expr></argument>, 
      <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM sqlite_schema "</literal>
        <literal type="string">"WHERE type='index' AND tbl_name = %Q"</literal></expr></argument>, <argument><expr><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nIndex</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** If the RBU database contains the rbu_count table, use it to initialize
** the sqlite3rbu.nPhaseOneStep variable. The schema of the rbu_count table
** is assumed to contain the same columns as:
**
**   CREATE TABLE rbu_count(tbl TEXT PRIMARY KEY, cnt INTEGER) WITHOUT ROWID;
**
** There should be one row in the table for each data_xxx table in the
** database. The 'tbl' column should contain the name of a data_xxx table,
** and the cnt column the number of rows it contains.
**
** sqlite3rbu.nPhaseOneStep is initialized to the sum of (1 + nIndex) * cnt
** for all rows in the rbu_count table, where nIndex is the number of 
** indexes on the corresponding target database table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuInitPhaseOneSteps</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bExists</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                <comment type="block">/* True if rbu_count exists */</comment>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, 
        <argument><expr><literal type="string">"rbu_index_cnt"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>rbuIndexCntFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block">/* Check for the rbu_count table. If it does not exist, or if an error
    ** occurs, nPhaseOneStep will be left set to -1. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
          <argument><expr><literal type="string">"SELECT 1 FROM sqlite_schema WHERE tbl_name = 'rbu_count'"</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>bExists</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>bExists</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>prepareAndCollectError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>,
          <argument><expr><literal type="string">"SELECT sum(cnt * (1 + rbu_index_cnt(rbu_target_name(tbl))))"</literal>
          <literal type="string">"FROM rbu_count"</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>sqlite3rbu</name> <modifier>*</modifier></type><name>openRbuHandle</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRbu</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zState</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nTarget</name> <init>= <expr><ternary><condition><expr><name>zTarget</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zTarget</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nRbu</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zRbu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3rbu</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nTarget</name><operator>+</operator><literal type="number">1</literal> <operator>+</operator> <name>nRbu</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>sqlite3rbu</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>RbuState</name> <modifier>*</modifier></type><name>pState</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Create the custom VFS. */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3rbu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3rbu_rename_handler</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuCreateVfs</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Open the target, RBU and state databases */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bRetry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zTarget</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zTarget</name></name> <operator>=</operator> <name>pCsr</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zTarget</name></name></expr></argument>, <argument><expr><name>zTarget</name></expr></argument>, <argument><expr><name>nTarget</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pCsr</name> <operator>+=</operator> <name>nTarget</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zRbu</name></name> <operator>=</operator> <name>pCsr</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zRbu</name></name></expr></argument>, <argument><expr><name>zRbu</name></expr></argument>, <argument><expr><name>nRbu</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pCsr</name> <operator>+=</operator> <name>nRbu</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zState</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zState</name></name> <operator>=</operator> <call><name>rbuMPrintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* If the first attempt to open the database file fails and the bRetry
      ** flag it set, this means that the db was not opened because it seemed
      ** to be a wal-mode db. But, this may have happened due to an earlier
      ** RBU vacuum operation leaving an old wal file in the directory.
      ** If this is the case, it will have been checkpointed and deleted
      ** when the handle was closed and a second attempt to open the 
      ** database may succeed.  */</comment>
      <expr_stmt><expr><call><name>rbuOpenDatabase</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bRetry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>bRetry</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>rbuOpenDatabase</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pState</name> <operator>=</operator> <call><name>rbuLoadState</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pState</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>

        <if_stmt><if>if<condition>( <expr><name><name>pState</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> 
          <expr_stmt><expr><call><name>rbuDeleteOalFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>rbuInitPhaseOneSteps</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_OAL</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>eStage</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nProgress</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>nProgress</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iOalSz</name></name> <operator>=</operator> <name><name>pState</name><operator>-&gt;</operator><name>iOalSz</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pWalFd</name></name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"cannot update wal mode database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_MOVE</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_CKPT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> 
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_MOVE</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <name><name>pState</name><operator>-&gt;</operator><name>eStage</name></name><operator>!=</operator><literal type="number">0</literal></expr>
    )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>pRbuFd</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pFd</name><operator>-&gt;</operator><name>iCookie</name></name><operator>!=</operator><name><name>pState</name><operator>-&gt;</operator><name>iCookie</name></name></expr> )</condition><block>{<block_content>   
        <comment type="block">/* At this point (pTargetFd-&gt;iCookie) contains the value of the
        ** change-counter cookie (the thing that gets incremented when a 
        ** transaction is committed in rollback mode) currently stored on 
        ** page 1 of the database file. */</comment>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_BUSY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"database modified during rbu %s"</literal></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"vacuum"</literal></expr> </then><else>: <expr><literal type="string">"update"</literal></expr></else></ternary><operator>)</operator></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Point the object iterator at the first object */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>rbuObjIterFirst</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>objiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* If the RBU database contains no data_xxx tables, declare the RBU
        ** update finished.  */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>objiter</name><operator>.</operator><name>zTbl</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_DONE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_DONE</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pState</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>rbuCopyPragma</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"page_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rbuCopyPragma</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"auto_vacuum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="block">/* Open transactions both databases. The *-oal file is opened or
          ** created at this point. */</comment>
          <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN IMMEDIATE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="block">/* Check if the main database is a zipvfs db. If it is, set the upper
          ** level pager to use "journal_mode=off". This prevents it from 
          ** generating a large journal using a temp file.  */</comment>
          <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>frc</name> <init>= <expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_ZIPVFS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>( <expr><name>frc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(
                <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA journal_mode=off"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>rbuSetupOal</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_MOVE</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* no-op */</comment>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_CKPT</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rbuExclusiveCheckpoint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <comment type="block">/* If the rbu_exclusive_checkpoint=1 URI parameter was specified
          ** and an incremental checkpoint is being resumed, attempt an
          ** exclusive lock on the db file. If this fails, so be it.  */</comment>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_DONE</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>rbuLockDatabase</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name> <operator>=</operator> <name>RBU_STAGE_CKPT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>rbuSetupCheckpoint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_DONE</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_DONE</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_CORRUPT</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>rbuFreeState</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Allocate and return an RBU handle with all fields zeroed except for the
** error code, which is set to SQLITE_MISUSE.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3rbu</name> <modifier>*</modifier></type><name>rbuMisuseError</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRet</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3rbu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3rbu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_MISUSE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open and return a new RBU handle. 
*/</comment>
<function><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>sqlite3rbu_open</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRbu</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zState</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>zTarget</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>zRbu</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <return>return <expr><call><name>rbuMisuseError</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>openRbuHandle</name><argument_list>(<argument><expr><name>zTarget</name></expr></argument>, <argument><expr><name>zRbu</name></expr></argument>, <argument><expr><name>zState</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open a handle to begin or resume an RBU VACUUM operation.
*/</comment>
<function><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>sqlite3rbu_vacuum</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTarget</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zState</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>zTarget</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <return>return <expr><call><name>rbuMisuseError</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zState</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">7</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"-vactmp"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zState</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><call><name>rbuMisuseError</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* TODO: Check that both arguments are non-NULL */</comment>
  <return>return <expr><call><name>openRbuHandle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zTarget</name></expr></argument>, <argument><expr><name>zState</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the database handle used by pRbu.
*/</comment>
<function><type><name>sqlite3</name> <modifier>*</modifier></type><name>sqlite3rbu_db</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bRbu</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRbu</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>bRbu</name></expr> ?</condition><then> <expr><name><name>pRbu</name><operator>-&gt;</operator><name>dbRbu</name></name></expr> </then><else>: <expr><name><name>pRbu</name><operator>-&gt;</operator><name>dbMain</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** If the error code currently stored in the RBU handle is SQLITE_CONSTRAINT,
** then edit any error message string so as to remove all occurrences of
** the pattern "rbu_imp_[0-9]*".
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuEditErrmsg</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_CONSTRAINT</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nErrmsg</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>nErrmsg</name><operator>-</operator><literal type="number">8</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rbu_imp_"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nDel</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name><index>[<expr><name>i</name><operator>+</operator><name>nDel</name></expr>]</index></name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name><index>[<expr><name>i</name><operator>+</operator><name>nDel</name></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nDel</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name><index>[<expr><name>i</name><operator>+</operator><name>nDel</name></expr>]</index></name></expr></argument>, <argument><expr><name>nErrmsg</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name> <operator>-</operator> <name>nDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nErrmsg</name> <operator>-=</operator> <name>nDel</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Close the RBU handle.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3rbu_close</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrmsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>

    <comment type="block">/* Commit the transaction to the *-oal file. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Sync the db file if currently doing an incremental checkpoint */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_CKPT</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>SQLITE_SYNC_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>rbuSaveState</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Close any open statement handles. */</comment>
    <expr_stmt><expr><call><name>rbuObjIterFinalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>objiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If this is an RBU vacuum handle and the vacuum has either finished
    ** successfully or encountered an error, delete the contents of the 
    ** state table. This causes the next call to sqlite3rbu_vacuum() 
    ** specifying the current target and state databases to start a new
    ** vacuum from scratch.  */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc2</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM stat.rbu_state"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_DONE</name> <operator>&amp;&amp;</operator> <name>rc2</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Close the open database handle and VFS object. */</comment>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szTemp</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuDeleteVfs</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aFrame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rbuEditErrmsg</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pzErrmsg</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pzErrmsg</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErrmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pzErrmsg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the total number of key-value operations (inserts, deletes or 
** updates) that have been performed on the target database since the
** current RBU update was started.
*/</comment>
<function><type><name>sqlite3_int64</name></type> <name>sqlite3rbu_progress</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>pRbu</name><operator>-&gt;</operator><name>nProgress</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return permyriadage progress indications for the two main stages of
** an RBU update.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3rbu_bp_progress</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnOne</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnTwo</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_PROGRESS</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>RBU_STAGE_OAL</name></expr>:</case>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pnOne</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>MAX_PROGRESS</name> <operator>*</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nProgress</name></name><operator>/</operator><operator>(</operator><name>i64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nPhaseOneStep</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pnOne</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnTwo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>RBU_STAGE_MOVE</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pnOne</name> <operator>=</operator> <name>MAX_PROGRESS</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnTwo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>RBU_STAGE_CKPT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pnOne</name> <operator>=</operator> <name>MAX_PROGRESS</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnTwo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>MAX_PROGRESS</name> <operator>*</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nStep</name></name> <operator>/</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nFrame</name></name><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>RBU_STAGE_DONE</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pnOne</name> <operator>=</operator> <name>MAX_PROGRESS</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnTwo</name> <operator>=</operator> <name>MAX_PROGRESS</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
** Return the current state of the RBU vacuum or update operation.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3rbu_state</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name><name>aRes</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>, <expr><name>SQLITE_RBU_STATE_OAL</name></expr>, <expr><name>SQLITE_RBU_STATE_MOVE</name></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><name>SQLITE_RBU_STATE_CHECKPOINT</name></expr>, <expr><name>SQLITE_RBU_STATE_DONE</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>RBU_STAGE_OAL</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>RBU_STAGE_MOVE</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>RBU_STAGE_CKPT</name><operator>==</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>RBU_STAGE_DONE</name><operator>==</operator><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aRes</name><index>[<expr><name>RBU_STAGE_OAL</name></expr>]</index></name><operator>==</operator><name>SQLITE_RBU_STATE_OAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aRes</name><index>[<expr><name>RBU_STAGE_MOVE</name></expr>]</index></name><operator>==</operator><name>SQLITE_RBU_STATE_MOVE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aRes</name><index>[<expr><name>RBU_STAGE_CKPT</name></expr>]</index></name><operator>==</operator><name>SQLITE_RBU_STATE_CHECKPOINT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aRes</name><index>[<expr><name>RBU_STAGE_DONE</name></expr>]</index></name><operator>==</operator><name>SQLITE_RBU_STATE_DONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_RBU_STATE_ERROR</name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_DONE</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_DONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name>
         <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_MOVE</name>
         <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_CKPT</name>
         <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_DONE</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>aRes</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name></expr>]</index></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3rbu_savestate</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>&gt;=</operator><name>RBU_STAGE_OAL</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>&lt;=</operator><name>RBU_STAGE_DONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_DONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Sync the db file */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_CKPT</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pTargetFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>SQLITE_SYNC_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rbuSaveState</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_DONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content> 
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBegin</name> <init>= <expr><ternary><condition><expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"BEGIN"</literal></expr> </then><else>: <expr><literal type="string">"BEGIN IMMEDIATE"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><name>zBegin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbMain</name></name></expr></argument>, <argument><expr><literal type="string">"BEGIN IMMEDIATE"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Default xRename callback for RBU.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>xDefaultRename</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOld</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content>
    <decl_stmt><decl><type><name>LPWSTR</name></type> <name>zWideOld</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LPWSTR</name></type> <name>zWideNew</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>zWideOld</name> <operator>=</operator> <call><name>rbuWinUtf8ToUnicode</name><argument_list>(<argument><expr><name>zOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zWideOld</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zWideNew</name> <operator>=</operator> <call><name>rbuWinUtf8ToUnicode</name><argument_list>(<argument><expr><name>zNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zWideNew</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>MoveFileW</name><argument_list>(<argument><expr><name>zWideOld</name></expr></argument>, <argument><expr><name>zWideNew</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zWideNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zWideOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><call><name>rename</name><argument_list>(<argument><expr><name>zOld</name></expr></argument>, <argument><expr><name>zNew</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SQLITE_IOERR</name></expr> </then><else>: <expr><name>SQLITE_OK</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3rbu_rename_handler</name><parameter_list>(
  <parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xRename</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOld</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNew</name></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>xRename</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>xRename</name></name> <operator>=</operator> <name>xRename</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>pRenameArg</name></name> <operator>=</operator> <name>pArg</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>xRename</name></name> <operator>=</operator> <name>xDefaultRename</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>pRenameArg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**************************************************************************
** Beginning of RBU VFS shim methods. The VFS shim modifies the behaviour
** of a standard VFS in the following ways:
**
** 1. Whenever the first page of a main database file is read or 
**    written, the value of the change-counter cookie is stored in
**    rbu_file.iCookie. Similarly, the value of the "write-version"
**    database header field is stored in rbu_file.iWriteVer. This ensures
**    that the values are always trustworthy within an open transaction.
**
** 2. Whenever an SQLITE_OPEN_WAL file is opened, the (rbu_file.pWalFd)
**    member variable of the associated database file descriptor is set
**    to point to the new file. A mutex protected linked list of all main 
**    db fds opened using a particular RBU VFS is maintained at 
**    rbu_vfs.pMain to facilitate this.
**
** 3. Using a new file-control "SQLITE_FCNTL_RBU", a main db rbu_file 
**    object can be marked as the target database of an RBU update. This
**    turns on the following extra special behaviour:
**
** 3a. If xAccess() is called to check if there exists a *-wal file 
**     associated with an RBU target database currently in RBU_STAGE_OAL
**     stage (preparing the *-oal file), the following special handling
**     applies:
**
**      * if the *-wal file does exist, return SQLITE_CANTOPEN. An RBU
**        target database may not be in wal mode already.
**
**      * if the *-wal file does not exist, set the output parameter to
**        non-zero (to tell SQLite that it does exist) anyway.
**
**     Then, when xOpen() is called to open the *-wal file associated with
**     the RBU target in RBU_STAGE_OAL stage, instead of opening the *-wal
**     file, the rbu vfs opens the corresponding *-oal file instead. 
**
** 3b. The *-shm pages returned by xShmMap() for a target db file in
**     RBU_STAGE_OAL mode are actually stored in heap memory. This is to
**     avoid creating a *-shm file on disk. Additionally, xShmLock() calls
**     are no-ops on target database files in RBU_STAGE_OAL mode. This is
**     because assert() statements in some VFS implementations fail if 
**     xShmLock() is called before xShmMap().
**
** 3c. If an EXCLUSIVE lock is attempted on a target database file in any
**     mode except RBU_STAGE_DONE (all work completed and checkpointed), it 
**     fails with an SQLITE_BUSY error. This is to stop RBU connections
**     from automatically checkpointing a *-wal (or *-oal) file from within
**     sqlite3_close().
**
** 3d. In RBU_STAGE_CAPTURE mode, all xRead() calls on the wal file, and
**     all xWrite() calls on the target database file perform no IO. 
**     Instead the frame and page numbers that would be read and written
**     are recorded. Additionally, successful attempts to obtain exclusive
**     xShmLock() WRITER, CHECKPOINTER and READ0 locks on the target 
**     database file are recorded. xShmLock() calls to unlock the same
**     locks are no-ops (so that once obtained, these locks are never
**     relinquished). Finally, calls to xSync() on the target database
**     file fail with SQLITE_INTERNAL errors.
*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuUnlockShm</name><parameter_list>(<parameter><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr> )</condition><block>{<block_content>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xShmLock</name>)<parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmLock</name></name></expr></init>;</function_decl>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SQLITE_SHM_NLOCK</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pRbu</name><operator>-&gt;</operator><name>mLock</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>xShmLock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_SHM_UNLOCK</name><operator>|</operator><name>SQLITE_SHM_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name><operator>-&gt;</operator><name>mLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuUpdateTempSize</name><parameter_list>(<parameter><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pFd</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>nNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name> <init>= <expr><name><name>pFd</name><operator>-&gt;</operator><name>pRbu</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nDiff</name> <init>= <expr><name>nNew</name> <operator>-</operator> <name><name>pFd</name><operator>-&gt;</operator><name>sz</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>szTemp</name></name> <operator>+=</operator> <name>nDiff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRbu</name><operator>-&gt;</operator><name>szTemp</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pRbu</name><operator>-&gt;</operator><name>szTempLimit</name></name> <operator>&amp;&amp;</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>szTemp</name></name><operator>&gt;</operator><name><name>pRbu</name><operator>-&gt;</operator><name>szTempLimit</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_FULL</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Add an item to the main-db lists, if it is not already present.
**
** There are two main-db lists. One for all file descriptors, and one
** for all file descriptors with rbu_file.pDb!=0. If the argument has
** rbu_file.pDb!=0, then it is assumed to already be present on the
** main list and is only added to the pDb!=0 list.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuMainlistAdd</name><parameter_list>(<parameter><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_vfs</name> <modifier>*</modifier></type><name>pRbuVfs</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pRbuVfs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pIter</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>pIter</name><operator>=</operator><name><name>pRbuVfs</name><operator>-&gt;</operator><name>pMain</name></name></expr>;</init> <condition><expr><name>pIter</name></expr>;</condition> <incr><expr><name>pIter</name><operator>=</operator><name><name>pIter</name><operator>-&gt;</operator><name>pMainNext</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMainNext</name></name> <operator>=</operator> <name><name>pRbuVfs</name><operator>-&gt;</operator><name>pMain</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>pMain</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <for>for<control>(<init><expr><name>pIter</name><operator>=</operator><name><name>pRbuVfs</name><operator>-&gt;</operator><name>pMainRbu</name></name></expr>;</init> <condition><expr><name>pIter</name> <operator>&amp;&amp;</operator> <name>pIter</name><operator>!=</operator><name>p</name></expr>;</condition> <incr><expr><name>pIter</name><operator>=</operator><name><name>pIter</name><operator>-&gt;</operator><name>pMainRbuNext</name></name></expr></incr>)</control><block>{<block_content/>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>pIter</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMainRbuNext</name></name> <operator>=</operator> <name><name>pRbuVfs</name><operator>-&gt;</operator><name>pMainRbu</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>pMainRbu</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Remove an item from the main-db lists.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuMainlistRemove</name><parameter_list>(<parameter><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRbuVfs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pRbuVfs</name><operator>-&gt;</operator><name>pMain</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp</name><operator>!=</operator><name>p</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pMainNext</name></name><operator>)</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pMainNext</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMainNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pRbuVfs</name><operator>-&gt;</operator><name>pMainRbu</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp</name><operator>!=</operator><name>p</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pMainRbuNext</name></name><operator>)</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pMainRbuNext</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMainRbuNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRbuVfs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Given that zWal points to a buffer containing a wal file name passed to 
** either the xOpen() or xAccess() VFS method, search the main-db list for
** a file-handle opened by the same database connection on the corresponding
** database file.
**
** If parameter bRbu is true, only search for file-descriptors with
** rbu_file.pDb!=0.
*/</comment>
<function><type><specifier>static</specifier> <name>rbu_file</name> <modifier>*</modifier></type><name>rbuFindMaindb</name><parameter_list>(<parameter><decl><type><name>rbu_vfs</name> <modifier>*</modifier></type><name>pRbuVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zWal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bRbu</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>bRbu</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>pDb</name><operator>=</operator><name><name>pRbuVfs</name><operator>-&gt;</operator><name>pMainRbu</name></name></expr>;</init> <condition><expr><name>pDb</name> <operator>&amp;&amp;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>zWal</name></name><operator>!=</operator><name>zWal</name></expr>;</condition> <incr><expr><name>pDb</name><operator>=</operator><name><name>pDb</name><operator>-&gt;</operator><name>pMainRbuNext</name></name></expr></incr>)</control><block>{<block_content/>}</block></for>
  </block_content>}</block></if><else>else<block>{<block_content>
    <for>for<control>(<init><expr><name>pDb</name><operator>=</operator><name><name>pRbuVfs</name><operator>-&gt;</operator><name>pMain</name></name></expr>;</init> <condition><expr><name>pDb</name> <operator>&amp;&amp;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>zWal</name></name><operator>!=</operator><name>zWal</name></expr>;</condition> <incr><expr><name>pDb</name><operator>=</operator><name><name>pDb</name><operator>-&gt;</operator><name>pMainNext</name></name></expr></incr>)</control><block>{<block_content/>}</block></for>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pDb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close an rbu file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Free the contents of the apShm[] array. And the array itself. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nShm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zDel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>rbuMainlistRemove</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rbuUnlockShm</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmUnmap</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_DELETEONCLOSE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>rbuUpdateTempSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pMainNext</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pRbuVfs</name><operator>-&gt;</operator><name>pMain</name></name><operator>!=</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close the underlying file handle */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Read and return an unsigned 32-bit big-endian integer from the buffer 
** passed as the only argument.
*/</comment>
<function><type><specifier>static</specifier> <name>u32</name></type> <name>rbuGetU32</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
       <operator>+</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
       <operator>+</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal><operator>)</operator>
       <operator>+</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write an unsigned 32-bit value in big-endian format to the supplied
** buffer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuPutU32</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>iVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator>  <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuPutU16</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>u16</name></type> <name>iVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator>  <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Read data from an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>pRbu</name> <operator>&amp;&amp;</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_CAPTURE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_WAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rbuCaptureWalRead</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pRbu</name> <operator>&amp;&amp;</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name> 
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_WAL</name><operator>)</operator> 
     <operator>&amp;&amp;</operator> <name>iOfst</name><operator>&gt;=</operator><name><name>pRbu</name><operator>-&gt;</operator><name>iOalSz</name></name></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
      <comment type="block">/* If this is being called to read the first page of the target 
      ** database as part of an rbu vacuum operation, synthesize the 
      ** contents of the first page if it does not yet exist. Otherwise,
      ** SQLite will not check for a *-wal file.  */</comment>
      <if_stmt><if>if<condition>( <expr><name>pRbu</name> <operator>&amp;&amp;</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name>pRbu</name></expr></argument>)</argument_list></call> 
          <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_IOERR_SHORT_READ</name> <operator>&amp;&amp;</operator> <name>iOfst</name><operator>==</operator><literal type="number">0</literal>
          <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name><operator>)</operator>
          <operator>&amp;&amp;</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr>
      )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><operator>(</operator><name>sqlite3_file</name><operator>*</operator><operator>)</operator><name><name>pRbu</name><operator>-&gt;</operator><name>pRbuFd</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFd</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pFd</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>u32</name></type> <name>iRoot</name> <init>= <expr><ternary><condition><expr><call><name>rbuGetU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>rbuPutU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block">/* largest root page number */</comment>
          <expr_stmt><expr><call><name>rbuPutU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* number of free pages */</comment>
          <expr_stmt><expr><call><name>rbuPutU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* first page on free list trunk */</comment>
          <expr_stmt><expr><call><name>rbuPutU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* size of db file in pages */</comment>
          <expr_stmt><expr><call><name>rbuPutU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pRbu</name><operator>-&gt;</operator><name>pRbuFd</name><operator>-&gt;</operator><name>iCookie</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Change counter */</comment>

          <if_stmt><if>if<condition>( <expr><name>iAmt</name><operator>&gt;</operator><literal type="number">100</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iAmt</name><operator>-</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rbuPutU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iAmt</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iOfst</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <comment type="block">/* These look like magic numbers. But they are stable, as they are part
       ** of the definition of the SQLite file format, which may not change. */</comment>
      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCookie</name></name> <operator>=</operator> <call><name>rbuGetU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iWriteVer</name></name> <operator>=</operator> <name><name>pBuf</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>pRbu</name> <operator>&amp;&amp;</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_CAPTURE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rbuCaptureDbWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pRbu</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name> 
       <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_WAL</name><operator>)</operator> 
       <operator>&amp;&amp;</operator> <name>iOfst</name><operator>&gt;=</operator><name><name>pRbu</name><operator>-&gt;</operator><name>iOalSz</name></name></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>iOalSz</name></name> <operator>=</operator> <name>iAmt</name> <operator>+</operator> <name>iOfst</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_DELETEONCLOSE</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>szNew</name> <init>= <expr><name>iAmt</name><operator>+</operator><name>iOfst</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>szNew</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rbuUpdateTempSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>szNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iOfst</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <comment type="block">/* These look like magic numbers. But they are stable, as they are part
      ** of the definition of the SQLite file format, which may not change. */</comment>
      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCookie</name></name> <operator>=</operator> <call><name>rbuGetU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iWriteVer</name></name> <operator>=</operator> <name><name>pBuf</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_DELETEONCLOSE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>rbuUpdateTempSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xTruncate</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_CAPTURE</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_INTERNAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If this is an RBU vacuum operation and this is the target database,
  ** pretend that it has at least one page. Otherwise, SQLite will not
  ** check for the existance of a *-wal file. rbuVfsRead() contains 
  ** similar logic.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pSize</name><operator>==</operator><literal type="number">0</literal> 
   <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name> <operator>&amp;&amp;</operator> <call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr></argument>)</argument_list></call> 
   <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name><operator>)</operator></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Lock an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SQLITE_OPEN_MAIN_DB</name><operator>|</operator><name>SQLITE_OPEN_TEMP_DB</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eLock</name><operator>==</operator><name>SQLITE_LOCK_EXCLUSIVE</name> 
   <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>bNolock</name></name> <operator>||</operator> <operator>(</operator><name>pRbu</name> <operator>&amp;&amp;</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>!=</operator><name>RBU_STAGE_DONE</name><operator>)</operator><operator>)</operator></expr>
  )</condition><block>{<block_content>
    <comment type="block">/* Do not allow EXCLUSIVE locks. Preventing SQLite from taking this 
    ** prevents it from checkpointing the database from sqlite3_close(). */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_BUSY</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnlock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xCheckReservedLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xControl</name>)<parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileControl</name></name></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SQLITE_OPEN_MAIN_DB</name><operator>|</operator><name>SQLITE_OPEN_TEMP_DB</name><operator>)</operator>
       <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SQLITE_OPEN_TRANSIENT_DB</name><operator>|</operator><name>SQLITE_OPEN_TEMP_JOURNAL</name><operator>)</operator></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_RBU</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name> <init>= <expr><operator>(</operator><name>sqlite3rbu</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* First try to find another RBU vfs lower down in the vfs stack. If
    ** one is found, this vfs will operate in pass-through mode. The lower
    ** level vfs will do the special RBU handling.  */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xControl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_NOTFOUND</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Now search for a zipvfs instance lower down in the VFS stack. If
      ** one is found, this is an error.  */</comment>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xControl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_ZIPVFS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>zErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"rbu/zipvfs setup error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_NOTFOUND</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>pTargetFd</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name> <operator>=</operator> <name>pRbu</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rbuMainlistAdd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWalFd</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pWalFd</name><operator>-&gt;</operator><name>pRbu</name></name> <operator>=</operator> <name>pRbu</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_RBUCNT</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name> <init>= <expr><operator>(</operator><name>sqlite3rbu</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>nRbu</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>pRbuFd</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bNolock</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xControl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>op</name><operator>==</operator><name>SQLITE_FCNTL_VFSNAME</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>rbu_vfs</name> <modifier>*</modifier></type><name>pRbuVfs</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pRbuVfs</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zIn</name> <init>= <expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"rbu(%s)/%z"</literal></expr></argument>, <argument><expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name> <operator>=</operator> <name>zOut</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an rbuVfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xDeviceCharacteristics</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Take or release a shared-memory lock.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_AMALGAMATION</name></cpp:ifdef>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>WAL_CKPT_LOCK</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SQLITE_OPEN_MAIN_DB</name><operator>|</operator><name>SQLITE_OPEN_TEMP_DB</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRbu</name> <operator>&amp;&amp;</operator> <operator>(</operator>
       <name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name> 
    <operator>||</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_MOVE</name> 
    <operator>||</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_DONE</name>
  <operator>)</operator></expr>)</condition><block>{<block_content>
    <comment type="block">/* Prevent SQLite from taking a shm-lock on the target file when it 
    ** is supplying heap memory to the upper layer in place of *-shm 
    ** segments. */</comment>
    <if_stmt><if>if<condition>( <expr><name>ofst</name><operator>==</operator><name>WAL_LOCK_CKPT</name> <operator>&amp;&amp;</operator> <name>n</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_BUSY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bCapture</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pRbu</name> <operator>&amp;&amp;</operator> <name><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_CAPTURE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bCapture</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>bCapture</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <literal type="number">0</literal><operator>==</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_UNLOCK</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>bCapture</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>mLock</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>ofst</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Obtain a pointer to a mapping of a single 32KiB page of the *-shm file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsShmMap</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iRegion</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>szRegion</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>isWrite</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eStage</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If not in RBU_STAGE_OAL, allow this call to pass through. Or, if this
  ** rbu is in the RBU_STAGE_OAL state, use heap memory for *-shm space 
  ** instead of a file on disk.  */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SQLITE_OPEN_MAIN_DB</name><operator>|</operator><name>SQLITE_OPEN_TEMP_DB</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eStage</name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name> <init>= <expr><operator>(</operator><name>iRegion</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNew</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* This is an RBU connection that uses its own heap memory for the
    ** pages of the *-shm file. Since no other process can have run
    ** recovery, the connection must request *-shm pages in order
    ** from start to finish.  */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iRegion</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nShm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>apNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>apNew</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nShm</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>iRegion</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nShm</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nShm</name></name> <operator>=</operator> <name>iRegion</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>szRegion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>szRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iRegion</name></expr>]</index></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iRegion</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>iRegion</name></expr></argument>, <argument><expr><name>szRegion</name></expr></argument>, <argument><expr><name>isWrite</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Memory barrier.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuVfsShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmBarrier</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The xShmUnmap method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delFlag</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>rbu_file</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eStage</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SQLITE_OPEN_MAIN_DB</name><operator>|</operator><name>SQLITE_OPEN_TEMP_DB</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eStage</name><operator>==</operator><name>RBU_STAGE_OAL</name> <operator>||</operator> <name>eStage</name><operator>==</operator><name>RBU_STAGE_MOVE</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* no-op */</comment>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Release the checkpointer and writer locks */</comment>
    <expr_stmt><expr><call><name>rbuUnlockShm</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmUnmap</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>delFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open an rbu file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_io_methods</name></type> <name>rbuvfs_io_methods</name> <init>= <expr><block>{
    <expr><literal type="number">2</literal></expr>,                            <comment type="block">/* iVersion */</comment>
    <expr><name>rbuVfsClose</name></expr>,                  <comment type="block">/* xClose */</comment>
    <expr><name>rbuVfsRead</name></expr>,                   <comment type="block">/* xRead */</comment>
    <expr><name>rbuVfsWrite</name></expr>,                  <comment type="block">/* xWrite */</comment>
    <expr><name>rbuVfsTruncate</name></expr>,               <comment type="block">/* xTruncate */</comment>
    <expr><name>rbuVfsSync</name></expr>,                   <comment type="block">/* xSync */</comment>
    <expr><name>rbuVfsFileSize</name></expr>,               <comment type="block">/* xFileSize */</comment>
    <expr><name>rbuVfsLock</name></expr>,                   <comment type="block">/* xLock */</comment>
    <expr><name>rbuVfsUnlock</name></expr>,                 <comment type="block">/* xUnlock */</comment>
    <expr><name>rbuVfsCheckReservedLock</name></expr>,      <comment type="block">/* xCheckReservedLock */</comment>
    <expr><name>rbuVfsFileControl</name></expr>,            <comment type="block">/* xFileControl */</comment>
    <expr><name>rbuVfsSectorSize</name></expr>,             <comment type="block">/* xSectorSize */</comment>
    <expr><name>rbuVfsDeviceCharacteristics</name></expr>,  <comment type="block">/* xDeviceCharacteristics */</comment>
    <expr><name>rbuVfsShmMap</name></expr>,                 <comment type="block">/* xShmMap */</comment>
    <expr><name>rbuVfsShmLock</name></expr>,                <comment type="block">/* xShmLock */</comment>
    <expr><name>rbuVfsShmBarrier</name></expr>,             <comment type="block">/* xShmBarrier */</comment>
    <expr><name>rbuVfsShmUnmap</name></expr>,               <comment type="block">/* xShmUnmap */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>                          <comment type="block">/* xFetch, xUnfetch */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rbu_vfs</name> <modifier>*</modifier></type><name>pRbuVfs</name> <init>= <expr><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>pRealVfs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><operator>(</operator><name>rbu_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOpen</name> <init>= <expr><name>zName</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>oflags</name> <init>= <expr><name>flags</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pFd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbu_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_file</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pFd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pRbuVfs</name></name> <operator>=</operator> <name>pRbuVfs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zName</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* A main database has just been opened. The following block sets
      ** (pFd-&gt;zWal) to point to a buffer owned by SQLite that contains
      ** the name of the *-wal file this db connection will use. SQLite
      ** happens to pass a pointer to this buffer when using xAccess()
      ** or xOpen() to operate on the *-wal file.  */</comment>
      <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>zWal</name></name> <operator>=</operator> <call><name>sqlite3_filename_wal</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_WAL</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>rbuFindMaindb</name><argument_list>(<argument><expr><name>pRbuVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>pDb</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pRbu</name></name> <operator>&amp;&amp;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* This call is to open a *-wal file. Intead, open the *-oal. */</comment>
          <decl_stmt><decl><type><name>size_t</name></type> <name>nOpen</name></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><call><name>rbuIsVacuum</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pRbu</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>zOpen</name> <operator>=</operator> <call><name>sqlite3_db_filename</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pRbu</name><operator>-&gt;</operator><name>dbRbu</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>zOpen</name> <operator>=</operator> <call><name>sqlite3_filename_wal</name><argument_list>(<argument><expr><name>zOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>nOpen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>zOpen</name><operator>)</operator><index>[<expr><name>nOpen</name><operator>-</operator><literal type="number">3</literal></expr>]</index> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pRbu</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pRbu</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pWalFd</name></name> <operator>=</operator> <name>pFd</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pRbu</name></name> <operator>=</operator> <name><name>pRbuVfs</name><operator>-&gt;</operator><name>pRbu</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>oflags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name> 
   <operator>&amp;&amp;</operator> <call><name>sqlite3_uri_boolean</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="string">"rbu_memory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> 
  )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>oflags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oflags</name> <operator>=</operator>  <name>SQLITE_OPEN_TEMP_DB</name> <operator>|</operator> <name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name> <operator>|</operator>
              <name>SQLITE_OPEN_EXCLUSIVE</name> <operator>|</operator> <name>SQLITE_OPEN_DELETEONCLOSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zOpen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>zOpen</name></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* The xOpen() operation has succeeded. Set the sqlite3_file.pMethods
    ** pointer and, if the file is a main database file, link it into the
    ** mutex protected linked list of all such files.  */</comment>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>rbuvfs_io_methods</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>rbuMainlistAdd</name><argument_list>(<argument><expr><name>pFd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zDel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete the file located at zPath.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>rbu_vfs</name> <modifier>*</modifier></type><name>pRbuVfs</name> <init>= <expr><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><name><name>pRbuVfs</name><operator>-&gt;</operator><name>pRealVfs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xAccess</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If this call is to check if a *-wal file associated with an RBU target
  ** database connection exists, and the RBU update is in RBU_STAGE_OAL,
  ** the following special handling is activated:
  **
  **   a) if the *-wal file does exist, return SQLITE_CANTOPEN. This
  **      ensures that the RBU extension never tries to update a database
  **      in wal mode, even if the first page of the database file has
  **      been damaged. 
  **
  **   b) if the *-wal file does not exist, claim that it does anyway,
  **      causing SQLite to call xOpen() to open it. This call will also
  **      be intercepted (see the rbuVfsOpen() function) and the *-oal
  **      file opened instead.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>flags</name><operator>==</operator><name>SQLITE_ACCESS_EXISTS</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>rbu_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>rbuFindMaindb</name><argument_list>(<argument><expr><name>pRbuVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pDb</name> <operator>&amp;&amp;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pRbu</name><operator>-&gt;</operator><name>eStage</name></name><operator>==</operator><name>RBU_STAGE_OAL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pRbu</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pResOut</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_CANTOPEN</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>rbuVfsFileSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <operator>(</operator><name>sz</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (DEVSYM_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xFullPathname</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rbuVfsDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xDlOpen</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuVfsDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xDlError</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*rbuVfsDlSym(
  sqlite3_vfs *pVfs, 
  void *pArg, 
  const char *zSym
)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <expr><name>sqlite3_vfs</name> <operator>*</operator><name>pRealVfs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr>;
  <return>return <expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xDlSym</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rbuVfsDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xDlClose</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xRandomness</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xSleep</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRealVfs</name> <init>= <expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>pRealVfs</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRealVfs</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>pRealVfs</name></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** No-op.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rbuVfsGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Deregister and destroy an RBU vfs created by an earlier call to
** sqlite3rbu_create_vfs().
*/</comment>
<function><type><name>void</name></type> <name>sqlite3rbu_destroy_vfs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pVfs</name> <operator>&amp;&amp;</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>xOpen</name></name><operator>==</operator><name>rbuVfsOpen</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_mutex_free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><name>pVfs</name><operator>)</operator><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Create an RBU VFS named zName that accesses the underlying file-system
** via existing VFS zParent. The new object is registered as a non-default
** VFS with SQLite before returning.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3rbu_create_vfs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zParent</name></decl></parameter>)</parameter_list><block>{<block_content>

  <comment type="block">/* Template for VFS */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name></type> <name>vfs_template</name> <init>= <expr><block>{
    <expr><literal type="number">1</literal></expr>,                            <comment type="block">/* iVersion */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* szOsFile */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* mxPathname */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pNext */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* zName */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pAppData */</comment>
    <expr><name>rbuVfsOpen</name></expr>,                   <comment type="block">/* xOpen */</comment>
    <expr><name>rbuVfsDelete</name></expr>,                 <comment type="block">/* xDelete */</comment>
    <expr><name>rbuVfsAccess</name></expr>,                 <comment type="block">/* xAccess */</comment>
    <expr><name>rbuVfsFullPathname</name></expr>,           <comment type="block">/* xFullPathname */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
    <expr><name>rbuVfsDlOpen</name></expr>,                 <comment type="block">/* xDlOpen */</comment>
    <expr><name>rbuVfsDlError</name></expr>,                <comment type="block">/* xDlError */</comment>
    <expr><name>rbuVfsDlSym</name></expr>,                  <comment type="block">/* xDlSym */</comment>
    <expr><name>rbuVfsDlClose</name></expr>,                <comment type="block">/* xDlClose */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr><name>rbuVfsRandomness</name></expr>,             <comment type="block">/* xRandomness */</comment>
    <expr><name>rbuVfsSleep</name></expr>,                  <comment type="block">/* xSleep */</comment>
    <expr><name>rbuVfsCurrentTime</name></expr>,            <comment type="block">/* xCurrentTime */</comment>
    <expr><name>rbuVfsGetLastError</name></expr>,           <comment type="block">/* xGetLastError */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xCurrentTimeInt64 (version 2) */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>                       <comment type="block">/* Unimplemented version 3 methods */</comment>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>rbu_vfs</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Newly allocated VFS */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nByte</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nName</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rbu_vfs</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nName</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>rbu_vfs</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pParent</name></decl>;</decl_stmt>           <comment type="block">/* Parent VFS */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pParent</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name>zParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pParent</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOTFOUND</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSpace</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfs_template</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_vfs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>mxPathname</name></name> <operator>=</operator> <name><name>pParent</name><operator>-&gt;</operator><name>mxPathname</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>szOsFile</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rbu_file</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pParent</name><operator>-&gt;</operator><name>szOsFile</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRealVfs</name></name> <operator>=</operator> <name>pParent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zName</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>zSpace</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNew</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zSpace</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Allocate the mutex and register the new VFS (not as the default) */</comment>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>sqlite3_mutex_alloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>mutex</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_mutex_free</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Configure the aggregate temp file size limit for this RBU handle.
*/</comment>
<function><type><name>sqlite3_int64</name></type> <name>sqlite3rbu_temp_size_limit</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pRbu</name><operator>-&gt;</operator><name>szTempLimit</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>pRbu</name><operator>-&gt;</operator><name>szTempLimit</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sqlite3_int64</name></type> <name>sqlite3rbu_temp_size</name><parameter_list>(<parameter><decl><type><name>sqlite3rbu</name> <modifier>*</modifier></type><name>pRbu</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>pRbu</name><operator>-&gt;</operator><name>szTemp</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**************************************************************************/</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_RBU) */</comment>
</unit>
