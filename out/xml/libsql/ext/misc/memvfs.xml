<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/misc/memvfs.c"><comment type="block">/*
** 2016-09-07
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This is an in-memory VFS implementation.  The application supplies
** a chunk of memory to hold the database file.
**
** Because there is place to store a rollback or wal journal, the database
** must use one of journal_mode=MEMORY or journal_mode=NONE.
**
** USAGE:
**
**    sqlite3_open_v2("file:/whatever?ptr=0xf05538&amp;sz=14336&amp;max=65536", &amp;db,
**                    SQLITE_OPEN_READWRITE | SQLITE_OPEN_URI,
**                    "memvfs");
**
** These are the query parameters:
**
**    ptr=          The address of the memory buffer that holds the database.
**
**    sz=           The current size the database file
**
**    maxsz=        The maximum size of the database.  In other words, the
**                  amount of space allocated for the ptr= buffer.
**
**    freeonclose=  If true, then sqlite3_free() is called on the ptr=
**                  value when the connection closes.
**
** The ptr= and sz= query parameters are required.  If maxsz= is omitted,
** then it defaults to the sz= value.  Parameter values can be in either
** decimal or hexadecimal.  The filename in the URI is ignored.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3ext.h&gt;</cpp:file></cpp:include>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>


<comment type="block">/*
** Forward declaration of objects used by this utility
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>sqlite3_vfs</name></name></type> <name>MemVfs</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>MemFile</name></name></type> <name>MemFile</name>;</typedef>

<comment type="block">/* Access to a lower-level VFS that (might) implement dynamic loading,
** access to randomness, etc.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIGVFS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sqlite3_vfs*)((p)-&gt;pAppData))</cpp:value></cpp:define>

<comment type="block">/* An open file */</comment>
<struct>struct <name>MemFile</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* IO methods */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>sz</name></decl>;</decl_stmt>               <comment type="block">/* Size of the file */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>szMax</name></decl>;</decl_stmt>            <comment type="block">/* Space allocated to aData */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>           <comment type="block">/* content of the file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bFreeOnClose</name></decl>;</decl_stmt>               <comment type="block">/* Invoke sqlite3_free() on aData at close */</comment>
}</block>;</struct>

<comment type="block">/*
** Methods for MemFile
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memRead</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memWrite</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memShmMap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iPg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>volatile</specifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>memShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deleteFlag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memFetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memUnfetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Methods for MemVfs
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memAccess</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memFullPathname</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>memDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><name>memDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> <operator>*</operator><name>pVfs</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator><name>zSym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>memDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name></type> <name>mem_vfs</name> <init>= <expr><block>{
  <expr><literal type="number">2</literal></expr>,                           <comment type="block">/* iVersion */</comment>
  <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* szOsFile (set when registered) */</comment>
  <expr><literal type="number">1024</literal></expr>,                        <comment type="block">/* mxPathname */</comment>
  <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* pNext */</comment>
  <expr><literal type="string">"memvfs"</literal></expr>,                    <comment type="block">/* zName */</comment>
  <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* pAppData (set when registered) */</comment> 
  <expr><name>memOpen</name></expr>,                     <comment type="block">/* xOpen */</comment>
  <expr><name>memDelete</name></expr>,                   <comment type="block">/* xDelete */</comment>
  <expr><name>memAccess</name></expr>,                   <comment type="block">/* xAccess */</comment>
  <expr><name>memFullPathname</name></expr>,             <comment type="block">/* xFullPathname */</comment>
  <expr><name>memDlOpen</name></expr>,                   <comment type="block">/* xDlOpen */</comment>
  <expr><name>memDlError</name></expr>,                  <comment type="block">/* xDlError */</comment>
  <expr><name>memDlSym</name></expr>,                    <comment type="block">/* xDlSym */</comment>
  <expr><name>memDlClose</name></expr>,                  <comment type="block">/* xDlClose */</comment>
  <expr><name>memRandomness</name></expr>,               <comment type="block">/* xRandomness */</comment>
  <expr><name>memSleep</name></expr>,                    <comment type="block">/* xSleep */</comment>
  <expr><name>memCurrentTime</name></expr>,              <comment type="block">/* xCurrentTime */</comment>
  <expr><name>memGetLastError</name></expr>,             <comment type="block">/* xGetLastError */</comment>
  <expr><name>memCurrentTimeInt64</name></expr>          <comment type="block">/* xCurrentTimeInt64 */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_io_methods</name></type> <name>mem_io_methods</name> <init>= <expr><block>{
  <expr><literal type="number">3</literal></expr>,                              <comment type="block">/* iVersion */</comment>
  <expr><name>memClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>memRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>memWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>memTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>memSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>memFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>memLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>memUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>memCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>memFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>memSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>memDeviceCharacteristics</name></expr>,      <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><name>memShmMap</name></expr>,                     <comment type="block">/* xShmMap */</comment>
  <expr><name>memShmLock</name></expr>,                    <comment type="block">/* xShmLock */</comment>
  <expr><name>memShmBarrier</name></expr>,                 <comment type="block">/* xShmBarrier */</comment>
  <expr><name>memShmUnmap</name></expr>,                   <comment type="block">/* xShmUnmap */</comment>
  <expr><name>memFetch</name></expr>,                      <comment type="block">/* xFetch */</comment>
  <expr><name>memUnfetch</name></expr>                     <comment type="block">/* xUnfetch */</comment>
}</block></expr></init></decl>;</decl_stmt>



<comment type="block">/*
** Close an mem-file.
**
** The pData pointer is owned by the application, so there is nothing
** to free.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bFreeOnClose</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name><operator>+</operator><name>iOfst</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>szMax</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_FULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iOfst</name><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <name>iOfst</name><operator>+</operator><name>iAmt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name><operator>+</operator><name>iOfst</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>size</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>size</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>szMax</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_FULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt> 
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Lock an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_NOTFOUND</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_VFSNAME</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"mem(%p,%lld)"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">1024</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an mem-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_IOCAP_ATOMIC</name> <operator>|</operator> 
         <name>SQLITE_IOCAP_POWERSAFE_OVERWRITE</name> <operator>|</operator>
         <name>SQLITE_IOCAP_SAFE_APPEND</name> <operator>|</operator>
         <name>SQLITE_IOCAP_SEQUENTIAL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create a shared memory file mapping */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memShmMap</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iPg</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bExtend</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_IOERR_SHMMAP</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Perform locking on a shared-memory segment */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_IOERR_SHMLOCK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Memory barrier operation on shared memory */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block">/* Unmap a shared memory segment */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deleteFlag</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Fetch a page of a memory-mapped file */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memFetch</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>aData</name></name> <operator>+</operator> <name>iOfst</name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Release a memory-mapped page */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memUnfetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open an mem file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_CANTOPEN</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_uri_int64</name><argument_list>(<argument><expr><name>zName</name></expr></argument>,<argument><expr><literal type="string">"ptr"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_CANTOPEN</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <call><name>sqlite3_uri_int64</name><argument_list>(<argument><expr><name>zName</name></expr></argument>,<argument><expr><literal type="string">"sz"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>sz</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_CANTOPEN</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>szMax</name></name> <operator>=</operator> <call><name>sqlite3_uri_int64</name><argument_list>(<argument><expr><name>zName</name></expr></argument>,<argument><expr><literal type="string">"max"</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>szMax</name></name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_CANTOPEN</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bFreeOnClose</name></name> <operator>=</operator> <call><name>sqlite3_uri_boolean</name><argument_list>(<argument><expr><name>zName</name></expr></argument>,<argument><expr><literal type="string">"freeonclose"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>mem_io_methods</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_IOERR_DELETE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (INST_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlOpen</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlError</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*memDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlSym</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlClose</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xRandomness</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xSleep</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xCurrentTime</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>memGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xGetLastError</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xCurrentTimeInt64</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MEMVFS_TEST</name></cpp:ifdef>
<comment type="block">/*
**       memvfs_from_file(FILENAME, MAXSIZE)
**
** This an SQL function used to help in testing the memvfs VFS.  The
** function reads the content of a file into memory and then returns
** a URI that can be handed to ATTACH to attach the memory buffer as
** a database.  Example:
**
**       ATTACH memvfs_from_file('test.db',1048576) AS inmem;
**
** The optional MAXSIZE argument gives the size of the memory allocation
** used to hold the database.  If omitted, it defaults to the size of the
** file on disk.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memvfsFromFileFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>szMax</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zUri</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>zFilename</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>szMax</name> <operator>=</operator> <name>sz</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>szMax</name> <operator>=</operator> <call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>szMax</name><operator>&lt;</operator><name>sz</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>szMax</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><name>szMax</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zUri</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
           <argument><expr><literal type="string">"file:/mem?vfs=memvfs&amp;ptr=%lld&amp;sz=%lld&amp;max=%lld&amp;freeonclose=1"</literal></expr></argument>,
                         <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>szMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zUri</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MEMVFS_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MEMVFS_TEST</name></cpp:ifdef>
<comment type="block">/*
**       memvfs_to_file(SCHEMA, FILENAME)
**
** The schema identified by SCHEMA must be a memvfs database.  Write
** the content of this database into FILENAME.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memvfsToFileFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSchema</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>zFilename</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>out</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSchema</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_VFS_POINTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>||</operator> <name>pVfs</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pVfs</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,<argument><expr><literal type="string">"memvfs"</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSchema</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_FILE_POINTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>sz</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MEMVFS_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MEMVFS_TEST</name></cpp:ifdef>
<comment type="block">/* Called for each new database connection */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memvfsRegister</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sqlite3_api_routines</name></name> <modifier>*</modifier></type><name>pThunk</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"memvfs_from_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                          <argument><expr><name>memvfsFromFileFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"memvfs_from_file"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                          <argument><expr><name>memvfsFromFileFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"memvfs_to_file"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                          <argument><expr><name>memvfsToFileFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MEMVFS_TEST */</comment>

  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* 
** This routine is called when the extension is loaded.
** Register the new VFS.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_memvfs_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem_vfs</name><operator>.</operator><name>pAppData</name></name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>mem_vfs</name><operator>.</operator><name>pAppData</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>mem_vfs</name><operator>.</operator><name>szOsFile</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MemFile</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mem_vfs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MEMVFS_TEST</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_auto_extension</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><name>memvfsRegister</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>memvfsRegister</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK_LOAD_PERMANENTLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
