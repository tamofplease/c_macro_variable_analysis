<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/misc/base85.c"><comment type="block">/*
** 2022-11-16
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This is a utility for converting binary to base85 or vice-versa.
** It can be built as a standalone program or an SQLite3 extension.
**
** Much like base64 representations, base85 can be sent through a
** sane USASCII channel unmolested. It also plays nicely in CSV or
** written as TCL brace-enclosed literals or SQL string literals.
** It is not suited for unmodified use in XML-like documents.
**
** The encoding used resembles Ascii85, but was devised by the author
** (Larry Brasfield) before Mozilla, Adobe, ZMODEM or other Ascii85
** variant sources existed, in the 1984 timeframe on a VAX mainframe.
** Further, this is an independent implementation of a base85 system.
** Hence, the author has rightfully put this into the public domain.
**
** Base85 numerals are taken from the set of 7-bit USASCII codes,
** excluding control characters and Space ! " ' ( ) { | } ~ Del
** in code order representing digit values 0 to 84 (base 10.)
**
** Groups of 4 bytes, interpreted as big-endian 32-bit values,
** are represented as 5-digit base85 numbers with MS to LS digit
** order. Groups of 1-3 bytes are represented with 2-4 digits,
** still big-endian but 8-24 bit values. (Using big-endian yields
** the simplest transition to byte groups smaller than 4 bytes.
** These byte groups can also be considered base-256 numbers.)
** Groups of 0 bytes are represented with 0 digits and vice-versa.
** No pad characters are used; Encoded base85 numeral sequence
** (aka "group") length maps 1-to-1 to the decoded binary length.
**
** Any character not in the base85 numeral set delimits groups.
** When base85 is streamed or stored in containers of indefinite
** size, newline is used to separate it into sub-sequences of no
** more than 80 digits so that fgets() can be used to read it.
**
** Length limitations are not imposed except that the runtime
** SQLite string or blob length limits are respected. Otherwise,
** any length binary sequence can be represented and recovered.
** Base85 sequences can be concatenated by separating them with
** a non-base85 character; the conversion to binary will then
** be the concatenation of the represented binary sequences.

** The standalone program either converts base85 on stdin to create
** a binary file or converts a binary file to base85 on stdout.
** Read or make it blurt its help for invocation details.
**
** The SQLite3 extension creates a function, base85(x), which will
** either convert text base85 to a blob or a blob to text base85
** and return the result (or throw an error for other types.)
** Unless built with OMIT_BASE85_CHECKER defined, it also creates a
** function, is_base85(t), which returns 1 iff the text t contains
** nothing other than base85 numerals and whitespace, or 0 otherwise.
**
** To build the extension:
** Set shell variable SQDIR=&lt;your favorite SQLite checkout directory&gt;
** and variable OPTS to -DOMIT_BASE85_CHECKER if is_base85() unwanted.
** *Nix: gcc -O2 -shared -I$SQDIR $OPTS -fPIC -o base85.so base85.c
** OSX: gcc -O2 -dynamiclib -fPIC -I$SQDIR $OPTS -o base85.dylib base85.c
** Win32: gcc -O2 -shared -I%SQDIR% %OPTS% -o base85.dll base85.c
** Win32: cl /Os -I%SQDIR% %OPTS% base85.c -link -dll -out:base85.dll
**
** To build the standalone program, define PP symbol BASE85_STANDALONE. Eg.
** *Nix or OSX: gcc -O2 -DBASE85_STANDALONE base85.c -o base85
** Win32: gcc -O2 -DBASE85_STANDALONE -o base85.exe base85.c
** Win32: cl /Os /MD -DBASE85_STANDALONE base85.c
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OMIT_BASE85_CHECKER</name></cpp:ifndef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BASE85_STANDALONE</name></cpp:ifndef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_SHELL_EXTFUNCS</name></cpp:ifndef> <comment type="block">/* Guard for #include as built-in extension. */</comment>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>SQLITE_EXTENSION_INIT1</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>setmode</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>zHelp</name> <init>=
  <expr><literal type="string">"Usage: base85 &lt;dirFlag&gt; &lt;binFile&gt;\n"</literal>
  <literal type="string">" &lt;dirFlag&gt; is either -r to read or -w to write &lt;binFile&gt;,\n"</literal>
  <literal type="string">"   content to be converted to/from base85 on stdout/stdin.\n"</literal>
  <literal type="string">" &lt;binFile&gt; names a binary file to be rendered or created.\n"</literal>
  <literal type="string">"   Or, the name '-' refers to the stdin or stdout stream.\n"</literal></expr></init></decl>
  ;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sayHelp</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UBYTE_TYPEDEF</name></cpp:ifndef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>ubyte</name>;</typedef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>UBYTE_TYPEDEF</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Classify c according to interval within USASCII set w.r.t. base85
 * Values of 1 and 3 are base85 numerals. Values of 0, 2, or 4 are not.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B85_CLASS</name><parameter_list>( <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(((c)&gt;='#')+((c)&gt;'&amp;')+((c)&gt;='*')+((c)&gt;'z'))</cpp:value></cpp:define>

<comment type="block">/* Provide digitValue to b85Numeral offset as a function of above class. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ubyte</name></type> <name><name>b85_cOffset</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'*'</literal><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B85_DNOS</name><parameter_list>( <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>b85_cOffset[B85_CLASS(c)]</cpp:value></cpp:define>

<comment type="block">/* Say whether c is a base85 numeral. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_B85</name><parameter_list>( <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(B85_CLASS(c) &amp; 1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> <comment type="block">/* Not used, */</comment>
static ubyte base85DigitValue( char c ){
  ubyte dv = (ubyte)(c - '#');
  if( dv&gt;87 ) return 0xff;
  return (dv &gt; 3)? dv-3 : dv;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Width of base64 lines. Should be an integer multiple of 5. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B85_DARK_MAX</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>skipNonB85</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_B85</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Convert small integer, known to be in 0..84 inclusive, to base85 numeral.
 * Do not use the macro form with argument expression having a side-effect.*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static char base85Numeral( ubyte b ){
  return (b &lt; 4)? (char)(b + '#') : (char)(b - 4 + '*');
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>base85Numeral</name><parameter_list>( <parameter><type><name>dn</name></type></parameter> )</parameter_list></cpp:macro>\
  <cpp:value>((char)(((dn) &lt; 4)? (char)((dn) + '#') : (char)((dn) - 4 + '*')))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>putcs</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pc</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>pc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Encode a byte buffer into base85 text. If pSep!=0, it's a C string
** to be appended to encoded groups to limit their length to B85_DARK_MAX
** or to terminate the last group (to aid concatenation.)
*/</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>toBase85</name><parameter_list>( <parameter><decl><type><name>ubyte</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbIn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pSep</name></decl></parameter> )</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>nbIn</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nco</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>qbv</name> <init>= <expr><operator>(</operator><name><name>pIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>pIn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>pIn</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>nco</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name></type> <name>nqv</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>qbv</name><operator>/</operator><literal type="number">85UL</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>dv</name> <init>= <expr><name>qbv</name> <operator>-</operator> <literal type="number">85UL</literal><operator>*</operator><name>nqv</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>qbv</name> <operator>=</operator> <name>nqv</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOut</name><index>[<expr><operator>--</operator><name>nco</name></expr>]</index></name> <operator>=</operator> <call><name>base85Numeral</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>nbIn</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIn</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pOut</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pSep</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>nCol</name> <operator>+=</operator> <literal type="number">5</literal><operator>)</operator><operator>&gt;=</operator><name>B85_DARK_MAX</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pOut</name> <operator>=</operator> <call><name>putcs</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>nbIn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nco</name> <init>= <expr><name>nbIn</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>qv</name> <init>= <expr><operator>*</operator><name>pIn</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nbe</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>nbe</name><operator>++</operator> <operator>&lt;</operator> <name>nbIn</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>qv</name> <operator>=</operator> <operator>(</operator><name>qv</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>pIn</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>nCol</name> <operator>+=</operator> <name>nco</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>nco</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>ubyte</name></type> <name>dv</name> <init>= <expr><operator>(</operator><name>ubyte</name><operator>)</operator><operator>(</operator><name>qv</name> <operator>%</operator> <literal type="number">85</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>qv</name> <operator>/=</operator> <literal type="number">85</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOut</name><index>[<expr><operator>--</operator><name>nco</name></expr>]</index></name> <operator>=</operator> <call><name>base85Numeral</name><argument_list>(<argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>pOut</name> <operator>+=</operator> <operator>(</operator><name>nbIn</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pSep</name> <operator>&amp;&amp;</operator> <name>nCol</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pOut</name> <operator>=</operator> <call><name>putcs</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>pOut</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Decode base85 text into a byte buffer. */</comment>
<function><type><specifier>static</specifier> <name>ubyte</name><modifier>*</modifier></type> <name>fromBase85</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ncIn</name></decl></parameter>, <parameter><decl><type><name>ubyte</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter> )</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>ncIn</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIn</name><index>[<expr><name>ncIn</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>ncIn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><name>ncIn</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>signed</name> <name>char</name></type> <name><name>nboi</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pUse</name> <init>= <expr><call><name>skipNonB85</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>qv</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nti</name></decl>, <decl><type ref="prev"/><name>nbo</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ncIn</name> <operator>-=</operator> <operator>(</operator><name>pUse</name> <operator>-</operator> <name>pIn</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIn</name> <operator>=</operator> <name>pUse</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nti</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ncIn</name><operator>&gt;</operator><literal type="number">5</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><name>ncIn</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbo</name> <operator>=</operator> <name><name>nboi</name><index>[<expr><name>nti</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nbo</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <while>while<condition>( <expr><name>nti</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>pIn</name><operator>++</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ubyte</name></type> <name>cdo</name> <init>= <expr><call><name>B85_DNOS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>--</operator><name>ncIn</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>cdo</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>qv</name> <operator>=</operator> <literal type="number">85</literal> <operator>*</operator> <name>qv</name> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name>cdo</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name>nti</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>nbo</name> <operator>-=</operator> <name>nti</name></expr>;</expr_stmt> <comment type="block">/* Adjust for early (non-digit) end of group. */</comment>
    <switch>switch<condition>( <expr><name>nbo</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>qv</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>qv</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>qv</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <name>qv</name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <return>return <expr><name>pOut</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OMIT_BASE85_CHECKER</name></cpp:ifndef>
<comment type="block">/* Say whether input char sequence is all (base85 and/or whitespace).*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>allBase85</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>IS_B85</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BASE85_STANDALONE</name></cpp:ifndef>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>OMIT_BASE85_CHECKER</name></cpp:ifndef>
<comment type="block">/* This function does the work for the SQLite is_base85(t) UDF. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>is_base85</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>na</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name><name>av</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>na</name><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
  <case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>allBase85</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>
  <case>case <expr><name>SQLITE_NULL</name></expr>:</case>
    <expr_stmt><expr><call><name>sqlite3_result_null</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"is_base85 accepts only text or NULL"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* This function does the work for the SQLite base85(x) UDF. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>base85</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>na</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name><name>av</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>, <decl><type ref="prev"/><name>nv</name> <init>= <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nvMax</name> <init>= <expr><call><name>sqlite3_limit</name><argument_list>(<argument><expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>SQLITE_LIMIT_LENGTH</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ubyte</name> <modifier>*</modifier></type><name>bBuf</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>na</name><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
  <case>case <expr><name>SQLITE_BLOB</name></expr>:</case>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <name>nv</name></expr>;</expr_stmt>
    <comment type="block">/*    ulongs    tail   newlines  tailenc+nul*/</comment>
    <expr_stmt><expr><name>nc</name> <operator>=</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name>nv</name><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>nv</name><operator>%</operator><literal type="number">4</literal> <operator>+</operator> <name>nv</name><operator>/</operator><literal type="number">64</literal><operator>+</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nvMax</name> <operator>&lt;</operator> <name>nc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"blob expanded to base85 too big"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cBuf</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>cBuf</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>memFail</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>bBuf</name> <operator>=</operator> <operator>(</operator><name>ubyte</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>toBase85</name><argument_list>(<argument><expr><name>bBuf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>cBuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>cBuf</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cBuf</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
    <expr_stmt><expr><name>nc</name> <operator>=</operator> <name>nv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>nv</name><operator>/</operator><literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>nv</name><operator>%</operator><literal type="number">5</literal></expr>;</expr_stmt> <comment type="block">/* may overestimate */</comment>
    <if_stmt><if>if<condition>( <expr><name>nvMax</name> <operator>&lt;</operator> <name>nb</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"blob from base85 may be too big"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nb</name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>bBuf</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>bBuf</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>memFail</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cBuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>fromBase85</name><argument_list>(<argument><expr><name>cBuf</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>bBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bBuf</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bBuf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"base85 accepts only blob or text."</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></switch>
  <return>return;</return>
 <label><name>memFail</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"base85 OOM"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Establish linkage to running SQLite library.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_SHELL_EXTFUNCS</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name> <name>sqlite3_base_init</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<specifier>static</specifier> <name>int</name></type> <name>sqlite3_base85_init</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErr</name></expr>;</expr_stmt>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>OMIT_BASE85_CHECKER</name></cpp:ifndef>
  <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_create_function</name>
      <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"is_base85"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
       <argument><expr><name>SQLITE_DETERMINISTIC</name><operator>|</operator><name>SQLITE_INNOCUOUS</name><operator>|</operator><name>SQLITE_UTF8</name></expr></argument>,
       <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>is_base85</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><call><name>sqlite3_create_function</name>
    <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"base85"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
     <argument><expr><name>SQLITE_DETERMINISTIC</name><operator>|</operator><name>SQLITE_INNOCUOUS</name><operator>|</operator><name>SQLITE_DIRECTONLY</name><operator>|</operator><name>SQLITE_UTF8</name></expr></argument>,
     <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>base85</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Define some macros to allow this extension to be built into the shell
** conveniently, in conjunction with use of SQLITE_SHELL_EXTFUNCS. This
** allows shell.c, as distributed, to have this extension built in.
*/</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>BASE85_INIT</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sqlite3_base85_init(db, 0, 0)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>BASE85_EXPOSE</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>pzErr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> <comment type="block">/* Not needed, ..._init() does this. */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* standalone program */</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>na</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>av</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cin</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ubyte</name></type> <name><name>bBuf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>B85_DARK_MAX</name><operator>/</operator><literal type="number">5</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>cBuf</name><index>[<expr><literal type="number">5</literal><operator>*</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bBuf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nio</name></decl>;</decl_stmt>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>OMIT_BASE85_CHECKER</name></cpp:ifndef>
  <decl_stmt><decl><type><name>int</name></type> <name>b85Clean</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>char</name></type> <name>rw</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>foc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fmode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><literal type="string">"xb"</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>na</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'-'</literal> <operator>||</operator> <operator>(</operator><name>rw</name> <operator>=</operator> <name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>rw</name><operator>!=</operator><literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name>rw</name><operator>!=</operator><literal type="char">'w'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sayHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>fmode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rw</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><name>rw</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="char">'r'</literal></expr>:</case>
      <expr_stmt><expr><name>fb</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
      <expr_stmt><expr><name>fb</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>fb</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>foc</name> <operator>=</operator> <name>fb</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>fb</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot open %s for %c\n"</literal></expr></argument>, <argument><expr><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <switch>switch<condition>( <expr><name>rw</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="char">'r'</literal></expr>:</case>
      <while>while<condition>( <expr><operator>(</operator><name>nio</name> <operator>=</operator> <call><name>fread</name><argument_list>( <argument><expr><name>bBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fb</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>toBase85</name><argument_list>( <argument><expr><name>bBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nio</name></expr></argument>, <argument><expr><name>cBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>cBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
      <while>while<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>cBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nc</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>nbo</name> <init>= <expr><call><name>fromBase85</name><argument_list>( <argument><expr><name>cBuf</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>bBuf</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>bBuf</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><literal type="number">1</literal> <operator>!=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><name>bBuf</name></expr></argument>, <argument><expr><name>nbo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>OMIT_BASE85_CHECKER</name></cpp:ifndef>
        <expr_stmt><expr><name>b85Clean</name> <operator>&amp;=</operator> <call><name>allBase85</name><argument_list>( <argument><expr><name>cBuf</name></expr></argument>, <argument><expr><name>nc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></while>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>sayHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <if_stmt><if>if<condition>( <expr><name>foc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>foc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>OMIT_BASE85_CHECKER</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>b85Clean</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Base85 input had non-base85 dark or control content.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
