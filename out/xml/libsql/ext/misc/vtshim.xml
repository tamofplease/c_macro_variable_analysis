<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/misc/vtshim.c"><comment type="block">/*
** 2013-06-12
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** A shim that sits between the SQLite virtual table interface and
** runtimes with garbage collector based memory management.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>

<comment type="block">/* Forward references */</comment>
<typedef>typedef <type><name><name>struct</name> <name>vtshim_aux</name></name></type> <name>vtshim_aux</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vtshim_vtab</name></name></type> <name>vtshim_vtab</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>vtshim_cursor</name></name></type> <name>vtshim_cursor</name>;</typedef>


<comment type="block">/* The vtshim_aux argument is the auxiliary parameter that is passed
** into sqlite3_create_module_v2().
*/</comment>
<struct>struct <name>vtshim_aux</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pChildAux</name></decl>;</decl_stmt>              <comment type="block">/* pAux for child virtual tables */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xChildDestroy</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* Destructor for pChildAux */</comment>
  <decl_stmt><decl><type><name>sqlite3_module</name> <modifier>*</modifier></type><name>pMod</name></decl>;</decl_stmt>         <comment type="block">/* Methods for child virtual tables */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                  <comment type="block">/* The database to which we are attached */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>                  <comment type="block">/* Name of the module */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bDisposed</name></decl>;</decl_stmt>                <comment type="block">/* True if disposed */</comment>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pAllVtab</name></decl>;</decl_stmt>        <comment type="block">/* List of all vtshim_vtab objects */</comment>
  <decl_stmt><decl><type><name>sqlite3_module</name></type> <name>sSelf</name></decl>;</decl_stmt>         <comment type="block">/* Methods used by this shim */</comment>
}</block>;</struct>

<comment type="block">/* A vtshim virtual table object */</comment>
<struct>struct <name>vtshim_vtab</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>       <comment type="block">/* Base class - must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pChild</name></decl>;</decl_stmt>    <comment type="block">/* Child virtual table */</comment>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>        <comment type="block">/* Pointer to vtshim_aux object */</comment>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pAllCur</name></decl>;</decl_stmt>  <comment type="block">/* List of all cursors */</comment>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPrev</name></decl>;</decl_stmt>    <comment type="block">/* Previous on list */</comment>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>      <comment type="block">/* Next on list */</comment>
}</block>;</struct>

<comment type="block">/* A vtshim cursor object */</comment>
<struct>struct <name>vtshim_cursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>    <comment type="block">/* Base class - must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pChild</name></decl>;</decl_stmt> <comment type="block">/* Cursor generated by the managed subclass */</comment>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPrev</name></decl>;</decl_stmt>      <comment type="block">/* Previous on list of all cursors */</comment>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>        <comment type="block">/* Next on list of all cursors */</comment>
}</block>;</struct>

<comment type="block">/* Macro used to copy the child vtable error message to outer vtable */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTSHIM_COPY_ERRMSG</name><parameter_list>()</parameter_list></cpp:macro>                                             \
  <cpp:value>do {                                                                   \
    sqlite3_free(pVtab-&gt;base.zErrMsg);                                   \
    pVtab-&gt;base.zErrMsg = sqlite3_mprintf("%s", pVtab-&gt;pChild-&gt;zErrMsg); \
  } while (0)</cpp:value></cpp:define>

<comment type="block">/* Methods for the vtshim module */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimCreate</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ppAux</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><operator>(</operator><name>vtshim_aux</name><operator>*</operator><operator>)</operator><name>ppAux</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>db</name><operator>==</operator><name><name>pAux</name><operator>-&gt;</operator><name>db</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pzErr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"virtual table was disposed: \"%s\""</literal></expr></argument>,
                               <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pNew</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xCreate</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>pChildAux</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pAux</name></name> <operator>=</operator> <name>pAux</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimConnect</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ppAux</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><operator>(</operator><name>vtshim_aux</name><operator>*</operator><operator>)</operator><name>ppAux</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>db</name><operator>==</operator><name><name>pAux</name><operator>-&gt;</operator><name>db</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pzErr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"virtual table was disposed: \"%s\""</literal></expr></argument>,
                               <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pNew</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xConnect</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>pChildAux</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pAux</name></name> <operator>=</operator> <name>pAux</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimBestIndex</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pIdxInfo</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xBestIndex</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>pIdxInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimDisconnect</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xDisconnect</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <name><name>pVtab</name><operator>-&gt;</operator><name>ppPrev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pVtab</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <name><name>pVtab</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimDestroy</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xDestroy</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <name><name>pVtab</name><operator>-&gt;</operator><name>ppPrev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pVtab</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <name><name>pVtab</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pCur</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCur</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCur</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name><operator>-&gt;</operator><name>pVtab</name></name> <operator>=</operator> <name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pVtab</name><operator>-&gt;</operator><name>pAllCur</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAllCur</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAllCur</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pVtab</name><operator>-&gt;</operator><name>pAllCur</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAllCur</name></name> <operator>=</operator> <name>pCur</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vtshim_cursor</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>ppPrev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pCur</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimFilter</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idxStr</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vtshim_cursor</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xFilter</name></name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>idxNum</name></expr></argument>, <argument><expr><name>idxStr</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimNext</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vtshim_cursor</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xNext</name></name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimEof</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vtshim_cursor</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xEof</name></name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimColumn</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>, <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vtshim_cursor</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xColumn</name></name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimRowid</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>vtshim_cursor</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xRowid</name></name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>pRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimUpdate</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xUpdate</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>pRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimBegin</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xBegin</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimCommit</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xCommit</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimRollback</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xRollback</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimFindFunction</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier><name>pxFunc</name>)<parameter_list>(<parameter><decl><type><name>sqlite3_context</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>sqlite3_value</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppArg</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xFindFunction</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pxFunc</name></expr></argument>, <argument><expr><name>ppArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimRename</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNewName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xRename</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>zNewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimSavepoint</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xSavepoint</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimRelease</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xRelease</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimRollbackTo</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name> <init>= <expr><operator>(</operator><name>vtshim_vtab</name><operator>*</operator><operator>)</operator><name>pBase</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><name><name>pVtab</name><operator>-&gt;</operator><name>pAux</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xRollbackTo</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VTSHIM_COPY_ERRMSG</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The destructor function for a disposible module */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vtshimAuxDestructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pXAux</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><operator>(</operator><name>vtshim_aux</name><operator>*</operator><operator>)</operator><name>pXAux</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name> <operator>&amp;&amp;</operator> <name><name>pAux</name><operator>-&gt;</operator><name>xChildDestroy</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>pAux</name><operator>-&gt;</operator><name>xChildDestroy</name></name><argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>pChildAux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>xChildDestroy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtshimCopyModule</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_module</name> <modifier>*</modifier></type><name>pMod</name></decl></parameter>,   <comment type="block">/* Source module to be copied */</comment>
  <parameter><decl><type><name>sqlite3_module</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppMod</name></decl></parameter>        <comment type="block">/* Destination for copied module */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_module</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pMod</name> <operator>||</operator> <operator>!</operator><name>ppMod</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pMod</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppMod</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name> <modifier>*</modifier></type><name>sqlite3_create_disposable_module</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,               <comment type="block">/* SQLite connection to register module with */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,         <comment type="block">/* Name of the module */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_module</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,   <comment type="block">/* Methods for the module */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pClientData</name></decl></parameter>,         <comment type="block">/* Client data for xCreate/xConnect */</comment>
  <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>xDestroy</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>     <comment type="block">/* Module destructor function */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_module</name> <modifier>*</modifier></type><name>pMod</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pAux</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pAux</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pAux</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>xDestroy</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xDestroy</name><argument_list>(<argument><expr><name>pClientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>vtshimCopyModule</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pChildAux</name></name> <operator>=</operator> <name>pClientData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>xChildDestroy</name></name> <operator>=</operator> <name>xDestroy</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name></name> <operator>=</operator> <name>pMod</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>iVersion</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&lt;=</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>iVersion</name></name></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xCreate</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xCreate</name></name></expr> ?</condition><then> <expr><name>vtshimCreate</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xConnect</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xConnect</name></name></expr> ?</condition><then> <expr><name>vtshimConnect</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xBestIndex</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xBestIndex</name></name></expr> ?</condition><then> <expr><name>vtshimBestIndex</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xDisconnect</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xDisconnect</name></name></expr> ?</condition><then> <expr><name>vtshimDisconnect</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xDestroy</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xDestroy</name></name></expr> ?</condition><then> <expr><name>vtshimDestroy</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xOpen</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xOpen</name></name></expr> ?</condition><then> <expr><name>vtshimOpen</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xClose</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xClose</name></name></expr> ?</condition><then> <expr><name>vtshimClose</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xFilter</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xFilter</name></name></expr> ?</condition><then> <expr><name>vtshimFilter</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xNext</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xNext</name></name></expr> ?</condition><then> <expr><name>vtshimNext</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xEof</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xEof</name></name></expr> ?</condition><then> <expr><name>vtshimEof</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xColumn</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xColumn</name></name></expr> ?</condition><then> <expr><name>vtshimColumn</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xRowid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xRowid</name></name></expr> ?</condition><then> <expr><name>vtshimRowid</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xUpdate</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xUpdate</name></name></expr> ?</condition><then> <expr><name>vtshimUpdate</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xBegin</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xBegin</name></name></expr> ?</condition><then> <expr><name>vtshimBegin</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xSync</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xSync</name></name></expr> ?</condition><then> <expr><name>vtshimSync</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xCommit</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xCommit</name></name></expr> ?</condition><then> <expr><name>vtshimCommit</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xRollback</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xRollback</name></name></expr> ?</condition><then> <expr><name>vtshimRollback</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xFindFunction</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xFindFunction</name></name></expr> ?</condition><then> <expr><name>vtshimFindFunction</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xRename</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xRename</name></name></expr> ?</condition><then> <expr><name>vtshimRename</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xSavepoint</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xSavepoint</name></name></expr> ?</condition><then> <expr><name>vtshimSavepoint</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xRelease</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xRelease</name></name></expr> ?</condition><then> <expr><name>vtshimRelease</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xRollbackTo</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>xRollbackTo</name></name></expr> ?</condition><then> <expr><name>vtshimRollbackTo</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xSavepoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xRelease</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name><operator>.</operator><name>xRollbackTo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_module_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pAux</name><operator>-&gt;</operator><name>sSelf</name></name></expr></argument>,
                                <argument><expr><name>pAux</name></expr></argument>, <argument><expr><name>vtshimAuxDestructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> ?</condition><then> <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pAux</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type> <name>sqlite3_dispose_module</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vtshim_aux</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><operator>(</operator><name>vtshim_aux</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>vtshim_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vtshim_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>pVtab</name><operator>=</operator><name><name>pAux</name><operator>-&gt;</operator><name>pAllVtab</name></name></expr>;</init> <condition><expr><name>pVtab</name></expr>;</condition> <incr><expr><name>pVtab</name><operator>=</operator><name><name>pVtab</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
      <for>for<control>(<init><expr><name>pCur</name><operator>=</operator><name><name>pVtab</name><operator>-&gt;</operator><name>pAllCur</name></name></expr>;</init> <condition><expr><name>pCur</name></expr>;</condition> <incr><expr><name>pCur</name><operator>=</operator><name><name>pCur</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name><name>pAux</name><operator>-&gt;</operator><name>pMod</name><operator>-&gt;</operator><name>xDisconnect</name></name><argument_list>(<argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>pChild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>bDisposed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>xChildDestroy</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name><name>pAux</name><operator>-&gt;</operator><name>xChildDestroy</name></name><argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>pChildAux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>xChildDestroy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_vtshim_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
