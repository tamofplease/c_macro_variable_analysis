<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/misc/base64.c"><comment type="block">/*
** 2022-11-18
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This is a SQLite extension for converting in either direction
** between a (binary) blob and base64 text. Base64 can transit a
** sane USASCII channel unmolested. It also plays nicely in CSV or
** written as TCL brace-enclosed literals or SQL string literals,
** and can be used unmodified in XML-like documents.
**
** This is an independent implementation of conversions specified in
** RFC 4648, done on the above date by the author (Larry Brasfield)
** who thereby has the right to put this into the public domain.
**
** The conversions meet RFC 4648 requirements, provided that this
** C source specifies that line-feeds are included in the encoded
** data to limit visible line lengths to 72 characters and to
** terminate any encoded blob having non-zero length.
**
** Length limitations are not imposed except that the runtime
** SQLite string or blob length limits are respected. Otherwise,
** any length binary sequence can be represented and recovered.
** Generated base64 sequences, with their line-feeds included,
** can be concatenated; the result converted back to binary will
** be the concatenation of the represented binary sequences.
**
** This SQLite3 extension creates a function, base64(x), which
** either: converts text x containing base64 to a returned blob;
** or converts a blob x to returned text containing base64. An
** error will be thrown for other input argument types.
**
** This code relies on UTF-8 encoding only with respect to the
** meaning of the first 128 (7-bit) codes matching that of USASCII.
** It will fail miserably if somehow made to try to convert EBCDIC.
** Because it is table-driven, it could be enhanced to handle that,
** but the world and SQLite have moved on from that anachronism.
**
** To build the extension:
** Set shell variable SQDIR=&lt;your favorite SQLite checkout directory&gt;
** *Nix: gcc -O2 -shared -I$SQDIR -fPIC -o base64.so base64.c
** OSX: gcc -O2 -dynamiclib -fPIC -I$SQDIR -o base64.dylib base64.c
** Win32: gcc -O2 -shared -I%SQDIR% -o base64.dll base64.c
** Win32: cl /Os -I%SQDIR% base64.c -link -dll -out:base64.dll
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_SHELL_EXTFUNCS</name></cpp:ifndef> <comment type="block">/* Guard for #include as built-in extension. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>SQLITE_EXTENSION_INIT1</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PC</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> <comment type="block">/* pad character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS</name></cpp:macro> <cpp:value>0x81</cpp:value></cpp:define> <comment type="block">/* whitespace */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ND</name></cpp:macro> <cpp:value>0x82</cpp:value></cpp:define> <comment type="block">/* Not above or digit-value */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAD_CHAR</name></cpp:macro> <cpp:value>'='</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UBYTE_TYPEDEF</name></cpp:ifndef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>ubyte</name>;</typedef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>UBYTE_TYPEDEF</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ubyte</name></type> <name><name>b64DigitValues</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{
  <comment type="block">/*                             HT LF VT  FF CR       */</comment>
    <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>WS</name></expr>,<expr><name>WS</name></expr>,<expr><name>WS</name></expr>, <expr><name>WS</name></expr>,<expr><name>WS</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,
  <comment type="block">/*                                                US */</comment>
    <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,
  <comment type="block">/*sp                                  +            / */</comment>
    <expr><name>WS</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><literal type="number">62</literal></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><literal type="number">63</literal></expr>,
  <comment type="block">/* 0  1            5            9            =       */</comment>
    <expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>PC</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,
  <comment type="block">/*    A                                            O */</comment>
    <expr><name>ND</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,
  <comment type="block">/* P                               Z                 */</comment>
    <expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,
  <comment type="block">/*    a                                            o */</comment>
    <expr><name>ND</name></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>,
  <comment type="block">/* p                               z                 */</comment>
    <expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,<expr><name>ND</name></expr>, <expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>,<expr><name>ND</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>b64Numerals</name><index>[<expr><literal type="number">64</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name>
<init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BX_DV_PROTO</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((ubyte)(c))&lt;0x80)? b64DigitValues[c] : 0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BX_DIGIT</name><parameter_list>(<parameter><type><name>bdp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ubyte)(bdp))&lt;0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BX_WS</name><parameter_list>(<parameter><type><name>bdp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bdp)==WS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BX_PAD</name><parameter_list>(<parameter><type><name>bdp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bdp)==PC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BX_NUMERAL</name><parameter_list>(<parameter><type><name>dv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(b64Numerals[(ubyte)(dv)])</cpp:value></cpp:define>
<comment type="block">/* Width of base64 lines. Should be an integer multiple of 4. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B64_DARK_MAX</name></cpp:macro> <cpp:value>72</cpp:value></cpp:define>

<comment type="block">/* Encode a byte buffer into base64 text with linefeeds appended to limit
** encoded group lengths to B64_DARK_MAX or to terminate the last group.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>toBase64</name><parameter_list>( <parameter><decl><type><name>ubyte</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbIn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter> )</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>nbIn</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Do the bit-shuffle, exploiting unsigned input to avoid masking. */</comment>
    <expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BX_NUMERAL</name><argument_list>(<argument><expr><name><name>pIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BX_NUMERAL</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>pIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>BX_NUMERAL</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>pIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xf</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>|</operator><operator>(</operator><name><name>pIn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>BX_NUMERAL</name><argument_list>(<argument><expr><name><name>pIn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pOut</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbIn</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIn</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nCol</name> <operator>+=</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;=</operator><name>B64_DARK_MAX</name> <operator>||</operator> <name>nbIn</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>nbIn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>nco</name> <init>= <expr><name>nbIn</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nbe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>qv</name> <init>= <expr><operator>*</operator><name>pIn</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <for>for<control>( <init><expr><name>nbe</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>nbe</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>nbe</name></expr></incr> )</control><block>{<block_content>
      <expr_stmt><expr><name>qv</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nbe</name><operator>&lt;</operator><name>nbIn</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qv</name> <operator>|=</operator> <operator>*</operator><name>pIn</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <for>for<control>( <init><expr><name>nbe</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>nbe</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>nbe</name></expr></incr> )</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>ce</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nbe</name><operator>&lt;</operator><name>nco</name><operator>)</operator></expr>?</condition><then> <expr><call><name>BX_NUMERAL</name><argument_list>(<argument><expr><operator>(</operator><name>ubyte</name><operator>)</operator><operator>(</operator><name>qv</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>PAD_CHAR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>qv</name> <operator>&gt;&gt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOut</name><index>[<expr><name>nbe</name></expr>]</index></name> <operator>=</operator> <name>ce</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>pOut</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>pOut</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Skip over text which is not base64 numeral(s). */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>skipNonB64</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_BX_DIGIT</name><argument_list>(<argument><expr><call><name>BX_DV_PROTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Decode base64 text into a byte buffer. */</comment>
<function><type><specifier>static</specifier> <name>ubyte</name><modifier>*</modifier></type> <name>fromBase64</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ncIn</name></decl></parameter>, <parameter><decl><type><name>ubyte</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter> )</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>ncIn</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIn</name><index>[<expr><name>ncIn</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>ncIn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><name>ncIn</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pIn</name><operator>!=</operator><name>PAD_CHAR</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>signed</name> <name>char</name></type> <name><name>nboi</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pUse</name> <init>= <expr><call><name>skipNonB64</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>qv</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nti</name></decl>, <decl><type ref="prev"/><name>nbo</name></decl>, <decl><type ref="prev"/><name>nac</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ncIn</name> <operator>-=</operator> <operator>(</operator><name>pUse</name> <operator>-</operator> <name>pIn</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIn</name> <operator>=</operator> <name>pUse</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nti</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ncIn</name><operator>&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><name>ncIn</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>ncIn</name> <operator>-=</operator> <name>nti</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbo</name> <operator>=</operator> <name><name>nboi</name><index>[<expr><name>nti</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nbo</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <for>for<control>( <init><expr><name>nac</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>nac</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>nac</name></expr></incr> )</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nac</name><operator>&lt;</operator><name>nti</name><operator>)</operator></expr>?</condition><then> <expr><operator>*</operator><name>pIn</name><operator>++</operator></expr> </then><else>: <expr><name><name>b64Numerals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ubyte</name></type> <name>bdp</name> <init>= <expr><call><name>BX_DV_PROTO</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <switch>switch<condition>( <expr><name>bdp</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>ND</name></expr>:</case>
        <comment type="block">/*  Treat dark non-digits as pad, but they terminate decode too. */</comment>
        <expr_stmt><expr><name>ncIn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <comment type="block">/* fall thru */</comment>
      <case>case <expr><name>WS</name></expr>:</case>
        <comment type="block">/* Treat whitespace as pad and terminate this group.*/</comment>
        <expr_stmt><expr><name>nti</name> <operator>=</operator> <name>nac</name></expr>;</expr_stmt>
        <comment type="block">/* fall thru */</comment>
      <case>case <expr><name>PC</name></expr>:</case>
        <expr_stmt><expr><name>bdp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>nbo</name></expr>;</expr_stmt>
         <comment type="block">/* fall thru */</comment>
      <default>default:</default> <comment type="block">/* bdp is the digit value. */</comment>
        <expr_stmt><expr><name>qv</name> <operator>=</operator> <name>qv</name><operator>&lt;&lt;</operator><literal type="number">6</literal> <operator>|</operator> <name>bdp</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
    <switch>switch<condition>( <expr><name>nbo</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>qv</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>qv</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name><name>pOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>qv</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>pOut</name> <operator>+=</operator> <name>nbo</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>pOut</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function does the work for the SQLite base64(x) UDF. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>base64</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>na</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name><name>av</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>, <decl><type ref="prev"/><name>nv</name> <init>= <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nvMax</name> <init>= <expr><call><name>sqlite3_limit</name><argument_list>(<argument><expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>SQLITE_LIMIT_LENGTH</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ubyte</name> <modifier>*</modifier></type><name>bBuf</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>na</name><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
  <case>case <expr><name>SQLITE_BLOB</name></expr>:</case>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <name>nv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nc</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>nv</name><operator>+</operator><literal type="number">2</literal><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* quads needed */</comment>
    <expr_stmt><expr><name>nc</name> <operator>+=</operator> <operator>(</operator><name>nc</name><operator>+</operator><operator>(</operator><name>B64_DARK_MAX</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><name>B64_DARK_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* LFs and a 0-terminator */</comment>
    <if_stmt><if>if<condition>( <expr><name>nvMax</name> <operator>&lt;</operator> <name>nc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"blob expanded to base64 too big"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cBuf</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>cBuf</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>memFail</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>bBuf</name> <operator>=</operator> <operator>(</operator><name>ubyte</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>toBase64</name><argument_list>(<argument><expr><name>bBuf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>cBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>cBuf</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cBuf</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
    <expr_stmt><expr><name>nc</name> <operator>=</operator> <name>nv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>nv</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* may overestimate due to LF and padding */</comment>
    <if_stmt><if>if<condition>( <expr><name>nvMax</name> <operator>&lt;</operator> <name>nb</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"blob from base64 may be too big"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nb</name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>bBuf</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>bBuf</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>memFail</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cBuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>fromBase64</name><argument_list>(<argument><expr><name>cBuf</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>bBuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bBuf</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bBuf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"base64 accepts only blob or text"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></switch>
  <return>return;</return>
 <label><name>memFail</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"base64 OOM"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Establish linkage to running SQLite library.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_SHELL_EXTFUNCS</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name> <name>sqlite3_base_init</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<specifier>static</specifier> <name>int</name></type> <name>sqlite3_base64_init</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErr</name></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_create_function</name>
    <argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"base64"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
     <argument><expr><name>SQLITE_DETERMINISTIC</name><operator>|</operator><name>SQLITE_INNOCUOUS</name><operator>|</operator><name>SQLITE_DIRECTONLY</name><operator>|</operator><name>SQLITE_UTF8</name></expr></argument>,
     <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>base64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Define some macros to allow this extension to be built into the shell
** conveniently, in conjunction with use of SQLITE_SHELL_EXTFUNCS. This
** allows shell.c, as distributed, to have this extension built in.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE64_INIT</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sqlite3_base64_init(db, 0, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE64_EXPOSE</name><parameter_list>(<parameter><type><name>db</name></type></parameter>, <parameter><type><name>pzErr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> <comment type="block">/* Not needed, ..._init() does this. */</comment>
</unit>
