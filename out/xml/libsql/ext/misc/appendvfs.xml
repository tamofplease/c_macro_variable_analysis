<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/misc/appendvfs.c"><comment type="block">/*
** 2017-10-20
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file implements a VFS shim that allows an SQLite database to be
** appended onto the end of some other file, such as an executable.
**
** A special record must appear at the end of the file that identifies the
** file as an appended database and provides the offset to the first page
** of the exposed content. (Or, it is the length of the content prefix.)
** For best performance page 1 should be located at a disk page boundary,
** though that is not required.
**
** When opening a database using this VFS, the connection might treat
** the file as an ordinary SQLite database, or it might treat it as a
** database appended onto some other file.  The decision is made by
** applying the following rules in order:
**
**  (1)  An empty file is an ordinary database.
**
**  (2)  If the file ends with the appendvfs trailer string
**       "Start-Of-SQLite3-NNNNNNNN" that file is an appended database.
**
**  (3)  If the file begins with the standard SQLite prefix string
**       "SQLite format 3", that file is an ordinary database.
**
**  (4)  If none of the above apply and the SQLITE_OPEN_CREATE flag is
**       set, then a new database is appended to the already existing file.
**
**  (5)  Otherwise, SQLITE_CANTOPEN is returned.
**
** To avoid unnecessary complications with the PENDING_BYTE, the size of
** the file containing the database is limited to 1GiB. (1073741824 bytes)
** This VFS will not read or write past the 1GiB mark.  This restriction
** might be lifted in future versions.  For now, if you need a larger
** database, then keep it in a separate file.
**
** If the file being opened is a plain database (not an appended one), then
** this shim is a pass-through into the default underlying VFS. (rule 3)
**/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<comment type="block">/* The append mark at the end of the database is:
**
**     Start-Of-SQLite3-NNNNNNNN
**     123456789 123456789 12345
**
** The NNNNNNNN represents a 64-bit big-endian unsigned integer which is
** the offset to page 1, and also the length of the prefix content.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APND_MARK_PREFIX</name></cpp:macro>     <cpp:value>"Start-Of-SQLite3-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APND_MARK_PREFIX_SZ</name></cpp:macro>  <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APND_MARK_FOS_SZ</name></cpp:macro>      <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APND_MARK_SIZE</name></cpp:macro>       <cpp:value>(APND_MARK_PREFIX_SZ+APND_MARK_FOS_SZ)</cpp:value></cpp:define>

<comment type="block">/*
** Maximum size of the combined prefix + database + append-mark.  This
** must be less than 0x40000000 to avoid locking issues on Windows.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APND_MAX_SIZE</name></cpp:macro>  <cpp:value>(0x40000000)</cpp:value></cpp:define>

<comment type="block">/*
** Try to align the database to an even multiple of APND_ROUNDUP bytes.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>APND_ROUNDUP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APND_ROUNDUP</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APND_ALIGN_MASK</name></cpp:macro>         <cpp:value>((sqlite3_int64)(APND_ROUNDUP-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APND_START_ROUNDUP</name><parameter_list>(<parameter><type><name>fsz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((fsz)+APND_ALIGN_MASK) &amp; ~APND_ALIGN_MASK)</cpp:value></cpp:define>

<comment type="block">/*
** Forward declaration of objects used by this utility
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>sqlite3_vfs</name></name></type> <name>ApndVfs</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ApndFile</name></name></type> <name>ApndFile</name>;</typedef>

<comment type="block">/* Access to a lower-level VFS that (might) implement dynamic loading,
** access to randomness, etc.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIGVFS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((sqlite3_vfs*)((p)-&gt;pAppData))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIGFILE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sqlite3_file*)(((ApndFile*)(p))+1))</cpp:value></cpp:define>

<comment type="block">/* An open appendvfs file
**
** An instance of this structure describes the appended database file.
** A separate sqlite3_file object is always appended. The appended
** sqlite3_file object (which can be accessed using ORIGFILE()) describes
** the entire file, including the prefix, the database, and the
** append-mark.
**
** The structure of an AppendVFS database is like this:
**
**   +-------------+---------+----------+-------------+
**   | prefix-file | padding | database | append-mark |
**   +-------------+---------+----------+-------------+
**                           ^          ^
**                           |          |
**                         iPgOne      iMark
**
**
** "prefix file" -  file onto which the database has been appended.
** "padding"     -  zero or more bytes inserted so that "database"
**                  starts on an APND_ROUNDUP boundary
** "database"    -  The SQLite database file
** "append-mark" -  The 25-byte "Start-Of-SQLite3-NNNNNNNN" that indicates
**                  the offset from the start of prefix-file to the start
**                  of "database".
**
** The size of the database is iMark - iPgOne.
**
** The NNNNNNNN in the "Start-Of-SQLite3-NNNNNNNN" suffix is the value
** of iPgOne stored as a big-ending 64-bit integer.
**
** iMark will be the size of the underlying file minus 25 (APND_MARKSIZE).
** Or, iMark is -1 to indicate that it has not yet been written.
*/</comment>
<struct>struct <name>ApndFile</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>        <comment type="block">/* Subclass.  MUST BE FIRST! */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iPgOne</name></decl>;</decl_stmt>     <comment type="block">/* Offset to the start of the database */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iMark</name></decl>;</decl_stmt>      <comment type="block">/* Offset of the append mark.  -1 if unwritten */</comment>
  <comment type="block">/* Always followed by another sqlite3_file that describes the whole file */</comment>
}</block>;</struct>

<comment type="block">/*
** Methods for ApndFile
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndRead</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndWrite</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndShmMap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iPg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>volatile</specifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>apndShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deleteFlag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndFetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndUnfetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Methods for ApndVfs
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndAccess</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndFullPathname</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>apndDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>apndDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><name>apndDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> <operator>*</operator><name>pVfs</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator><name>zSym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>apndDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>apndSetSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>sqlite3_syscall_ptr</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sqlite3_syscall_ptr</name></type> <name>apndGetSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apndNextSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name></type> <name>apnd_vfs</name> <init>= <expr><block>{
  <expr><literal type="number">3</literal></expr>,                            <comment type="block">/* iVersion (set when registered) */</comment>
  <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* szOsFile (set when registered) */</comment>
  <expr><literal type="number">1024</literal></expr>,                         <comment type="block">/* mxPathname */</comment>
  <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pNext */</comment>
  <expr><literal type="string">"apndvfs"</literal></expr>,                    <comment type="block">/* zName */</comment>
  <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pAppData (set when registered) */</comment> 
  <expr><name>apndOpen</name></expr>,                     <comment type="block">/* xOpen */</comment>
  <expr><name>apndDelete</name></expr>,                   <comment type="block">/* xDelete */</comment>
  <expr><name>apndAccess</name></expr>,                   <comment type="block">/* xAccess */</comment>
  <expr><name>apndFullPathname</name></expr>,             <comment type="block">/* xFullPathname */</comment>
  <expr><name>apndDlOpen</name></expr>,                   <comment type="block">/* xDlOpen */</comment>
  <expr><name>apndDlError</name></expr>,                  <comment type="block">/* xDlError */</comment>
  <expr><name>apndDlSym</name></expr>,                    <comment type="block">/* xDlSym */</comment>
  <expr><name>apndDlClose</name></expr>,                  <comment type="block">/* xDlClose */</comment>
  <expr><name>apndRandomness</name></expr>,               <comment type="block">/* xRandomness */</comment>
  <expr><name>apndSleep</name></expr>,                    <comment type="block">/* xSleep */</comment>
  <expr><name>apndCurrentTime</name></expr>,              <comment type="block">/* xCurrentTime */</comment>
  <expr><name>apndGetLastError</name></expr>,             <comment type="block">/* xGetLastError */</comment>
  <expr><name>apndCurrentTimeInt64</name></expr>,         <comment type="block">/* xCurrentTimeInt64 */</comment>
  <expr><name>apndSetSystemCall</name></expr>,            <comment type="block">/* xSetSystemCall */</comment>
  <expr><name>apndGetSystemCall</name></expr>,            <comment type="block">/* xGetSystemCall */</comment>
  <expr><name>apndNextSystemCall</name></expr>            <comment type="block">/* xNextSystemCall */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_io_methods</name></type> <name>apnd_io_methods</name> <init>= <expr><block>{
  <expr><literal type="number">3</literal></expr>,                              <comment type="block">/* iVersion */</comment>
  <expr><name>apndClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>apndRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>apndWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>apndTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>apndSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>apndFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>apndLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>apndUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>apndCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>apndFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>apndSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>apndDeviceCharacteristics</name></expr>,      <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><name>apndShmMap</name></expr>,                     <comment type="block">/* xShmMap */</comment>
  <expr><name>apndShmLock</name></expr>,                    <comment type="block">/* xShmLock */</comment>
  <expr><name>apndShmBarrier</name></expr>,                 <comment type="block">/* xShmBarrier */</comment>
  <expr><name>apndShmUnmap</name></expr>,                   <comment type="block">/* xShmUnmap */</comment>
  <expr><name>apndFetch</name></expr>,                      <comment type="block">/* xFetch */</comment>
  <expr><name>apndUnfetch</name></expr>                     <comment type="block">/* xUnfetch */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Close an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>paf</name> <init>= <expr><operator>(</operator><name>ApndFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name><name>paf</name><operator>-&gt;</operator><name>iPgOne</name></name><operator>+</operator><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Add the append-mark onto what should become the end of the file.
*  If and only if this succeeds, internal ApndFile.iMark is updated.
*  Parameter iWriteEnd is the appendvfs-relative offset of the new mark.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndWriteMark</name><parameter_list>(
  <parameter><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>paf</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iWriteEnd</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite_int64</name></type> <name>iPgOne</name> <init>= <expr><name><name>paf</name><operator>-&gt;</operator><name>iPgOne</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>a</name><index>[<expr><name>APND_MARK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>APND_MARK_FOS_SZ</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pFile</name> <operator>==</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>paf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>APND_MARK_PREFIX</name></expr></argument>, <argument><expr><name>APND_MARK_PREFIX_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>APND_MARK_PREFIX_SZ</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>iPgOne</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>iPgOne</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>iWriteEnd</name> <operator>+=</operator> <name><name>paf</name><operator>-&gt;</operator><name>iPgOne</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name>
                  <argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>APND_MARK_SIZE</name></expr></argument>, <argument><expr><name>iWriteEnd</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>paf</name><operator>-&gt;</operator><name>iMark</name></name> <operator>=</operator> <name>iWriteEnd</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>paf</name> <init>= <expr><operator>(</operator><name>ApndFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite_int64</name></type> <name>iWriteEnd</name> <init>= <expr><name>iOfst</name> <operator>+</operator> <name>iAmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>iWriteEnd</name><operator>&gt;=</operator><name>APND_MAX_SIZE</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_FULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* If append-mark is absent or will be overwritten, write it. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>paf</name><operator>-&gt;</operator><name>iMark</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>paf</name><operator>-&gt;</operator><name>iPgOne</name></name> <operator>+</operator> <name>iWriteEnd</name> <operator>&gt;</operator> <name><name>paf</name><operator>-&gt;</operator><name>iMark</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>apndWriteMark</name><argument_list>(<argument><expr><name>paf</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>iWriteEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name><name>paf</name><operator>-&gt;</operator><name>iPgOne</name></name><operator>+</operator><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>paf</name> <init>= <expr><operator>(</operator><name>ApndFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* The append mark goes out first so truncate failure does not lose it. */</comment>
  <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>apndWriteMark</name><argument_list>(<argument><expr><name>paf</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <comment type="block">/* Truncate underlying file just past append mark */</comment>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xTruncate</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name><name>paf</name><operator>-&gt;</operator><name>iMark</name></name><operator>+</operator><name>APND_MARK_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of an apnd-file.
** If the append mark is not yet there, the file-size is 0.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>paf</name> <init>= <expr><operator>(</operator><name>ApndFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>paf</name><operator>-&gt;</operator><name>iMark</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>paf</name><operator>-&gt;</operator><name>iMark</name></name> <operator>-</operator> <name><name>paf</name><operator>-&gt;</operator><name>iPgOne</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Lock an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnlock</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xCheckReservedLock</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>paf</name> <init>= <expr><operator>(</operator><name>ApndFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_SIZE_HINT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>*</operator><operator>)</operator><name>pArg</name> <operator>+=</operator> <name><name>paf</name><operator>-&gt;</operator><name>iPgOne</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileControl</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>op</name><operator>==</operator><name>SQLITE_FCNTL_VFSNAME</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"apnd(%lld)/%z"</literal></expr></argument>, <argument><expr><name><name>paf</name><operator>-&gt;</operator><name>iPgOne</name></name></expr></argument>,<argument><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an apnd-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xDeviceCharacteristics</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create a shared memory file mapping */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndShmMap</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iPg</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bExtend</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,<argument><expr><name>iPg</name></expr></argument>,<argument><expr><name>pgsz</name></expr></argument>,<argument><expr><name>bExtend</name></expr></argument>,<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Perform locking on a shared-memory segment */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmLock</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,<argument><expr><name>offset</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Memory barrier operation on shared memory */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>apndShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmBarrier</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Unmap a shared memory segment */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deleteFlag</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmUnmap</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,<argument><expr><name>deleteFlag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Fetch a page of a memory-mapped file */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndFetch</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>ApndFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iMark</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>iOfst</name><operator>+</operator><name>iAmt</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>iMark</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_IOERR</name></expr>;</return> <comment type="block">/* Cannot read what is not yet there. */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFetch</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>iOfst</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>iPgOne</name></name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Release a memory-mapped page */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndUnfetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>ApndFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnfetch</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>iOfst</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>iPgOne</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Try to read the append-mark off the end of a file.  Return the
** start of the appended database if the append-mark is present.
** If there is no valid append-mark, return -1;
**
** An append-mark is only valid if the NNNNNNNN start-of-database offset
** indicates that the appended database contains at least one page.  The
** start-of-database value must be a multiple of 512.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_int64</name></type> <name>apndReadMark</name><parameter_list>(<parameter><decl><type><name>sqlite3_int64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iMark</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>msbs</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>APND_MARK_FOS_SZ</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>a</name><index>[<expr><name>APND_MARK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>APND_MARK_SIZE</name><operator>!=</operator><operator>(</operator><name>sz</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>APND_MARK_SIZE</name></expr></argument>, <argument><expr><name>sz</name><operator>-</operator><name>APND_MARK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>APND_MARK_PREFIX</name></expr></argument>, <argument><expr><name>APND_MARK_PREFIX_SZ</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>iMark</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><name>APND_MARK_PREFIX_SZ</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>msbs</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>msbs</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>iMark</name> <operator>|=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name><name>a</name><index>[<expr><name>APND_MARK_PREFIX_SZ</name><operator>+</operator><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><name>msbs</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>iMark</name> <operator>&gt;</operator> <operator>(</operator><name>sz</name> <operator>-</operator> <name>APND_MARK_SIZE</name> <operator>-</operator> <literal type="number">512</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iMark</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>iMark</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>apvfsSqliteHdr</name><index>[]</index></name> <init>= <expr><literal type="string">"SQLite format 3"</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*
** Check to see if the file is an appendvfs SQLite database file.
** Return true iff it is such. Parameter sz is the file's size.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndIsAppendvfsDatabase</name><parameter_list>(<parameter><decl><type><name>sqlite3_int64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zHdr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iMark</name> <init>= <expr><call><name>apndReadMark</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>iMark</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* If file has the correct end-marker, the expected odd size, and the
    ** SQLite DB type marker where the end-marker puts it, then it
    ** is an appendvfs database.
    */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>zHdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>iMark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><name>rc</name>
     <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>zHdr</name></expr></argument>, <argument><expr><name>apvfsSqliteHdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <operator>(</operator><name>sz</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>==</operator> <name>APND_MARK_SIZE</name>
     <operator>&amp;&amp;</operator> <name>sz</name><operator>&gt;=</operator><literal type="number">512</literal><operator>+</operator><name>APND_MARK_SIZE</name></expr>
    )</condition><block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* It's an appendvfs database */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check to see if the file is an ordinary SQLite database file.
** Return true iff so. Parameter sz is the file's size.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndIsOrdinaryDatabaseFile</name><parameter_list>(<parameter><decl><type><name>sqlite3_int64</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zHdr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>apndIsAppendvfsDatabase</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>)</argument_list></call> <comment type="block">/* rule 2 */</comment>
   <operator>||</operator> <operator>(</operator><name>sz</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
   <operator>||</operator> <name>SQLITE_OK</name><operator>!=</operator><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>zHdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
   <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>zHdr</name></expr></argument>, <argument><expr><name>apvfsSqliteHdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Open an apnd file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pApndVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ApndFile</name> <modifier>*</modifier></type><name>pApndFile</name> <init>= <expr><operator>(</operator><name>ApndFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pBaseFile</name> <init>= <expr><call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pBaseVfs</name> <init>= <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pApndVfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_MAIN_DB</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* The appendvfs is not to be used for transient or temporary databases.
    ** Just use the base VFS open to initialize the given file object and
    ** open the underlying file. (Appendvfs is then unused for this file.)
    */</comment>
    <return>return <expr><call><name><name>pBaseVfs</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pBaseVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pApndFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ApndFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>apnd_io_methods</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pApndFile</name><operator>-&gt;</operator><name>iMark</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>    <comment type="block">/* Append mark not yet written */</comment>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pBaseVfs</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pBaseVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pBaseFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pBaseFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name>pBaseFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name><name>pBaseFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name>pBaseFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>apndIsOrdinaryDatabaseFile</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>pBaseFile</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <comment type="block">/* The file being opened appears to be just an ordinary DB. Copy
    ** the base dispatch-table so this instance mimics the base VFS. 
    */</comment>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pApndFile</name></expr></argument>, <argument><expr><name>pBaseFile</name></expr></argument>, <argument><expr><name><name>pBaseVfs</name><operator>-&gt;</operator><name>szOsFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pApndFile</name><operator>-&gt;</operator><name>iPgOne</name></name> <operator>=</operator> <call><name>apndReadMark</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pApndFile</name><operator>-&gt;</operator><name>iPgOne</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pApndFile</name><operator>-&gt;</operator><name>iMark</name></name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>APND_MARK_SIZE</name></expr>;</expr_stmt> <comment type="block">/* Append mark found */</comment>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_CREATE</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>pBaseFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name>pBaseFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_CANTOPEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Round newly added appendvfs location to #define'd page boundary. 
    ** Note that nothing has yet been written to the underlying file.
    ** The append mark will be written along with first content write.
    ** Until then, paf-&gt;iMark value indicates it is not yet written.
    */</comment>
    <expr_stmt><expr><name><name>pApndFile</name><operator>-&gt;</operator><name>iPgOne</name></name> <operator>=</operator> <call><name>APND_START_ROUNDUP</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete an apnd file.
** For an appendvfs, this could mean delete the appendvfs portion,
** leaving the appendee as it was before it gained an appendvfs.
** For now, this code deletes the underlying file too.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDelete</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** All other VFS methods are pass-thrus.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xAccess</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xFullPathname</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>zPath</name></expr></argument>,<argument><expr><name>nOut</name></expr></argument>,<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>apndDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlOpen</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>apndDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlError</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*apndDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlSym</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>apndDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlClose</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xRandomness</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xSleep</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xCurrentTime</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xGetLastError</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xCurrentTimeInt64</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>apndSetSystemCall</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_syscall_ptr</name></type> <name>pCall</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xSetSystemCall</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>pCall</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sqlite3_syscall_ptr</name></type> <name>apndGetSystemCall</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xGetSystemCall</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apndNextSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xNextSystemCall</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* 
** This routine is called when the extension is loaded.
** Register the new VFS.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_appendvfs_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pOrig</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErrMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pOrig</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOrig</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>apnd_vfs</name><operator>.</operator><name>iVersion</name></name> <operator>=</operator> <name><name>pOrig</name><operator>-&gt;</operator><name>iVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>apnd_vfs</name><operator>.</operator><name>pAppData</name></name> <operator>=</operator> <name>pOrig</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>apnd_vfs</name><operator>.</operator><name>szOsFile</name></name> <operator>=</operator> <name><name>pOrig</name><operator>-&gt;</operator><name>szOsFile</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ApndFile</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>apnd_vfs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>APPENDVFS_TEST</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_auto_extension</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><name>apndvfsRegister</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK_LOAD_PERMANENTLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
