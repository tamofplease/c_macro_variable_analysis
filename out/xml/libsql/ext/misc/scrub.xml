<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/misc/scrub.c"><comment type="block">/*
** 2016-05-05
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file implements a utility function (and a utility program) that
** makes a copy of an SQLite database while simultaneously zeroing out all
** deleted content.
**
** Normally (when PRAGMA secure_delete=OFF, which is the default) when SQLite
** deletes content, it does not overwrite the deleted content but rather marks
** the region of the file that held that content as being reusable.  This can
** cause deleted content to recoverable from the database file.  This stale
** content is removed by the VACUUM command, but VACUUM can be expensive for
** large databases.  When in PRAGMA secure_delete=ON mode, the deleted content
** is zeroed, but secure_delete=ON has overhead as well.
**
** This utility attempts to make a copy of a complete SQLite database where
** all of the deleted content is zeroed out in the copy, and it attempts to
** do so while being faster than running VACUUM.
**
** Usage:
**
**   int sqlite3_scrub_backup(
**       const char *zSourceFile,   // Source database filename
**       const char *zDestFile,     // Destination database filename
**       char **pzErrMsg            // Write error message here
**   );
**
** Simply call the API above specifying the filename of the source database
** and the name of the backup copy.  The source database must already exist
** and can be in active use. (A read lock is held during the backup.)  The
** destination file should not previously exist.  If the pzErrMsg parameter
** is non-NULL and if an error occurs, then an error message might be written
** into memory obtained from sqlite3_malloc() and *pzErrMsg made to point to
** that error message.  But if the error is an OOM, the error might not be
** reported.  The routine always returns non-zero if there is an error.
**
** If compiled with -DSCRUB_STANDALONE then a main() procedure is added and
** this file becomes a standalone program that can be run as follows:
**
**      ./sqlite3scrub SOURCE DEST
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>ScrubState</name></name></type> <name>ScrubState</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>u16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>


<comment type="block">/* State information for a scrub-and-backup operation */</comment>
<struct>struct <name>ScrubState</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSrcFile</name></decl>;</decl_stmt>    <comment type="block">/* Name of the source file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDestFile</name></decl>;</decl_stmt>   <comment type="block">/* Name of the destination file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rcErr</name></decl>;</decl_stmt>               <comment type="block">/* Error code */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>              <comment type="block">/* Error message text */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbSrc</name></decl>;</decl_stmt>          <comment type="block">/* Source database connection */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pSrc</name></decl>;</decl_stmt>      <comment type="block">/* Source file handle */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dbDest</name></decl>;</decl_stmt>         <comment type="block">/* Destination database connection */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pDest</name></decl>;</decl_stmt>     <comment type="block">/* Destination file handle */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>szPage</name></decl>;</decl_stmt>              <comment type="block">/* Page size */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>szUsable</name></decl>;</decl_stmt>            <comment type="block">/* Usable bytes on each page */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>nPage</name></decl>;</decl_stmt>               <comment type="block">/* Number of pages */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iLastPage</name></decl>;</decl_stmt>           <comment type="block">/* Page number of last page written so far*/</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>page1</name></decl>;</decl_stmt>               <comment type="block">/* Content of page 1 */</comment>
}</block>;</struct>

<comment type="block">/* Store an error message */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scrubBackupErr</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Allocate memory to hold a single page of content */</comment>
<function><type><specifier>static</specifier> <name>u8</name> <modifier>*</modifier></type><name>scrubBackupAllocPage</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pPage</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pPage</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>pPage</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read a page from the source database into memory.  Use the memory
** provided by pBuf if not NULL or allocate a new page if pBuf==NULL.
*/</comment>
<function><type><specifier>static</specifier> <name>u8</name> <modifier>*</modifier></type><name>scrubBackupRead</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iOff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pOut</name> <init>= <expr><name>pBuf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pOut</name> <operator>=</operator> <call><name>scrubBackupAllocPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <operator>(</operator><name>pgno</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pBuf</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"read failed for page %d"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pOut</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block">/* Write a page to the destination database */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scrubBackupWrite</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iOff</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <operator>(</operator><name>pgno</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pDest</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"write failed for page %d"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>u32</name><operator>)</operator><name>pgno</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>iLastPage</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iLastPage</name></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Prepare a statement against the "db" database. */</comment>
<function><type><specifier>static</specifier> <name>sqlite3_stmt</name> <modifier>*</modifier></type><name>scrubBackupPrepare</name><parameter_list>(
  <parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,      <comment type="block">/* Backup context */</comment>
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,        <comment type="block">/* Database to prepare against */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>    <comment type="block">/* SQL statement */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"SQL error \"%s\" on \"%s\""</literal></expr></argument>,
                   <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Open the source database file */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scrubBackupOpenSrc</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <comment type="block">/* Open the source database file */</comment>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zSrcFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dbSrc</name></name></expr></argument>,
                 <argument><expr><name>SQLITE_OPEN_READWRITE</name> <operator>|</operator>
                 <name>SQLITE_OPEN_URI</name> <operator>|</operator> <name>SQLITE_OPEN_PRIVATECACHE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot open source database: %s"</literal></expr></argument>,
                      <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbSrc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbSrc</name></name></expr></argument>, <argument><expr><literal type="string">"SELECT 1 FROM sqlite_schema; BEGIN;"</literal></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
       <argument><expr><literal type="string">"cannot start a read transaction on the source database: %s"</literal></expr></argument>,
       <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbSrc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_wal_checkpoint_v2</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbSrc</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_CHECKPOINT_FULL</name></expr></argument>,
                                 <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot checkpoint the source database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>scrubBackupPrepare</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbSrc</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA page_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pStmt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"unable to determine the page size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>scrubBackupPrepare</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbSrc</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA page_count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pStmt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPage</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"unable to determine the size of the source database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbSrc</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_FILE_POINTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>pMethods</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot get the source file handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Create and open the destination file */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scrubBackupOpenDest</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zDestFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>,
                 <argument><expr><name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name> <operator>|</operator>
                 <name>SQLITE_OPEN_URI</name> <operator>|</operator> <name>SQLITE_OPEN_PRIVATECACHE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot open destination database: %s"</literal></expr></argument>,
                      <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA page_size(%u);"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
       <argument><expr><literal type="string">"cannot set the page size on the destination database: %s"</literal></expr></argument>,
       <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA journal_mode=OFF;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>, <argument><expr><literal type="string">"BEGIN EXCLUSIVE;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
       <argument><expr><literal type="string">"cannot start a write transaction on the destination database: %s"</literal></expr></argument>,
       <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>scrubBackupPrepare</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA page_count;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pStmt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot measure the size of the destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"destination database is not empty - holds %d pages"</literal></expr></argument>,
                   <argument><expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>dbDest</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_FILE_POINTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pDest</name><operator>-&gt;</operator><name>pMethods</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot get the destination file handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Read a 32-bit big-endian integer */</comment>
<function><type><specifier>static</specifier> <name>u32</name></type> <name>scrubBackupInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>v</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>v</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>v</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>v</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>
  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read a 16-bit big-endian integer */</comment>
<function><type><specifier>static</specifier> <name>u32</name></type> <name>scrubBackupInt16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read a varint.  Put the value in *pVal and return the number of bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>scrubBackupVarint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">9</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the number of bytes in a varint.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>scrubBackupVarintSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">9</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Copy the freelist trunk page given, and all its descendents,
** zeroing out as much as possible in the process.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scrubBackupFreelist</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>nFree</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>aBuf</name> <operator>=</operator> <call><name>scrubBackupAllocPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aBuf</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
 
  <while>while<condition>( <expr><name>pgno</name> <operator>&amp;&amp;</operator> <name>nFree</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>scrubBackupRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>aBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><name>mx</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>n</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>mx</name><operator>-</operator><name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>scrubBackupWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    <comment type="block">/* There is really no point in copying the freelist leaf pages.
    ** Simply leave them uninitialized in the destination database.  The
    ** OS filesystem should zero those pages for us automatically.
    */</comment>
    for(i=0; i&lt;n &amp;&amp; nFree; i++){
      u32 iLeaf = scrubBackupInt32(&amp;a[i*4+8]);
      if( aZero==0 ){
        aZero = scrubBackupAllocPage(p);
        if( aZero==0 ){ pgno = 0; break; }
        memset(aZero, 0, p-&gt;szPage);
      }
      scrubBackupWrite(p, iLeaf, aZero);
      nFree--;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Copy an overflow chain from source to destination.  Zero out any
** unused tail at the end of the overflow chain.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scrubBackupOverflow</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aBuf</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>aBuf</name> <operator>=</operator> <call><name>scrubBackupAllocPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aBuf</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><name>nByte</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pgno</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>scrubBackupRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>aBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>&gt;=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>)</operator><operator>-</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nByte</name> <operator>-=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>u32</name></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>nByte</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u32</name></type> <name>i</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nByte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>scrubBackupWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
</block_content>}</block></function>
   

<comment type="block">/*
** Copy B-Tree page pgno, and all of its children, from source to destination.
** Zero out deleted content during the copy.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scrubBackupBtree</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iDepth</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>nCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>nPrefix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>szHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>iChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aTop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ln</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iDepth</name><operator>&gt;</operator><literal type="number">50</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"corrupt: b-tree too deep at page %d"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>page1</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>scrubBackupRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>nPrefix</name> <operator>=</operator> <ternary><condition><expr><name>pgno</name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>aTop</name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><index>[<expr><name>nPrefix</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>szHdr</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x02</literal> <operator>||</operator> <name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x05</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>aCell</name> <operator>=</operator> <name>aTop</name> <operator>+</operator> <name>szHdr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nCell</name> <operator>=</operator> <call><name>scrubBackupInt16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aTop</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Zero out the gap between the cell index and the start of the
  ** cell content area */</comment>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>scrubBackupInt16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aTop</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* First byte of cell content area */</comment>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>y</name> <operator>=</operator> <name>szHdr</name> <operator>+</operator> <name>nPrefix</name> <operator>+</operator> <name>nCell</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>y</name><operator>&gt;</operator><name>x</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>y</name><operator>&lt;</operator><name>x</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Zero the gap */</comment>

  <comment type="block">/* Zero out all the free blocks */</comment>  
  <expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>scrubBackupInt16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aTop</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pc</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pc</name><operator>&lt;</operator><name>x</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
  <while>while<condition>( <expr><name>pc</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pc</name><operator>&gt;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>)</operator><operator>-</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>scrubBackupInt16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>pc</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pc</name><operator>+</operator><name>n</name><operator>&gt;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>)</operator></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>pc</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>scrubBackupInt16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>pc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>x</name><argument_list type="generic">&lt;<argument><expr><name>pc</name><operator>+</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>x</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pc</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Write this one page */</comment>
  <expr_stmt><expr><call><name>scrubBackupWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Walk the tree and process child pages */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCell</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>K</name></decl>, <decl><type ref="prev"/><name>nLocal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>P</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>scrubBackupInt16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aCell</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pc</name> <operator>&lt;=</operator> <name>szHdr</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pc</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>-</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x05</literal> <operator>||</operator> <name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x02</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>pc</name><operator>+</operator><literal type="number">4</literal> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>iChild</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>pc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pc</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>scrubBackupBtree</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iChild</name></expr></argument>, <argument><expr><name>iDepth</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x05</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pc</name> <operator>+=</operator> <call><name>scrubBackupVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>pc</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pc</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x0d</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>X</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name> <operator>-</operator> <literal type="number">35</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal><operator>/</operator><literal type="number">255</literal><operator>)</operator> <operator>-</operator> <literal type="number">23</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>P</name><operator>&lt;=</operator><name>X</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* All content is local.  No overflow */</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>M</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">32</literal><operator>/</operator><literal type="number">255</literal><operator>)</operator><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>K</name> <operator>=</operator> <name>M</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>P</name><operator>-</operator><name>M</name><operator>)</operator><operator>%</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x0d</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pc</name> <operator>+=</operator> <call><name>scrubBackupVarintSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>pc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pc</name> <operator>&gt;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <ternary><condition><expr><name>K</name><operator>&lt;=</operator><name>X</name></expr> ?</condition><then> <expr><name>K</name></expr> </then><else>: <expr><name>M</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pc</name><operator>+</operator><name>nLocal</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>-</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>ln</name><operator>=</operator><name>__LINE__</name></expr>;</expr_stmt> <goto>goto <name>btree_corrupt</name>;</goto> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iChild</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>pc</name><operator>+</operator><name>nLocal</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scrubBackupOverflow</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iChild</name></expr></argument>, <argument><expr><operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name>P</name><operator>-</operator><name>nLocal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Walk the right-most tree */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x05</literal> <operator>||</operator> <name><name>aTop</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x02</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iChild</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aTop</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scrubBackupBtree</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iChild</name></expr></argument>, <argument><expr><name>iDepth</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* All done */</comment>
  <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return;</return>

<label><name>btree_corrupt</name>:</label>
  <expr_stmt><expr><call><name>scrubBackupErr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"corruption on page %d of source database (errid=%d)"</literal></expr></argument>,
                 <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  
</block_content>}</block></function>

<comment type="block">/*
** Copy all ptrmap pages from source to destination.
** This routine is only called if the source database is in autovacuum
** or incremental vacuum mode.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scrubBackupPtrmap</name><parameter_list>(<parameter><decl><type><name>ScrubState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>pgno</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>J</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>szUsable</name></name><operator>/</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>iLock</name> <init>= <expr><operator>(</operator><literal type="number">1073742335</literal><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rcErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pBuf</name> <operator>=</operator> <call><name>scrubBackupAllocPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pBuf</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><name>pgno</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nPage</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>scrubBackupRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>scrubBackupWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgno</name> <operator>+=</operator> <name>J</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>==</operator><name>iLock</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pgno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3_scrub_backup</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSrcFile</name></decl></parameter>,    <comment type="block">/* Source file */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDestFile</name></decl></parameter>,   <comment type="block">/* Destination file */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>             <comment type="block">/* Write error here if non-NULL */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ScrubState</name></type> <name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>zSrcFile</name></name> <operator>=</operator> <name>zSrcFile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>zDestFile</name></name> <operator>=</operator> <name>zDestFile</name></expr>;</expr_stmt>

  <comment type="block">/* Open both source and destination databases */</comment>
  <expr_stmt><expr><call><name>scrubBackupOpenSrc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>scrubBackupOpenDest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Read in page 1 */</comment>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>page1</name></name> <operator>=</operator> <call><name>scrubBackupRead</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>s</name><operator>.</operator><name>page1</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>scrub_abort</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>szUsable</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>szPage</name></name> <operator>-</operator> <name><name>s</name><operator>.</operator><name>page1</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Copy the freelist */</comment>    
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>page1</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>page1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>scrubBackupFreelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Copy ptrmap pages */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>scrubBackupInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>page1</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>scrubBackupPtrmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Copy all of the btrees */</comment>
  <expr_stmt><expr><call><name>scrubBackupBtree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>scrubBackupPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>dbSrc</name></name></expr></argument>,
       <argument><expr><literal type="string">"SELECT rootpage FROM sqlite_schema WHERE coalesce(rootpage,0)&gt;0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pStmt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>scrub_abort</name>;</goto></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scrubBackupBtree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the last page of the input db file is a free-list leaf, then the
  ** backup file on disk is still smaller than the size indicated within 
  ** the database header. In this case, write a page of zeroes to the 
  ** last page of the backup database so that SQLite does not mistakenly
  ** think the db is corrupt.  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>s</name><operator>.</operator><name>iLastPage</name></name><operator>&lt;</operator><name><name>s</name><operator>.</operator><name>nPage</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aZero</name> <init>= <expr><call><name>scrubBackupAllocPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>aZero</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aZero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>scrubBackupWrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>nPage</name></name></expr></argument>, <argument><expr><name>aZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>scrub_abort</name>:</label>    
  <comment type="block">/* Close the destination database without closing the transaction. If we
  ** commit, page zero will be overwritten. */</comment>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>dbDest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* But do close out the read-transaction on the source database */</comment>
  <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>dbSrc</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>dbSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>page1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pzErr</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>zErr</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name><name>s</name><operator>.</operator><name>rcErr</name></name></expr>;</return>
</block_content>}</block></function>   

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SCRUB_STANDALONE</name></cpp:ifdef>
<comment type="block">/* Error and warning log */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>errorLogCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pNotUsed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>iErr</name><operator>&amp;</operator><literal type="number">0xff</literal></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_WARNING</name></expr>:</case> <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"WARNING"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>SQLITE_NOTICE</name></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"NOTICE"</literal></expr>;</expr_stmt>   <break>break;</break>
    <default>default:</default>             <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>;</expr_stmt>    <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* The main() routine when this utility is run as a stand-alone program */</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Usage: %s SOURCE DESTINATION\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_LOG</name></expr></argument>, <argument><expr><name>errorLogCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_scrub_backup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_NOMEM</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: out of memory\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zErr</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
