<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/misc/vfslog.c"><comment type="block">/*
** 2013-10-09
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains the implementation of an SQLite vfs wrapper for
** unix that generates per-database log files of all disk activity.
*/</comment>

<comment type="block">/*
** This module contains code for a wrapper VFS that causes a log of
** most VFS calls to be written into a file on disk.
**
** Each database connection creates a separate log file in the same
** directory as the original database and named after the original
** database.  A unique suffix is added to avoid name collisions.  
** Separate log files are used so that concurrent processes do not
** try to write log operations to the same file at the same instant, 
** resulting in overwritten or comingled log text.
**
** Each individual log file records operations by a single database
** connection on both the original database and its associated rollback
** journal.
**
** The log files are in the comma-separated-value (CSV) format.  The
** log files can be imported into an SQLite database using the ".import"
** command of the SQLite command-line shell for analysis.
**
** One technique for using this module is to append the text of this
** module to the end of a standard "sqlite3.c" amalgamation file then
** add the following compile-time options:
**
**     -DSQLITE_EXTRA_INIT=sqlite3_register_vfslog
**     -DSQLITE_USE_FCNTL_TRACE
**
** The first compile-time option causes the sqlite3_register_vfslog()
** function, defined below, to be invoked when SQLite is initialized.
** That causes this custom VFS to become the default VFS for all
** subsequent connections.  The SQLITE_USE_FCNTL_TRACE option causes
** the SQLite core to issue extra sqlite3_file_control() operations
** with SQLITE_FCNTL_TRACE to give some indication of what is going
** on in the core.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Forward declaration of objects used by this utility
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>VLogLog</name></name></type> <name>VLogLog</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>VLogVfs</name></name></type> <name>VLogVfs</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>VLogFile</name></name></type> <name>VLogFile</name>;</typedef>

<comment type="block">/* There is a pair (an array of size 2) of the following objects for
** each database file being logged.  The first contains the filename
** and is used to log I/O with the main database.  The second has
** a NULL filename and is used to log I/O for the journal.  Both
** out pointers are the same.
*/</comment>
<struct>struct <name>VLogLog</name> <block>{
  <decl_stmt><decl><type><name>VLogLog</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>                 <comment type="block">/* Next in a list of all active logs */</comment>
  <decl_stmt><decl><type><name>VLogLog</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPrev</name></decl>;</decl_stmt>               <comment type="block">/* Pointer to this in the list */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRef</name></decl>;</decl_stmt>                       <comment type="block">/* Number of references to this object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFilename</name></decl>;</decl_stmt>                  <comment type="block">/* Length of zFilename in bytes */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl>;</decl_stmt>                <comment type="block">/* Name of database file.  NULL for journal */</comment>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>                      <comment type="block">/* Write information here */</comment>
}</block>;</struct>

<struct>struct <name>VLogVfs</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name></type> <name>base</name></decl>;</decl_stmt>               <comment type="block">/* VFS methods */</comment>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>              <comment type="block">/* Parent VFS */</comment>
}</block>;</struct>

<struct>struct <name>VLogFile</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* IO methods */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name></decl>;</decl_stmt>            <comment type="block">/* Underlying file handle */</comment>
  <decl_stmt><decl><type><name>VLogLog</name> <modifier>*</modifier></type><name>pLog</name></decl>;</decl_stmt>                  <comment type="block">/* The log file for this file */</comment>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REALVFS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((VLogVfs*)(p))-&gt;pVfs)</cpp:value></cpp:define>

<comment type="block">/*
** Methods for VLogFile
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogRead</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogWrite</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Methods for VLogVfs
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogAccess</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogFullPathname</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vlogDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlogDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><name>vlogDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> <operator>*</operator><name>pVfs</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator><name>zSym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vlogDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vlogCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLogVfs</name></type> <name>vlog_vfs</name> <init>= <expr><block>{
  <expr><block>{
    <expr><literal type="number">1</literal></expr>,                            <comment type="block">/* iVersion */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* szOsFile (set by register_vlog()) */</comment>
    <expr><literal type="number">1024</literal></expr>,                         <comment type="block">/* mxPathname */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pNext */</comment>
    <expr><literal type="string">"vfslog"</literal></expr>,                     <comment type="block">/* zName */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pAppData */</comment>
    <expr><name>vlogOpen</name></expr>,                     <comment type="block">/* xOpen */</comment>
    <expr><name>vlogDelete</name></expr>,                   <comment type="block">/* xDelete */</comment>
    <expr><name>vlogAccess</name></expr>,                   <comment type="block">/* xAccess */</comment>
    <expr><name>vlogFullPathname</name></expr>,             <comment type="block">/* xFullPathname */</comment>
    <expr><name>vlogDlOpen</name></expr>,                   <comment type="block">/* xDlOpen */</comment>
    <expr><name>vlogDlError</name></expr>,                  <comment type="block">/* xDlError */</comment>
    <expr><name>vlogDlSym</name></expr>,                    <comment type="block">/* xDlSym */</comment>
    <expr><name>vlogDlClose</name></expr>,                  <comment type="block">/* xDlClose */</comment>
    <expr><name>vlogRandomness</name></expr>,               <comment type="block">/* xRandomness */</comment>
    <expr><name>vlogSleep</name></expr>,                    <comment type="block">/* xSleep */</comment>
    <expr><name>vlogCurrentTime</name></expr>,              <comment type="block">/* xCurrentTime */</comment>
    <expr><name>vlogGetLastError</name></expr>,             <comment type="block">/* xGetLastError */</comment>
    <expr><name>vlogCurrentTimeInt64</name></expr>          <comment type="block">/* xCurrentTimeInt64 */</comment>
  }</block></expr>,
  <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_io_methods</name></type> <name>vlog_io_methods</name> <init>= <expr><block>{
  <expr><literal type="number">1</literal></expr>,                              <comment type="block">/* iVersion */</comment>
  <expr><name>vlogClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>vlogRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>vlogWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>vlogTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>vlogSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>vlogFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>vlogLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>vlogUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>vlogCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>vlogFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>vlogSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>vlogDeviceCharacteristics</name></expr>,      <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmMap */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmLock */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmBarrier */</comment>
  <expr><literal type="number">0</literal></expr>                               <comment type="block">/* xShmUnmap */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_GETTOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>sqlite3_uint64</name></type> <name>vlog_time</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>sTime</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sTime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>sTime</name><operator>.</operator><name>tv_usec</name></name> <operator>+</operator> <operator>(</operator><name>sqlite3_uint64</name><operator>)</operator><name><name>sTime</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>sqlite3_uint64</name></type> <name>vlog_time</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>u64time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
  <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>u64time</name> <operator>|=</operator> <name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>u64time</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>u64time</name> <operator>|=</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

  <comment type="block">/* ft is 100-nanosecond intervals, we want microseconds */</comment>
  <return>return <expr><name>u64time</name> <operator>/</operator><operator>(</operator><name>sqlite3_uint64</name><operator>)</operator><literal type="number">10</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>sqlite3_uint64</name></type> <name>vlog_time</name><parameter_list>()</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Write a message to the log file
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vlogLogPrint</name><parameter_list>(
  <parameter><decl><type><name>VLogLog</name> <modifier>*</modifier></type><name>pLog</name></decl></parameter>,                 <comment type="block">/* The log file to write into */</comment>
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>tStart</name></decl></parameter>,            <comment type="block">/* Start time of system call */</comment>
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>tElapse</name></decl></parameter>,           <comment type="block">/* Elapse time of system call */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOp</name></decl></parameter>,                 <comment type="block">/* Type of system call */</comment>
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>iArg1</name></decl></parameter>,             <comment type="block">/* First argument */</comment>
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>iArg2</name></decl></parameter>,             <comment type="block">/* Second argument */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg3</name></decl></parameter>,               <comment type="block">/* Third argument */</comment>
  <parameter><decl><type><name>int</name></type> <name>iRes</name></decl></parameter>                         <comment type="block">/* Result */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>z1</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>z2</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>z3</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pLog</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iArg1</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>z1</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>iArg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>z1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iArg2</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>iArg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>z2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zArg3</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>z3</name></expr></argument>, <argument><expr><literal type="string">"\"%.*w\""</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z3</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>zArg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>z3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>out</name></name></expr></argument>,<argument><expr><literal type="string">"%lld,%lld,%s,%d,%s,%s,%s,%d\n"</literal></expr></argument>,
      <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><name>zOp</name></expr></argument>, <argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>zFilename</name></name><operator>==</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>z1</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>, <argument><expr><name>iRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** List of all active log connections.  Protected by the master mutex.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLogLog</name> <modifier>*</modifier></type><name>allLogs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Close a VLogLog object
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vlogLogClose</name><parameter_list>(<parameter><decl><type><name>VLogLog</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRef</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRef</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>zFilename</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pMutex</name> <operator>=</operator> <call><name>sqlite3_mutex_alloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>ppPrev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Open a VLogLog object on the given file
*/</comment>
<function><type><specifier>static</specifier> <name>VLogLog</name> <modifier>*</modifier></type><name>vlogLogOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isJournal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogLog</name> <modifier>*</modifier></type><name>pLog</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pTemp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>tNow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>nName</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zFilename</name><operator>+</operator><name>nName</name><operator>-</operator><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="string">"-wal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* Do not log wal files */</comment>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><name>nName</name><operator>&gt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zFilename</name><operator>+</operator><name>nName</name><operator>-</operator><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="string">"-journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nName</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>isJournal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nName</name><operator>&gt;</operator><literal type="number">12</literal> 
         <operator>&amp;&amp;</operator> <call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"-mj??????9??"</literal></expr></argument>, <argument><expr><name>zFilename</name><operator>+</operator><name>nName</name><operator>-</operator><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* Do not log master journal files */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pLog</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name>nName</name> <operator>+</operator> <literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTemp</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pMutex</name> <operator>=</operator> <call><name>sqlite3_mutex_alloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pLog</name><operator>=</operator><name>allLogs</name></expr>;</init> <condition><expr><name>pLog</name></expr>;</condition> <incr><expr><name>pLog</name><operator>=</operator><name><name>pLog</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pLog</name><operator>-&gt;</operator><name>nFilename</name></name><operator>==</operator><name>nName</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>pLog</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pLog</name> <operator>=</operator> <name>pTemp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pLog</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLog</name><operator>-&gt;</operator><name>zFilename</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pLog</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tNow</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nName</name><operator>+</operator><literal type="number">60</literal></expr></argument>, <argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><literal type="string">"%.*s-debuglog-%lld"</literal></expr></argument>,
                     <argument><expr><name>nName</name></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><name>tNow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLog</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pLog</name><operator>-&gt;</operator><name>out</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pLog</name><operator>-&gt;</operator><name>nFilename</name></name> <operator>=</operator> <name>nName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLog</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>out</name> <operator>=</operator> <name><name>pLog</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>out</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLog</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <operator>&amp;</operator><name>allLogs</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>allLogs</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>allLogs</name><operator>-&gt;</operator><name>ppPrev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pLog</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pLog</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>allLogs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>allLogs</name> <operator>=</operator> <name>pLog</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTemp</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zHost</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>zHost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gethostname</name><argument_list>(<argument><expr><name>zHost</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zHost</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zHost</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>zHost</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>, <argument><expr><name>tNow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"IDENT"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pLog</name> <operator>&amp;&amp;</operator> <name>isJournal</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pLog</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pLog</name><operator>-&gt;</operator><name>nRef</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>pLog</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Close an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"CLOSE"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogClose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Compute signature for a block of content.
**
** For blocks of 16 or fewer bytes, the signature is just a hex dump of
** the entire block.
**
** For blocks of more than 16 bytes, the signature is a hex dump of the
** first 8 bytes followed by a 64-bit has of the entire block.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vlogSignature</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zCksum</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pI</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;=</operator><literal type="number">16</literal></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>zCksum</name><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if><else>else<block>{<block_content> 
    <expr_stmt><expr><name>pI</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>s0</name> <operator>+=</operator> <name><name>pI</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>s1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>pI</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>s0</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pI</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>zCksum</name><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>zCksum</name><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"-%08x%08x"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Convert a big-endian 32-bit integer into a native integer
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bigToNative</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zSig</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>vlogSignature</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>zSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>zSig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name>zSig</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name>
   <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pLog</name></name>
   <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pLog</name><operator>-&gt;</operator><name>zFilename</name></name>
   <operator>&amp;&amp;</operator> <name>iOfst</name><operator>&lt;=</operator><literal type="number">24</literal>
   <operator>&amp;&amp;</operator> <name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&gt;=</operator><literal type="number">28</literal></expr>
  )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zBuf</name><operator>)</operator><operator>+</operator><operator>(</operator><literal type="number">24</literal><operator>-</operator><name>iOfst</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>iCtr</name></decl>, <decl><type ref="prev"/><name>nFree</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFree</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zStr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>iCtr</name> <operator>=</operator> <call><name>bigToNative</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&gt;=</operator><literal type="number">40</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zFree</name> <operator>=</operator> <name>zStr</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zStr</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>bigToNative</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nFree</name> <operator>=</operator> <call><name>bigToNative</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CHNGCTR-READ"</literal></expr></argument>, <argument><expr><name>iCtr</name></expr></argument>, <argument><expr><name>nFree</name></expr></argument>, <argument><expr><name>zFree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zSig</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogSignature</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>zSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"WRITE"</literal></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name>zSig</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name>
   <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pLog</name></name>
   <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pLog</name><operator>-&gt;</operator><name>zFilename</name></name>
   <operator>&amp;&amp;</operator> <name>iOfst</name><operator>&lt;=</operator><literal type="number">24</literal>
   <operator>&amp;&amp;</operator> <name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&gt;=</operator><literal type="number">28</literal></expr>
  )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>z</name><operator>)</operator><operator>+</operator><operator>(</operator><literal type="number">24</literal><operator>-</operator><name>iOfst</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>iCtr</name></decl>, <decl><type ref="prev"/><name>nFree</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFree</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zStr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>iCtr</name> <operator>=</operator> <call><name>bigToNative</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&gt;=</operator><literal type="number">40</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zFree</name> <operator>=</operator> <name>zStr</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zStr</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>bigToNative</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nFree</name> <operator>=</operator> <call><name>bigToNative</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CHNGCTR-WRITE"</literal></expr></argument>, <argument><expr><name>iCtr</name></expr></argument>, <argument><expr><name>nFree</name></expr></argument>, <argument><expr><name>zFree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xTruncate</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"TRUNCATE"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"SYNC"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"FILESIZE"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pSize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Lock an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><name>eLock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"UNLOCK"</literal></expr></argument>, <argument><expr><name>eLock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnlock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xCheckReservedLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"CHECKRESERVEDLOCK"</literal></expr></argument>,
                 <argument><expr><operator>*</operator><name>pResOut</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileControl</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_VFSNAME</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"vlog/%z"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_TRACE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"TRACE"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_PRAGMA</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"FILECONTROL"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_SIZE_HINT</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>sz</name> <init>= <expr><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"FILECONTROL"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"FILECONTROL"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"SECTORSIZE"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an vlog-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xDeviceCharacteristics</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"DEVCHAR"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Open an vlog file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iArg2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>VLogFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_file</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SQLITE_OPEN_MAIN_DB</name><operator>|</operator><name>SQLITE_OPEN_MAIN_JOURNAL</name><operator>)</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name> <operator>=</operator> <call><name>vlogLogOpen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xOpen</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iArg2</name> <operator>=</operator> <ternary><condition><expr><name>pOutFlags</name></expr> ?</condition><then> <expr><operator>*</operator><name>pOutFlags</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"OPEN"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>iArg2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>vlog_io_methods</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlogLogClose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pLog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogLog</name> <modifier>*</modifier></type><name>pLog</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDelete</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pLog</name> <operator>=</operator> <call><name>vlogLogOpen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogClose</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>tStart</name></decl>, <decl><type ref="prev"/><name>tElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VLogLog</name> <modifier>*</modifier></type><name>pLog</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>tStart</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xAccess</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tElapse</name> <operator>=</operator> <call><name>vlog_time</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pLog</name> <operator>=</operator> <call><name>vlogLogOpen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogPrint</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>, <argument><expr><name>tStart</name></expr></argument>, <argument><expr><name>tElapse</name></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>*</operator><name>pResOut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vlogLogClose</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (INST_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xFullPathname</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vlogDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlOpen</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vlogDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlError</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*vlogDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlSym</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vlogDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlClose</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xRandomness</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xSleep</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xCurrentTime</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xGetLastError</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vlogCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xCurrentTimeInt64</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register debugvfs as the default VFS for this process.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_register_vfslog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>vlog_vfs</name><operator>.</operator><name>pVfs</name></name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>vlog_vfs</name><operator>.</operator><name>pVfs</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>vlog_vfs</name><operator>.</operator><name>base</name><operator>.</operator><name>szOsFile</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLogFile</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>vlog_vfs</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>szOsFile</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vlog_vfs</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
