<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/recover/dbdata.c"><comment type="block">/*
** 2019-04-17
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains an implementation of two eponymous virtual tables,
** "sqlite_dbdata" and "sqlite_dbptr". Both modules require that the
** "sqlite_dbpage" eponymous virtual table be available.
**
** SQLITE_DBDATA:
**   sqlite_dbdata is used to extract data directly from a database b-tree
**   page and its associated overflow pages, bypassing the b-tree layer.
**   The table schema is equivalent to:
**
**     CREATE TABLE sqlite_dbdata(
**       pgno INTEGER,
**       cell INTEGER,
**       field INTEGER,
**       value ANY,
**       schema TEXT HIDDEN
**     );
**
**   IMPORTANT: THE VIRTUAL TABLE SCHEMA ABOVE IS SUBJECT TO CHANGE. IN THE
**   FUTURE NEW NON-HIDDEN COLUMNS MAY BE ADDED BETWEEN "value" AND
**   "schema".
**
**   Each page of the database is inspected. If it cannot be interpreted as
**   a b-tree page, or if it is a b-tree page containing 0 entries, the
**   sqlite_dbdata table contains no rows for that page.  Otherwise, the
**   table contains one row for each field in the record associated with
**   each cell on the page. For intkey b-trees, the key value is stored in
**   field -1.
**
**   For example, for the database:
**
**     CREATE TABLE t1(a, b);     -- root page is page 2
**     INSERT INTO t1(rowid, a, b) VALUES(5, 'v', 'five');
**     INSERT INTO t1(rowid, a, b) VALUES(10, 'x', 'ten');
**
**   the sqlite_dbdata table contains, as well as from entries related to 
**   page 1, content equivalent to:
**
**     INSERT INTO sqlite_dbdata(pgno, cell, field, value) VALUES
**         (2, 0, -1, 5     ),
**         (2, 0,  0, 'v'   ),
**         (2, 0,  1, 'five'),
**         (2, 1, -1, 10    ),
**         (2, 1,  0, 'x'   ),
**         (2, 1,  1, 'ten' );
**
**   If database corruption is encountered, this module does not report an
**   error. Instead, it attempts to extract as much data as possible and
**   ignores the corruption.
**
** SQLITE_DBPTR:
**   The sqlite_dbptr table has the following schema:
**
**     CREATE TABLE sqlite_dbptr(
**       pgno INTEGER,
**       child INTEGER,
**       schema TEXT HIDDEN
**     );
**
**   It contains one entry for each b-tree pointer between a parent and
**   child page in the database.
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITEINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBDATA_PADDING_BYTES</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 

<typedef>typedef <type><name><name>struct</name> <name>DbdataTable</name></name></type> <name>DbdataTable</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>DbdataCursor</name></name></type> <name>DbdataCursor</name>;</typedef>

<comment type="block">/* Cursor object */</comment>
<struct>struct <name>DbdataCursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>       <comment type="block">/* Base class.  Must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>            <comment type="block">/* For fetching database pages */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>iPgno</name></decl>;</decl_stmt>                      <comment type="block">/* Current page number */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aPage</name></decl>;</decl_stmt>                      <comment type="block">/* Buffer containing page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPage</name></decl>;</decl_stmt>                      <comment type="block">/* Size of aPage[] in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCell</name></decl>;</decl_stmt>                      <comment type="block">/* Number of cells on aPage[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCell</name></decl>;</decl_stmt>                      <comment type="block">/* Current cell number */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bOnePage</name></decl>;</decl_stmt>                   <comment type="block">/* True to stop after one page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iRowid</name></decl>;</decl_stmt>

  <comment type="block">/* Only for the sqlite_dbdata table */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pRec</name></decl>;</decl_stmt>                       <comment type="block">/* Buffer containing current record */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nRec</name></decl>;</decl_stmt>             <comment type="block">/* Size of pRec[] in bytes */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nHdr</name></decl>;</decl_stmt>             <comment type="block">/* Size of header in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iField</name></decl>;</decl_stmt>                     <comment type="block">/* Current field number */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pHdrPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>enc</name></decl>;</decl_stmt>                        <comment type="block">/* Text encoding */</comment>
  
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iIntkey</name></decl>;</decl_stmt>          <comment type="block">/* Integer key value */</comment>
}</block>;</struct>

<comment type="block">/* Table object */</comment>
<struct>struct <name>DbdataTable</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* Base class.  Must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                    <comment type="block">/* The database connection */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>            <comment type="block">/* For fetching database pages */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bPtr</name></decl>;</decl_stmt>                       <comment type="block">/* True for sqlite3_dbptr table */</comment>
}</block>;</struct>

<comment type="block">/* Column and schema definitions for sqlite_dbdata */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBDATA_COLUMN_PGNO</name></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBDATA_COLUMN_CELL</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBDATA_COLUMN_FIELD</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBDATA_COLUMN_VALUE</name></cpp:macro>       <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBDATA_COLUMN_SCHEMA</name></cpp:macro>      <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBDATA_SCHEMA</name></cpp:macro>             \
      <cpp:value>"CREATE TABLE x("           \
      "  pgno INTEGER,"           \
      "  cell INTEGER,"           \
      "  field INTEGER,"          \
      "  value ANY,"              \
      "  schema TEXT HIDDEN"      \
      ")"</cpp:value></cpp:define>

<comment type="block">/* Column and schema definitions for sqlite_dbptr */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBPTR_COLUMN_PGNO</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBPTR_COLUMN_CHILD</name></cpp:macro>        <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBPTR_COLUMN_SCHEMA</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBPTR_SCHEMA</name></cpp:macro>              \
      <cpp:value>"CREATE TABLE x("           \
      "  pgno INTEGER,"           \
      "  child INTEGER,"          \
      "  schema TEXT HIDDEN"      \
      ")"</cpp:value></cpp:define>

<comment type="block">/*
** Connect to an sqlite_dbdata (pAux==0) or sqlite_dbptr (pAux!=0) virtual 
** table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataConnect</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_declare_vtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pAux</name></expr> ?</condition><then> <expr><name>DBPTR_SCHEMA</name></expr> </then><else>: <expr><name>DBDATA_SCHEMA</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pTab</name> <operator>=</operator> <operator>(</operator><name>DbdataTable</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DbdataTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTab</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DbdataTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>bPtr</name></name> <operator>=</operator> <operator>(</operator><name>pAux</name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pTab</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Disconnect from or destroy a sqlite_dbdata or sqlite_dbptr virtual table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataDisconnect</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>DbdataTable</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTab</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function interprets two types of constraints:
**
**       schema=?
**       pgno=?
**
** If neither are present, idxNum is set to 0. If schema=? is present,
** the 0x01 bit in idxNum is set. If pgno=? is present, the 0x02 bit
** in idxNum is set.
**
** If both parameters are present, schema is in position 0 and pgno in
** position 1.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataBestIndex</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pIdx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>DbdataTable</name><operator>*</operator><operator>)</operator><name>tab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSchema</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iPgno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>colSchema</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pTab</name><operator>-&gt;</operator><name>bPtr</name></name></expr> ?</condition><then> <expr><name>DBPTR_COLUMN_SCHEMA</name></expr> </then><else>: <expr><name>DBDATA_COLUMN_SCHEMA</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sqlite3_index_constraint</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iColumn</name></name><operator>==</operator><name>colSchema</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>usable</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_CONSTRAINT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>iSchema</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iColumn</name></name><operator>==</operator><name>DBDATA_COLUMN_PGNO</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>usable</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iPgno</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>iSchema</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iSchema</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iSchema</name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iPgno</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iPgno</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>iSchema</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iPgno</name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>estimatedRows</name></name> <operator>=</operator>  <literal type="number">50</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>bPtr</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nOrderBy</name></name> <operator>&amp;&amp;</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>pIdx</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iColumn</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pIdx</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <operator>(</operator><name>iCol</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>iCol</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pIdx</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>desc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iCol</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <operator>(</operator><name><name>pIdx</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">100000000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>estimatedRows</name></name> <operator>=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>iSchema</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x01</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>iPgno</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x02</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open a new sqlite_dbdata or sqlite_dbptr cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <operator>(</operator><name>DbdataCursor</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DbdataCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCsr</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DbdataCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name> <operator>=</operator> <name>pVTab</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab_cursor</name> <operator>*</operator><operator>)</operator><name>pCsr</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Restore a cursor object to the state it was in when first allocated 
** by dbdataOpen().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbdataResetCursor</name><parameter_list>(<parameter><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>DbdataTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>pStmt</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iField</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bOnePage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Close an sqlite_dbdata or sqlite_dbptr cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>DbdataCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dbdataResetCursor</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Utility methods to decode 16 and 32-bit big-endian unsigned integers. 
*/</comment>
<function><type><specifier>static</specifier> <name>u32</name></type> <name>get_uint16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>u32</name></type> <name>get_uint32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator>
       <operator>|</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator>
       <operator>|</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator>
       <operator>|</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Load page pgno from the database via the sqlite_dbpage virtual table.
** If successful, set (*ppPage) to point to a buffer containing the page
** data, (*pnPage) to the size of that buffer in bytes and return
** SQLITE_OK. In this case it is the responsibility of the caller to
** eventually free the buffer using sqlite3_free().
**
** Or, if an error occurs, set both (*ppPage) and (*pnPage) to 0 and
** return an SQLite error code.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataLoadPage</name><parameter_list>(
  <parameter><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>,             <comment type="block">/* Cursor object */</comment>
  <parameter><decl><type><name>u32</name></type> <name>pgno</name></decl></parameter>,                       <comment type="block">/* Page number of page to load */</comment>
  <parameter><decl><type><name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPage</name></decl></parameter>,                    <comment type="block">/* OUT: pointer to page buffer */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnPage</name></decl></parameter>                     <comment type="block">/* OUT: Size of (*ppPage) in bytes */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnPage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nCopy</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>nCopy</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nCopy</name> <operator>+</operator> <name>DBDATA_PADDING_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pPage</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pCopy</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>pCopy</name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPage</name><index>[<expr><name>nCopy</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DBDATA_PADDING_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ppPage</name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pnPage</name> <operator>=</operator> <name>nCopy</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read a varint.  Put the value in *pVal and return the number of bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataGetVarint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>u</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>u</name></expr>;</expr_stmt> <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>u</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>u</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">9</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Like dbdataGetVarint(), but set the output to 0 if it is less than 0
** or greater than 0xFFFFFFFF. This can be used for all varints in an
** SQLite database except for key values in intkey tables.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataGetVarintU32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRet</name> <init>= <expr><call><name>dbdataGetVarint</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>val</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>val</name></expr></argument>&gt;</argument_list></name><literal type="number">0xFFFFFFFF</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <return>return <expr><name>nRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the number of bytes of space used by an SQLite value of type
** eType.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataValueBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <switch>switch<condition>( <expr><name>eType</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case> <case>case <expr><literal type="number">8</literal></expr>:</case> <case>case <expr><literal type="number">9</literal></expr>:</case>
    <case>case <expr><literal type="number">10</literal></expr>:</case> <case>case <expr><literal type="number">11</literal></expr>:</case>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <return>return <expr><literal type="number">2</literal></expr>;</return>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <return>return <expr><literal type="number">3</literal></expr>;</return>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <return>return <expr><literal type="number">4</literal></expr>;</return>
    <case>case <expr><literal type="number">5</literal></expr>:</case>
      <return>return <expr><literal type="number">6</literal></expr>;</return>
    <case>case <expr><literal type="number">6</literal></expr>:</case>
    <case>case <expr><literal type="number">7</literal></expr>:</case>
      <return>return <expr><literal type="number">8</literal></expr>;</return>
    <default>default:</default>
      <if_stmt><if>if<condition>( <expr><name>eType</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>eType</name><operator>-</operator><literal type="number">12</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
** Load a value of type eType from buffer pData and use it to set the
** result of context object pCtx.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbdataValue</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>u32</name></type> <name>enc</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>, 
  <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>nData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>dbdataValueBytes</name><argument_list>(<argument><expr><name>eType</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>nData</name></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><name>eType</name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case> 
      <case>case <expr><literal type="number">10</literal></expr>:</case> 
      <case>case <expr><literal type="number">11</literal></expr>:</case> 
        <expr_stmt><expr><call><name>sqlite3_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      
      <case>case <expr><literal type="number">8</literal></expr>:</case> 
        <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">9</literal></expr>:</case>
        <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
  
      <case>case <expr><literal type="number">1</literal></expr>:</case> <case>case <expr><literal type="number">2</literal></expr>:</case> <case>case <expr><literal type="number">3</literal></expr>:</case> <case>case <expr><literal type="number">4</literal></expr>:</case> <case>case <expr><literal type="number">5</literal></expr>:</case> <case>case <expr><literal type="number">6</literal></expr>:</case> <case>case <expr><literal type="number">7</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
        <switch>switch<condition>( <expr><name>eType</name></expr> )</condition><block>{<block_content>
          <case>case <expr><literal type="number">7</literal></expr>:</case>
          <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
          <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
          <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></switch>
  
        <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><literal type="number">7</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_result_double</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
  
      <default>default:</default> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><operator>(</operator><name>eType</name><operator>-</operator><literal type="number">12</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>eType</name> <operator>%</operator> <literal type="number">2</literal></expr> )</condition><block>{<block_content>
          <switch>switch<condition>( <expr><name>enc</name></expr> )</condition><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
            <case>case <expr><name>SQLITE_UTF16BE</name></expr>:</case>
              <expr_stmt><expr><call><name>sqlite3_result_text16be</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>SQLITE_UTF16LE</name></expr>:</case>
              <expr_stmt><expr><call><name>sqlite3_result_text16le</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default>
              <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
          </block_content>}</block></switch>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Move an sqlite_dbdata or sqlite_dbptr cursor to the next entry.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataNext</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>DbdataCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DbdataTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>DbdataTable</name><operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iRowid</name></name><operator>++</operator></expr>;</expr_stmt>
  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bNextPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>bOnePage</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name><operator>&gt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>szDb</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbdataLoadPage</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>bOnePage</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pTab</name><operator>-&gt;</operator><name>bPtr</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nCell</name></name> <operator>=</operator> <call><name>get_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>bPtr</name></name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name><operator>!=</operator><literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name><operator>!=</operator><literal type="number">0x05</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nCell</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name><operator>&gt;=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nCell</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>bOnePage</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <return>return <expr><name>SQLITE_OK</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* If there is no record loaded, load it now. */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>bHasRowid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nPointer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nPayload</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nHdr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iHdr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>U</name></decl>, <decl><type ref="prev"/><name>X</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nLocal</name></decl>;</decl_stmt>
  
        <switch>switch<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name></expr> )</condition><block>{<block_content>
          <case>case <expr><literal type="number">0x02</literal></expr>:</case>
            <expr_stmt><expr><name>nPointer</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">0x0a</literal></expr>:</case>
            <break>break;</break>
          <case>case <expr><literal type="number">0x0d</literal></expr>:</case>
            <expr_stmt><expr><name>bHasRowid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
          <default>default:</default>
            <comment type="block">/* This is not a b-tree page with records on it. Continue. */</comment>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nCell</name></name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name><operator>&gt;=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nCell</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>bNextPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
  
          <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <name>nPointer</name> <operator>+</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>bNextPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>get_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
    
          <comment type="block">/* For an interior node cell, skip past the child-page number */</comment>
          <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nPointer</name></expr>;</expr_stmt>
    
          <comment type="block">/* Load the "byte of payload including overflow" field */</comment>
          <if_stmt><if>if<condition>( <expr><name>bNextPage</name> <operator>||</operator> <name>iOff</name><operator>&gt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>bNextPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>dbdataGetVarintU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
    
          <comment type="block">/* If this is a leaf intkey cell, load the rowid */</comment>
          <if_stmt><if>if<condition>( <expr><name>bHasRowid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bNextPage</name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&lt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>dbdataGetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>iIntkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
    
          <comment type="block">/* Figure out how much data to read from the local page */</comment>
          <expr_stmt><expr><name>U</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>bHasRowid</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>X</name> <operator>=</operator> <name>U</name><operator>-</operator><literal type="number">35</literal></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>U</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal><operator>/</operator><literal type="number">255</literal><operator>)</operator><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <if_stmt><if>if<condition>( <expr><name>nPayload</name><operator>&lt;=</operator><name>X</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>nPayload</name></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>M</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>M</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>U</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">32</literal><operator>/</operator><literal type="number">255</literal><operator>)</operator><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>K</name> <operator>=</operator> <name>M</name><operator>+</operator><operator>(</operator><operator>(</operator><name>nPayload</name><operator>-</operator><name>M</name><operator>)</operator><operator>%</operator><operator>(</operator><name>U</name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>K</name><operator>&lt;=</operator><name>X</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>K</name></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
              <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>M</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if<condition>( <expr><name>bNextPage</name> <operator>||</operator> <name>nLocal</name><operator>+</operator><name>iOff</name><operator>&gt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>bNextPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>

            <comment type="block">/* Allocate space for payload. And a bit more to catch small buffer
            ** overruns caused by attempting to read a varint or similar from 
            ** near the end of a corrupt record.  */</comment>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nPayload</name><operator>+</operator><name>DBDATA_PADDING_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nPayload</name><operator>+</operator><name>DBDATA_PADDING_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nRec</name></name> <operator>=</operator> <name>nPayload</name></expr>;</expr_stmt>

            <comment type="block">/* Load the nLocal bytes of payload */</comment>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nLocal</name></expr>;</expr_stmt>

            <comment type="block">/* Load content from overflow pages */</comment>
            <if_stmt><if>if<condition>( <expr><name>nPayload</name><operator>&gt;</operator><name>nLocal</name></expr> )</condition><block>{<block_content>
              <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nRem</name> <init>= <expr><name>nPayload</name> <operator>-</operator> <name>nLocal</name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>u32</name></type> <name>pgnoOvfl</name> <init>= <expr><call><name>get_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <while>while<condition>( <expr><name>nRem</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aOvfl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>nOvfl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>nCopy</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbdataLoadPage</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pgnoOvfl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aOvfl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nOvfl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>aOvfl</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>nOvfl</name><operator>==</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if<condition>( <expr><name>aOvfl</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>nCopy</name> <operator>=</operator> <name>U</name><operator>-</operator><literal type="number">4</literal></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>nCopy</name><operator>&gt;</operator><name>nRem</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nCopy</name> <operator>=</operator> <name>nRem</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name><index>[<expr><name>nPayload</name><operator>-</operator><name>nRem</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aOvfl</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nRem</name> <operator>-=</operator> <name>nCopy</name></expr>;</expr_stmt>

                <expr_stmt><expr><name>pgnoOvfl</name> <operator>=</operator> <call><name>get_uint32</name><argument_list>(<argument><expr><name>aOvfl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aOvfl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
    
            <expr_stmt><expr><name>iHdr</name> <operator>=</operator> <call><name>dbdataGetVarintU32</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>nHdr</name><operator>&gt;</operator><name>nPayload</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nHdr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nHdr</name></name> <operator>=</operator> <name>nHdr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pHdrPtr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name><index>[<expr><name>iHdr</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pPtr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>nHdr</name></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iField</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>bHasRowid</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iField</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iField</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iType</name></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pHdrPtr</name></name><operator>&gt;</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>nRec</name></name></expr>]</index></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>bNextPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pHdrPtr</name></name> <operator>+=</operator> <call><name>dbdataGetVarintU32</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pHdrPtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pPtr</name></name> <operator>+=</operator> <call><name>dbdataValueBytes</name><argument_list>(<argument><expr><name>iType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if<condition>( <expr><name>bNextPage</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>bOnePage</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iField</name></name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pHdrPtr</name></name><operator>&lt;</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>nHdr</name></name></expr>]</index></name></expr> )</condition><block>{<block_content>
          <return>return <expr><name>SQLITE_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Advance to the next cell. The next iteration of the loop will load
        ** the record and so on. */</comment>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><literal type="string">"can't get here"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Return true if the cursor is at EOF.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataEof</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>DbdataCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name><operator>==</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if nul-terminated string zSchema ends in "()". Or false
** otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataIsFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSchema</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>zSchema</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>zSchema</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Determine the size in pages of database zSchema (where zSchema is
** "main", "temp" or the name of an attached database) and set 
** pCsr-&gt;szDb accordingly. If successful, return SQLITE_OK. Otherwise,
** an SQLite error code.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataDbsize</name><parameter_list>(<parameter><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSchema</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>DbdataTable</name><operator>*</operator><operator>)</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>rc2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nFunc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nFunc</name> <operator>=</operator> <call><name>dbdataIsFunction</name><argument_list>(<argument><expr><name>zSchema</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT %.*s(0)"</literal></expr></argument>, <argument><expr><name>nFunc</name></expr></argument>, <argument><expr><name>zSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA %Q.page_count"</literal></expr></argument>, <argument><expr><name>zSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>szDb</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Attempt to figure out the encoding of the database by retrieving page 1
** and inspecting the header field. If successful, set the pCsr-&gt;enc variable
** and return SQLITE_OK. Otherwise, return an SQLite error code.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataGetEncoding</name><parameter_list>(<parameter><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPg1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aPg1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbdataLoadPage</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>aPg1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>nPg1</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>nPg1</name><operator>&gt;=</operator><literal type="number">512</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>nPg1</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <call><name>get_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aPg1</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aPg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* 
** xFilter method for sqlite_dbdata and sqlite_dbptr.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataFilter</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idxStr</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>DbdataCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DbdataTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>DbdataTable</name><operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSchema</name> <init>= <expr><literal type="string">"main"</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dbdataResetCursor</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>idxNum</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zSchema</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zSchema</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zSchema</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>idxNum</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>(</operator><name>idxNum</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bOnePage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbdataDbsize</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>zSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nFunc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>pStmt</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pStmt</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>nFunc</name> <operator>=</operator> <call><name>dbdataIsFunction</name><argument_list>(<argument><expr><name>zSchema</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT %.*s(?2)"</literal></expr></argument>, <argument><expr><name>nFunc</name></expr></argument>, <argument><expr><name>zSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, 
          <argument><expr><literal type="string">"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
          <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zSchema</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Try to determine the encoding of the db by inspecting the header
  ** field on page 1. */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbdataGetEncoding</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbdataNext</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a column for the sqlite_dbdata or sqlite_dbptr table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataColumn</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>DbdataCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DbdataTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>DbdataTable</name><operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>bPtr</name></name></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><name>i</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>DBPTR_COLUMN_PGNO</name></expr>:</case>
        <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DBPTR_COLUMN_CHILD</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><ternary><condition><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>get_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nPage</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>get_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if><else>else<block>{<block_content>
    <switch>switch<condition>( <expr><name>i</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>DBDATA_COLUMN_PGNO</name></expr>:</case>
        <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DBDATA_COLUMN_CELL</name></expr>:</case>
        <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DBDATA_COLUMN_FIELD</name></expr>:</case>
        <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iField</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>DBDATA_COLUMN_VALUE</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iField</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iIntkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>nRec</name></name></expr>]</index></name> <operator>&gt;=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pPtr</name></name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iType</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>dbdataGetVarintU32</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pHdrPtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>dbdataValue</name><argument_list>(
              <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><name>iType</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pPtr</name></name></expr></argument>, 
              <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pRec</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>nRec</name></name></expr>]</index></name> <operator>-</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pPtr</name></name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Return the rowid for an sqlite_dbdata or sqlite_dptr table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbdataRowid</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbdataCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>DbdataCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Invoke this routine to register the "sqlite_dbdata" virtual table module
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlite3DbdataRegister</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_module</name></type> <name>dbdata_module</name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* iVersion */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xCreate */</comment>
    <expr><name>dbdataConnect</name></expr>,                <comment type="block">/* xConnect */</comment>
    <expr><name>dbdataBestIndex</name></expr>,              <comment type="block">/* xBestIndex */</comment>
    <expr><name>dbdataDisconnect</name></expr>,             <comment type="block">/* xDisconnect */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xDestroy */</comment>
    <expr><name>dbdataOpen</name></expr>,                   <comment type="block">/* xOpen - open a cursor */</comment>
    <expr><name>dbdataClose</name></expr>,                  <comment type="block">/* xClose - close a cursor */</comment>
    <expr><name>dbdataFilter</name></expr>,                 <comment type="block">/* xFilter - configure scan constraints */</comment>
    <expr><name>dbdataNext</name></expr>,                   <comment type="block">/* xNext - advance a cursor */</comment>
    <expr><name>dbdataEof</name></expr>,                    <comment type="block">/* xEof - check for end of scan */</comment>
    <expr><name>dbdataColumn</name></expr>,                 <comment type="block">/* xColumn - read data */</comment>
    <expr><name>dbdataRowid</name></expr>,                  <comment type="block">/* xRowid - read data */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xUpdate */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xBegin */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xSync */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xCommit */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xRollback */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xFindMethod */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xRename */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xSavepoint */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xRelease */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xRollbackTo */</comment>
    <expr><literal type="number">0</literal></expr>                             <comment type="block">/* xShadowName */</comment>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sqlite_dbdata"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbdata_module</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sqlite_dbptr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbdata_module</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_dbdata_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3DbdataRegister</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ifndef SQLITE_OMIT_VIRTUALTABLE */</comment>
</unit>
