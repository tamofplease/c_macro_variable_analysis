<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/fts5/fts5_buffer.c"><comment type="block">/*
** 2014 May 31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
*/</comment>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>sqlite3Fts5BufferSize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>u32</name><operator>)</operator><name><name>pBuf</name><operator>-&gt;</operator><name>nSpace</name></name><operator>&lt;</operator><name>nByte</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u64</name></type> <name>nNew</name> <init>= <expr><ternary><condition><expr><name><name>pBuf</name><operator>-&gt;</operator><name>nSpace</name></name></expr> ?</condition><then> <expr><name><name>pBuf</name><operator>-&gt;</operator><name>nSpace</name></name></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>nNew</name><operator>&lt;</operator><name>nByte</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nNew</name> <operator>=</operator> <name>nNew</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>nSpace</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Encode value iVal as an SQLite varint and append it to the buffer object
** pBuf. If an OOM error occurs, set the error code in p.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5BufferAppendVarint</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><call><name>fts5BufferGrow</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3Fts5Put32</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name><operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name><operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00FF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5Get32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Append buffer nData/pData to buffer pBuf. If an OOM error occurs, set 
** the error code in p. If an error has already occurred when this function
** is called, it is a no-op.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5BufferAppendBlob</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, 
  <parameter><decl><type><name>u32</name></type> <name>nData</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>nData</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>fts5BufferGrow</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <name>nData</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Append the nul-terminated string zStr to the buffer pBuf. This function
** ensures that the byte following the buffer data is set to 0x00, even 
** though this byte is not included in the pBuf-&gt;n count.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5BufferAppendString</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nStr</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendBlob</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>nStr</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>zStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Argument zFmt is a printf() style format string. This function performs
** the printf() style processing, then appends the results to buffer pBuf.
**
** Like sqlite3Fts5BufferAppendString(), this function ensures that the byte 
** following the buffer data is set to 0x00, even though this byte is not
** included in the pBuf-&gt;n count.
*/</comment> 
<function><type><name>void</name></type> <name>sqlite3Fts5BufferAppendPrintf</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zTmp</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>zTmp</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendString</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>zTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>sqlite3Fts5Mprintf</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>
 

<comment type="block">/*
** Free any buffer allocated by pBuf. Zero the structure before returning.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5BufferFree</name><parameter_list>(<parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Zero the contents of the buffer object. But do not free the associated 
** memory allocation.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5BufferZero</name><parameter_list>(<parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Set the buffer to contain nData/pData. If an OOM error occurs, leave an
** the error code in p. If an error has already occurred when this function
** is called, it is a no-op.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5BufferSet</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendBlob</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5PoslistNext64</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,             <comment type="block">/* Buffer containing poslist */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>,                        <comment type="block">/* IN/OUT: Offset within a[] */</comment>
  <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>piOff</name></decl></parameter>                      <comment type="block">/* IN/OUT: Current offset */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>pi</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>n</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* EOF */</comment>
    <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name> <init>= <expr><operator>*</operator><name>piOff</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u32</name></type> <name>iVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iVal</name><operator>&lt;=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>iVal</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pi</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><name>iVal</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iOff</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iVal</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* This is a corrupt record. So stop parsing it here. */</comment>
        <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <name>iOff</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>iVal</name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <operator>(</operator><name>iOff</name> <operator>&amp;</operator> <operator>(</operator><name>i64</name><operator>)</operator><literal type="number">0x7FFFFFFF</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>+</operator><operator>(</operator><operator>(</operator><name>iOff</name> <operator>+</operator> <operator>(</operator><name>iVal</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pi</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><operator>*</operator><name>piOff</name><operator>&gt;=</operator><name>iOff</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Advance the iterator object passed as the only argument. Return true
** if the iterator reaches EOF, or false otherwise.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5PoslistReaderNext</name><parameter_list>(<parameter><decl><type><name>Fts5PoslistReader</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5PoslistNext64</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iPos</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>pIter</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5PoslistReaderInit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,             <comment type="block">/* Poslist buffer to iterate through */</comment>
  <parameter><decl><type><name>Fts5PoslistReader</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>        <comment type="block">/* Iterator object to initialize */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5PoslistReaderNext</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pIter</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Append position iPos to the position list being accumulated in buffer
** pBuf, which must be already be large enough to hold the new data.
** The previous position written to this list is *piPrev. *piPrev is set
** to iPos before returning.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5PoslistSafeAppend</name><parameter_list>(
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>piPrev</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name></type> <name>iPos</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>iPos</name><operator>&gt;=</operator><operator>*</operator><name>piPrev</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>i64</name></type> <name>colmask</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><literal type="number">0x7FFFFFFF</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iPos</name> <operator>&amp;</operator> <name>colmask</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>*</operator><name>piPrev</name> <operator>&amp;</operator> <name>colmask</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>iPos</name><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piPrev</name> <operator>=</operator> <operator>(</operator><name>iPos</name> <operator>&amp;</operator> <name>colmask</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>iPos</name><operator>-</operator><operator>*</operator><name>piPrev</name><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>piPrev</name> <operator>=</operator> <name>iPos</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5PoslistWriterAppend</name><parameter_list>(
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5PoslistWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iPos</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Initialized only to suppress erroneous warning from Clang */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>fts5BufferGrow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>+</operator><literal type="number">5</literal><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5PoslistSafeAppend</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>iPrev</name></name></expr></argument>, <argument><expr><name>iPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sqlite3Fts5MallocZero</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a nul-terminated copy of the string indicated by pIn. If nIn
** is non-negative, then it is the length of the string in bytes. Otherwise,
** the length of the string is determined using strlen().
**
** It is the responsibility of the caller to eventually free the returned
** buffer using sqlite3_free(). If an OOM error occurs, NULL is returned. 
*/</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>sqlite3Fts5Strndup</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nIn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>nIn</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nIn</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zRet</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nIn</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRet</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zRet</name><index>[<expr><name>nIn</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Return true if character 't' may be part of an FTS5 bareword, or false
** otherwise. Characters that may be part of barewords:
**
**   * All non-ASCII characters,
**   * The 52 upper and lower case ASCII characters, and
**   * The 10 integer ASCII characters.
**   * The underscore character "_" (0x5F).
**   * The unicode "subsitute" character (0x1A).
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IsBareword</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>aBareword</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x00 .. 0x0F */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x10 .. 0x1F */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x20 .. 0x2F */</comment>
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x30 .. 0x3F */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <comment type="block">/* 0x40 .. 0x4F */</comment>
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,   <comment type="block">/* 0x50 .. 0x5F */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <comment type="block">/* 0x60 .. 0x6F */</comment>
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>    <comment type="block">/* 0x70 .. 0x7F */</comment>
  }</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>(</operator><name>t</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <name><name>aBareword</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name>t</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************************************
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Fts5TermsetEntry</name></name></type> <name>Fts5TermsetEntry</name>;</typedef>
<struct>struct <name>Fts5TermsetEntry</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pTerm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iIdx</name></decl>;</decl_stmt>                       <comment type="block">/* Index (main or aPrefix[] entry) */</comment>
  <decl_stmt><decl><type><name>Fts5TermsetEntry</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Fts5Termset</name> <block>{
  <decl_stmt><decl><type><name>Fts5TermsetEntry</name> <modifier>*</modifier></type><name><name>apHash</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>sqlite3Fts5TermsetNew</name><parameter_list>(<parameter><decl><type><name>Fts5Termset</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Termset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5TermsetAdd</name><parameter_list>(
  <parameter><decl><type><name>Fts5Termset</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iIdx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbPresent</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pbPresent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u32</name></type> <name>hash</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5TermsetEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>

    <comment type="block">/* Calculate a hash value for this term. This is the same hash checksum
    ** used by the fts5_hash.c module. This is not important for correct
    ** operation of the module, but is necessary to ensure that some tests
    ** designed to produce hash table collisions really do work.  */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>nTerm</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>hash</name> <operator>^</operator> <name><name>pTerm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>hash</name> <operator>^</operator> <name>iIdx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>hash</name> <operator>%</operator> <call><name>ArraySize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>pEntry</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>apHash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</init> <condition><expr><name>pEntry</name></expr>;</condition> <incr><expr><name>pEntry</name><operator>=</operator><name><name>pEntry</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pEntry</name><operator>-&gt;</operator><name>iIdx</name></name><operator>==</operator><name>iIdx</name> 
          <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>nTerm</name></name><operator>==</operator><name>nTerm</name> 
          <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pTerm</name></name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> 
      )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pbPresent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>pEntry</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5TermsetEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pTerm</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pEntry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>nTerm</name></name> <operator>=</operator> <name>nTerm</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>iIdx</name></name> <operator>=</operator> <name>iIdx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pTerm</name></name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>apHash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apHash</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3Fts5TermsetFree</name><parameter_list>(<parameter><decl><type><name>Fts5Termset</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apHash</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5TermsetEntry</name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>apHash</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5TermsetEntry</name> <modifier>*</modifier></type><name>pDel</name> <init>= <expr><name>pEntry</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
